
FT800_MINI_M0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800aaec  0800aaec  0001aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af68  0800af68  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800af68  0800af68  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af68  0800af68  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800af70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001268  200000e0  0800b050  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  0800b050  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4a0  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ac  00000000  00000000  0002c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002ea58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac8  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c3b  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c655  00000000  00000000  00043d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006aa82  00000000  00000000  000503d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bae52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc0  00000000  00000000  000baed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e0 	.word	0x200000e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aad4 	.word	0x0800aad4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e4 	.word	0x200000e4
 8000104:	0800aad4 	.word	0x0800aad4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <HAL_Init+0x24>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <HAL_Init+0x24>)
 8000422:	2110      	movs	r1, #16
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f809 	bl	8000440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800042e:	f009 fd9f 	bl	8009f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000432:	2300      	movs	r3, #0
}
 8000434:	0018      	movs	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40022000 	.word	0x40022000

08000440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <HAL_InitTick+0x5c>)
 800044a:	681c      	ldr	r4, [r3, #0]
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <HAL_InitTick+0x60>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	0019      	movs	r1, r3
 8000452:	23fa      	movs	r3, #250	; 0xfa
 8000454:	0098      	lsls	r0, r3, #2
 8000456:	f7ff fe69 	bl	800012c <__udivsi3>
 800045a:	0003      	movs	r3, r0
 800045c:	0019      	movs	r1, r3
 800045e:	0020      	movs	r0, r4
 8000460:	f7ff fe64 	bl	800012c <__udivsi3>
 8000464:	0003      	movs	r3, r0
 8000466:	0018      	movs	r0, r3
 8000468:	f000 f92d 	bl	80006c6 <HAL_SYSTICK_Config>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000470:	2301      	movs	r3, #1
 8000472:	e00f      	b.n	8000494 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d80b      	bhi.n	8000492 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	2200      	movs	r2, #0
 8000482:	0018      	movs	r0, r3
 8000484:	f000 f8fa 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_InitTick+0x64>)
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800048e:	2300      	movs	r3, #0
 8000490:	e000      	b.n	8000494 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000492:	2301      	movs	r3, #1
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b003      	add	sp, #12
 800049a:	bd90      	pop	{r4, r7, pc}
 800049c:	20000060 	.word	0x20000060
 80004a0:	20000004 	.word	0x20000004
 80004a4:	20000000 	.word	0x20000000

080004a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <HAL_IncTick+0x1c>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	001a      	movs	r2, r3
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_IncTick+0x20>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	18d2      	adds	r2, r2, r3
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <HAL_IncTick+0x20>)
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000004 	.word	0x20000004
 80004c8:	20000394 	.word	0x20000394

080004cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  return uwTick;
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <HAL_GetTick+0x10>)
 80004d2:	681b      	ldr	r3, [r3, #0]
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000394 	.word	0x20000394

080004e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004e8:	f7ff fff0 	bl	80004cc <HAL_GetTick>
 80004ec:	0003      	movs	r3, r0
 80004ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3301      	adds	r3, #1
 80004f8:	d005      	beq.n	8000506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_Delay+0x40>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	189b      	adds	r3, r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	f7ff ffe0 	bl	80004cc <HAL_GetTick>
 800050c:	0002      	movs	r2, r0
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	429a      	cmp	r2, r3
 8000516:	d8f7      	bhi.n	8000508 <HAL_Delay+0x28>
  {
  }
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000004 	.word	0x20000004

08000524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	0002      	movs	r2, r0
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b7f      	cmp	r3, #127	; 0x7f
 8000536:	d809      	bhi.n	800054c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	001a      	movs	r2, r3
 800053e:	231f      	movs	r3, #31
 8000540:	401a      	ands	r2, r3
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <__NVIC_EnableIRQ+0x30>)
 8000544:	2101      	movs	r1, #1
 8000546:	4091      	lsls	r1, r2
 8000548:	000a      	movs	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
  }
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}
 8000554:	e000e100 	.word	0xe000e100

08000558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	0002      	movs	r2, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b7f      	cmp	r3, #127	; 0x7f
 800056c:	d828      	bhi.n	80005c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056e:	4a2f      	ldr	r2, [pc, #188]	; (800062c <__NVIC_SetPriority+0xd4>)
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	33c0      	adds	r3, #192	; 0xc0
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	589b      	ldr	r3, [r3, r2]
 800057e:	1dfa      	adds	r2, r7, #7
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	0011      	movs	r1, r2
 8000584:	2203      	movs	r2, #3
 8000586:	400a      	ands	r2, r1
 8000588:	00d2      	lsls	r2, r2, #3
 800058a:	21ff      	movs	r1, #255	; 0xff
 800058c:	4091      	lsls	r1, r2
 800058e:	000a      	movs	r2, r1
 8000590:	43d2      	mvns	r2, r2
 8000592:	401a      	ands	r2, r3
 8000594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	019b      	lsls	r3, r3, #6
 800059a:	22ff      	movs	r2, #255	; 0xff
 800059c:	401a      	ands	r2, r3
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	0018      	movs	r0, r3
 80005a4:	2303      	movs	r3, #3
 80005a6:	4003      	ands	r3, r0
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ac:	481f      	ldr	r0, [pc, #124]	; (800062c <__NVIC_SetPriority+0xd4>)
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	089b      	lsrs	r3, r3, #2
 80005b6:	430a      	orrs	r2, r1
 80005b8:	33c0      	adds	r3, #192	; 0xc0
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005be:	e031      	b.n	8000624 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <__NVIC_SetPriority+0xd8>)
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	0019      	movs	r1, r3
 80005c8:	230f      	movs	r3, #15
 80005ca:	400b      	ands	r3, r1
 80005cc:	3b08      	subs	r3, #8
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	3306      	adds	r3, #6
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	18d3      	adds	r3, r2, r3
 80005d6:	3304      	adds	r3, #4
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1dfa      	adds	r2, r7, #7
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	0011      	movs	r1, r2
 80005e0:	2203      	movs	r2, #3
 80005e2:	400a      	ands	r2, r1
 80005e4:	00d2      	lsls	r2, r2, #3
 80005e6:	21ff      	movs	r1, #255	; 0xff
 80005e8:	4091      	lsls	r1, r2
 80005ea:	000a      	movs	r2, r1
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	401a      	ands	r2, r3
 80005f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	019b      	lsls	r3, r3, #6
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	401a      	ands	r2, r3
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	0018      	movs	r0, r3
 8000600:	2303      	movs	r3, #3
 8000602:	4003      	ands	r3, r0
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <__NVIC_SetPriority+0xd8>)
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	001c      	movs	r4, r3
 8000610:	230f      	movs	r3, #15
 8000612:	4023      	ands	r3, r4
 8000614:	3b08      	subs	r3, #8
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	430a      	orrs	r2, r1
 800061a:	3306      	adds	r3, #6
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	18c3      	adds	r3, r0, r3
 8000620:	3304      	adds	r3, #4
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b003      	add	sp, #12
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	e000e100 	.word	0xe000e100
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b01      	subs	r3, #1
 8000640:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <SysTick_Config+0x40>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d901      	bls.n	800064a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2301      	movs	r3, #1
 8000648:	e010      	b.n	800066c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <SysTick_Config+0x44>)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	3a01      	subs	r2, #1
 8000650:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	2103      	movs	r1, #3
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff7d 	bl	8000558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SysTick_Config+0x44>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SysTick_Config+0x44>)
 8000666:	2207      	movs	r2, #7
 8000668:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	00ffffff 	.word	0x00ffffff
 8000678:	e000e010 	.word	0xe000e010

0800067c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	210f      	movs	r1, #15
 8000688:	187b      	adds	r3, r7, r1
 800068a:	1c02      	adds	r2, r0, #0
 800068c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	187b      	adds	r3, r7, r1
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b25b      	sxtb	r3, r3
 8000696:	0011      	movs	r1, r2
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff5d 	bl	8000558 <__NVIC_SetPriority>
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b004      	add	sp, #16
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	0002      	movs	r2, r0
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ff33 	bl	8000524 <__NVIC_EnableIRQ>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ffaf 	bl	8000634 <SysTick_Config>
 80006d6:	0003      	movs	r3, r0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ee:	e14f      	b.n	8000990 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2101      	movs	r1, #1
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	4091      	lsls	r1, r2
 80006fa:	000a      	movs	r2, r1
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <HAL_GPIO_Init+0x28>
 8000706:	e140      	b.n	800098a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	2203      	movs	r2, #3
 800070e:	4013      	ands	r3, r2
 8000710:	2b01      	cmp	r3, #1
 8000712:	d005      	beq.n	8000720 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2203      	movs	r2, #3
 800071a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800071c:	2b02      	cmp	r3, #2
 800071e:	d130      	bne.n	8000782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2203      	movs	r2, #3
 800072c:	409a      	lsls	r2, r3
 800072e:	0013      	movs	r3, r2
 8000730:	43da      	mvns	r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	409a      	lsls	r2, r3
 8000742:	0013      	movs	r3, r2
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4313      	orrs	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000756:	2201      	movs	r2, #1
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	409a      	lsls	r2, r3
 800075c:	0013      	movs	r3, r2
 800075e:	43da      	mvns	r2, r3
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	4013      	ands	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	091b      	lsrs	r3, r3, #4
 800076c:	2201      	movs	r2, #1
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
 8000774:	0013      	movs	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	4313      	orrs	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2203      	movs	r2, #3
 8000788:	4013      	ands	r3, r2
 800078a:	2b03      	cmp	r3, #3
 800078c:	d017      	beq.n	80007be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2203      	movs	r2, #3
 800079a:	409a      	lsls	r2, r3
 800079c:	0013      	movs	r3, r2
 800079e:	43da      	mvns	r2, r3
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	689a      	ldr	r2, [r3, #8]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	409a      	lsls	r2, r3
 80007b0:	0013      	movs	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2203      	movs	r2, #3
 80007c4:	4013      	ands	r3, r2
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d123      	bne.n	8000812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	08da      	lsrs	r2, r3, #3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3208      	adds	r2, #8
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	58d3      	ldr	r3, [r2, r3]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2207      	movs	r2, #7
 80007dc:	4013      	ands	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	220f      	movs	r2, #15
 80007e2:	409a      	lsls	r2, r3
 80007e4:	0013      	movs	r3, r2
 80007e6:	43da      	mvns	r2, r3
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	4013      	ands	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2107      	movs	r1, #7
 80007f6:	400b      	ands	r3, r1
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	409a      	lsls	r2, r3
 80007fc:	0013      	movs	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4313      	orrs	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	08da      	lsrs	r2, r3, #3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3208      	adds	r2, #8
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	6939      	ldr	r1, [r7, #16]
 8000810:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	409a      	lsls	r2, r3
 8000820:	0013      	movs	r3, r2
 8000822:	43da      	mvns	r2, r3
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	4013      	ands	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2203      	movs	r2, #3
 8000830:	401a      	ands	r2, r3
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	409a      	lsls	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	23c0      	movs	r3, #192	; 0xc0
 800084c:	029b      	lsls	r3, r3, #10
 800084e:	4013      	ands	r3, r2
 8000850:	d100      	bne.n	8000854 <HAL_GPIO_Init+0x174>
 8000852:	e09a      	b.n	800098a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000854:	4b54      	ldr	r3, [pc, #336]	; (80009a8 <HAL_GPIO_Init+0x2c8>)
 8000856:	699a      	ldr	r2, [r3, #24]
 8000858:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <HAL_GPIO_Init+0x2c8>)
 800085a:	2101      	movs	r1, #1
 800085c:	430a      	orrs	r2, r1
 800085e:	619a      	str	r2, [r3, #24]
 8000860:	4b51      	ldr	r3, [pc, #324]	; (80009a8 <HAL_GPIO_Init+0x2c8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	2201      	movs	r2, #1
 8000866:	4013      	ands	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800086c:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <HAL_GPIO_Init+0x2cc>)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	3302      	adds	r3, #2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	589b      	ldr	r3, [r3, r2]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2203      	movs	r2, #3
 800087e:	4013      	ands	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	220f      	movs	r2, #15
 8000884:	409a      	lsls	r2, r3
 8000886:	0013      	movs	r3, r2
 8000888:	43da      	mvns	r2, r3
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	429a      	cmp	r2, r3
 8000898:	d013      	beq.n	80008c2 <HAL_GPIO_Init+0x1e2>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <HAL_GPIO_Init+0x2d0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d00d      	beq.n	80008be <HAL_GPIO_Init+0x1de>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a43      	ldr	r2, [pc, #268]	; (80009b4 <HAL_GPIO_Init+0x2d4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d007      	beq.n	80008ba <HAL_GPIO_Init+0x1da>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a42      	ldr	r2, [pc, #264]	; (80009b8 <HAL_GPIO_Init+0x2d8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_GPIO_Init+0x1d6>
 80008b2:	2303      	movs	r3, #3
 80008b4:	e006      	b.n	80008c4 <HAL_GPIO_Init+0x1e4>
 80008b6:	2305      	movs	r3, #5
 80008b8:	e004      	b.n	80008c4 <HAL_GPIO_Init+0x1e4>
 80008ba:	2302      	movs	r3, #2
 80008bc:	e002      	b.n	80008c4 <HAL_GPIO_Init+0x1e4>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <HAL_GPIO_Init+0x1e4>
 80008c2:	2300      	movs	r3, #0
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	2103      	movs	r1, #3
 80008c8:	400a      	ands	r2, r1
 80008ca:	0092      	lsls	r2, r2, #2
 80008cc:	4093      	lsls	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008d4:	4935      	ldr	r1, [pc, #212]	; (80009ac <HAL_GPIO_Init+0x2cc>)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	3302      	adds	r3, #2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	43da      	mvns	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	025b      	lsls	r3, r3, #9
 80008fa:	4013      	ands	r3, r2
 80008fc:	d003      	beq.n	8000906 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800090c:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	43da      	mvns	r2, r3
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	4013      	ands	r3, r2
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	43da      	mvns	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	035b      	lsls	r3, r3, #13
 800094e:	4013      	ands	r3, r2
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	43da      	mvns	r2, r3
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	039b      	lsls	r3, r3, #14
 8000978:	4013      	ands	r3, r2
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_GPIO_Init+0x2dc>)
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	40da      	lsrs	r2, r3
 8000998:	1e13      	subs	r3, r2, #0
 800099a:	d000      	beq.n	800099e <HAL_GPIO_Init+0x2be>
 800099c:	e6a8      	b.n	80006f0 <HAL_GPIO_Init+0x10>
  } 
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b006      	add	sp, #24
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010000 	.word	0x40010000
 80009b0:	48000400 	.word	0x48000400
 80009b4:	48000800 	.word	0x48000800
 80009b8:	48000c00 	.word	0x48000c00
 80009bc:	40010400 	.word	0x40010400

080009c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	0008      	movs	r0, r1
 80009ca:	0011      	movs	r1, r2
 80009cc:	1cbb      	adds	r3, r7, #2
 80009ce:	1c02      	adds	r2, r0, #0
 80009d0:	801a      	strh	r2, [r3, #0]
 80009d2:	1c7b      	adds	r3, r7, #1
 80009d4:	1c0a      	adds	r2, r1, #0
 80009d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009d8:	1c7b      	adds	r3, r7, #1
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d004      	beq.n	80009ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009e0:	1cbb      	adds	r3, r7, #2
 80009e2:	881a      	ldrh	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009e8:	e003      	b.n	80009f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009ea:	1cbb      	adds	r3, r7, #2
 80009ec:	881a      	ldrh	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	1dba      	adds	r2, r7, #6
 8000a0e:	8812      	ldrh	r2, [r2, #0]
 8000a10:	4013      	ands	r3, r2
 8000a12:	d008      	beq.n	8000a26 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a16:	1dba      	adds	r2, r7, #6
 8000a18:	8812      	ldrh	r2, [r2, #0]
 8000a1a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a1c:	1dbb      	adds	r3, r7, #6
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	0018      	movs	r0, r3
 8000a22:	f009 fa7b 	bl	8009f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40010400 	.word	0x40010400

08000a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e303      	b.n	800104e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d100      	bne.n	8000a52 <HAL_RCC_OscConfig+0x1e>
 8000a50:	e08d      	b.n	8000b6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a52:	4bc4      	ldr	r3, [pc, #784]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	220c      	movs	r2, #12
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d00e      	beq.n	8000a7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a5e:	4bc1      	ldr	r3, [pc, #772]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	220c      	movs	r2, #12
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d116      	bne.n	8000a98 <HAL_RCC_OscConfig+0x64>
 8000a6a:	4bbe      	ldr	r3, [pc, #760]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	401a      	ands	r2, r3
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	025b      	lsls	r3, r3, #9
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d10d      	bne.n	8000a98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a7c:	4bb9      	ldr	r3, [pc, #740]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	029b      	lsls	r3, r3, #10
 8000a84:	4013      	ands	r3, r2
 8000a86:	d100      	bne.n	8000a8a <HAL_RCC_OscConfig+0x56>
 8000a88:	e070      	b.n	8000b6c <HAL_RCC_OscConfig+0x138>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d000      	beq.n	8000a94 <HAL_RCC_OscConfig+0x60>
 8000a92:	e06b      	b.n	8000b6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e2da      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d107      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x7c>
 8000aa0:	4bb0      	ldr	r3, [pc, #704]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0249      	lsls	r1, r1, #9
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e02f      	b.n	8000b10 <HAL_RCC_OscConfig+0xdc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10c      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x9e>
 8000ab8:	4baa      	ldr	r3, [pc, #680]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4ba9      	ldr	r3, [pc, #676]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000abe:	49aa      	ldr	r1, [pc, #680]	; (8000d68 <HAL_RCC_OscConfig+0x334>)
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	4ba7      	ldr	r3, [pc, #668]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4ba6      	ldr	r3, [pc, #664]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000aca:	49a8      	ldr	r1, [pc, #672]	; (8000d6c <HAL_RCC_OscConfig+0x338>)
 8000acc:	400a      	ands	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	e01e      	b.n	8000b10 <HAL_RCC_OscConfig+0xdc>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b05      	cmp	r3, #5
 8000ad8:	d10e      	bne.n	8000af8 <HAL_RCC_OscConfig+0xc4>
 8000ada:	4ba2      	ldr	r3, [pc, #648]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4ba1      	ldr	r3, [pc, #644]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	02c9      	lsls	r1, r1, #11
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	4b9e      	ldr	r3, [pc, #632]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	0249      	lsls	r1, r1, #9
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e00b      	b.n	8000b10 <HAL_RCC_OscConfig+0xdc>
 8000af8:	4b9a      	ldr	r3, [pc, #616]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b99      	ldr	r3, [pc, #612]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000afe:	499a      	ldr	r1, [pc, #616]	; (8000d68 <HAL_RCC_OscConfig+0x334>)
 8000b00:	400a      	ands	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	4b97      	ldr	r3, [pc, #604]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b96      	ldr	r3, [pc, #600]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b0a:	4998      	ldr	r1, [pc, #608]	; (8000d6c <HAL_RCC_OscConfig+0x338>)
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d014      	beq.n	8000b42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fcd8 	bl	80004cc <HAL_GetTick>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b20:	e008      	b.n	8000b34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b22:	f7ff fcd3 	bl	80004cc <HAL_GetTick>
 8000b26:	0002      	movs	r2, r0
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b64      	cmp	r3, #100	; 0x64
 8000b2e:	d901      	bls.n	8000b34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e28c      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b34:	4b8b      	ldr	r3, [pc, #556]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	029b      	lsls	r3, r3, #10
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d0f0      	beq.n	8000b22 <HAL_RCC_OscConfig+0xee>
 8000b40:	e015      	b.n	8000b6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b42:	f7ff fcc3 	bl	80004cc <HAL_GetTick>
 8000b46:	0003      	movs	r3, r0
 8000b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4c:	f7ff fcbe 	bl	80004cc <HAL_GetTick>
 8000b50:	0002      	movs	r2, r0
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e277      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b5e:	4b81      	ldr	r3, [pc, #516]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	029b      	lsls	r3, r3, #10
 8000b66:	4013      	ands	r3, r2
 8000b68:	d1f0      	bne.n	8000b4c <HAL_RCC_OscConfig+0x118>
 8000b6a:	e000      	b.n	8000b6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	d100      	bne.n	8000b7a <HAL_RCC_OscConfig+0x146>
 8000b78:	e069      	b.n	8000c4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b7a:	4b7a      	ldr	r3, [pc, #488]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4013      	ands	r3, r2
 8000b82:	d00b      	beq.n	8000b9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b84:	4b77      	ldr	r3, [pc, #476]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	220c      	movs	r2, #12
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d11c      	bne.n	8000bca <HAL_RCC_OscConfig+0x196>
 8000b90:	4b74      	ldr	r3, [pc, #464]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	025b      	lsls	r3, r3, #9
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d116      	bne.n	8000bca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9c:	4b71      	ldr	r3, [pc, #452]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d005      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x17e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d001      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e24d      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb2:	4b6c      	ldr	r3, [pc, #432]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	22f8      	movs	r2, #248	; 0xf8
 8000bb8:	4393      	bics	r3, r2
 8000bba:	0019      	movs	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	00da      	lsls	r2, r3, #3
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc8:	e041      	b.n	8000c4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d024      	beq.n	8000c1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bd2:	4b64      	ldr	r3, [pc, #400]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bde:	f7ff fc75 	bl	80004cc <HAL_GetTick>
 8000be2:	0003      	movs	r3, r0
 8000be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be8:	f7ff fc70 	bl	80004cc <HAL_GetTick>
 8000bec:	0002      	movs	r2, r0
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e229      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfa:	4b5a      	ldr	r3, [pc, #360]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	d0f1      	beq.n	8000be8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c04:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	22f8      	movs	r2, #248	; 0xf8
 8000c0a:	4393      	bics	r3, r2
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	00da      	lsls	r2, r3, #3
 8000c14:	4b53      	ldr	r3, [pc, #332]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e018      	b.n	8000c4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c1c:	4b51      	ldr	r3, [pc, #324]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	438a      	bics	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c28:	f7ff fc50 	bl	80004cc <HAL_GetTick>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c30:	e008      	b.n	8000c44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c32:	f7ff fc4b 	bl	80004cc <HAL_GetTick>
 8000c36:	0002      	movs	r2, r0
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e204      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c44:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d1f1      	bne.n	8000c32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2208      	movs	r2, #8
 8000c54:	4013      	ands	r3, r2
 8000c56:	d036      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d019      	beq.n	8000c94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c60:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6c:	f7ff fc2e 	bl	80004cc <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c76:	f7ff fc29 	bl	80004cc <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e1e2      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d0f1      	beq.n	8000c76 <HAL_RCC_OscConfig+0x242>
 8000c92:	e018      	b.n	8000cc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c94:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca0:	f7ff fc14 	bl	80004cc <HAL_GetTick>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000caa:	f7ff fc0f 	bl	80004cc <HAL_GetTick>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e1c8      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d1f1      	bne.n	8000caa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x29e>
 8000cd0:	e0b6      	b.n	8000e40 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000cdc:	69da      	ldr	r2, [r3, #28]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	055b      	lsls	r3, r3, #21
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d111      	bne.n	8000d0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000ce8:	69da      	ldr	r2, [r3, #28]
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0549      	lsls	r1, r1, #21
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	61da      	str	r2, [r3, #28]
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000cf6:	69da      	ldr	r2, [r3, #28]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	055b      	lsls	r3, r3, #21
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d02:	231f      	movs	r3, #31
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_RCC_OscConfig+0x33c>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4013      	ands	r3, r2
 8000d14:	d11a      	bne.n	8000d4c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_RCC_OscConfig+0x33c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_RCC_OscConfig+0x33c>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0049      	lsls	r1, r1, #1
 8000d20:	430a      	orrs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d24:	f7ff fbd2 	bl	80004cc <HAL_GetTick>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d2e:	f7ff fbcd 	bl	80004cc <HAL_GetTick>
 8000d32:	0002      	movs	r2, r0
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b64      	cmp	r3, #100	; 0x64
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e186      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_RCC_OscConfig+0x33c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10f      	bne.n	8000d74 <HAL_RCC_OscConfig+0x340>
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000d56:	6a1a      	ldr	r2, [r3, #32]
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	621a      	str	r2, [r3, #32]
 8000d60:	e036      	b.n	8000dd0 <HAL_RCC_OscConfig+0x39c>
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40021000 	.word	0x40021000
 8000d68:	fffeffff 	.word	0xfffeffff
 8000d6c:	fffbffff 	.word	0xfffbffff
 8000d70:	40007000 	.word	0x40007000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x362>
 8000d7c:	4bb6      	ldr	r3, [pc, #728]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000d7e:	6a1a      	ldr	r2, [r3, #32]
 8000d80:	4bb5      	ldr	r3, [pc, #724]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	438a      	bics	r2, r1
 8000d86:	621a      	str	r2, [r3, #32]
 8000d88:	4bb3      	ldr	r3, [pc, #716]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000d8a:	6a1a      	ldr	r2, [r3, #32]
 8000d8c:	4bb2      	ldr	r3, [pc, #712]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000d8e:	2104      	movs	r1, #4
 8000d90:	438a      	bics	r2, r1
 8000d92:	621a      	str	r2, [r3, #32]
 8000d94:	e01c      	b.n	8000dd0 <HAL_RCC_OscConfig+0x39c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x384>
 8000d9e:	4bae      	ldr	r3, [pc, #696]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000da0:	6a1a      	ldr	r2, [r3, #32]
 8000da2:	4bad      	ldr	r3, [pc, #692]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000da4:	2104      	movs	r1, #4
 8000da6:	430a      	orrs	r2, r1
 8000da8:	621a      	str	r2, [r3, #32]
 8000daa:	4bab      	ldr	r3, [pc, #684]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000dac:	6a1a      	ldr	r2, [r3, #32]
 8000dae:	4baa      	ldr	r3, [pc, #680]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	621a      	str	r2, [r3, #32]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0x39c>
 8000db8:	4ba7      	ldr	r3, [pc, #668]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	4ba6      	ldr	r3, [pc, #664]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	621a      	str	r2, [r3, #32]
 8000dc4:	4ba4      	ldr	r3, [pc, #656]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000dc6:	6a1a      	ldr	r2, [r3, #32]
 8000dc8:	4ba3      	ldr	r3, [pc, #652]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000dca:	2104      	movs	r1, #4
 8000dcc:	438a      	bics	r2, r1
 8000dce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d014      	beq.n	8000e02 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fb78 	bl	80004cc <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de0:	e009      	b.n	8000df6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de2:	f7ff fb73 	bl	80004cc <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4a9b      	ldr	r2, [pc, #620]	; (800105c <HAL_RCC_OscConfig+0x628>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e12b      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df6:	4b98      	ldr	r3, [pc, #608]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x3ae>
 8000e00:	e013      	b.n	8000e2a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fb63 	bl	80004cc <HAL_GetTick>
 8000e06:	0003      	movs	r3, r0
 8000e08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e0a:	e009      	b.n	8000e20 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fb5e 	bl	80004cc <HAL_GetTick>
 8000e10:	0002      	movs	r2, r0
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4a91      	ldr	r2, [pc, #580]	; (800105c <HAL_RCC_OscConfig+0x628>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e116      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e20:	4b8d      	ldr	r3, [pc, #564]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	2202      	movs	r2, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e2a:	231f      	movs	r3, #31
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e34:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	4b87      	ldr	r3, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e3a:	4989      	ldr	r1, [pc, #548]	; (8001060 <HAL_RCC_OscConfig+0x62c>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2210      	movs	r2, #16
 8000e46:	4013      	ands	r3, r2
 8000e48:	d063      	beq.n	8000f12 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d12a      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e52:	4b81      	ldr	r3, [pc, #516]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e56:	4b80      	ldr	r3, [pc, #512]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e58:	2104      	movs	r1, #4
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e5e:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e62:	4b7d      	ldr	r3, [pc, #500]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fb2f 	bl	80004cc <HAL_GetTick>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e74:	f7ff fb2a 	bl	80004cc <HAL_GetTick>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e0e3      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e86:	4b74      	ldr	r3, [pc, #464]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d0f1      	beq.n	8000e74 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e90:	4b71      	ldr	r3, [pc, #452]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e94:	22f8      	movs	r2, #248	; 0xf8
 8000e96:	4393      	bics	r3, r2
 8000e98:	0019      	movs	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	00da      	lsls	r2, r3, #3
 8000ea0:	4b6d      	ldr	r3, [pc, #436]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea6:	e034      	b.n	8000f12 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	3305      	adds	r3, #5
 8000eae:	d111      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000eb0:	4b69      	ldr	r3, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb4:	4b68      	ldr	r3, [pc, #416]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	438a      	bics	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ebc:	4b66      	ldr	r3, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec0:	22f8      	movs	r2, #248	; 0xf8
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	00da      	lsls	r2, r3, #3
 8000ecc:	4b62      	ldr	r3, [pc, #392]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed2:	e01e      	b.n	8000f12 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ed4:	4b60      	ldr	r3, [pc, #384]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed8:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000eda:	2104      	movs	r1, #4
 8000edc:	430a      	orrs	r2, r1
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000ee0:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee4:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	438a      	bics	r2, r1
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eec:	f7ff faee 	bl	80004cc <HAL_GetTick>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ef6:	f7ff fae9 	bl	80004cc <HAL_GetTick>
 8000efa:	0002      	movs	r2, r0
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e0a2      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f08:	4b53      	ldr	r3, [pc, #332]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d1f1      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d100      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4e8>
 8000f1a:	e097      	b.n	800104c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f1c:	4b4e      	ldr	r3, [pc, #312]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	220c      	movs	r2, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x4f6>
 8000f28:	e06b      	b.n	8001002 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d14c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f32:	4b49      	ldr	r3, [pc, #292]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b48      	ldr	r3, [pc, #288]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f38:	494a      	ldr	r1, [pc, #296]	; (8001064 <HAL_RCC_OscConfig+0x630>)
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fac5 	bl	80004cc <HAL_GetTick>
 8000f42:	0003      	movs	r3, r0
 8000f44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f48:	f7ff fac0 	bl	80004cc <HAL_GetTick>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e079      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	049b      	lsls	r3, r3, #18
 8000f62:	4013      	ands	r3, r2
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	4393      	bics	r3, r2
 8000f6e:	0019      	movs	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f76:	430a      	orrs	r2, r1
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <HAL_RCC_OscConfig+0x634>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	0019      	movs	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f90:	430a      	orrs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0449      	lsls	r1, r1, #17
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fa93 	bl	80004cc <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff fa8e 	bl	80004cc <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e047      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	049b      	lsls	r3, r3, #18
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0x578>
 8000fca:	e03f      	b.n	800104c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000fd2:	4924      	ldr	r1, [pc, #144]	; (8001064 <HAL_RCC_OscConfig+0x630>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fa78 	bl	80004cc <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fa73 	bl	80004cc <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e02c      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	049b      	lsls	r3, r3, #18
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x5ae>
 8001000:	e024      	b.n	800104c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e01f      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_RCC_OscConfig+0x624>)
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	401a      	ands	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	429a      	cmp	r2, r3
 8001028:	d10e      	bne.n	8001048 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	220f      	movs	r2, #15
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001034:	429a      	cmp	r2, r3
 8001036:	d107      	bne.n	8001048 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	23f0      	movs	r3, #240	; 0xf0
 800103c:	039b      	lsls	r3, r3, #14
 800103e:	401a      	ands	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b008      	add	sp, #32
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000
 800105c:	00001388 	.word	0x00001388
 8001060:	efffffff 	.word	0xefffffff
 8001064:	feffffff 	.word	0xfeffffff
 8001068:	ffc2ffff 	.word	0xffc2ffff

0800106c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0b3      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001080:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	4013      	ands	r3, r2
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d911      	bls.n	80010b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108e:	4b58      	ldr	r3, [pc, #352]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2201      	movs	r2, #1
 8001094:	4393      	bics	r3, r2
 8001096:	0019      	movs	r1, r3
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e09a      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d015      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2204      	movs	r2, #4
 80010c2:	4013      	ands	r3, r2
 80010c4:	d006      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80010cc:	21e0      	movs	r1, #224	; 0xe0
 80010ce:	00c9      	lsls	r1, r1, #3
 80010d0:	430a      	orrs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	22f0      	movs	r2, #240	; 0xf0
 80010da:	4393      	bics	r3, r2
 80010dc:	0019      	movs	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	d040      	beq.n	8001174 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	029b      	lsls	r3, r3, #10
 8001102:	4013      	ands	r3, r2
 8001104:	d114      	bne.n	8001130 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e06e      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d107      	bne.n	8001122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	049b      	lsls	r3, r3, #18
 800111a:	4013      	ands	r3, r2
 800111c:	d108      	bne.n	8001130 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e062      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d101      	bne.n	8001130 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e05b      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	4393      	bics	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001144:	f7ff f9c2 	bl	80004cc <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114c:	e009      	b.n	8001162 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114e:	f7ff f9bd 	bl	80004cc <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <HAL_RCC_ClockConfig+0x18c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e042      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	220c      	movs	r2, #12
 8001168:	401a      	ands	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	429a      	cmp	r2, r3
 8001172:	d1ec      	bne.n	800114e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d211      	bcs.n	80011a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4393      	bics	r3, r2
 800118a:	0019      	movs	r1, r3
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_RCC_ClockConfig+0x184>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e020      	b.n	80011e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2204      	movs	r2, #4
 80011ac:	4013      	ands	r3, r2
 80011ae:	d009      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_RCC_ClockConfig+0x190>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011c4:	f000 f820 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80011c8:	0001      	movs	r1, r0
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_RCC_ClockConfig+0x188>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	220f      	movs	r2, #15
 80011d2:	4013      	ands	r3, r2
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_RCC_ClockConfig+0x194>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	000a      	movs	r2, r1
 80011da:	40da      	lsrs	r2, r3
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_RCC_ClockConfig+0x198>)
 80011de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff f92d 	bl	8000440 <HAL_InitTick>
  
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b004      	add	sp, #16
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	00001388 	.word	0x00001388
 80011fc:	fffff8ff 	.word	0xfffff8ff
 8001200:	0800af1c 	.word	0x0800af1c
 8001204:	20000060 	.word	0x20000060

08001208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b08f      	sub	sp, #60	; 0x3c
 800120c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800120e:	2314      	movs	r3, #20
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001216:	c313      	stmia	r3!, {r0, r1, r4}
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001220:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001222:	c313      	stmia	r3!, {r0, r1, r4}
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
 8001248:	2b04      	cmp	r3, #4
 800124a:	d002      	beq.n	8001252 <HAL_RCC_GetSysClockFreq+0x4a>
 800124c:	2b08      	cmp	r3, #8
 800124e:	d003      	beq.n	8001258 <HAL_RCC_GetSysClockFreq+0x50>
 8001250:	e02d      	b.n	80012ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001256:	e02d      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	220f      	movs	r2, #15
 800125e:	4013      	ands	r3, r2
 8001260:	2214      	movs	r2, #20
 8001262:	18ba      	adds	r2, r7, r2
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	220f      	movs	r2, #15
 800126e:	4013      	ands	r3, r2
 8001270:	1d3a      	adds	r2, r7, #4
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	4013      	ands	r3, r2
 800127e:	d009      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001282:	4812      	ldr	r0, [pc, #72]	; (80012cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001284:	f7fe ff52 	bl	800012c <__udivsi3>
 8001288:	0003      	movs	r3, r0
 800128a:	001a      	movs	r2, r3
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	4353      	muls	r3, r2
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
 8001292:	e009      	b.n	80012a8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001296:	000a      	movs	r2, r1
 8001298:	0152      	lsls	r2, r2, #5
 800129a:	1a52      	subs	r2, r2, r1
 800129c:	0193      	lsls	r3, r2, #6
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	185b      	adds	r3, r3, r1
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80012a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012ac:	e002      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80012b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b00f      	add	sp, #60	; 0x3c
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	0800aaec 	.word	0x0800aaec
 80012c4:	0800aafc 	.word	0x0800aafc
 80012c8:	40021000 	.word	0x40021000
 80012cc:	00f42400 	.word	0x00f42400
 80012d0:	007a1200 	.word	0x007a1200

080012d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0a8      	b.n	8001438 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d109      	bne.n	8001302 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2382      	movs	r3, #130	; 0x82
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d009      	beq.n	800130e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
 8001300:	e005      	b.n	800130e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	225d      	movs	r2, #93	; 0x5d
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	225c      	movs	r2, #92	; 0x5c
 8001324:	2100      	movs	r1, #0
 8001326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0018      	movs	r0, r3
 800132c:	f008 fe44 	bl	8009fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	225d      	movs	r2, #93	; 0x5d
 8001334:	2102      	movs	r1, #2
 8001336:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	438a      	bics	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	23e0      	movs	r3, #224	; 0xe0
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	429a      	cmp	r2, r3
 8001352:	d902      	bls.n	800135a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e002      	b.n	8001360 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	23f0      	movs	r3, #240	; 0xf0
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	429a      	cmp	r2, r3
 800136a:	d008      	beq.n	800137e <HAL_SPI_Init+0xaa>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	23e0      	movs	r3, #224	; 0xe0
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	429a      	cmp	r2, r3
 8001376:	d002      	beq.n	800137e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2382      	movs	r3, #130	; 0x82
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	401a      	ands	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6899      	ldr	r1, [r3, #8]
 800138c:	2384      	movs	r3, #132	; 0x84
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	400b      	ands	r3, r1
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2102      	movs	r1, #2
 800139a:	400b      	ands	r3, r1
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	2101      	movs	r1, #1
 80013a4:	400b      	ands	r3, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6999      	ldr	r1, [r3, #24]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	400b      	ands	r3, r1
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2138      	movs	r1, #56	; 0x38
 80013ba:	400b      	ands	r3, r1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	400b      	ands	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	0011      	movs	r1, r2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	2204      	movs	r2, #4
 80013e4:	401a      	ands	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	2110      	movs	r1, #16
 80013ec:	400b      	ands	r3, r1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	2108      	movs	r1, #8
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68d9      	ldr	r1, [r3, #12]
 80013fe:	23f0      	movs	r3, #240	; 0xf0
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	400b      	ands	r3, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	0011      	movs	r1, r2
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	015b      	lsls	r3, r3, #5
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <HAL_SPI_Init+0x16c>)
 8001424:	400a      	ands	r2, r1
 8001426:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	225d      	movs	r2, #93	; 0x5d
 8001432:	2101      	movs	r1, #1
 8001434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b004      	add	sp, #16
 800143e:	bd80      	pop	{r7, pc}
 8001440:	fffff7ff 	.word	0xfffff7ff

08001444 <FT800_setSoundVolume>:
/* ************************************************************************************ */
// FT800 set volume for Sound Synthesizer 
/* ************************************************************************************ */

void FT800_setSoundVolume(uint8_t volume)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	0002      	movs	r2, r0
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	701a      	strb	r2, [r3, #0]
    FT800_Write8(REG_VOL_SOUND,volume);
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <FT800_setSoundVolume+0x24>)
 8001456:	0019      	movs	r1, r3
 8001458:	0010      	movs	r0, r2
 800145a:	f000 f923 	bl	80016a4 <FT800_Write8>
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	00102480 	.word	0x00102480

0800146c <FT800_setSoundEffect>:
// FT800 set sound effect
// note: MIDI note (pitch control), effect: Sound effects pre-loaded in a ROM wave library
/* ************************************************************************************ */

void FT800_setSoundEffect(uint8_t note, uint8_t effect)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	0002      	movs	r2, r0
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	1c0a      	adds	r2, r1, #0
 800147c:	701a      	strb	r2, [r3, #0]
    FT800_Write16(REG_SOUND,((uint16_t)note<<8)|effect);
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21b      	sxth	r3, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <FT800_setSoundEffect+0x38>)
 8001494:	0019      	movs	r1, r3
 8001496:	0010      	movs	r0, r2
 8001498:	f000 f934 	bl	8001704 <FT800_Write16>
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	00102484 	.word	0x00102484

080014a8 <FT800_playSound>:
/* ************************************************************************************ */
// FT800 play sound
/* ************************************************************************************ */

void FT800_playSound(uint8_t play)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	701a      	strb	r2, [r3, #0]
    FT800_Write8(REG_PLAY,play&0x01);
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <FT800_playSound+0x28>)
 80014c0:	0019      	movs	r1, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	f000 f8ee 	bl	80016a4 <FT800_Write8>
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	00102488 	.word	0x00102488

080014d4 <FT800_setPlaybackVolume>:
/* ************************************************************************************ */
// FT800 set volume for Audio Playback
/* ************************************************************************************ */

void FT800_setPlaybackVolume(uint8_t volume)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	0002      	movs	r2, r0
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	701a      	strb	r2, [r3, #0]
    FT800_Write8(REG_VOL_PB,volume);
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <FT800_setPlaybackVolume+0x24>)
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f000 f8db 	bl	80016a4 <FT800_Write8>
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	0010247c 	.word	0x0010247c

080014fc <FT800_configurePlayback>:
/* ************************************************************************************ */
// FT800 configure Audio Playback - format: PCM, ULAW, ADPCM or UNDEFINDED
/* ************************************************************************************ */

void FT800_configurePlayback(uint32_t start_addr, uint32_t length, uint16_t freq, uint8_t format, uint8_t loop)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	0019      	movs	r1, r3
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	801a      	strh	r2, [r3, #0]
 800150c:	1d7b      	adds	r3, r7, #5
 800150e:	1c0a      	adds	r2, r1, #0
 8001510:	701a      	strb	r2, [r3, #0]
    FT800_Write32(REG_PLAYBACK_START,start_addr);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <FT800_configurePlayback+0x70>)
 8001516:	0019      	movs	r1, r3
 8001518:	0010      	movs	r0, r2
 800151a:	f000 f92b 	bl	8001774 <FT800_Write32>
    FT800_Write32(REG_PLAYBACK_LENGTH,length);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <FT800_configurePlayback+0x74>)
 8001522:	0019      	movs	r1, r3
 8001524:	0010      	movs	r0, r2
 8001526:	f000 f925 	bl	8001774 <FT800_Write32>
    FT800_Write16(REG_PLAYBACK_FREQ,freq);
 800152a:	1dbb      	adds	r3, r7, #6
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <FT800_configurePlayback+0x78>)
 8001530:	0019      	movs	r1, r3
 8001532:	0010      	movs	r0, r2
 8001534:	f000 f8e6 	bl	8001704 <FT800_Write16>
    FT800_Write8(REG_PLAYBACK_FORMAT,format&0x03);
 8001538:	1d7b      	adds	r3, r7, #5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2203      	movs	r2, #3
 800153e:	4013      	ands	r3, r2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <FT800_configurePlayback+0x7c>)
 8001544:	0019      	movs	r1, r3
 8001546:	0010      	movs	r0, r2
 8001548:	f000 f8ac 	bl	80016a4 <FT800_Write8>
    FT800_Write8(REG_PLAYBACK_LOOP,loop&0x01);
 800154c:	2318      	movs	r3, #24
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4013      	ands	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <FT800_configurePlayback+0x80>)
 800155a:	0019      	movs	r1, r3
 800155c:	0010      	movs	r0, r2
 800155e:	f000 f8a1 	bl	80016a4 <FT800_Write8>
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	001024a4 	.word	0x001024a4
 8001570:	001024a8 	.word	0x001024a8
 8001574:	001024b0 	.word	0x001024b0
 8001578:	001024b4 	.word	0x001024b4
 800157c:	001024b8 	.word	0x001024b8

08001580 <FT800_playPlayback>:
/* ************************************************************************************ */
// FT800 play audio playback
/* ************************************************************************************ */

void FT800_playPlayback(uint8_t play)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	701a      	strb	r2, [r3, #0]
    FT800_Write8(REG_PLAYBACK_PLAY,play&0x01);
 800158c:	1dfb      	adds	r3, r7, #7
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <FT800_playPlayback+0x28>)
 8001598:	0019      	movs	r1, r3
 800159a:	0010      	movs	r0, r2
 800159c:	f000 f882 	bl	80016a4 <FT800_Write8>
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	001024bc 	.word	0x001024bc

080015ac <CMD_Offset_Inc>:
/* ************************************************************************************ */
// Increment FIFO address offset
/* ************************************************************************************ */

void CMD_Offset_Inc(uint8_t command_size)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	701a      	strb	r2, [r3, #0]
    CMD_Offset+=command_size; 
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <CMD_Offset_Inc+0x34>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	18d3      	adds	r3, r2, r3
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <CMD_Offset_Inc+0x34>)
 80015c8:	801a      	strh	r2, [r3, #0]
    CMD_Offset%=4096;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <CMD_Offset_Inc+0x34>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	051b      	lsls	r3, r3, #20
 80015d0:	0d1b      	lsrs	r3, r3, #20
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <CMD_Offset_Inc+0x34>)
 80015d6:	801a      	strh	r2, [r3, #0]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000fc 	.word	0x200000fc

080015e4 <set_CMD_Offset>:
/* ************************************************************************************ */
// Set FIFO address offset
/* ************************************************************************************ */

void set_CMD_Offset(uint16_t offset)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	1dbb      	adds	r3, r7, #6
 80015ee:	801a      	strh	r2, [r3, #0]
    CMD_Offset=offset;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <set_CMD_Offset+0x1c>)
 80015f2:	1dba      	adds	r2, r7, #6
 80015f4:	8812      	ldrh	r2, [r2, #0]
 80015f6:	801a      	strh	r2, [r3, #0]
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200000fc 	.word	0x200000fc

08001604 <get_CMD_Offset>:
/* ************************************************************************************ */
// Get FIFO address offset
/* ************************************************************************************ */

uint16_t get_CMD_Offset(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    return CMD_Offset;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <get_CMD_Offset+0x10>)
 800160a:	881b      	ldrh	r3, [r3, #0]
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	200000fc 	.word	0x200000fc

08001618 <FT800_WriteAddress>:
// Write address. Most significant byte is sent first.
// mode: writing to FT800(WRITE), reading from FT800(READ), configure GPU(CONFIG)  
/* ************************************************************************************ */

void FT800_WriteAddress(uint32_t address, uint8_t mode)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	000a      	movs	r2, r1
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	701a      	strb	r2, [r3, #0]
    uint8_t byte = 0;
 8001626:	230f      	movs	r3, #15
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
    
    if(mode==CONFIG) address<<=16;
 800162e:	1cfb      	adds	r3, r7, #3
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b40      	cmp	r3, #64	; 0x40
 8001634:	d102      	bne.n	800163c <FT800_WriteAddress+0x24>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	607b      	str	r3, [r7, #4]
    
    byte = ((address & 0x00FF0000) >> 16);  // Mask the first byte to send
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0c1a      	lsrs	r2, r3, #16
 8001640:	210f      	movs	r1, #15
 8001642:	187b      	adds	r3, r7, r1
 8001644:	701a      	strb	r2, [r3, #0]
    byte = ((byte & 0x3F) | mode);            // the MSBs are forced to 10 for WRITE, 00 for READ, 01 for CONFIG
 8001646:	187b      	adds	r3, r7, r1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	223f      	movs	r2, #63	; 0x3f
 800164e:	4013      	ands	r3, r2
 8001650:	b25a      	sxtb	r2, r3
 8001652:	1cfb      	adds	r3, r7, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b25a      	sxtb	r2, r3
 800165c:	187b      	adds	r3, r7, r1
 800165e:	701a      	strb	r2, [r3, #0]
    FT800_WriteSPI(byte);                         // Call the low-level SPI transmit routine                                                 //
 8001660:	000c      	movs	r4, r1
 8001662:	187b      	adds	r3, r7, r1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	0018      	movs	r0, r3
 8001668:	f001 ffde 	bl	8003628 <FT800_WriteSPI>
    
    byte = ((address & 0x0000FF00) >> 8);   // Mask the next byte to be sent
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	0a1a      	lsrs	r2, r3, #8
 8001670:	193b      	adds	r3, r7, r4
 8001672:	701a      	strb	r2, [r3, #0]
    FT800_WriteSPI(byte);                         // Call the low-level SPI transmit routine 
 8001674:	193b      	adds	r3, r7, r4
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	0018      	movs	r0, r3
 800167a:	f001 ffd5 	bl	8003628 <FT800_WriteSPI>

    byte = (address & 0x000000FF);          // Mask the next byte to be sent
 800167e:	193b      	adds	r3, r7, r4
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	701a      	strb	r2, [r3, #0]
    FT800_WriteSPI(byte);                         // Call the low-level SPI transmit routine 
 8001684:	193b      	adds	r3, r7, r4
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	0018      	movs	r0, r3
 800168a:	f001 ffcd 	bl	8003628 <FT800_WriteSPI>
    
    if(mode==READ)FT800_WriteSPI(0x00); 
 800168e:	1cfb      	adds	r3, r7, #3
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <FT800_WriteAddress+0x84>
 8001696:	2000      	movs	r0, #0
 8001698:	f001 ffc6 	bl	8003628 <FT800_WriteSPI>
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b005      	add	sp, #20
 80016a2:	bd90      	pop	{r4, r7, pc}

080016a4 <FT800_Write8>:
/* ************************************************************************************ */
// FT800 Write BYTE data at address 
/* ************************************************************************************ */

void FT800_Write8(uint32_t address, uint8_t data)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	000a      	movs	r2, r1
 80016ae:	1cfb      	adds	r3, r7, #3
 80016b0:	701a      	strb	r2, [r3, #0]
    if(address==RAM_CMD) // if writing to FIFO
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	2384      	movs	r3, #132	; 0x84
 80016b6:	035b      	lsls	r3, r3, #13
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d108      	bne.n	80016ce <FT800_Write8+0x2a>
    {
        address+=CMD_Offset;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <FT800_Write8+0x58>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
        CMD_Offset_Inc(1);// Move the CMD Offset 
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff ff6f 	bl	80015ac <CMD_Offset_Inc>
    }
    FT800_CS_LO();                          
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <FT800_Write8+0x5c>)
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	0552      	lsls	r2, r2, #21
 80016d4:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(address,WRITE);                 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff ff9c 	bl	8001618 <FT800_WriteAddress>
    FT800_WriteSPI(data);        
 80016e0:	1cfb      	adds	r3, r7, #3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 ff9f 	bl	8003628 <FT800_WriteSPI>
    FT800_CS_HI(); 
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <FT800_Write8+0x5c>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	0152      	lsls	r2, r2, #5
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	200000fc 	.word	0x200000fc
 8001700:	48000400 	.word	0x48000400

08001704 <FT800_Write16>:
/* ************************************************************************************ */
// FT800 Write WORD data at address 
/* ************************************************************************************ */

void FT800_Write16(uint32_t address, uint16_t data)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	000a      	movs	r2, r1
 800170e:	1cbb      	adds	r3, r7, #2
 8001710:	801a      	strh	r2, [r3, #0]
    if(address==RAM_CMD )// if writing to FIFO
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	2384      	movs	r3, #132	; 0x84
 8001716:	035b      	lsls	r3, r3, #13
 8001718:	429a      	cmp	r2, r3
 800171a:	d108      	bne.n	800172e <FT800_Write16+0x2a>
    {
        address+=CMD_Offset;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <FT800_Write16+0x68>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	001a      	movs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	189b      	adds	r3, r3, r2
 8001726:	607b      	str	r3, [r7, #4]
        CMD_Offset_Inc(2);// Move the CMD Offset
 8001728:	2002      	movs	r0, #2
 800172a:	f7ff ff3f 	bl	80015ac <CMD_Offset_Inc>
    }
    FT800_CS_LO();                               
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <FT800_Write16+0x6c>)
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	0552      	lsls	r2, r2, #21
 8001734:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(address,WRITE);                    
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff ff6c 	bl	8001618 <FT800_WriteAddress>
    FT800_WriteSPI((data&0x00FF));  
 8001740:	1cbb      	adds	r3, r7, #2
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	0018      	movs	r0, r3
 8001748:	f001 ff6e 	bl	8003628 <FT800_WriteSPI>
    FT800_WriteSPI((data&0xFF00)>>8);   
 800174c:	1cbb      	adds	r3, r7, #2
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	0018      	movs	r0, r3
 8001758:	f001 ff66 	bl	8003628 <FT800_WriteSPI>
    FT800_CS_HI(); 
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <FT800_Write16+0x6c>)
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0152      	lsls	r2, r2, #5
 8001762:	619a      	str	r2, [r3, #24]
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000fc 	.word	0x200000fc
 8001770:	48000400 	.word	0x48000400

08001774 <FT800_Write32>:
/* ************************************************************************************ */
// FT800 Write DWORD data at address in FIFO
/* ************************************************************************************ */

void FT800_Write32(uint32_t address, uint32_t data)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
    if(address==RAM_CMD) // if writing to FIFO 
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	2384      	movs	r3, #132	; 0x84
 8001782:	035b      	lsls	r3, r3, #13
 8001784:	429a      	cmp	r2, r3
 8001786:	d108      	bne.n	800179a <FT800_Write32+0x26>
    {
        address+=CMD_Offset;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <FT800_Write32+0x78>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	001a      	movs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	189b      	adds	r3, r3, r2
 8001792:	607b      	str	r3, [r7, #4]
        CMD_Offset_Inc(4);// Move the CMD Offset
 8001794:	2004      	movs	r0, #4
 8001796:	f7ff ff09 	bl	80015ac <CMD_Offset_Inc>
    }
    FT800_CS_LO();                                
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <FT800_Write32+0x7c>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0552      	lsls	r2, r2, #21
 80017a0:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(address,WRITE);   
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff ff36 	bl	8001618 <FT800_WriteAddress>
    FT800_WriteSPI((data&0x000000FF));  
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	0018      	movs	r0, r3
 80017b2:	f001 ff39 	bl	8003628 <FT800_WriteSPI>
    FT800_WriteSPI((data&0x0000FF00)>>8);    
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	0018      	movs	r0, r3
 80017be:	f001 ff33 	bl	8003628 <FT800_WriteSPI>
    FT800_WriteSPI((data&0x00FF0000)>>16);  
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	0018      	movs	r0, r3
 80017ca:	f001 ff2d 	bl	8003628 <FT800_WriteSPI>
    FT800_WriteSPI((data&0xFF000000)>>24);  
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	0e1b      	lsrs	r3, r3, #24
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	0018      	movs	r0, r3
 80017d6:	f001 ff27 	bl	8003628 <FT800_WriteSPI>
    FT800_CS_HI(); 
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <FT800_Write32+0x7c>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	0152      	lsls	r2, r2, #5
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	200000fc 	.word	0x200000fc
 80017f0:	48000400 	.word	0x48000400

080017f4 <FT800_Read8>:
/* ************************************************************************************ */
// FT800 Read BYTE from address 
/* ************************************************************************************ */

uint8_t FT800_Read8(uint32_t address)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    uint8_t byte = 0;
 80017fc:	250f      	movs	r5, #15
 80017fe:	197b      	adds	r3, r7, r5
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
    FT800_CS_LO();                          
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <FT800_Read8+0x40>)
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	0552      	lsls	r2, r2, #21
 800180a:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(address,READ);                 
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2100      	movs	r1, #0
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff ff01 	bl	8001618 <FT800_WriteAddress>
    byte=FT800_ReadSPI();        
 8001816:	197c      	adds	r4, r7, r5
 8001818:	f001 ff15 	bl	8003646 <FT800_ReadSPI>
 800181c:	0003      	movs	r3, r0
 800181e:	7023      	strb	r3, [r4, #0]
    FT800_CS_HI(); 
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <FT800_Read8+0x40>)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	0152      	lsls	r2, r2, #5
 8001826:	619a      	str	r2, [r3, #24]
    return byte;
 8001828:	197b      	adds	r3, r7, r5
 800182a:	781b      	ldrb	r3, [r3, #0]
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	48000400 	.word	0x48000400

08001838 <FT800_Read16>:
/* ************************************************************************************ */
// FT800 Read WORD from address 
/* ************************************************************************************ */

uint16_t FT800_Read16(uint32_t address)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    uint16_t byte=0;
 8001840:	250e      	movs	r5, #14
 8001842:	197b      	adds	r3, r7, r5
 8001844:	2200      	movs	r2, #0
 8001846:	801a      	strh	r2, [r3, #0]
    uint16_t word=0;
 8001848:	240c      	movs	r4, #12
 800184a:	193b      	adds	r3, r7, r4
 800184c:	2200      	movs	r2, #0
 800184e:	801a      	strh	r2, [r3, #0]
 
    FT800_CS_LO();                          
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <FT800_Read16+0x7c>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	0552      	lsls	r2, r2, #21
 8001856:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(address,READ);      
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2100      	movs	r1, #0
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff fedb 	bl	8001618 <FT800_WriteAddress>
    byte=FT800_ReadSPI(); 
 8001862:	f001 fef0 	bl	8003646 <FT800_ReadSPI>
 8001866:	0003      	movs	r3, r0
 8001868:	001a      	movs	r2, r3
 800186a:	197b      	adds	r3, r7, r5
 800186c:	801a      	strh	r2, [r3, #0]
    word|=byte;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	1939      	adds	r1, r7, r4
 8001872:	197a      	adds	r2, r7, r5
 8001874:	8809      	ldrh	r1, [r1, #0]
 8001876:	8812      	ldrh	r2, [r2, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	801a      	strh	r2, [r3, #0]
    byte=FT800_ReadSPI(); 
 800187c:	f001 fee3 	bl	8003646 <FT800_ReadSPI>
 8001880:	0003      	movs	r3, r0
 8001882:	001a      	movs	r2, r3
 8001884:	197b      	adds	r3, r7, r5
 8001886:	801a      	strh	r2, [r3, #0]
    word|=(byte<<8);
 8001888:	197b      	adds	r3, r7, r5
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2100      	movs	r1, #0
 8001894:	5e5b      	ldrsh	r3, [r3, r1]
 8001896:	4313      	orrs	r3, r2
 8001898:	b21a      	sxth	r2, r3
 800189a:	193b      	adds	r3, r7, r4
 800189c:	801a      	strh	r2, [r3, #0]
    FT800_CS_HI(); 
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <FT800_Read16+0x7c>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	0152      	lsls	r2, r2, #5
 80018a4:	619a      	str	r2, [r3, #24]
    
    return word;
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	881b      	ldrh	r3, [r3, #0]
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	48000400 	.word	0x48000400

080018b8 <FT800_Read32>:
/* ************************************************************************************ */
// FT800 Read DWORD from address 
/* ************************************************************************************ */

uint32_t FT800_Read32(uint32_t address)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    uint32_t byte=0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
    uint32_t dword=0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 
    FT800_CS_LO();                          
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <FT800_Read32+0x7c>)
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	0552      	lsls	r2, r2, #21
 80018ce:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(address,READ);      
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2100      	movs	r1, #0
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fe9f 	bl	8001618 <FT800_WriteAddress>
    byte=FT800_ReadSPI(); 
 80018da:	f001 feb4 	bl	8003646 <FT800_ReadSPI>
 80018de:	0003      	movs	r3, r0
 80018e0:	60fb      	str	r3, [r7, #12]
    dword|=byte;
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60bb      	str	r3, [r7, #8]
    byte=FT800_ReadSPI(); 
 80018ea:	f001 feac 	bl	8003646 <FT800_ReadSPI>
 80018ee:	0003      	movs	r3, r0
 80018f0:	60fb      	str	r3, [r7, #12]
    dword|=(byte<<8);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
    byte=FT800_ReadSPI(); 
 80018fc:	f001 fea3 	bl	8003646 <FT800_ReadSPI>
 8001900:	0003      	movs	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]
    dword|=(byte<<16);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4313      	orrs	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
    byte=FT800_ReadSPI(); 
 800190e:	f001 fe9a 	bl	8003646 <FT800_ReadSPI>
 8001912:	0003      	movs	r3, r0
 8001914:	60fb      	str	r3, [r7, #12]
    dword|=(byte<<24);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	4313      	orrs	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
    FT800_CS_HI(); 
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <FT800_Read32+0x7c>)
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0152      	lsls	r2, r2, #5
 8001926:	619a      	str	r2, [r3, #24]
    
    return dword;
 8001928:	68bb      	ldr	r3, [r7, #8]
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	48000400 	.word	0x48000400

08001938 <FT800_configGPU>:
/* ************************************************************************************ */
// FT800 configure GPU  
/* ************************************************************************************ */
 
void FT800_configGPU(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    FT800_CS_LO();
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <FT800_configGPU+0x3c>)
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	0552      	lsls	r2, r2, #21
 8001942:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(FT_GPU_EXTERNAL_OSC, CONFIG); // Change the PLL to external clock - optional
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	2044      	movs	r0, #68	; 0x44
 8001948:	f7ff fe66 	bl	8001618 <FT800_WriteAddress>
    FT800_WriteAddress(FT_GPU_PLL_48M, CONFIG);      // Ensure configured to 48 MHz 
 800194c:	2140      	movs	r1, #64	; 0x40
 800194e:	2062      	movs	r0, #98	; 0x62
 8001950:	f7ff fe62 	bl	8001618 <FT800_WriteAddress>
    FT800_WriteAddress(FT_GPU_CORE_RESET, CONFIG);   // Reset the core
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	2068      	movs	r0, #104	; 0x68
 8001958:	f7ff fe5e 	bl	8001618 <FT800_WriteAddress>
    FT800_WriteAddress(FT_GPU_ACTIVE_M, CONFIG);     // Read address 0 to ensure FT800 is active
 800195c:	2140      	movs	r1, #64	; 0x40
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fe5a 	bl	8001618 <FT800_WriteAddress>
    FT800_CS_HI();
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <FT800_configGPU+0x3c>)
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	0152      	lsls	r2, r2, #5
 800196a:	619a      	str	r2, [r3, #24]

}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	48000400 	.word	0x48000400

08001978 <FT800_configDisplay>:
/* ************************************************************************************ */
// FT800 configure display 
/* ************************************************************************************ */
 
void FT800_configDisplay(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    FT800_Write16(REG_HCYCLE, DISPLAY_HSYNC_PERIOD);
 800197c:	2389      	movs	r3, #137	; 0x89
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <FT800_configDisplay+0x9c>)
 8001982:	0019      	movs	r1, r3
 8001984:	0010      	movs	r0, r2
 8001986:	f7ff febd 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_HOFFSET, DISPLAY_HBP + DISPLAY_HSLEN);
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <FT800_configDisplay+0xa0>)
 800198c:	212b      	movs	r1, #43	; 0x2b
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff feb8 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_HSYNC0, 0);           
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <FT800_configDisplay+0xa4>)
 8001996:	2100      	movs	r1, #0
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff feb3 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_HSYNC1, DISPLAY_HBP);      
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <FT800_configDisplay+0xa8>)
 80019a0:	2129      	movs	r1, #41	; 0x29
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff feae 	bl	8001704 <FT800_Write16>
    
    FT800_Write16(REG_VCYCLE, DISPLAY_VSYNC_PERIOD);
 80019a8:	2392      	movs	r3, #146	; 0x92
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <FT800_configDisplay+0xac>)
 80019ae:	0019      	movs	r1, r3
 80019b0:	0010      	movs	r0, r2
 80019b2:	f7ff fea7 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_VOFFSET, DISPLAY_VBP+DISPLAY_VSLEN);
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <FT800_configDisplay+0xb0>)
 80019b8:	210c      	movs	r1, #12
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fea2 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_VSYNC0, 0);           
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <FT800_configDisplay+0xb4>)
 80019c2:	2100      	movs	r1, #0
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff fe9d 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_VSYNC1, DISPLAY_VBP);      
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <FT800_configDisplay+0xb8>)
 80019cc:	210a      	movs	r1, #10
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff fe98 	bl	8001704 <FT800_Write16>
    
    FT800_Write8(REG_SWIZZLE, DISPLAY_SWIZZLE);
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <FT800_configDisplay+0xbc>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff fe63 	bl	80016a4 <FT800_Write8>
    FT800_Write8(REG_PCLK_POL, DISPLAY_PCLK_POL);  
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <FT800_configDisplay+0xc0>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff fe5e 	bl	80016a4 <FT800_Write8>
    FT800_Write16(REG_HSIZE, DISPLAY_WIDTH);           
 80019e8:	23f0      	movs	r3, #240	; 0xf0
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <FT800_configDisplay+0xc4>)
 80019ee:	0019      	movs	r1, r3
 80019f0:	0010      	movs	r0, r2
 80019f2:	f7ff fe87 	bl	8001704 <FT800_Write16>
    FT800_Write16(REG_VSIZE, DISPLAY_HEIGHT);  
 80019f6:	2388      	movs	r3, #136	; 0x88
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <FT800_configDisplay+0xc8>)
 80019fc:	0019      	movs	r1, r3
 80019fe:	0010      	movs	r0, r2
 8001a00:	f7ff fe80 	bl	8001704 <FT800_Write16>
    FT800_Write8(REG_PCLK, DISPLAY_PCLK);
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <FT800_configDisplay+0xcc>)
 8001a06:	2105      	movs	r1, #5
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fe4b 	bl	80016a4 <FT800_Write8>
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	00102428 	.word	0x00102428
 8001a18:	0010242c 	.word	0x0010242c
 8001a1c:	00102434 	.word	0x00102434
 8001a20:	00102438 	.word	0x00102438
 8001a24:	0010243c 	.word	0x0010243c
 8001a28:	00102440 	.word	0x00102440
 8001a2c:	00102448 	.word	0x00102448
 8001a30:	0010244c 	.word	0x0010244c
 8001a34:	00102460 	.word	0x00102460
 8001a38:	00102468 	.word	0x00102468
 8001a3c:	00102430 	.word	0x00102430
 8001a40:	00102444 	.word	0x00102444
 8001a44:	0010246c 	.word	0x0010246c

08001a48 <FT800_configTouchScreen>:
/* ************************************************************************************ */
// FT800 configure touch screen 
/* ************************************************************************************ */
 
void FT800_configTouchScreen(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    FT800_Write16(REG_TOUCH_RZTHRESH, TOUCH_SENSITIVITY); 
 8001a4c:	23e1      	movs	r3, #225	; 0xe1
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <FT800_configTouchScreen+0x4c>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f7ff fe55 	bl	8001704 <FT800_Write16>
    FT800_Write8(REG_TOUCH_MODE, TOUCH_MODE);   
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <FT800_configTouchScreen+0x50>)
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fe20 	bl	80016a4 <FT800_Write8>
    FT800_Write8(REG_TOUCH_ADC_MODE, TOUCH_ADC_MODE);   
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <FT800_configTouchScreen+0x54>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fe1b 	bl	80016a4 <FT800_Write8>
    FT800_Write16(REG_TOUCH_CHARGE, TOUCH_CHARGE);  
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <FT800_configTouchScreen+0x58>)
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <FT800_configTouchScreen+0x5c>)
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff fe45 	bl	8001704 <FT800_Write16>
    FT800_Write8(REG_TOUCH_SETTLE, TOUCH_SETTLE);  
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <FT800_configTouchScreen+0x60>)
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fe10 	bl	80016a4 <FT800_Write8>
    FT800_Write8(REG_TOUCH_OVERSAMPLE, TOUCH_OVERSAMPLE);   
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <FT800_configTouchScreen+0x64>)
 8001a86:	2107      	movs	r1, #7
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fe0b 	bl	80016a4 <FT800_Write8>
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	00102504 	.word	0x00102504
 8001a98:	001024f0 	.word	0x001024f0
 8001a9c:	001024f4 	.word	0x001024f4
 8001aa0:	00001770 	.word	0x00001770
 8001aa4:	001024f8 	.word	0x001024f8
 8001aa8:	001024fc 	.word	0x001024fc
 8001aac:	00102500 	.word	0x00102500

08001ab0 <FT800_clearIntFlags>:
/* ************************************************************************************ */
// FT800 clear interrupt flags
/* ************************************************************************************ */
 
void FT800_clearIntFlags(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
    FT800_Read8(REG_INT_FLAGS);                 // Reading clears interrupt flags
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <FT800_clearIntFlags+0x14>)
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff fe9c 	bl	80017f4 <FT800_Read8>
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	00102498 	.word	0x00102498

08001ac8 <FT800_configTouchScreenInt>:
/* ************************************************************************************ */
// FT800 configure touch screen interrupt
/* ************************************************************************************ */

void FT800_configTouchScreenInt(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
    FT800_Write8(REG_INT_EN, 0x01);                 // enable interrupt
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <FT800_configTouchScreenInt+0x30>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff fde7 	bl	80016a4 <FT800_Write8>
    DELAY(20);
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f008 fa3d 	bl	8009f56 <delay_ms>
    FT800_Write8(REG_INT_MASK,0b00000110);                 // mask interrupt
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <FT800_configTouchScreenInt+0x34>)
 8001ade:	2106      	movs	r1, #6
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fddf 	bl	80016a4 <FT800_Write8>
    DELAY(20);
 8001ae6:	2014      	movs	r0, #20
 8001ae8:	f008 fa35 	bl	8009f56 <delay_ms>

    FT800_clearIntFlags();             
 8001aec:	f7ff ffe0 	bl	8001ab0 <FT800_clearIntFlags>
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	0010249c 	.word	0x0010249c
 8001afc:	001024a0 	.word	0x001024a0

08001b00 <FT800_configGPIO>:
/* ************************************************************************************ */
// FT800 configure GPIOs
/* ************************************************************************************ */

void FT800_configGPIO(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
    FT800_Write8(REG_GPIO_DIR, GPIO_DIR); 
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <FT800_configGPIO+0x20>)
 8001b06:	2183      	movs	r1, #131	; 0x83
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff fdcb 	bl	80016a4 <FT800_Write8>
    FT800_Write8(REG_GPIO, GPIO_SET);  
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <FT800_configGPIO+0x24>)
 8001b10:	2181      	movs	r1, #129	; 0x81
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff fdc6 	bl	80016a4 <FT800_Write8>
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	0010248c 	.word	0x0010248c
 8001b24:	00102490 	.word	0x00102490

08001b28 <FT800_init>:
/* ************************************************************************************ */
// FT800 initialize
/* ************************************************************************************ */
 
void FT800_init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    FT800_InitPins();
 8001b2c:	f001 fd40 	bl	80035b0 <FT800_InitPins>
    F800_InitSPI();
 8001b30:	f001 fd44 	bl	80035bc <F800_InitSPI>
    F800_InitInterrupt();
 8001b34:	f001 fd50 	bl	80035d8 <F800_InitInterrupt>
    DELAY(50);
 8001b38:	2032      	movs	r0, #50	; 0x32
 8001b3a:	f008 fa0c 	bl	8009f56 <delay_ms>
    
    FT800_PD_HI();
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <FT800_init+0x8c>)
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	619a      	str	r2, [r3, #24]
    DELAY(20);                          // Delay for power up of regulator
 8001b46:	2014      	movs	r0, #20
 8001b48:	f008 fa05 	bl	8009f56 <delay_ms>
    
    FT800_CS_LO();
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <FT800_init+0x8c>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	0552      	lsls	r2, r2, #21
 8001b52:	619a      	str	r2, [r3, #24]
    FT800_WriteAddress(0x00000000,READ); //wake up
 8001b54:	2100      	movs	r1, #0
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fd5e 	bl	8001618 <FT800_WriteAddress>
    FT800_CS_HI();
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <FT800_init+0x8c>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	0152      	lsls	r2, r2, #5
 8001b62:	619a      	str	r2, [r3, #24]
    
    FT800_configGPU();
 8001b64:	f7ff fee8 	bl	8001938 <FT800_configGPU>
    DELAY(50);
 8001b68:	2032      	movs	r0, #50	; 0x32
 8001b6a:	f008 f9f4 	bl	8009f56 <delay_ms>
    FT800_configGPIO();
 8001b6e:	f7ff ffc7 	bl	8001b00 <FT800_configGPIO>
    FT800_configDisplay();                   
 8001b72:	f7ff ff01 	bl	8001978 <FT800_configDisplay>
    FT800_configTouchScreen();
 8001b76:	f7ff ff67 	bl	8001a48 <FT800_configTouchScreen>
    FT800_configTouchScreenInt();
 8001b7a:	f7ff ffa5 	bl	8001ac8 <FT800_configTouchScreenInt>

    FT800_Write32(RAM_DL,0x02000000);       // Set the colour which is used when the colour buffer is cleared   
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	049a      	lsls	r2, r3, #18
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	035b      	lsls	r3, r3, #13
 8001b86:	0011      	movs	r1, r2
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff fdf3 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_DL+4,0x26000007);     // Clear the Colour, Stencil and Tag buffers. This will set the screen to the 'clear' colour set above.(C/S/T define which parameters to clear)
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <FT800_init+0x90>)
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <FT800_init+0x94>)
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fded 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_DL+8,0x00000000);     // Display command ends the display list
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <FT800_init+0x98>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7ff fde8 	bl	8001774 <FT800_Write32>
    FT800_Write32(REG_DLSWAP,0x00000002);   // Writing to the DL_SWAP register...value 10 means render after last frame complete     
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <FT800_init+0x9c>)
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fde3 	bl	8001774 <FT800_Write32>

}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	26000007 	.word	0x26000007
 8001bbc:	00100004 	.word	0x00100004
 8001bc0:	00100008 	.word	0x00100008
 8001bc4:	00102450 	.word	0x00102450

08001bc8 <FT800_startNewList>:
/* ************************************************************************************ */
// FT800 Start new display list
/* ************************************************************************************ */

void FT800_startNewList(void)
{          
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, CMD_DLSTART);
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <FT800_startNewList+0x18>)
 8001bce:	2384      	movs	r3, #132	; 0x84
 8001bd0:	035b      	lsls	r3, r3, #13
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff fdcd 	bl	8001774 <FT800_Write32>
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	ffffff00 	.word	0xffffff00

08001be4 <FT800_endOfList>:
/* ************************************************************************************ */
// FT800 End of display list
/* ************************************************************************************ */

void FT800_endOfList(void)
{    
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, 0x00000000);    
 8001be8:	2384      	movs	r3, #132	; 0x84
 8001bea:	035b      	lsls	r3, r3, #13
 8001bec:	2100      	movs	r1, #0
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff fdc0 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, CMD_SWAP);  
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	425a      	negs	r2, r3
 8001bf8:	2384      	movs	r3, #132	; 0x84
 8001bfa:	035b      	lsls	r3, r3, #13
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff fdb8 	bl	8001774 <FT800_Write32>
    FT800_Write16(REG_CMD_WRITE,get_CMD_Offset());  
 8001c04:	f7ff fcfe 	bl	8001604 <get_CMD_Offset>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <FT800_endOfList+0x38>)
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fd77 	bl	8001704 <FT800_Write16>
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	001024e8 	.word	0x001024e8

08001c20 <FT800_finishList>:
/* ************************************************************************************ */
// FT800 Finish display list
/* ************************************************************************************ */

void FT800_finishList(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
    uint32_t cmdBufferWr, cmdBufferRd;
    do
    {
        cmdBufferWr = FT800_Read16(REG_CMD_WRITE);          // Read the vaulue of the REG_CMD_WRITE register
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <FT800_finishList+0x40>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff fe05 	bl	8001838 <FT800_Read16>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	607b      	str	r3, [r7, #4]
        cmdBufferRd = FT800_Read16(REG_CMD_READ);           // Read the vaulue of the REG_CMD_READ register
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <FT800_finishList+0x44>)
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fdff 	bl	8001838 <FT800_Read16>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	603b      	str	r3, [r7, #0]
    } while(cmdBufferWr != cmdBufferRd);
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d1ef      	bne.n	8001c26 <FT800_finishList+0x6>
    set_CMD_Offset(FT800_Read16(REG_CMD_WRITE)); 
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <FT800_finishList+0x40>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff fdf5 	bl	8001838 <FT800_Read16>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fcc7 	bl	80015e4 <set_CMD_Offset>
}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	001024e8 	.word	0x001024e8
 8001c64:	001024e4 	.word	0x001024e4

08001c68 <FT800_executeCommands>:
/* ************************************************************************************ */
// FT800 Execute all the commands written in RAM_CMD
/* ************************************************************************************ */

void FT800_executeCommands(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
    FT800_Write16(REG_CMD_WRITE, get_CMD_Offset());
 8001c6c:	f7ff fcca 	bl	8001604 <get_CMD_Offset>
 8001c70:	0003      	movs	r3, r0
 8001c72:	001a      	movs	r2, r3
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <FT800_executeCommands+0x1c>)
 8001c76:	0011      	movs	r1, r2
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff fd43 	bl	8001704 <FT800_Write16>
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	001024e8 	.word	0x001024e8

08001c88 <FT800_getFreeSpace>:
/* ************************************************************************************ */
// FT800 get free space in command buffer
/* ************************************************************************************ */

uint16_t FT800_getFreeSpace(void)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
    uint32_t fullness;
    uint16_t freespace;

    fullness = (FT800_Read16(REG_CMD_WRITE) - FT800_Read16(REG_CMD_READ)) & 0xFFF;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <FT800_getFreeSpace+0x40>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fdd1 	bl	8001838 <FT800_Read16>
 8001c96:	0003      	movs	r3, r0
 8001c98:	001c      	movs	r4, r3
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <FT800_getFreeSpace+0x44>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff fdcb 	bl	8001838 <FT800_Read16>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	1ae3      	subs	r3, r4, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	051b      	lsls	r3, r3, #20
 8001caa:	0d1b      	lsrs	r3, r3, #20
 8001cac:	607b      	str	r3, [r7, #4]
    freespace = (4096 - 4) - fullness;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	1cbb      	adds	r3, r7, #2
 8001cb4:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <FT800_getFreeSpace+0x48>)
 8001cb6:	1a8a      	subs	r2, r1, r2
 8001cb8:	801a      	strh	r2, [r3, #0]
    
    return freespace;
 8001cba:	1cbb      	adds	r3, r7, #2
 8001cbc:	881b      	ldrh	r3, [r3, #0]
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b003      	add	sp, #12
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	001024e8 	.word	0x001024e8
 8001ccc:	001024e4 	.word	0x001024e4
 8001cd0:	00000ffc 	.word	0x00000ffc

08001cd4 <FT800_setBackgroundColor>:
/* ************************************************************************************ */
// FT800 Set Background color - 0x02BBGGRR, color=BBGGRRAA
/* ************************************************************************************ */

void FT800_setBackgroundColor(uint32_t color)
{         
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    FT800_Write32(RAM_CMD, 0x02000000|(color&0x00FFFFFF));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	0492      	lsls	r2, r2, #18
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	2384      	movs	r3, #132	; 0x84
 8001cea:	035b      	lsls	r3, r3, #13
 8001cec:	0011      	movs	r1, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fd40 	bl	8001774 <FT800_Write32>
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <FT800_clear>:
// FT800 Clear display - 0x2600000X  
//clr=X, X=1 clear tag, X=2 clear stencil, X=4 clear color, X=7 clear all
/* ************************************************************************************ */

void FT800_clear(uint8_t clr)
{       
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	0002      	movs	r2, r0
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	701a      	strb	r2, [r3, #0]
    FT800_Write32(RAM_CMD, 0x26000000|(clr&0x07));  
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2298      	movs	r2, #152	; 0x98
 8001d12:	0592      	lsls	r2, r2, #22
 8001d14:	4313      	orrs	r3, r2
 8001d16:	001a      	movs	r2, r3
 8001d18:	2384      	movs	r3, #132	; 0x84
 8001d1a:	035b      	lsls	r3, r3, #13
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fd28 	bl	8001774 <FT800_Write32>
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <FT800_setColorA>:
/* ************************************************************************************ */
// FT800 color transparency alpha=[0-255]
/* ************************************************************************************ */

void FT800_setColorA(uint8_t alpha)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	0002      	movs	r2, r0
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	701a      	strb	r2, [r3, #0]
    FT800_Write32(RAM_CMD, 0x10000000|alpha);
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	0552      	lsls	r2, r2, #21
 8001d40:	4313      	orrs	r3, r2
 8001d42:	001a      	movs	r2, r3
 8001d44:	2384      	movs	r3, #132	; 0x84
 8001d46:	035b      	lsls	r3, r3, #13
 8001d48:	0011      	movs	r1, r2
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff fd12 	bl	8001774 <FT800_Write32>
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <FT800_setColorRGB>:
/* ************************************************************************************ */
// FT800 Object color (BGR)
/* ************************************************************************************ */

void FT800_setColorRGB(uint32_t color)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    FT800_Write32(RAM_CMD, 0x04000000|(color&0x00FFFFFF));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	04d2      	lsls	r2, r2, #19
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	2384      	movs	r3, #132	; 0x84
 8001d6e:	035b      	lsls	r3, r3, #13
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff fcfe 	bl	8001774 <FT800_Write32>
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <FT800_setBgColor>:
/* ************************************************************************************ */
// FT800 Object background color
/* ************************************************************************************ */

void FT800_setBgColor(uint32_t color)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    FT800_Write32(RAM_CMD, CMD_BGCOLOR);
 8001d88:	23f7      	movs	r3, #247	; 0xf7
 8001d8a:	425a      	negs	r2, r3
 8001d8c:	2384      	movs	r3, #132	; 0x84
 8001d8e:	035b      	lsls	r3, r3, #13
 8001d90:	0011      	movs	r1, r2
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff fcee 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, (color&0x00FFFFFF));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	0a1a      	lsrs	r2, r3, #8
 8001d9e:	2384      	movs	r3, #132	; 0x84
 8001da0:	035b      	lsls	r3, r3, #13
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff fce5 	bl	8001774 <FT800_Write32>
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <FT800_setFgColor>:
/* ************************************************************************************ */
// FT800 Object foreground color
/* ************************************************************************************ */

void FT800_setFgColor(uint32_t color)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
    FT800_Write32(RAM_CMD, CMD_FGCOLOR);   
 8001dba:	23f6      	movs	r3, #246	; 0xf6
 8001dbc:	425a      	negs	r2, r3
 8001dbe:	2384      	movs	r3, #132	; 0x84
 8001dc0:	035b      	lsls	r3, r3, #13
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff fcd5 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, (color&0x00FFFFFF));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	0a1a      	lsrs	r2, r3, #8
 8001dd0:	2384      	movs	r3, #132	; 0x84
 8001dd2:	035b      	lsls	r3, r3, #13
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fccc 	bl	8001774 <FT800_Write32>
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <FT800_Vertex2F>:
/* ************************************************************************************ */
// FT800 Vertex2II  - x[-16384,16383], y[-16384,16383], in 1/16 of the pixel 
/* ************************************************************************************ */

void FT800_Vertex2F(int16_t x, int16_t y)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	0002      	movs	r2, r0
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	801a      	strh	r2, [r3, #0]
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	801a      	strh	r2, [r3, #0]
    uint32_t xy=0x40000000;
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	05db      	lsls	r3, r3, #23
 8001dfa:	60fb      	str	r3, [r7, #12]
    
    xy|=((x&0x7FFF)<<15); //11 bits for +-x coordinate and 4 bits for x fraction (1/16 of pixel)
 8001dfc:	1dbb      	adds	r3, r7, #6
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	03db      	lsls	r3, r3, #15
 8001e02:	001a      	movs	r2, r3
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <FT800_Vertex2F+0x50>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    xy|=(y&0x7FFF);       //11 bits for +-y coordinate and 4 bits for y fraction (1/16 of pixel)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	045b      	lsls	r3, r3, #17
 8001e14:	0c5b      	lsrs	r3, r3, #17
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
   
    FT800_Write32(RAM_CMD, xy); 
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	2384      	movs	r3, #132	; 0x84
 8001e20:	035b      	lsls	r3, r3, #13
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fca5 	bl	8001774 <FT800_Write32>
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	3fff8000 	.word	0x3fff8000

08001e38 <FT800_Vertex2II>:
/* ************************************************************************************ */
// FT800 Vertex2II  - x[0,511], y[0,511], handle [0-31], cell [0-127]  
/* ************************************************************************************ */

void FT800_Vertex2II(uint16_t x, uint16_t y, uint8_t handle, uint8_t cell)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	0005      	movs	r5, r0
 8001e40:	000c      	movs	r4, r1
 8001e42:	0010      	movs	r0, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	1dbb      	adds	r3, r7, #6
 8001e48:	1c2a      	adds	r2, r5, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	1c22      	adds	r2, r4, #0
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	1cfb      	adds	r3, r7, #3
 8001e54:	1c02      	adds	r2, r0, #0
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	1cbb      	adds	r3, r7, #2
 8001e5a:	1c0a      	adds	r2, r1, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    uint32_t xyhc=0x80000000;
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	60fb      	str	r3, [r7, #12]
    xyhc|=((x&0x01FF)<<21);
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	055b      	lsls	r3, r3, #21
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <FT800_Vertex2II+0x88>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
    xyhc|=((y&0x01FF)<<12);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	031b      	lsls	r3, r3, #12
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <FT800_Vertex2II+0x8c>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
    xyhc|=((handle&0x1F)<<7);
 8001e88:	1cfb      	adds	r3, r7, #3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	01db      	lsls	r3, r3, #7
 8001e8e:	001a      	movs	r2, r3
 8001e90:	23f8      	movs	r3, #248	; 0xf8
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
    xyhc|=(cell&0x7F);
 8001e9c:	1cbb      	adds	r3, r7, #2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	227f      	movs	r2, #127	; 0x7f
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

    FT800_Write32(RAM_CMD, xyhc); 
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	2384      	movs	r3, #132	; 0x84
 8001eae:	035b      	lsls	r3, r3, #13
 8001eb0:	0011      	movs	r1, r2
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff fc5e 	bl	8001774 <FT800_Write32>
} 
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	3fe00000 	.word	0x3fe00000
 8001ec4:	001ff000 	.word	0x001ff000

08001ec8 <FT800_align>:
/* ************************************************************************************ */
// FT800 align - used filling up to 32 bit (4 bytes)
/* ************************************************************************************ */

void FT800_align(uint8_t n)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	701a      	strb	r2, [r3, #0]
    while((n++) & 3)
 8001ed4:	e005      	b.n	8001ee2 <FT800_align+0x1a>
    FT800_Write8(RAM_CMD, 0);
 8001ed6:	2384      	movs	r3, #132	; 0x84
 8001ed8:	035b      	lsls	r3, r3, #13
 8001eda:	2100      	movs	r1, #0
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fbe1 	bl	80016a4 <FT800_Write8>
    while((n++) & 3)
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	1dfa      	adds	r2, r7, #7
 8001ee8:	1c59      	adds	r1, r3, #1
 8001eea:	7011      	strb	r1, [r2, #0]
 8001eec:	001a      	movs	r2, r3
 8001eee:	2303      	movs	r3, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d1f0      	bne.n	8001ed6 <FT800_align+0xe>
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <FT800_WriteString>:
/* ************************************************************************************ */
// FT800 write string - used text draw and object naming
/* ************************************************************************************ */

void FT800_WriteString(const char*s)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    uint16_t string_length = 0;
 8001f04:	240e      	movs	r4, #14
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
    string_length = strlen(s)+1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe f904 	bl	800011c <strlen>
 8001f14:	0003      	movs	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	3201      	adds	r2, #1
 8001f1c:	801a      	strh	r2, [r3, #0]
    while(*s)
 8001f1e:	e00e      	b.n	8001f3e <FT800_WriteString+0x42>
    {
        char c=*s++;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	210d      	movs	r1, #13
 8001f28:	187a      	adds	r2, r7, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	7013      	strb	r3, [r2, #0]
        FT800_Write8(RAM_CMD, c);
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	2384      	movs	r3, #132	; 0x84
 8001f34:	035b      	lsls	r3, r3, #13
 8001f36:	0011      	movs	r1, r2
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff fbb3 	bl	80016a4 <FT800_Write8>
    while(*s)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ec      	bne.n	8001f20 <FT800_WriteString+0x24>
    }
    FT800_Write8(RAM_CMD, 0);
 8001f46:	2384      	movs	r3, #132	; 0x84
 8001f48:	035b      	lsls	r3, r3, #13
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff fba9 	bl	80016a4 <FT800_Write8>
    FT800_align(string_length);  
 8001f52:	230e      	movs	r3, #14
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff ffb4 	bl	8001ec8 <FT800_align>
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b005      	add	sp, #20
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <FT800_writeMemZero>:
/************************************************************************************* */
// FT800 write zero to a block of memory
/* ************************************************************************************ */
 
void FT800_writeMemZero(uint32_t pointer, uint32_t number)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    FT800_Write32(RAM_CMD, CMD_MEMZERO); 
 8001f72:	23e4      	movs	r3, #228	; 0xe4
 8001f74:	425a      	negs	r2, r3
 8001f76:	2384      	movs	r3, #132	; 0x84
 8001f78:	035b      	lsls	r3, r3, #13
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fbf9 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, pointer);   
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	2384      	movs	r3, #132	; 0x84
 8001f86:	035b      	lsls	r3, r3, #13
 8001f88:	0011      	movs	r1, r2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff fbf2 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, number); 
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	2384      	movs	r3, #132	; 0x84
 8001f94:	035b      	lsls	r3, r3, #13
 8001f96:	0011      	movs	r1, r2
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff fbeb 	bl	8001774 <FT800_Write32>
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <FT800_drawPoint>:
/* ************************************************************************************ */
// FT800 draw point  - x[-1024,1023], y[-1024,1023], color, size (in 1/16 of pixel) 
/* ************************************************************************************ */

void FT800_drawPoint(int16_t x, int16_t y, uint32_t color, uint16_t size)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	0004      	movs	r4, r0
 8001fb0:	0008      	movs	r0, r1
 8001fb2:	60ba      	str	r2, [r7, #8]
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	250e      	movs	r5, #14
 8001fb8:	197b      	adds	r3, r7, r5
 8001fba:	1c22      	adds	r2, r4, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	240c      	movs	r4, #12
 8001fc0:	193b      	adds	r3, r7, r4
 8001fc2:	1c02      	adds	r2, r0, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	1c0a      	adds	r2, r1, #0
 8001fca:	801a      	strh	r2, [r3, #0]
    FT800_setColorRGB(color);              //point color
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fec2 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0D000000|size); //point size                
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	22d0      	movs	r2, #208	; 0xd0
 8001fda:	0512      	lsls	r2, r2, #20
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	001a      	movs	r2, r3
 8001fe0:	2384      	movs	r3, #132	; 0x84
 8001fe2:	035b      	lsls	r3, r3, #13
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7ff fbc4 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|POINT);   //begin drawing point
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <FT800_drawPoint+0x88>)
 8001fee:	2384      	movs	r3, #132	; 0x84
 8001ff0:	035b      	lsls	r3, r3, #13
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff fbbd 	bl	8001774 <FT800_Write32>
    FT800_Vertex2F(x<<4,y<<4);             //set coordinates    
 8001ffa:	197b      	adds	r3, r7, r5
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	5e9b      	ldrsh	r3, [r3, r2]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	b21a      	sxth	r2, r3
 8002004:	193b      	adds	r3, r7, r4
 8002006:	2100      	movs	r1, #0
 8002008:	5e5b      	ldrsh	r3, [r3, r1]
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	b21b      	sxth	r3, r3
 800200e:	0019      	movs	r1, r3
 8002010:	0010      	movs	r0, r2
 8002012:	f7ff fee7 	bl	8001de4 <FT800_Vertex2F>
    FT800_Write32(RAM_CMD, END);           //end of drawing
 8002016:	2384      	movs	r3, #132	; 0x84
 8002018:	059a      	lsls	r2, r3, #22
 800201a:	2384      	movs	r3, #132	; 0x84
 800201c:	035b      	lsls	r3, r3, #13
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff fba7 	bl	8001774 <FT800_Write32>
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	1f000002 	.word	0x1f000002

08002034 <FT800_drawLine>:
/* ************************************************************************************ */
// FT800 draw line from (x1,y1) to (x2,y2) of color color and linewidth width
/* ************************************************************************************ */

void FT800_drawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color, uint16_t width)
{  
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	0005      	movs	r5, r0
 800203c:	000c      	movs	r4, r1
 800203e:	0010      	movs	r0, r2
 8002040:	0019      	movs	r1, r3
 8002042:	1dbb      	adds	r3, r7, #6
 8002044:	1c2a      	adds	r2, r5, #0
 8002046:	801a      	strh	r2, [r3, #0]
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	1c22      	adds	r2, r4, #0
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	1cbb      	adds	r3, r7, #2
 8002050:	1c02      	adds	r2, r0, #0
 8002052:	801a      	strh	r2, [r3, #0]
 8002054:	003b      	movs	r3, r7
 8002056:	1c0a      	adds	r2, r1, #0
 8002058:	801a      	strh	r2, [r3, #0]
    
    FT800_setColorRGB(color);
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff fe7b 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0E000000|(width&0x0FFF));         
 8002062:	231c      	movs	r3, #28
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	051b      	lsls	r3, r3, #20
 800206a:	0d1b      	lsrs	r3, r3, #20
 800206c:	22e0      	movs	r2, #224	; 0xe0
 800206e:	0512      	lsls	r2, r2, #20
 8002070:	4313      	orrs	r3, r2
 8002072:	001a      	movs	r2, r3
 8002074:	2384      	movs	r3, #132	; 0x84
 8002076:	035b      	lsls	r3, r3, #13
 8002078:	0011      	movs	r1, r2
 800207a:	0018      	movs	r0, r3
 800207c:	f7ff fb7a 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|LINE);
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <FT800_drawLine+0xac>)
 8002082:	2384      	movs	r3, #132	; 0x84
 8002084:	035b      	lsls	r3, r3, #13
 8002086:	0011      	movs	r1, r2
 8002088:	0018      	movs	r0, r3
 800208a:	f7ff fb73 	bl	8001774 <FT800_Write32>
    FT800_Vertex2F(x1<<4,y1<<4);
 800208e:	1dbb      	adds	r3, r7, #6
 8002090:	2200      	movs	r2, #0
 8002092:	5e9b      	ldrsh	r3, [r3, r2]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	b21a      	sxth	r2, r3
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2100      	movs	r1, #0
 800209c:	5e5b      	ldrsh	r3, [r3, r1]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	0019      	movs	r1, r3
 80020a4:	0010      	movs	r0, r2
 80020a6:	f7ff fe9d 	bl	8001de4 <FT800_Vertex2F>
    FT800_Vertex2F(x2<<4,y2<<4);
 80020aa:	1cbb      	adds	r3, r7, #2
 80020ac:	2200      	movs	r2, #0
 80020ae:	5e9b      	ldrsh	r3, [r3, r2]
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	003b      	movs	r3, r7
 80020b6:	2100      	movs	r1, #0
 80020b8:	5e5b      	ldrsh	r3, [r3, r1]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	b21b      	sxth	r3, r3
 80020be:	0019      	movs	r1, r3
 80020c0:	0010      	movs	r0, r2
 80020c2:	f7ff fe8f 	bl	8001de4 <FT800_Vertex2F>
    FT800_Write32(RAM_CMD, END); 
 80020c6:	2384      	movs	r3, #132	; 0x84
 80020c8:	059a      	lsls	r2, r3, #22
 80020ca:	2384      	movs	r3, #132	; 0x84
 80020cc:	035b      	lsls	r3, r3, #13
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fb4f 	bl	8001774 <FT800_Write32>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bdb0      	pop	{r4, r5, r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	1f000003 	.word	0x1f000003

080020e4 <FT800_drawRectangle>:
/* ************************************************************************************ */
// FT800 draw rectangle starting from (x1,y1) and ending at (x2,y2) of color color and linewidth width
/* ************************************************************************************ */

void FT800_drawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color, uint16_t width)
{  
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	0005      	movs	r5, r0
 80020ec:	000c      	movs	r4, r1
 80020ee:	0010      	movs	r0, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	1c2a      	adds	r2, r5, #0
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	1c22      	adds	r2, r4, #0
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	1cbb      	adds	r3, r7, #2
 8002100:	1c02      	adds	r2, r0, #0
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	003b      	movs	r3, r7
 8002106:	1c0a      	adds	r2, r1, #0
 8002108:	801a      	strh	r2, [r3, #0]
    FT800_setColorRGB(color);
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	0018      	movs	r0, r3
 800210e:	f7ff fe23 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0E000000|(width&0x0FFF));  
 8002112:	231c      	movs	r3, #28
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	051b      	lsls	r3, r3, #20
 800211a:	0d1b      	lsrs	r3, r3, #20
 800211c:	22e0      	movs	r2, #224	; 0xe0
 800211e:	0512      	lsls	r2, r2, #20
 8002120:	4313      	orrs	r3, r2
 8002122:	001a      	movs	r2, r3
 8002124:	2384      	movs	r3, #132	; 0x84
 8002126:	035b      	lsls	r3, r3, #13
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff fb22 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|RECT);
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <FT800_drawRectangle+0xac>)
 8002132:	2384      	movs	r3, #132	; 0x84
 8002134:	035b      	lsls	r3, r3, #13
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff fb1b 	bl	8001774 <FT800_Write32>
    FT800_Vertex2F(x1<<4,y1<<4);
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	2200      	movs	r2, #0
 8002142:	5e9b      	ldrsh	r3, [r3, r2]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	b21a      	sxth	r2, r3
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2100      	movs	r1, #0
 800214c:	5e5b      	ldrsh	r3, [r3, r1]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	b21b      	sxth	r3, r3
 8002152:	0019      	movs	r1, r3
 8002154:	0010      	movs	r0, r2
 8002156:	f7ff fe45 	bl	8001de4 <FT800_Vertex2F>
    FT800_Vertex2F(x2<<4,y2<<4);
 800215a:	1cbb      	adds	r3, r7, #2
 800215c:	2200      	movs	r2, #0
 800215e:	5e9b      	ldrsh	r3, [r3, r2]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	b21a      	sxth	r2, r3
 8002164:	003b      	movs	r3, r7
 8002166:	2100      	movs	r1, #0
 8002168:	5e5b      	ldrsh	r3, [r3, r1]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	b21b      	sxth	r3, r3
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f7ff fe37 	bl	8001de4 <FT800_Vertex2F>
    FT800_Write32(RAM_CMD, END); 
 8002176:	2384      	movs	r3, #132	; 0x84
 8002178:	059a      	lsls	r2, r3, #22
 800217a:	2384      	movs	r3, #132	; 0x84
 800217c:	035b      	lsls	r3, r3, #13
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff faf7 	bl	8001774 <FT800_Write32>
}  
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b002      	add	sp, #8
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	1f000009 	.word	0x1f000009

08002194 <FT800_drawLineStrip>:
/* ************************************************************************************ */
// FT800 draw line strip in number of points num_of_points
/* ************************************************************************************ */

void FT800_drawLineStrip(int16_t x[], int16_t y[],uint16_t num_of_points, uint32_t color, uint16_t width)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	1dbb      	adds	r3, r7, #6
 80021a2:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    FT800_setColorRGB(color);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7ff fdd6 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0E000000|(width&0x0FFF));  
 80021ac:	2320      	movs	r3, #32
 80021ae:	2208      	movs	r2, #8
 80021b0:	4694      	mov	ip, r2
 80021b2:	44bc      	add	ip, r7
 80021b4:	4463      	add	r3, ip
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	0d1b      	lsrs	r3, r3, #20
 80021bc:	22e0      	movs	r2, #224	; 0xe0
 80021be:	0512      	lsls	r2, r2, #20
 80021c0:	4313      	orrs	r3, r2
 80021c2:	001a      	movs	r2, r3
 80021c4:	2384      	movs	r3, #132	; 0x84
 80021c6:	035b      	lsls	r3, r3, #13
 80021c8:	0011      	movs	r1, r2
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff fad2 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|LINE_STRIP);
 80021d0:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <FT800_drawLineStrip+0xb0>)
 80021d2:	2384      	movs	r3, #132	; 0x84
 80021d4:	035b      	lsls	r3, r3, #13
 80021d6:	0011      	movs	r1, r2
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff facb 	bl	8001774 <FT800_Write32>
    for(i=0;i<num_of_points;i++) FT800_Vertex2F(x[i]<<4,y[i]<<4);
 80021de:	2316      	movs	r3, #22
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	e01a      	b.n	800221e <FT800_drawLineStrip+0x8a>
 80021e8:	2416      	movs	r4, #22
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	5e9b      	ldrsh	r3, [r3, r2]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	b218      	sxth	r0, r3
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	18d3      	adds	r3, r2, r3
 8002206:	2200      	movs	r2, #0
 8002208:	5e9b      	ldrsh	r3, [r3, r2]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	b21b      	sxth	r3, r3
 800220e:	0019      	movs	r1, r3
 8002210:	f7ff fde8 	bl	8001de4 <FT800_Vertex2F>
 8002214:	193b      	adds	r3, r7, r4
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	193b      	adds	r3, r7, r4
 800221a:	3201      	adds	r2, #1
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	2316      	movs	r3, #22
 8002220:	18fa      	adds	r2, r7, r3
 8002222:	1dbb      	adds	r3, r7, #6
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3dd      	bcc.n	80021e8 <FT800_drawLineStrip+0x54>
    FT800_Write32(RAM_CMD, END);
 800222c:	2384      	movs	r3, #132	; 0x84
 800222e:	059a      	lsls	r2, r3, #22
 8002230:	2384      	movs	r3, #132	; 0x84
 8002232:	035b      	lsls	r3, r3, #13
 8002234:	0011      	movs	r1, r2
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff fa9c 	bl	8001774 <FT800_Write32>
} 
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b007      	add	sp, #28
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	1f000004 	.word	0x1f000004

08002248 <FT800_drawEdgeLineStrip>:
/* ************************************************************************************ */
// FT800 draw edge line strip (color filling) in number of points num_of_points
/* ************************************************************************************ */

void FT800_drawEdgeLineStrip(int16_t x[], int16_t y[], uint16_t num_of_points, uint8_t choice, uint32_t color)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	0019      	movs	r1, r3
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	801a      	strh	r2, [r3, #0]
 8002258:	1d7b      	adds	r3, r7, #5
 800225a:	1c0a      	adds	r2, r1, #0
 800225c:	701a      	strb	r2, [r3, #0]
    uint32_t c=0; uint16_t i;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
    
       
    switch(choice) //choose edge side 
 8002262:	1d7b      	adds	r3, r7, #5
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b42      	cmp	r3, #66	; 0x42
 8002268:	d010      	beq.n	800228c <FT800_drawEdgeLineStrip+0x44>
 800226a:	dc02      	bgt.n	8002272 <FT800_drawEdgeLineStrip+0x2a>
 800226c:	2b41      	cmp	r3, #65	; 0x41
 800226e:	d00a      	beq.n	8002286 <FT800_drawEdgeLineStrip+0x3e>
 8002270:	e00f      	b.n	8002292 <FT800_drawEdgeLineStrip+0x4a>
 8002272:	2b4c      	cmp	r3, #76	; 0x4c
 8002274:	d004      	beq.n	8002280 <FT800_drawEdgeLineStrip+0x38>
 8002276:	2b52      	cmp	r3, #82	; 0x52
 8002278:	d10b      	bne.n	8002292 <FT800_drawEdgeLineStrip+0x4a>
    {
        case'R': c = EDGE_STRIP_R; //right
 800227a:	2305      	movs	r3, #5
 800227c:	617b      	str	r3, [r7, #20]
                    break;
 800227e:	e008      	b.n	8002292 <FT800_drawEdgeLineStrip+0x4a>
        case'L': c = EDGE_STRIP_L; //left
 8002280:	2306      	movs	r3, #6
 8002282:	617b      	str	r3, [r7, #20]
                    break;
 8002284:	e005      	b.n	8002292 <FT800_drawEdgeLineStrip+0x4a>
        case'A': c = EDGE_STRIP_A; //above
 8002286:	2307      	movs	r3, #7
 8002288:	617b      	str	r3, [r7, #20]
                    break;
 800228a:	e002      	b.n	8002292 <FT800_drawEdgeLineStrip+0x4a>
        case'B': c = EDGE_STRIP_B; //below
 800228c:	2308      	movs	r3, #8
 800228e:	617b      	str	r3, [r7, #20]
                    break;
 8002290:	46c0      	nop			; (mov r8, r8)
    }
    FT800_setColorRGB(color);
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff fd5f 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, BEGIN|c);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	22f8      	movs	r2, #248	; 0xf8
 800229e:	0552      	lsls	r2, r2, #21
 80022a0:	431a      	orrs	r2, r3
 80022a2:	2384      	movs	r3, #132	; 0x84
 80022a4:	035b      	lsls	r3, r3, #13
 80022a6:	0011      	movs	r1, r2
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff fa63 	bl	8001774 <FT800_Write32>
    for(i=0;i<num_of_points;i++) FT800_Vertex2F(x[i]<<4,y[i]<<4);
 80022ae:	2312      	movs	r3, #18
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2200      	movs	r2, #0
 80022b4:	801a      	strh	r2, [r3, #0]
 80022b6:	e01a      	b.n	80022ee <FT800_drawEdgeLineStrip+0xa6>
 80022b8:	2412      	movs	r4, #18
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	2200      	movs	r2, #0
 80022c6:	5e9b      	ldrsh	r3, [r3, r2]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b218      	sxth	r0, r3
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	2200      	movs	r2, #0
 80022d8:	5e9b      	ldrsh	r3, [r3, r2]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	b21b      	sxth	r3, r3
 80022de:	0019      	movs	r1, r3
 80022e0:	f7ff fd80 	bl	8001de4 <FT800_Vertex2F>
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	3201      	adds	r2, #1
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	2312      	movs	r3, #18
 80022f0:	18fa      	adds	r2, r7, r3
 80022f2:	1dbb      	adds	r3, r7, #6
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3dd      	bcc.n	80022b8 <FT800_drawEdgeLineStrip+0x70>
    FT800_Write32(RAM_CMD, END);
 80022fc:	2384      	movs	r3, #132	; 0x84
 80022fe:	059a      	lsls	r2, r3, #22
 8002300:	2384      	movs	r3, #132	; 0x84
 8002302:	035b      	lsls	r3, r3, #13
 8002304:	0011      	movs	r1, r2
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff fa34 	bl	8001774 <FT800_Write32>
}   
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b007      	add	sp, #28
 8002312:	bd90      	pop	{r4, r7, pc}

08002314 <FT800_drawChar>:
/* ************************************************************************************ */
// FT800 draw char at position (x,y), font [16-31], color, char
/* ************************************************************************************ */

void FT800_drawChar(uint16_t x, uint16_t y, uint8_t font, uint32_t color, char c)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	0004      	movs	r4, r0
 800231c:	0008      	movs	r0, r1
 800231e:	0011      	movs	r1, r2
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	230e      	movs	r3, #14
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	1c22      	adds	r2, r4, #0
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	230c      	movs	r3, #12
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	240b      	movs	r4, #11
 8002334:	193b      	adds	r3, r7, r4
 8002336:	1c0a      	adds	r2, r1, #0
 8002338:	701a      	strb	r2, [r3, #0]
    FT800_setColorRGB(color);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff fd0b 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, BEGIN|BITMAP); 
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <FT800_drawChar+0x94>)
 8002344:	2384      	movs	r3, #132	; 0x84
 8002346:	035b      	lsls	r3, r3, #13
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f7ff fa12 	bl	8001774 <FT800_Write32>
    if(font>31)font=31;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b1f      	cmp	r3, #31
 8002356:	d903      	bls.n	8002360 <FT800_drawChar+0x4c>
 8002358:	230b      	movs	r3, #11
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	221f      	movs	r2, #31
 800235e:	701a      	strb	r2, [r3, #0]
    if(font<16)font=16;
 8002360:	230b      	movs	r3, #11
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	d803      	bhi.n	8002372 <FT800_drawChar+0x5e>
 800236a:	230b      	movs	r3, #11
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2210      	movs	r2, #16
 8002370:	701a      	strb	r2, [r3, #0]
    FT800_Vertex2II(x, y, font, c);
 8002372:	2320      	movs	r3, #32
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	781c      	ldrb	r4, [r3, #0]
 8002378:	230b      	movs	r3, #11
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	230c      	movs	r3, #12
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	8819      	ldrh	r1, [r3, #0]
 8002384:	230e      	movs	r3, #14
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	8818      	ldrh	r0, [r3, #0]
 800238a:	0023      	movs	r3, r4
 800238c:	f7ff fd54 	bl	8001e38 <FT800_Vertex2II>
    FT800_Write32(RAM_CMD, END);
 8002390:	2384      	movs	r3, #132	; 0x84
 8002392:	059a      	lsls	r2, r3, #22
 8002394:	2384      	movs	r3, #132	; 0x84
 8002396:	035b      	lsls	r3, r3, #13
 8002398:	0011      	movs	r1, r2
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff f9ea 	bl	8001774 <FT800_Write32>
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b005      	add	sp, #20
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	1f000001 	.word	0x1f000001

080023ac <FT800_drawText>:
/* ************************************************************************************ */
// FT800 draw text at position (x,y), font [16-31], color, options [ie. OPT_RIGHTX], text s
/* ************************************************************************************ */

void FT800_drawText(int16_t x, int16_t y, uint8_t font, uint32_t color, uint16_t options, const char *s)   
{ 
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	0004      	movs	r4, r0
 80023b4:	0008      	movs	r0, r1
 80023b6:	0011      	movs	r1, r2
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	250e      	movs	r5, #14
 80023bc:	197b      	adds	r3, r7, r5
 80023be:	1c22      	adds	r2, r4, #0
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	240c      	movs	r4, #12
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	1c02      	adds	r2, r0, #0
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	260b      	movs	r6, #11
 80023cc:	19bb      	adds	r3, r7, r6
 80023ce:	1c0a      	adds	r2, r1, #0
 80023d0:	701a      	strb	r2, [r3, #0]
    FT800_setColorRGB(color);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff fcbf 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_TEXT);
 80023da:	23f4      	movs	r3, #244	; 0xf4
 80023dc:	425a      	negs	r2, r3
 80023de:	2384      	movs	r3, #132	; 0x84
 80023e0:	035b      	lsls	r3, r3, #13
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff f9c5 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 80023ea:	197b      	adds	r3, r7, r5
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	2384      	movs	r3, #132	; 0x84
 80023f0:	035b      	lsls	r3, r3, #13
 80023f2:	0011      	movs	r1, r2
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff f985 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	2384      	movs	r3, #132	; 0x84
 8002400:	035b      	lsls	r3, r3, #13
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff f97d 	bl	8001704 <FT800_Write16>
    if(font>31)font=31;
 800240a:	19bb      	adds	r3, r7, r6
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b1f      	cmp	r3, #31
 8002410:	d903      	bls.n	800241a <FT800_drawText+0x6e>
 8002412:	230b      	movs	r3, #11
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	221f      	movs	r2, #31
 8002418:	701a      	strb	r2, [r3, #0]
    if(font<16)font=16;
 800241a:	230b      	movs	r3, #11
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d803      	bhi.n	800242c <FT800_drawText+0x80>
 8002424:	230b      	movs	r3, #11
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2210      	movs	r2, #16
 800242a:	701a      	strb	r2, [r3, #0]
    FT800_Write16(RAM_CMD, font);
 800242c:	230b      	movs	r3, #11
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b29a      	uxth	r2, r3
 8002434:	2384      	movs	r3, #132	; 0x84
 8002436:	035b      	lsls	r3, r3, #13
 8002438:	0011      	movs	r1, r2
 800243a:	0018      	movs	r0, r3
 800243c:	f7ff f962 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8002440:	2320      	movs	r3, #32
 8002442:	2208      	movs	r2, #8
 8002444:	4694      	mov	ip, r2
 8002446:	44bc      	add	ip, r7
 8002448:	4463      	add	r3, ip
 800244a:	881a      	ldrh	r2, [r3, #0]
 800244c:	2384      	movs	r3, #132	; 0x84
 800244e:	035b      	lsls	r3, r3, #13
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff f956 	bl	8001704 <FT800_Write16>
    FT800_WriteString(s);
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff fd4e 	bl	8001efc <FT800_WriteString>
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b005      	add	sp, #20
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002468 <FT800_drawDecimalNumb>:
/************************************************************************************* */
// FT800 decimal number
/* ************************************************************************************ */

void FT800_drawDecimalNumb(int16_t x, int16_t y, uint8_t font, uint16_t options, uint32_t n, uint32_t color)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	0005      	movs	r5, r0
 8002470:	000c      	movs	r4, r1
 8002472:	0010      	movs	r0, r2
 8002474:	0019      	movs	r1, r3
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	1c2a      	adds	r2, r5, #0
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	1c22      	adds	r2, r4, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	1cfb      	adds	r3, r7, #3
 8002484:	1c02      	adds	r2, r0, #0
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	003b      	movs	r3, r7
 800248a:	1c0a      	adds	r2, r1, #0
 800248c:	801a      	strh	r2, [r3, #0]
    FT800_setColorRGB(color);
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff fc61 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_NUMBER);
 8002496:	23d2      	movs	r3, #210	; 0xd2
 8002498:	425a      	negs	r2, r3
 800249a:	2384      	movs	r3, #132	; 0x84
 800249c:	035b      	lsls	r3, r3, #13
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff f967 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	2384      	movs	r3, #132	; 0x84
 80024ac:	035b      	lsls	r3, r3, #13
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff f927 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	2384      	movs	r3, #132	; 0x84
 80024bc:	035b      	lsls	r3, r3, #13
 80024be:	0011      	movs	r1, r2
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff f91f 	bl	8001704 <FT800_Write16>
    if(font>31)font=31;
 80024c6:	1cfb      	adds	r3, r7, #3
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b1f      	cmp	r3, #31
 80024cc:	d902      	bls.n	80024d4 <FT800_drawDecimalNumb+0x6c>
 80024ce:	1cfb      	adds	r3, r7, #3
 80024d0:	221f      	movs	r2, #31
 80024d2:	701a      	strb	r2, [r3, #0]
    if(font<16)font=16;
 80024d4:	1cfb      	adds	r3, r7, #3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d802      	bhi.n	80024e2 <FT800_drawDecimalNumb+0x7a>
 80024dc:	1cfb      	adds	r3, r7, #3
 80024de:	2210      	movs	r2, #16
 80024e0:	701a      	strb	r2, [r3, #0]
    FT800_Write16(RAM_CMD, font);
 80024e2:	1cfb      	adds	r3, r7, #3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	2384      	movs	r3, #132	; 0x84
 80024ea:	035b      	lsls	r3, r3, #13
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff f908 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 80024f4:	003b      	movs	r3, r7
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	2384      	movs	r3, #132	; 0x84
 80024fa:	035b      	lsls	r3, r3, #13
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff f900 	bl	8001704 <FT800_Write16>
    FT800_Write32(RAM_CMD, n);
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	2384      	movs	r3, #132	; 0x84
 8002508:	035b      	lsls	r3, r3, #13
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff f931 	bl	8001774 <FT800_Write32>
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bdb0      	pop	{r4, r5, r7, pc}

0800251a <FT800_drawButton>:
/* ************************************************************************************ */
// FT800 draw button
/* ************************************************************************************ */

void FT800_drawButton(int16_t x, int16_t y, uint16_t w, uint16_t h, uint32_t colorBG, uint8_t font, uint16_t options, const char*s, uint32_t colorTXT, uint8_t tag)
{
 800251a:	b5b0      	push	{r4, r5, r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af02      	add	r7, sp, #8
 8002520:	0005      	movs	r5, r0
 8002522:	000c      	movs	r4, r1
 8002524:	0010      	movs	r0, r2
 8002526:	0019      	movs	r1, r3
 8002528:	1dbb      	adds	r3, r7, #6
 800252a:	1c2a      	adds	r2, r5, #0
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	1c22      	adds	r2, r4, #0
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	1cbb      	adds	r3, r7, #2
 8002536:	1c02      	adds	r2, r0, #0
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	003b      	movs	r3, r7
 800253c:	1c0a      	adds	r2, r1, #0
 800253e:	801a      	strh	r2, [r3, #0]
    if(tag)
 8002540:	232c      	movs	r3, #44	; 0x2c
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d013      	beq.n	8002572 <FT800_drawButton+0x58>
    {
        FT800_tagMask(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fd8b 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8002550:	003b      	movs	r3, r7
 8002552:	881c      	ldrh	r4, [r3, #0]
 8002554:	1cbb      	adds	r3, r7, #2
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2100      	movs	r1, #0
 800255c:	5e59      	ldrsh	r1, [r3, r1]
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	2000      	movs	r0, #0
 8002562:	5e18      	ldrsh	r0, [r3, r0]
 8002564:	232c      	movs	r3, #44	; 0x2c
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	0023      	movs	r3, r4
 800256e:	f000 fd26 	bl	8002fbe <FT800_track>
    }
    FT800_setFgColor(colorBG); //button color
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	0018      	movs	r0, r3
 8002576:	f7ff fc1c 	bl	8001db2 <FT800_setFgColor>
    FT800_setColorRGB(colorTXT); //text color
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff fbeb 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_BUTTON);
 8002582:	23f3      	movs	r3, #243	; 0xf3
 8002584:	425a      	negs	r2, r3
 8002586:	2384      	movs	r3, #132	; 0x84
 8002588:	035b      	lsls	r3, r3, #13
 800258a:	0011      	movs	r1, r2
 800258c:	0018      	movs	r0, r3
 800258e:	f7ff f8f1 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	2384      	movs	r3, #132	; 0x84
 8002598:	035b      	lsls	r3, r3, #13
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff f8b1 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	2384      	movs	r3, #132	; 0x84
 80025a8:	035b      	lsls	r3, r3, #13
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff f8a9 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 80025b2:	1cbb      	adds	r3, r7, #2
 80025b4:	881a      	ldrh	r2, [r3, #0]
 80025b6:	2384      	movs	r3, #132	; 0x84
 80025b8:	035b      	lsls	r3, r3, #13
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff f8a1 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 80025c2:	003b      	movs	r3, r7
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	2384      	movs	r3, #132	; 0x84
 80025c8:	035b      	lsls	r3, r3, #13
 80025ca:	0011      	movs	r1, r2
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7ff f899 	bl	8001704 <FT800_Write16>
    if(font>31)font=31;
 80025d2:	231c      	movs	r3, #28
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b1f      	cmp	r3, #31
 80025da:	d903      	bls.n	80025e4 <FT800_drawButton+0xca>
 80025dc:	231c      	movs	r3, #28
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	221f      	movs	r2, #31
 80025e2:	701a      	strb	r2, [r3, #0]
    if(font<16)font=16;
 80025e4:	231c      	movs	r3, #28
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	d803      	bhi.n	80025f6 <FT800_drawButton+0xdc>
 80025ee:	231c      	movs	r3, #28
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2210      	movs	r2, #16
 80025f4:	701a      	strb	r2, [r3, #0]
    FT800_Write16(RAM_CMD, font);
 80025f6:	231c      	movs	r3, #28
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	2384      	movs	r3, #132	; 0x84
 8002600:	035b      	lsls	r3, r3, #13
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff f87d 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 800260a:	2320      	movs	r3, #32
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	881a      	ldrh	r2, [r3, #0]
 8002610:	2384      	movs	r3, #132	; 0x84
 8002612:	035b      	lsls	r3, r3, #13
 8002614:	0011      	movs	r1, r2
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff f874 	bl	8001704 <FT800_Write16>
    FT800_WriteString(s);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	0018      	movs	r0, r3
 8002620:	f7ff fc6c 	bl	8001efc <FT800_WriteString>
    FT800_tagMask(0);
 8002624:	2000      	movs	r0, #0
 8002626:	f000 fd1e 	bl	8003066 <FT800_tagMask>
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bdb0      	pop	{r4, r5, r7, pc}

08002632 <FT800_drawClock>:
/* ************************************************************************************ */
// FT800 draw analog clock
/* ************************************************************************************ */

void FT800_drawClock(int16_t x, int16_t y, uint16_t r, uint32_t colorBG, uint16_t options, uint16_t h, uint16_t m, uint16_t s, uint16_t ms, uint32_t colorNeedle, uint8_t tag)
{
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b087      	sub	sp, #28
 8002636:	af02      	add	r7, sp, #8
 8002638:	0004      	movs	r4, r0
 800263a:	0008      	movs	r0, r1
 800263c:	0011      	movs	r1, r2
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	230e      	movs	r3, #14
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	1c22      	adds	r2, r4, #0
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	230c      	movs	r3, #12
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	1c02      	adds	r2, r0, #0
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	230a      	movs	r3, #10
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	1c0a      	adds	r2, r1, #0
 8002656:	801a      	strh	r2, [r3, #0]
    if(tag)
 8002658:	2338      	movs	r3, #56	; 0x38
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <FT800_drawClock+0x56>
    {
        FT800_tagMask(1);
 8002662:	2001      	movs	r0, #1
 8002664:	f000 fcff 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,1,1,tag);
 8002668:	230c      	movs	r3, #12
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2100      	movs	r1, #0
 800266e:	5e59      	ldrsh	r1, [r3, r1]
 8002670:	230e      	movs	r3, #14
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2000      	movs	r0, #0
 8002676:	5e18      	ldrsh	r0, [r3, r0]
 8002678:	2338      	movs	r3, #56	; 0x38
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	2201      	movs	r2, #1
 8002684:	f000 fc9b 	bl	8002fbe <FT800_track>
    }
    FT800_setBgColor(colorBG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fb78 	bl	8001d80 <FT800_setBgColor>
    FT800_setColorRGB(colorNeedle);
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff fb60 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_CLOCK);
 8002698:	23ec      	movs	r3, #236	; 0xec
 800269a:	425a      	negs	r2, r3
 800269c:	2384      	movs	r3, #132	; 0x84
 800269e:	035b      	lsls	r3, r3, #13
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff f866 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 80026a8:	230e      	movs	r3, #14
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	2384      	movs	r3, #132	; 0x84
 80026b0:	035b      	lsls	r3, r3, #13
 80026b2:	0011      	movs	r1, r2
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff f825 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 80026ba:	230c      	movs	r3, #12
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	2384      	movs	r3, #132	; 0x84
 80026c2:	035b      	lsls	r3, r3, #13
 80026c4:	0011      	movs	r1, r2
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff f81c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, r);
 80026cc:	230a      	movs	r3, #10
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	2384      	movs	r3, #132	; 0x84
 80026d4:	035b      	lsls	r3, r3, #13
 80026d6:	0011      	movs	r1, r2
 80026d8:	0018      	movs	r0, r3
 80026da:	f7ff f813 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 80026de:	2320      	movs	r3, #32
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	2384      	movs	r3, #132	; 0x84
 80026e6:	035b      	lsls	r3, r3, #13
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff f80a 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 80026f0:	2324      	movs	r3, #36	; 0x24
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	2384      	movs	r3, #132	; 0x84
 80026f8:	035b      	lsls	r3, r3, #13
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff f801 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, m);
 8002702:	2328      	movs	r3, #40	; 0x28
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	2384      	movs	r3, #132	; 0x84
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f7fe fff8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, s);
 8002714:	232c      	movs	r3, #44	; 0x2c
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	2384      	movs	r3, #132	; 0x84
 800271c:	035b      	lsls	r3, r3, #13
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f7fe ffef 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, ms);
 8002726:	2330      	movs	r3, #48	; 0x30
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	881a      	ldrh	r2, [r3, #0]
 800272c:	2384      	movs	r3, #132	; 0x84
 800272e:	035b      	lsls	r3, r3, #13
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f7fe ffe6 	bl	8001704 <FT800_Write16>
    FT800_tagMask(0);
 8002738:	2000      	movs	r0, #0
 800273a:	f000 fc94 	bl	8003066 <FT800_tagMask>
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b005      	add	sp, #20
 8002744:	bd90      	pop	{r4, r7, pc}

08002746 <FT800_drawGradient>:
/* ************************************************************************************ */
// FT800 draw gradient from color0 to color1 (use in combination with scissors)
/* ************************************************************************************ */

void FT800_drawGradient(int16_t x0, int16_t y0, uint32_t color0, int16_t x1, int16_t y1, uint32_t color1)
{
 8002746:	b5b0      	push	{r4, r5, r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	0004      	movs	r4, r0
 800274e:	0008      	movs	r0, r1
 8002750:	60ba      	str	r2, [r7, #8]
 8002752:	0019      	movs	r1, r3
 8002754:	250e      	movs	r5, #14
 8002756:	197b      	adds	r3, r7, r5
 8002758:	1c22      	adds	r2, r4, #0
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	240c      	movs	r4, #12
 800275e:	193b      	adds	r3, r7, r4
 8002760:	1c02      	adds	r2, r0, #0
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	1dbb      	adds	r3, r7, #6
 8002766:	1c0a      	adds	r2, r1, #0
 8002768:	801a      	strh	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_GRADIENT);
 800276a:	23f5      	movs	r3, #245	; 0xf5
 800276c:	425a      	negs	r2, r3
 800276e:	2384      	movs	r3, #132	; 0x84
 8002770:	035b      	lsls	r3, r3, #13
 8002772:	0011      	movs	r1, r2
 8002774:	0018      	movs	r0, r3
 8002776:	f7fe fffd 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x0);
 800277a:	197b      	adds	r3, r7, r5
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	2384      	movs	r3, #132	; 0x84
 8002780:	035b      	lsls	r3, r3, #13
 8002782:	0011      	movs	r1, r2
 8002784:	0018      	movs	r0, r3
 8002786:	f7fe ffbd 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y0);
 800278a:	193b      	adds	r3, r7, r4
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	2384      	movs	r3, #132	; 0x84
 8002790:	035b      	lsls	r3, r3, #13
 8002792:	0011      	movs	r1, r2
 8002794:	0018      	movs	r0, r3
 8002796:	f7fe ffb5 	bl	8001704 <FT800_Write16>
    FT800_setColorRGB(color0);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fadb 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write16(RAM_CMD, x1);
 80027a2:	1dbb      	adds	r3, r7, #6
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	2384      	movs	r3, #132	; 0x84
 80027a8:	035b      	lsls	r3, r3, #13
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7fe ffa9 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y1);
 80027b2:	2320      	movs	r3, #32
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	2384      	movs	r3, #132	; 0x84
 80027ba:	035b      	lsls	r3, r3, #13
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f7fe ffa0 	bl	8001704 <FT800_Write16>
    FT800_setColorRGB(color1);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff fac6 	bl	8001d58 <FT800_setColorRGB>
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b004      	add	sp, #16
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}

080027d4 <FT800_drawScissorXY>:
/* ************************************************************************************ */
// FT800 scissor start point
/* ************************************************************************************ */

void FT800_drawScissorXY(int16_t x, int16_t y)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	0002      	movs	r2, r0
 80027dc:	1dbb      	adds	r3, r7, #6
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	1c0a      	adds	r2, r1, #0
 80027e4:	801a      	strh	r2, [r3, #0]
    uint32_t scissorXY = 0x1B000000;
 80027e6:	23d8      	movs	r3, #216	; 0xd8
 80027e8:	055b      	lsls	r3, r3, #21
 80027ea:	60fb      	str	r3, [r7, #12]
    
    scissorXY |= (x&0x01FF)<<9;
 80027ec:	1dbb      	adds	r3, r7, #6
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	025b      	lsls	r3, r3, #9
 80027f2:	001a      	movs	r2, r3
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <FT800_drawScissorXY+0x50>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    scissorXY |= (y&0x01FF); 
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	0ddb      	lsrs	r3, r3, #23
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    FT800_Write32(RAM_CMD, scissorXY);
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	2384      	movs	r3, #132	; 0x84
 8002810:	035b      	lsls	r3, r3, #13
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f7fe ffad 	bl	8001774 <FT800_Write32>
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	0003fe00 	.word	0x0003fe00

08002828 <FT800_drawScissorSize>:
/************************************************************************************* */
// FT800 scissor width and height
/* ************************************************************************************ */

void FT800_drawScissorSize(uint16_t w, uint16_t h)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	0002      	movs	r2, r0
 8002830:	1dbb      	adds	r3, r7, #6
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	1c0a      	adds	r2, r1, #0
 8002838:	801a      	strh	r2, [r3, #0]
    uint32_t scissorSize = 0x1C000000;
 800283a:	23e0      	movs	r3, #224	; 0xe0
 800283c:	055b      	lsls	r3, r3, #21
 800283e:	60fb      	str	r3, [r7, #12]
    
    scissorSize |= (w&0x03FF)<<10;
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	001a      	movs	r2, r3
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <FT800_drawScissorSize+0x50>)
 800284a:	4013      	ands	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    scissorSize |= (h&0x03FF); 
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	059b      	lsls	r3, r3, #22
 8002858:	0d9b      	lsrs	r3, r3, #22
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

    FT800_Write32(RAM_CMD, scissorSize);
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	2384      	movs	r3, #132	; 0x84
 8002864:	035b      	lsls	r3, r3, #13
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe ff83 	bl	8001774 <FT800_Write32>
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	000ffc00 	.word	0x000ffc00

0800287c <FT800_drawKeys>:
/************************************************************************************* */
// FT800 keys - number of keys=number of letters in string s
/* ************************************************************************************ */

void FT800_drawKeys(int16_t x, int16_t y, uint16_t w, uint16_t h, uint32_t colorBG, uint8_t font, uint16_t options, const char*s, uint32_t colorTXT, uint8_t tag)
{
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af02      	add	r7, sp, #8
 8002882:	0005      	movs	r5, r0
 8002884:	000c      	movs	r4, r1
 8002886:	0010      	movs	r0, r2
 8002888:	0019      	movs	r1, r3
 800288a:	1dbb      	adds	r3, r7, #6
 800288c:	1c2a      	adds	r2, r5, #0
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	1c22      	adds	r2, r4, #0
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	1cbb      	adds	r3, r7, #2
 8002898:	1c02      	adds	r2, r0, #0
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	003b      	movs	r3, r7
 800289e:	1c0a      	adds	r2, r1, #0
 80028a0:	801a      	strh	r2, [r3, #0]
    if(tag)
 80028a2:	232c      	movs	r3, #44	; 0x2c
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <FT800_drawKeys+0x58>
    {
        FT800_tagMask(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f000 fbda 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 80028b2:	003b      	movs	r3, r7
 80028b4:	881c      	ldrh	r4, [r3, #0]
 80028b6:	1cbb      	adds	r3, r7, #2
 80028b8:	881a      	ldrh	r2, [r3, #0]
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2100      	movs	r1, #0
 80028be:	5e59      	ldrsh	r1, [r3, r1]
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	2000      	movs	r0, #0
 80028c4:	5e18      	ldrsh	r0, [r3, r0]
 80028c6:	232c      	movs	r3, #44	; 0x2c
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	0023      	movs	r3, r4
 80028d0:	f000 fb75 	bl	8002fbe <FT800_track>
    }
    FT800_setFgColor(colorBG);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff fa6b 	bl	8001db2 <FT800_setFgColor>
    FT800_setColorRGB(colorTXT);
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff fa3a 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_KEYS);
 80028e4:	23f2      	movs	r3, #242	; 0xf2
 80028e6:	425a      	negs	r2, r3
 80028e8:	2384      	movs	r3, #132	; 0x84
 80028ea:	035b      	lsls	r3, r3, #13
 80028ec:	0011      	movs	r1, r2
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7fe ff40 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 80028f4:	1dbb      	adds	r3, r7, #6
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	2384      	movs	r3, #132	; 0x84
 80028fa:	035b      	lsls	r3, r3, #13
 80028fc:	0011      	movs	r1, r2
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fe ff00 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	2384      	movs	r3, #132	; 0x84
 800290a:	035b      	lsls	r3, r3, #13
 800290c:	0011      	movs	r1, r2
 800290e:	0018      	movs	r0, r3
 8002910:	f7fe fef8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8002914:	1cbb      	adds	r3, r7, #2
 8002916:	881a      	ldrh	r2, [r3, #0]
 8002918:	2384      	movs	r3, #132	; 0x84
 800291a:	035b      	lsls	r3, r3, #13
 800291c:	0011      	movs	r1, r2
 800291e:	0018      	movs	r0, r3
 8002920:	f7fe fef0 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8002924:	003b      	movs	r3, r7
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	2384      	movs	r3, #132	; 0x84
 800292a:	035b      	lsls	r3, r3, #13
 800292c:	0011      	movs	r1, r2
 800292e:	0018      	movs	r0, r3
 8002930:	f7fe fee8 	bl	8001704 <FT800_Write16>
    if(font>31)font=31;
 8002934:	231c      	movs	r3, #28
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b1f      	cmp	r3, #31
 800293c:	d903      	bls.n	8002946 <FT800_drawKeys+0xca>
 800293e:	231c      	movs	r3, #28
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	221f      	movs	r2, #31
 8002944:	701a      	strb	r2, [r3, #0]
    if(font<16)font=16;
 8002946:	231c      	movs	r3, #28
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b0f      	cmp	r3, #15
 800294e:	d803      	bhi.n	8002958 <FT800_drawKeys+0xdc>
 8002950:	231c      	movs	r3, #28
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2210      	movs	r2, #16
 8002956:	701a      	strb	r2, [r3, #0]
    FT800_Write16(RAM_CMD, font);
 8002958:	231c      	movs	r3, #28
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b29a      	uxth	r2, r3
 8002960:	2384      	movs	r3, #132	; 0x84
 8002962:	035b      	lsls	r3, r3, #13
 8002964:	0011      	movs	r1, r2
 8002966:	0018      	movs	r0, r3
 8002968:	f7fe fecc 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 800296c:	2320      	movs	r3, #32
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	2384      	movs	r3, #132	; 0x84
 8002974:	035b      	lsls	r3, r3, #13
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f7fe fec3 	bl	8001704 <FT800_Write16>
    FT800_WriteString(s);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff fabb 	bl	8001efc <FT800_WriteString>
    FT800_tagMask(0);
 8002986:	2000      	movs	r0, #0
 8002988:	f000 fb6d 	bl	8003066 <FT800_tagMask>
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bdb0      	pop	{r4, r5, r7, pc}

08002994 <FT800_drawScrollBar>:
/************************************************************************************* */
// FT800 scroll bar - if w>h: horizontal else: vertical 
/* ************************************************************************************ */

void FT800_drawScrollBar(int16_t x, int16_t y, uint16_t w, uint16_t h, uint32_t colorBG, uint32_t colorSCR, uint16_t options, uint16_t value, uint16_t size, uint16_t range, uint8_t tag)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af02      	add	r7, sp, #8
 800299a:	0005      	movs	r5, r0
 800299c:	000c      	movs	r4, r1
 800299e:	0010      	movs	r0, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	1dbb      	adds	r3, r7, #6
 80029a4:	1c2a      	adds	r2, r5, #0
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	1c22      	adds	r2, r4, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	1cbb      	adds	r3, r7, #2
 80029b0:	1c02      	adds	r2, r0, #0
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	003b      	movs	r3, r7
 80029b6:	1c0a      	adds	r2, r1, #0
 80029b8:	801a      	strh	r2, [r3, #0]
    if(tag)
 80029ba:	2330      	movs	r3, #48	; 0x30
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <FT800_drawScrollBar+0x58>
    {
        FT800_tagMask(1);
 80029c4:	2001      	movs	r0, #1
 80029c6:	f000 fb4e 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 80029ca:	003b      	movs	r3, r7
 80029cc:	881c      	ldrh	r4, [r3, #0]
 80029ce:	1cbb      	adds	r3, r7, #2
 80029d0:	881a      	ldrh	r2, [r3, #0]
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2100      	movs	r1, #0
 80029d6:	5e59      	ldrsh	r1, [r3, r1]
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	2000      	movs	r0, #0
 80029dc:	5e18      	ldrsh	r0, [r3, r0]
 80029de:	2330      	movs	r3, #48	; 0x30
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	0023      	movs	r3, r4
 80029e8:	f000 fae9 	bl	8002fbe <FT800_track>
    }
    FT800_setFgColor(colorBG);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f7ff f9df 	bl	8001db2 <FT800_setFgColor>
    FT800_setBgColor(colorSCR);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7ff f9c2 	bl	8001d80 <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_SCROLLBAR);
 80029fc:	23ef      	movs	r3, #239	; 0xef
 80029fe:	425a      	negs	r2, r3
 8002a00:	2384      	movs	r3, #132	; 0x84
 8002a02:	035b      	lsls	r3, r3, #13
 8002a04:	0011      	movs	r1, r2
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7fe feb4 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002a0c:	1dbb      	adds	r3, r7, #6
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	2384      	movs	r3, #132	; 0x84
 8002a12:	035b      	lsls	r3, r3, #13
 8002a14:	0011      	movs	r1, r2
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7fe fe74 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	2384      	movs	r3, #132	; 0x84
 8002a22:	035b      	lsls	r3, r3, #13
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7fe fe6c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8002a2c:	1cbb      	adds	r3, r7, #2
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	2384      	movs	r3, #132	; 0x84
 8002a32:	035b      	lsls	r3, r3, #13
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7fe fe64 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8002a3c:	003b      	movs	r3, r7
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	2384      	movs	r3, #132	; 0x84
 8002a42:	035b      	lsls	r3, r3, #13
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7fe fe5c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	2384      	movs	r3, #132	; 0x84
 8002a54:	035b      	lsls	r3, r3, #13
 8002a56:	0011      	movs	r1, r2
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fe fe53 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8002a5e:	2324      	movs	r3, #36	; 0x24
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	2384      	movs	r3, #132	; 0x84
 8002a66:	035b      	lsls	r3, r3, #13
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fe fe4a 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, size);
 8002a70:	2328      	movs	r3, #40	; 0x28
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	2384      	movs	r3, #132	; 0x84
 8002a78:	035b      	lsls	r3, r3, #13
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7fe fe41 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8002a82:	232c      	movs	r3, #44	; 0x2c
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	2384      	movs	r3, #132	; 0x84
 8002a8a:	035b      	lsls	r3, r3, #13
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fe fe38 	bl	8001704 <FT800_Write16>
    FT800_tagMask(0);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f000 fae6 	bl	8003066 <FT800_tagMask>
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bdb0      	pop	{r4, r5, r7, pc}

08002aa2 <FT800_drawToggle>:
/************************************************************************************* */
// FT800 toggle button
/* ************************************************************************************ */

void FT800_drawToggle(int16_t x, int16_t y, uint16_t w, uint8_t font, uint16_t options, uint16_t state, const char *s, uint32_t colorKnob, uint32_t colorBCG, uint32_t colorTXT, uint8_t tag)
{
 8002aa2:	b5b0      	push	{r4, r5, r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	0005      	movs	r5, r0
 8002aaa:	000c      	movs	r4, r1
 8002aac:	0010      	movs	r0, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	1dbb      	adds	r3, r7, #6
 8002ab2:	1c2a      	adds	r2, r5, #0
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	1c22      	adds	r2, r4, #0
 8002aba:	801a      	strh	r2, [r3, #0]
 8002abc:	1cbb      	adds	r3, r7, #2
 8002abe:	1c02      	adds	r2, r0, #0
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	1c7b      	adds	r3, r7, #1
 8002ac4:	1c0a      	adds	r2, r1, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    if(tag)
 8002ac8:	2330      	movs	r3, #48	; 0x30
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d014      	beq.n	8002afc <FT800_drawToggle+0x5a>
    {
        FT800_tagMask(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f000 fac7 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,w,font,tag);
 8002ad8:	1c7b      	adds	r3, r7, #1
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b29c      	uxth	r4, r3
 8002ade:	1cbb      	adds	r3, r7, #2
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	5e59      	ldrsh	r1, [r3, r1]
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	2000      	movs	r0, #0
 8002aec:	5e18      	ldrsh	r0, [r3, r0]
 8002aee:	2330      	movs	r3, #48	; 0x30
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	0023      	movs	r3, r4
 8002af8:	f000 fa61 	bl	8002fbe <FT800_track>
    }    
    FT800_setFgColor(colorKnob);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff f957 	bl	8001db2 <FT800_setFgColor>
    FT800_setBgColor(colorBCG);
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff f93a 	bl	8001d80 <FT800_setBgColor>
    FT800_setColorRGB(colorTXT);
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff f922 	bl	8001d58 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_TOGGLE);
 8002b14:	23ee      	movs	r3, #238	; 0xee
 8002b16:	425a      	negs	r2, r3
 8002b18:	2384      	movs	r3, #132	; 0x84
 8002b1a:	035b      	lsls	r3, r3, #13
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fe fe28 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002b24:	1dbb      	adds	r3, r7, #6
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	2384      	movs	r3, #132	; 0x84
 8002b2a:	035b      	lsls	r3, r3, #13
 8002b2c:	0011      	movs	r1, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fe fde8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	881a      	ldrh	r2, [r3, #0]
 8002b38:	2384      	movs	r3, #132	; 0x84
 8002b3a:	035b      	lsls	r3, r3, #13
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7fe fde0 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8002b44:	1cbb      	adds	r3, r7, #2
 8002b46:	881a      	ldrh	r2, [r3, #0]
 8002b48:	2384      	movs	r3, #132	; 0x84
 8002b4a:	035b      	lsls	r3, r3, #13
 8002b4c:	0011      	movs	r1, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7fe fdd8 	bl	8001704 <FT800_Write16>
    if(font>31)font=31;
 8002b54:	1c7b      	adds	r3, r7, #1
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b1f      	cmp	r3, #31
 8002b5a:	d902      	bls.n	8002b62 <FT800_drawToggle+0xc0>
 8002b5c:	1c7b      	adds	r3, r7, #1
 8002b5e:	221f      	movs	r2, #31
 8002b60:	701a      	strb	r2, [r3, #0]
    if(font<16)font=16;
 8002b62:	1c7b      	adds	r3, r7, #1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	d802      	bhi.n	8002b70 <FT800_drawToggle+0xce>
 8002b6a:	1c7b      	adds	r3, r7, #1
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	701a      	strb	r2, [r3, #0]
    FT800_Write16(RAM_CMD, font);
 8002b70:	1c7b      	adds	r3, r7, #1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	2384      	movs	r3, #132	; 0x84
 8002b78:	035b      	lsls	r3, r3, #13
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe fdc1 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8002b82:	2318      	movs	r3, #24
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	2384      	movs	r3, #132	; 0x84
 8002b8a:	035b      	lsls	r3, r3, #13
 8002b8c:	0011      	movs	r1, r2
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fe fdb8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, state);
 8002b94:	231c      	movs	r3, #28
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	2384      	movs	r3, #132	; 0x84
 8002b9c:	035b      	lsls	r3, r3, #13
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fe fdaf 	bl	8001704 <FT800_Write16>
    FT800_WriteString(s);
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff f9a7 	bl	8001efc <FT800_WriteString>
    FT800_tagMask(0);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 fa59 	bl	8003066 <FT800_tagMask>
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bdb0      	pop	{r4, r5, r7, pc}

08002bbc <FT800_drawSlider>:
/************************************************************************************* */
// FT800 slider - if w>h: horizontal else: vertical 
/* ************************************************************************************ */

void FT800_drawSlider(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t options, uint16_t value, uint16_t range, uint32_t colorR, uint32_t colorKnob, uint32_t colorL, uint8_t tag)
{
 8002bbc:	b5b0      	push	{r4, r5, r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	0005      	movs	r5, r0
 8002bc4:	000c      	movs	r4, r1
 8002bc6:	0010      	movs	r0, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	1c2a      	adds	r2, r5, #0
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	1c22      	adds	r2, r4, #0
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	1cbb      	adds	r3, r7, #2
 8002bd8:	1c02      	adds	r2, r0, #0
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	003b      	movs	r3, r7
 8002bde:	1c0a      	adds	r2, r1, #0
 8002be0:	801a      	strh	r2, [r3, #0]
    if(tag)
 8002be2:	2330      	movs	r3, #48	; 0x30
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <FT800_drawSlider+0x58>
    {
        FT800_tagMask(1);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f000 fa3a 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8002bf2:	003b      	movs	r3, r7
 8002bf4:	881c      	ldrh	r4, [r3, #0]
 8002bf6:	1cbb      	adds	r3, r7, #2
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5e59      	ldrsh	r1, [r3, r1]
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	2000      	movs	r0, #0
 8002c04:	5e18      	ldrsh	r0, [r3, r0]
 8002c06:	2330      	movs	r3, #48	; 0x30
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	0023      	movs	r3, r4
 8002c10:	f000 f9d5 	bl	8002fbe <FT800_track>
    }
    FT800_setFgColor(colorKnob);
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff f8cb 	bl	8001db2 <FT800_setFgColor>
    FT800_setColorRGB(colorR);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff f89a 	bl	8001d58 <FT800_setColorRGB>
    FT800_setBgColor(colorL);
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff f8aa 	bl	8001d80 <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_SLIDER);
 8002c2c:	23f0      	movs	r3, #240	; 0xf0
 8002c2e:	425a      	negs	r2, r3
 8002c30:	2384      	movs	r3, #132	; 0x84
 8002c32:	035b      	lsls	r3, r3, #13
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7fe fd9c 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	2384      	movs	r3, #132	; 0x84
 8002c42:	035b      	lsls	r3, r3, #13
 8002c44:	0011      	movs	r1, r2
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7fe fd5c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	2384      	movs	r3, #132	; 0x84
 8002c52:	035b      	lsls	r3, r3, #13
 8002c54:	0011      	movs	r1, r2
 8002c56:	0018      	movs	r0, r3
 8002c58:	f7fe fd54 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8002c5c:	1cbb      	adds	r3, r7, #2
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	2384      	movs	r3, #132	; 0x84
 8002c62:	035b      	lsls	r3, r3, #13
 8002c64:	0011      	movs	r1, r2
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fe fd4c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8002c6c:	003b      	movs	r3, r7
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	2384      	movs	r3, #132	; 0x84
 8002c72:	035b      	lsls	r3, r3, #13
 8002c74:	0011      	movs	r1, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7fe fd44 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8002c7c:	2318      	movs	r3, #24
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	2384      	movs	r3, #132	; 0x84
 8002c84:	035b      	lsls	r3, r3, #13
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe fd3b 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8002c8e:	231c      	movs	r3, #28
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	2384      	movs	r3, #132	; 0x84
 8002c96:	035b      	lsls	r3, r3, #13
 8002c98:	0011      	movs	r1, r2
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7fe fd32 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	2384      	movs	r3, #132	; 0x84
 8002ca8:	035b      	lsls	r3, r3, #13
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fe fd29 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0);
 8002cb2:	2384      	movs	r3, #132	; 0x84
 8002cb4:	035b      	lsls	r3, r3, #13
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7fe fd23 	bl	8001704 <FT800_Write16>
    FT800_tagMask(0);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f000 f9d1 	bl	8003066 <FT800_tagMask>
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bdb0      	pop	{r4, r5, r7, pc}

08002ccc <FT800_drawProgressBar>:
/************************************************************************************* */
// FT800 progress bar - if w>h: horizontal else: vertical 
/* ************************************************************************************ */

void FT800_drawProgressBar(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t options, uint16_t value, uint16_t range, uint32_t colorBCG, uint32_t colorPRO, uint8_t tag)
{
 8002ccc:	b5b0      	push	{r4, r5, r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	0005      	movs	r5, r0
 8002cd4:	000c      	movs	r4, r1
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	1dbb      	adds	r3, r7, #6
 8002cdc:	1c2a      	adds	r2, r5, #0
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	1c22      	adds	r2, r4, #0
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	1cbb      	adds	r3, r7, #2
 8002ce8:	1c02      	adds	r2, r0, #0
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	003b      	movs	r3, r7
 8002cee:	1c0a      	adds	r2, r1, #0
 8002cf0:	801a      	strh	r2, [r3, #0]
    if(tag)
 8002cf2:	232c      	movs	r3, #44	; 0x2c
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <FT800_drawProgressBar+0x58>
    {
        FT800_tagMask(1);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f000 f9b2 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8002d02:	003b      	movs	r3, r7
 8002d04:	881c      	ldrh	r4, [r3, #0]
 8002d06:	1cbb      	adds	r3, r7, #2
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5e59      	ldrsh	r1, [r3, r1]
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	2000      	movs	r0, #0
 8002d14:	5e18      	ldrsh	r0, [r3, r0]
 8002d16:	232c      	movs	r3, #44	; 0x2c
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	0023      	movs	r3, r4
 8002d20:	f000 f94d 	bl	8002fbe <FT800_track>
    }
    FT800_setColorRGB(colorBCG);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff f816 	bl	8001d58 <FT800_setColorRGB>
    FT800_setBgColor(colorPRO);
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff f826 	bl	8001d80 <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_PROGRESS);
 8002d34:	23f1      	movs	r3, #241	; 0xf1
 8002d36:	425a      	negs	r2, r3
 8002d38:	2384      	movs	r3, #132	; 0x84
 8002d3a:	035b      	lsls	r3, r3, #13
 8002d3c:	0011      	movs	r1, r2
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f7fe fd18 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002d44:	1dbb      	adds	r3, r7, #6
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	2384      	movs	r3, #132	; 0x84
 8002d4a:	035b      	lsls	r3, r3, #13
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7fe fcd8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	881a      	ldrh	r2, [r3, #0]
 8002d58:	2384      	movs	r3, #132	; 0x84
 8002d5a:	035b      	lsls	r3, r3, #13
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7fe fcd0 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8002d64:	1cbb      	adds	r3, r7, #2
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	2384      	movs	r3, #132	; 0x84
 8002d6a:	035b      	lsls	r3, r3, #13
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f7fe fcc8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8002d74:	003b      	movs	r3, r7
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	2384      	movs	r3, #132	; 0x84
 8002d7a:	035b      	lsls	r3, r3, #13
 8002d7c:	0011      	movs	r1, r2
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7fe fcc0 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8002d84:	2318      	movs	r3, #24
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	881a      	ldrh	r2, [r3, #0]
 8002d8a:	2384      	movs	r3, #132	; 0x84
 8002d8c:	035b      	lsls	r3, r3, #13
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7fe fcb7 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8002d96:	231c      	movs	r3, #28
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	2384      	movs	r3, #132	; 0x84
 8002d9e:	035b      	lsls	r3, r3, #13
 8002da0:	0011      	movs	r1, r2
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fe fcae 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8002da8:	2320      	movs	r3, #32
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	2384      	movs	r3, #132	; 0x84
 8002db0:	035b      	lsls	r3, r3, #13
 8002db2:	0011      	movs	r1, r2
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe fca5 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0); // align to 32
 8002dba:	2384      	movs	r3, #132	; 0x84
 8002dbc:	035b      	lsls	r3, r3, #13
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7fe fc9f 	bl	8001704 <FT800_Write16>
    FT800_tagMask(0);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f000 f94d 	bl	8003066 <FT800_tagMask>
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bdb0      	pop	{r4, r5, r7, pc}

08002dd4 <FT800_drawDial>:
/************************************************************************************* */
// FT800 draw dial potentiometer
/* ************************************************************************************ */

void FT800_drawDial(int16_t x, int16_t y, uint16_t r, uint16_t options, uint16_t value, uint32_t colorMarker, uint32_t colorKnob, uint8_t tag)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	0005      	movs	r5, r0
 8002ddc:	000c      	movs	r4, r1
 8002dde:	0010      	movs	r0, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	1c2a      	adds	r2, r5, #0
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	1c22      	adds	r2, r4, #0
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	1cbb      	adds	r3, r7, #2
 8002df0:	1c02      	adds	r2, r0, #0
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	003b      	movs	r3, r7
 8002df6:	1c0a      	adds	r2, r1, #0
 8002df8:	801a      	strh	r2, [r3, #0]
    if(tag)
 8002dfa:	2324      	movs	r3, #36	; 0x24
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <FT800_drawDial+0x52>
    {
        FT800_tagMask(1);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f000 f92e 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,1,1,tag);//rotary tracker
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	5e59      	ldrsh	r1, [r3, r1]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	2000      	movs	r0, #0
 8002e14:	5e18      	ldrsh	r0, [r3, r0]
 8002e16:	2324      	movs	r3, #36	; 0x24
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2201      	movs	r2, #1
 8002e22:	f000 f8cc 	bl	8002fbe <FT800_track>
    }
    FT800_setColorRGB(colorKnob);
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fe ff95 	bl	8001d58 <FT800_setColorRGB>
    FT800_setFgColor(colorMarker);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fe ffbe 	bl	8001db2 <FT800_setFgColor>
    FT800_Write32(RAM_CMD, CMD_DIAL);
 8002e36:	23d3      	movs	r3, #211	; 0xd3
 8002e38:	425a      	negs	r2, r3
 8002e3a:	2384      	movs	r3, #132	; 0x84
 8002e3c:	035b      	lsls	r3, r3, #13
 8002e3e:	0011      	movs	r1, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fe fc97 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002e46:	1dbb      	adds	r3, r7, #6
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	2384      	movs	r3, #132	; 0x84
 8002e4c:	035b      	lsls	r3, r3, #13
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fe fc57 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	2384      	movs	r3, #132	; 0x84
 8002e5c:	035b      	lsls	r3, r3, #13
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7fe fc4f 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, r);
 8002e66:	1cbb      	adds	r3, r7, #2
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	2384      	movs	r3, #132	; 0x84
 8002e6c:	035b      	lsls	r3, r3, #13
 8002e6e:	0011      	movs	r1, r2
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7fe fc47 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);    
 8002e76:	003b      	movs	r3, r7
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	2384      	movs	r3, #132	; 0x84
 8002e7c:	035b      	lsls	r3, r3, #13
 8002e7e:	0011      	movs	r1, r2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fe fc3f 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8002e86:	2318      	movs	r3, #24
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	2384      	movs	r3, #132	; 0x84
 8002e8e:	035b      	lsls	r3, r3, #13
 8002e90:	0011      	movs	r1, r2
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7fe fc36 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0); // align to 32
 8002e98:	2384      	movs	r3, #132	; 0x84
 8002e9a:	035b      	lsls	r3, r3, #13
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7fe fc30 	bl	8001704 <FT800_Write16>
    FT800_tagMask(0);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f000 f8de 	bl	8003066 <FT800_tagMask>
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b002      	add	sp, #8
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}

08002eb2 <FT800_drawGauge>:
/************************************************************************************* */
// FT800 draw gauge indicator
/* ************************************************************************************ */

void FT800_drawGauge(int16_t x, int16_t y, uint16_t r, uint16_t options, uint8_t major, uint8_t minor, uint16_t value, uint16_t range, uint32_t colorBCG, uint32_t colorNeedle, uint8_t tag)
{
 8002eb2:	b5b0      	push	{r4, r5, r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af02      	add	r7, sp, #8
 8002eb8:	0005      	movs	r5, r0
 8002eba:	000c      	movs	r4, r1
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	1dbb      	adds	r3, r7, #6
 8002ec2:	1c2a      	adds	r2, r5, #0
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	1c22      	adds	r2, r4, #0
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	1cbb      	adds	r3, r7, #2
 8002ece:	1c02      	adds	r2, r0, #0
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	003b      	movs	r3, r7
 8002ed4:	1c0a      	adds	r2, r1, #0
 8002ed6:	801a      	strh	r2, [r3, #0]
    if(tag)
 8002ed8:	2330      	movs	r3, #48	; 0x30
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <FT800_drawGauge+0x52>
    {
        FT800_tagMask(1);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f000 f8bf 	bl	8003066 <FT800_tagMask>
        FT800_track(x,y,1,1,tag);
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2100      	movs	r1, #0
 8002eec:	5e59      	ldrsh	r1, [r3, r1]
 8002eee:	1dbb      	adds	r3, r7, #6
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	5e18      	ldrsh	r0, [r3, r0]
 8002ef4:	2330      	movs	r3, #48	; 0x30
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2301      	movs	r3, #1
 8002efe:	2201      	movs	r2, #1
 8002f00:	f000 f85d 	bl	8002fbe <FT800_track>
    }
    FT800_setColorRGB(colorNeedle);
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe ff26 	bl	8001d58 <FT800_setColorRGB>
    FT800_setBgColor(colorBCG);
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fe ff36 	bl	8001d80 <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_GAUGE);
 8002f14:	23ed      	movs	r3, #237	; 0xed
 8002f16:	425a      	negs	r2, r3
 8002f18:	2384      	movs	r3, #132	; 0x84
 8002f1a:	035b      	lsls	r3, r3, #13
 8002f1c:	0011      	movs	r1, r2
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7fe fc28 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002f24:	1dbb      	adds	r3, r7, #6
 8002f26:	881a      	ldrh	r2, [r3, #0]
 8002f28:	2384      	movs	r3, #132	; 0x84
 8002f2a:	035b      	lsls	r3, r3, #13
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fe fbe8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	2384      	movs	r3, #132	; 0x84
 8002f3a:	035b      	lsls	r3, r3, #13
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fe fbe0 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, r);
 8002f44:	1cbb      	adds	r3, r7, #2
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	2384      	movs	r3, #132	; 0x84
 8002f4a:	035b      	lsls	r3, r3, #13
 8002f4c:	0011      	movs	r1, r2
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7fe fbd8 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8002f54:	003b      	movs	r3, r7
 8002f56:	881a      	ldrh	r2, [r3, #0]
 8002f58:	2384      	movs	r3, #132	; 0x84
 8002f5a:	035b      	lsls	r3, r3, #13
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7fe fbd0 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, major);
 8002f64:	2318      	movs	r3, #24
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	2384      	movs	r3, #132	; 0x84
 8002f6e:	035b      	lsls	r3, r3, #13
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fe fbc6 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, minor);
 8002f78:	231c      	movs	r3, #28
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	2384      	movs	r3, #132	; 0x84
 8002f82:	035b      	lsls	r3, r3, #13
 8002f84:	0011      	movs	r1, r2
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fe fbbc 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	2384      	movs	r3, #132	; 0x84
 8002f94:	035b      	lsls	r3, r3, #13
 8002f96:	0011      	movs	r1, r2
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7fe fbb3 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8002f9e:	2324      	movs	r3, #36	; 0x24
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	2384      	movs	r3, #132	; 0x84
 8002fa6:	035b      	lsls	r3, r3, #13
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7fe fbaa 	bl	8001704 <FT800_Write16>
    FT800_tagMask(0);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f000 f858 	bl	8003066 <FT800_tagMask>
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bdb0      	pop	{r4, r5, r7, pc}

08002fbe <FT800_track>:
// FT800 assign tag and track given area for touch 
// all object in the given area will have the same tag - to prevent use tag mask
/* ************************************************************************************ */

void FT800_track(int16_t x, int16_t y, uint16_t w, uint16_t h, uint8_t tag)
{
 8002fbe:	b5b0      	push	{r4, r5, r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	0005      	movs	r5, r0
 8002fc6:	000c      	movs	r4, r1
 8002fc8:	0010      	movs	r0, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	1dbb      	adds	r3, r7, #6
 8002fce:	1c2a      	adds	r2, r5, #0
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	1c22      	adds	r2, r4, #0
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	1cbb      	adds	r3, r7, #2
 8002fda:	1c02      	adds	r2, r0, #0
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	003b      	movs	r3, r7
 8002fe0:	1c0a      	adds	r2, r1, #0
 8002fe2:	801a      	strh	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_TRACK);
 8002fe4:	23d4      	movs	r3, #212	; 0xd4
 8002fe6:	425a      	negs	r2, r3
 8002fe8:	2384      	movs	r3, #132	; 0x84
 8002fea:	035b      	lsls	r3, r3, #13
 8002fec:	0011      	movs	r1, r2
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7fe fbc0 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002ff4:	1dbb      	adds	r3, r7, #6
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	2384      	movs	r3, #132	; 0x84
 8002ffa:	035b      	lsls	r3, r3, #13
 8002ffc:	0011      	movs	r1, r2
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fe fb80 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	2384      	movs	r3, #132	; 0x84
 800300a:	035b      	lsls	r3, r3, #13
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f7fe fb78 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8003014:	1cbb      	adds	r3, r7, #2
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	2384      	movs	r3, #132	; 0x84
 800301a:	035b      	lsls	r3, r3, #13
 800301c:	0011      	movs	r1, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f7fe fb70 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8003024:	003b      	movs	r3, r7
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	2384      	movs	r3, #132	; 0x84
 800302a:	035b      	lsls	r3, r3, #13
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f7fe fb68 	bl	8001704 <FT800_Write16>
    FT800_Write32(RAM_CMD, tag);
 8003034:	2418      	movs	r4, #24
 8003036:	193b      	adds	r3, r7, r4
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	2384      	movs	r3, #132	; 0x84
 800303c:	035b      	lsls	r3, r3, #13
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7fe fb97 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD,0x03000000|(tag&0xFF)); 
 8003046:	193b      	adds	r3, r7, r4
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	22c0      	movs	r2, #192	; 0xc0
 800304c:	0492      	lsls	r2, r2, #18
 800304e:	4313      	orrs	r3, r2
 8003050:	001a      	movs	r2, r3
 8003052:	2384      	movs	r3, #132	; 0x84
 8003054:	035b      	lsls	r3, r3, #13
 8003056:	0011      	movs	r1, r2
 8003058:	0018      	movs	r0, r3
 800305a:	f7fe fb8b 	bl	8001774 <FT800_Write32>
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bdb0      	pop	{r4, r5, r7, pc}

08003066 <FT800_tagMask>:
/************************************************************************************* */
// FT800 tag mask - disable(0) or enable(1) object tag
/* ************************************************************************************ */

void FT800_tagMask(uint8_t mask)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	0002      	movs	r2, r0
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	701a      	strb	r2, [r3, #0]
    FT800_Write32(RAM_CMD,0x14000000|(mask&0x01));
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	4013      	ands	r3, r2
 800307a:	22a0      	movs	r2, #160	; 0xa0
 800307c:	0552      	lsls	r2, r2, #21
 800307e:	4313      	orrs	r3, r2
 8003080:	001a      	movs	r2, r3
 8003082:	2384      	movs	r3, #132	; 0x84
 8003084:	035b      	lsls	r3, r3, #13
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f7fe fb73 	bl	8001774 <FT800_Write32>
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b002      	add	sp, #8
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <FT800_readTag>:
/************************************************************************************* */
// FT800 read tag value
/* ************************************************************************************ */

uint8_t FT800_readTag(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
    uint32_t tag;

    tag=FT800_Read32(REG_TRACKER)&0x000000FF;
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <FT800_readTag+0x24>)
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7fe fc09 	bl	80018b8 <FT800_Read32>
 80030a6:	0002      	movs	r2, r0
 80030a8:	23ff      	movs	r3, #255	; 0xff
 80030aa:	4013      	ands	r3, r2
 80030ac:	607b      	str	r3, [r7, #4]
    
    return (uint8_t)tag;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	b2db      	uxtb	r3, r3
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b002      	add	sp, #8
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	00109000 	.word	0x00109000

080030c0 <FT800_readValue>:
/************************************************************************************* */
// FT800 read value tagged object
/* ************************************************************************************ */

uint16_t FT800_readValue(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
    uint32_t value;

    value = FT800_Read32(REG_TRACKER)&(0xFFFF0000);
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <FT800_readValue+0x24>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7fe fbf5 	bl	80018b8 <FT800_Read32>
 80030ce:	0003      	movs	r3, r0
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	607b      	str	r3, [r7, #4]

    return (uint16_t)(value>>16);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b29b      	uxth	r3, r3
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	00109000 	.word	0x00109000

080030e8 <FT800_runTouchCalibration>:
/************************************************************************************* */
// FT800 run touch screen animation
/* ************************************************************************************ */

void FT800_runTouchCalibration(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, CMD_CALIBRATE);
 80030ec:	23eb      	movs	r3, #235	; 0xeb
 80030ee:	425a      	negs	r2, r3
 80030f0:	2384      	movs	r3, #132	; 0x84
 80030f2:	035b      	lsls	r3, r3, #13
 80030f4:	0011      	movs	r1, r2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7fe fb3c 	bl	8001774 <FT800_Write32>
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <FT800_drawAnimSpinner>:
/************************************************************************************* */
// FT800 animated spinner
/* ************************************************************************************ */

void FT800_drawAnimSpinner(int16_t x, int16_t y, uint8_t style, uint8_t scale)
{
 8003102:	b5b0      	push	{r4, r5, r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	0005      	movs	r5, r0
 800310a:	000c      	movs	r4, r1
 800310c:	0010      	movs	r0, r2
 800310e:	0019      	movs	r1, r3
 8003110:	1dbb      	adds	r3, r7, #6
 8003112:	1c2a      	adds	r2, r5, #0
 8003114:	801a      	strh	r2, [r3, #0]
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	1c22      	adds	r2, r4, #0
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	1cfb      	adds	r3, r7, #3
 800311e:	1c02      	adds	r2, r0, #0
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	1cbb      	adds	r3, r7, #2
 8003124:	1c0a      	adds	r2, r1, #0
 8003126:	701a      	strb	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_SPINNER);      
 8003128:	23ea      	movs	r3, #234	; 0xea
 800312a:	425a      	negs	r2, r3
 800312c:	2384      	movs	r3, #132	; 0x84
 800312e:	035b      	lsls	r3, r3, #13
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f7fe fb1e 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8003138:	1dbb      	adds	r3, r7, #6
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	2384      	movs	r3, #132	; 0x84
 800313e:	035b      	lsls	r3, r3, #13
 8003140:	0011      	movs	r1, r2
 8003142:	0018      	movs	r0, r3
 8003144:	f7fe fade 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	2384      	movs	r3, #132	; 0x84
 800314e:	035b      	lsls	r3, r3, #13
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f7fe fad6 	bl	8001704 <FT800_Write16>
    if(style>3) style=0;
 8003158:	1cfb      	adds	r3, r7, #3
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d902      	bls.n	8003166 <FT800_drawAnimSpinner+0x64>
 8003160:	1cfb      	adds	r3, r7, #3
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
    FT800_Write16(RAM_CMD, style);    
 8003166:	1cfb      	adds	r3, r7, #3
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
 800316c:	2384      	movs	r3, #132	; 0x84
 800316e:	035b      	lsls	r3, r3, #13
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f7fe fac6 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, scale);
 8003178:	1cbb      	adds	r3, r7, #2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b29a      	uxth	r2, r3
 800317e:	2384      	movs	r3, #132	; 0x84
 8003180:	035b      	lsls	r3, r3, #13
 8003182:	0011      	movs	r1, r2
 8003184:	0018      	movs	r0, r3
 8003186:	f7fe fabd 	bl	8001704 <FT800_Write16>
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b002      	add	sp, #8
 8003190:	bdb0      	pop	{r4, r5, r7, pc}

08003192 <FT800_drawLogo>:
/************************************************************************************* */
// FT800 draw FTDI animated logo
/* ************************************************************************************ */

void FT800_drawLogo(void)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, CMD_LOGO);
 8003196:	23cf      	movs	r3, #207	; 0xcf
 8003198:	425a      	negs	r2, r3
 800319a:	2384      	movs	r3, #132	; 0x84
 800319c:	035b      	lsls	r3, r3, #13
 800319e:	0011      	movs	r1, r2
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7fe fae7 	bl	8001774 <FT800_Write32>
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <FT800_waitLogo>:
/* ************************************************************************************ */
// FT800 wait Logo to finish 
/* ************************************************************************************ */

void FT800_waitLogo(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
    FT800_executeCommands();
 80031b0:	f7fe fd5a 	bl	8001c68 <FT800_executeCommands>
    DELAY(1);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f006 fece 	bl	8009f56 <delay_ms>
    while((FT800_Read16(REG_CMD_WRITE) != 0));
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <FT800_waitLogo+0x2c>)
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fe fb3a 	bl	8001838 <FT800_Read16>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d1f9      	bne.n	80031bc <FT800_waitLogo+0x10>
    DELAY(1); 
 80031c8:	2001      	movs	r0, #1
 80031ca:	f006 fec4 	bl	8009f56 <delay_ms>
    FT800_finishList();
 80031ce:	f7fe fd27 	bl	8001c20 <FT800_finishList>
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	001024e8 	.word	0x001024e8

080031dc <FT800_drawScreensaver>:
/************************************************************************************* */
// FT800 screensaver command
/* ************************************************************************************ */

void FT800_drawScreensaver(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
   FT800_Write32(RAM_CMD, CMD_SCREENSAVER); 
 80031e0:	23d1      	movs	r3, #209	; 0xd1
 80031e2:	425a      	negs	r2, r3
 80031e4:	2384      	movs	r3, #132	; 0x84
 80031e6:	035b      	lsls	r3, r3, #13
 80031e8:	0011      	movs	r1, r2
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fe fac2 	bl	8001774 <FT800_Write32>
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <FT800_drawSketch>:
/************************************************************************************* */
// FT800 draw sketch
/* ************************************************************************************ */

void FT800_drawSketch(int16_t x, int16_t y, uint16_t w, uint16_t h, uint32_t pointer, uint16_t format)
{
 80031f6:	b5b0      	push	{r4, r5, r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	0005      	movs	r5, r0
 80031fe:	000c      	movs	r4, r1
 8003200:	0010      	movs	r0, r2
 8003202:	0019      	movs	r1, r3
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	1c2a      	adds	r2, r5, #0
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	1c22      	adds	r2, r4, #0
 800320e:	801a      	strh	r2, [r3, #0]
 8003210:	1cbb      	adds	r3, r7, #2
 8003212:	1c02      	adds	r2, r0, #0
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	003b      	movs	r3, r7
 8003218:	1c0a      	adds	r2, r1, #0
 800321a:	801a      	strh	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_SKETCH); 
 800321c:	23d0      	movs	r3, #208	; 0xd0
 800321e:	425a      	negs	r2, r3
 8003220:	2384      	movs	r3, #132	; 0x84
 8003222:	035b      	lsls	r3, r3, #13
 8003224:	0011      	movs	r1, r2
 8003226:	0018      	movs	r0, r3
 8003228:	f7fe faa4 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 800322c:	1dbb      	adds	r3, r7, #6
 800322e:	881a      	ldrh	r2, [r3, #0]
 8003230:	2384      	movs	r3, #132	; 0x84
 8003232:	035b      	lsls	r3, r3, #13
 8003234:	0011      	movs	r1, r2
 8003236:	0018      	movs	r0, r3
 8003238:	f7fe fa64 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);    
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	2384      	movs	r3, #132	; 0x84
 8003242:	035b      	lsls	r3, r3, #13
 8003244:	0011      	movs	r1, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f7fe fa5c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 800324c:	1cbb      	adds	r3, r7, #2
 800324e:	881a      	ldrh	r2, [r3, #0]
 8003250:	2384      	movs	r3, #132	; 0x84
 8003252:	035b      	lsls	r3, r3, #13
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f7fe fa54 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 800325c:	003b      	movs	r3, r7
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	2384      	movs	r3, #132	; 0x84
 8003262:	035b      	lsls	r3, r3, #13
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f7fe fa4c 	bl	8001704 <FT800_Write16>
    FT800_Write32(RAM_CMD, pointer); 
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	2384      	movs	r3, #132	; 0x84
 8003270:	035b      	lsls	r3, r3, #13
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f7fe fa7d 	bl	8001774 <FT800_Write32>
    FT800_Write16(RAM_CMD, format); 
 800327a:	231c      	movs	r3, #28
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	2384      	movs	r3, #132	; 0x84
 8003282:	035b      	lsls	r3, r3, #13
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f7fe fa3c 	bl	8001704 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0x0000);  //align      
 800328c:	2384      	movs	r3, #132	; 0x84
 800328e:	035b      	lsls	r3, r3, #13
 8003290:	2100      	movs	r1, #0
 8003292:	0018      	movs	r0, r3
 8003294:	f7fe fa36 	bl	8001704 <FT800_Write16>
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bdb0      	pop	{r4, r5, r7, pc}

080032a0 <FT800_stop>:
/************************************************************************************* */
// FT800 stop spinner, screensaver or sketch
/* ************************************************************************************ */

void FT800_stop(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, CMD_STOP);      
 80032a4:	23e9      	movs	r3, #233	; 0xe9
 80032a6:	425a      	negs	r2, r3
 80032a8:	2384      	movs	r3, #132	; 0x84
 80032aa:	035b      	lsls	r3, r3, #13
 80032ac:	0011      	movs	r1, r2
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7fe fa60 	bl	8001774 <FT800_Write32>
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <FT800_macro>:
/************************************************************************************* */
// FT800 macro
/* ************************************************************************************ */

void FT800_macro(uint8_t m)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	0002      	movs	r2, r0
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	701a      	strb	r2, [r3, #0]
    uint32_t macro = 0x25000000;
 80032c6:	2394      	movs	r3, #148	; 0x94
 80032c8:	059b      	lsls	r3, r3, #22
 80032ca:	60fb      	str	r3, [r7, #12]

    macro |= (m&0x01);
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    FT800_Write32(RAM_CMD, macro); 
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	2384      	movs	r3, #132	; 0x84
 80032de:	035b      	lsls	r3, r3, #13
 80032e0:	0011      	movs	r1, r2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fe fa46 	bl	8001774 <FT800_Write32>
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <FT800_bitmapBegin>:
/************************************************************************************* */
// FT800 bitmap begin
/* ************************************************************************************ */

void FT800_bitmapBegin(void)
{ 
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, BEGIN|BITMAP);
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <FT800_bitmapBegin+0x18>)
 80032f6:	2384      	movs	r3, #132	; 0x84
 80032f8:	035b      	lsls	r3, r3, #13
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fe fa39 	bl	8001774 <FT800_Write32>
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	1f000001 	.word	0x1f000001

0800330c <FT800_bitmapLayout>:
/************************************************************************************* */
// FT800 bitmap layout
/* ************************************************************************************ */

void FT800_bitmapLayout(uint8_t format, int16_t linestride, int16_t heigth)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	0004      	movs	r4, r0
 8003314:	0008      	movs	r0, r1
 8003316:	0011      	movs	r1, r2
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	1c22      	adds	r2, r4, #0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	1c02      	adds	r2, r0, #0
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	1cbb      	adds	r3, r7, #2
 8003326:	1c0a      	adds	r2, r1, #0
 8003328:	801a      	strh	r2, [r3, #0]
    uint32_t bitmap_layout=0x07000000;
 800332a:	23e0      	movs	r3, #224	; 0xe0
 800332c:	04db      	lsls	r3, r3, #19
 800332e:	60fb      	str	r3, [r7, #12]
   
    if(format>11) format = 11; //The valid range is from  0 to 11
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b0b      	cmp	r3, #11
 8003336:	d902      	bls.n	800333e <FT800_bitmapLayout+0x32>
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	220b      	movs	r2, #11
 800333c:	701a      	strb	r2, [r3, #0]
    bitmap_layout |= (uint32_t)(format&0x1F)<<19;
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	04da      	lsls	r2, r3, #19
 8003344:	23f8      	movs	r3, #248	; 0xf8
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	4013      	ands	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
    bitmap_layout |= (uint32_t)(linestride&0x03FF)<<9;
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	025b      	lsls	r3, r3, #9
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <FT800_bitmapLayout+0x78>)
 8003358:	4013      	ands	r3, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
    bitmap_layout |= (heigth&0x01FF);  
 8003360:	1cbb      	adds	r3, r7, #2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	0ddb      	lsrs	r3, r3, #23
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
    
    FT800_Write32(RAM_CMD, bitmap_layout);
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	2384      	movs	r3, #132	; 0x84
 8003372:	035b      	lsls	r3, r3, #13
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f7fe f9fc 	bl	8001774 <FT800_Write32>
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b005      	add	sp, #20
 8003382:	bd90      	pop	{r4, r7, pc}
 8003384:	0007fe00 	.word	0x0007fe00

08003388 <FT800_bitmapSize>:
/************************************************************************************* */
// FT800 bitmap size
/* ************************************************************************************ */

void FT800_bitmapSize(uint8_t filter, uint8_t wrapx, uint8_t wrapy, int16_t width, int16_t heigth)
{
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	0005      	movs	r5, r0
 8003390:	000c      	movs	r4, r1
 8003392:	0010      	movs	r0, r2
 8003394:	0019      	movs	r1, r3
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	1c2a      	adds	r2, r5, #0
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	1dbb      	adds	r3, r7, #6
 800339e:	1c22      	adds	r2, r4, #0
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	1d7b      	adds	r3, r7, #5
 80033a4:	1c02      	adds	r2, r0, #0
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	1cbb      	adds	r3, r7, #2
 80033aa:	1c0a      	adds	r2, r1, #0
 80033ac:	801a      	strh	r2, [r3, #0]
    uint32_t bitmap_size=0x08000000;
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	051b      	lsls	r3, r3, #20
 80033b2:	60fb      	str	r3, [r7, #12]
    
    bitmap_size |= (uint32_t)(filter&0x01)<<20;
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	051a      	lsls	r2, r3, #20
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	035b      	lsls	r3, r3, #13
 80033be:	4013      	ands	r3, r2
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    bitmap_size |= (uint32_t)(wrapx&0x01)<<19;
 80033c6:	1dbb      	adds	r3, r7, #6
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	04da      	lsls	r2, r3, #19
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	031b      	lsls	r3, r3, #12
 80033d0:	4013      	ands	r3, r2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    bitmap_size |= (uint32_t)(wrapy&0x01)<<18;
 80033d8:	1d7b      	adds	r3, r7, #5
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	049a      	lsls	r2, r3, #18
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	02db      	lsls	r3, r3, #11
 80033e2:	4013      	ands	r3, r2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    bitmap_size |= (uint32_t)(width&0x01FF)<<9;
 80033ea:	1cbb      	adds	r3, r7, #2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	025b      	lsls	r3, r3, #9
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <FT800_bitmapSize+0x98>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    bitmap_size |= (uint32_t)(heigth&0x01FF);
 80033fa:	2320      	movs	r3, #32
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	05db      	lsls	r3, r3, #23
 8003402:	0ddb      	lsrs	r3, r3, #23
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    
    FT800_Write32(RAM_CMD, bitmap_size);
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	2384      	movs	r3, #132	; 0x84
 800340e:	035b      	lsls	r3, r3, #13
 8003410:	0011      	movs	r1, r2
 8003412:	0018      	movs	r0, r3
 8003414:	f7fe f9ae 	bl	8001774 <FT800_Write32>
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b004      	add	sp, #16
 800341e:	bdb0      	pop	{r4, r5, r7, pc}
 8003420:	0003fe00 	.word	0x0003fe00

08003424 <FT800_bitmapSource>:
/************************************************************************************* */
// FT800 bitmap source
/* ************************************************************************************ */

void FT800_bitmapSource(uint32_t add)
{  
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    FT800_Write32(RAM_CMD, 0x01000000|(add&0x000FFFFF));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	031b      	lsls	r3, r3, #12
 8003430:	0b1b      	lsrs	r3, r3, #12
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	0452      	lsls	r2, r2, #17
 8003436:	431a      	orrs	r2, r3
 8003438:	2384      	movs	r3, #132	; 0x84
 800343a:	035b      	lsls	r3, r3, #13
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f7fe f998 	bl	8001774 <FT800_Write32>
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <FT800_loadIdentity>:
/************************************************************************************* */
// FT800 load matrix
/* ************************************************************************************ */

void FT800_loadIdentity(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, CMD_LOADIDENTITY);
 8003450:	23da      	movs	r3, #218	; 0xda
 8003452:	425a      	negs	r2, r3
 8003454:	2384      	movs	r3, #132	; 0x84
 8003456:	035b      	lsls	r3, r3, #13
 8003458:	0011      	movs	r1, r2
 800345a:	0018      	movs	r0, r3
 800345c:	f7fe f98a 	bl	8001774 <FT800_Write32>
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <FT800_setMatrix>:
/************************************************************************************* */
// FT800 set matrix
/* ************************************************************************************ */

void FT800_setMatrix(void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
    FT800_Write32(RAM_CMD, CMD_SETMATRIX);
 800346a:	23d6      	movs	r3, #214	; 0xd6
 800346c:	425a      	negs	r2, r3
 800346e:	2384      	movs	r3, #132	; 0x84
 8003470:	035b      	lsls	r3, r3, #13
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f7fe f97d 	bl	8001774 <FT800_Write32>
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <FT800_scale>:
/************************************************************************************* */
// FT800 scale command
/* ************************************************************************************ */

void FT800_scale(int16_t sx,int16_t sy)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	0002      	movs	r2, r0
 8003488:	1dbb      	adds	r3, r7, #6
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	1c0a      	adds	r2, r1, #0
 8003490:	801a      	strh	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_SCALE);
 8003492:	23d8      	movs	r3, #216	; 0xd8
 8003494:	425a      	negs	r2, r3
 8003496:	2384      	movs	r3, #132	; 0x84
 8003498:	035b      	lsls	r3, r3, #13
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f7fe f969 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)sx<<16);
 80034a2:	1dbb      	adds	r3, r7, #6
 80034a4:	2200      	movs	r2, #0
 80034a6:	5e9b      	ldrsh	r3, [r3, r2]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	001a      	movs	r2, r3
 80034ac:	2384      	movs	r3, #132	; 0x84
 80034ae:	035b      	lsls	r3, r3, #13
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7fe f95e 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)sy<<16);    
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	2200      	movs	r2, #0
 80034bc:	5e9b      	ldrsh	r3, [r3, r2]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	001a      	movs	r2, r3
 80034c2:	2384      	movs	r3, #132	; 0x84
 80034c4:	035b      	lsls	r3, r3, #13
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fe f953 	bl	8001774 <FT800_Write32>
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b002      	add	sp, #8
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <FT800_translate>:
/************************************************************************************* */
// FT800 translate command
/* ************************************************************************************ */

void FT800_translate(int16_t tx,int16_t ty)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	0002      	movs	r2, r0
 80034de:	1dbb      	adds	r3, r7, #6
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	1c0a      	adds	r2, r1, #0
 80034e6:	801a      	strh	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_TRANSLATE);
 80034e8:	23d9      	movs	r3, #217	; 0xd9
 80034ea:	425a      	negs	r2, r3
 80034ec:	2384      	movs	r3, #132	; 0x84
 80034ee:	035b      	lsls	r3, r3, #13
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7fe f93e 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)tx<<16);
 80034f8:	1dbb      	adds	r3, r7, #6
 80034fa:	2200      	movs	r2, #0
 80034fc:	5e9b      	ldrsh	r3, [r3, r2]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	001a      	movs	r2, r3
 8003502:	2384      	movs	r3, #132	; 0x84
 8003504:	035b      	lsls	r3, r3, #13
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7fe f933 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)ty<<16);    
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2200      	movs	r2, #0
 8003512:	5e9b      	ldrsh	r3, [r3, r2]
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	001a      	movs	r2, r3
 8003518:	2384      	movs	r3, #132	; 0x84
 800351a:	035b      	lsls	r3, r3, #13
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f7fe f928 	bl	8001774 <FT800_Write32>
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <FT800_rotate>:
/************************************************************************************* */
// FT800 rotate command
/* ************************************************************************************ */

void FT800_rotate(int16_t a)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	0002      	movs	r2, r0
 8003534:	1dbb      	adds	r3, r7, #6
 8003536:	801a      	strh	r2, [r3, #0]
    FT800_Write32(RAM_CMD, CMD_ROTATE);
 8003538:	23d7      	movs	r3, #215	; 0xd7
 800353a:	425a      	negs	r2, r3
 800353c:	2384      	movs	r3, #132	; 0x84
 800353e:	035b      	lsls	r3, r3, #13
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f7fe f916 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, ((int32_t)a<<16)/360);   
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	2200      	movs	r2, #0
 800354c:	5e9b      	ldrsh	r3, [r3, r2]
 800354e:	041a      	lsls	r2, r3, #16
 8003550:	23b4      	movs	r3, #180	; 0xb4
 8003552:	0059      	lsls	r1, r3, #1
 8003554:	0010      	movs	r0, r2
 8003556:	f7fc fe73 	bl	8000240 <__divsi3>
 800355a:	0003      	movs	r3, r0
 800355c:	001a      	movs	r2, r3
 800355e:	2384      	movs	r3, #132	; 0x84
 8003560:	035b      	lsls	r3, r3, #13
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f7fe f905 	bl	8001774 <FT800_Write32>
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <FT800_loadJpgCMD>:
/************************************************************************************* */
// FT800 load jpg command
/* ************************************************************************************ */

void FT800_loadJpgCMD(uint32_t ptr, uint32_t opt)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
    FT800_Write32(RAM_CMD, CMD_LOADIMAGE);
 800357c:	23dc      	movs	r3, #220	; 0xdc
 800357e:	425a      	negs	r2, r3
 8003580:	2384      	movs	r3, #132	; 0x84
 8003582:	035b      	lsls	r3, r3, #13
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f7fe f8f4 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, ptr);
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	2384      	movs	r3, #132	; 0x84
 8003590:	035b      	lsls	r3, r3, #13
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f7fe f8ed 	bl	8001774 <FT800_Write32>
    FT800_Write32(RAM_CMD, opt);
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	2384      	movs	r3, #132	; 0x84
 800359e:	035b      	lsls	r3, r3, #13
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fe f8e6 	bl	8001774 <FT800_Write32>
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <FT800_InitPins>:
/* ************************************************************************************ */
// Initialize FT800 pins: CS, PD, SPI, INT
/* ************************************************************************************ */

void FT800_InitPins(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	__NOP();// Nothing to add since Cube MX generates this in main
 80035b4:	46c0      	nop			; (mov r8, r8)
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <F800_InitSPI>:
/* ************************************************************************************ */
// Initialize (Open) FT800 SPI channel 
/* ************************************************************************************ */

void F800_InitSPI(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	__NOP();// Nothing to add since Cube MX generates this in main
 80035c0:	46c0      	nop			; (mov r8, r8)
	SET_BIT(FT800_SPI->CR1, SPI_CR1_SPE); //Just enable
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <F800_InitSPI+0x18>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <F800_InitSPI+0x18>)
 80035c8:	2140      	movs	r1, #64	; 0x40
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40003800 	.word	0x40003800

080035d8 <F800_InitInterrupt>:
/* ************************************************************************************ */
// Initialize external interrupt - required for touch screen
/* ************************************************************************************ */

void F800_InitInterrupt(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
    __NOP();// Nothing to add since Cube MX generates this in main
 80035dc:	46c0      	nop			; (mov r8, r8)
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <SPI_xchg>:
/* ************************************************************************************ */
// Exchange byte over SPI
/* ************************************************************************************ */

uint8_t SPI_xchg (uint8_t data)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	0002      	movs	r2, r0
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	701a      	strb	r2, [r3, #0]
	//__IO  ->  Defines 'read / write' permissions
	while (!(FT800_SPI->SR&SPI_FLAG_TXE));
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <SPI_xchg+0x3c>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	d0fa      	beq.n	80035f2 <SPI_xchg+0xe>
	*((__IO uint8_t *)&FT800_SPI->DR)=data;
 80035fc:	4a09      	ldr	r2, [pc, #36]	; (8003624 <SPI_xchg+0x40>)
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	7013      	strb	r3, [r2, #0]
	while (!(FT800_SPI->SR&SPI_FLAG_RXNE));
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <SPI_xchg+0x3c>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	d0fa      	beq.n	8003606 <SPI_xchg+0x22>
	return *((__IO uint8_t *)&FT800_SPI->DR);
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SPI_xchg+0x40>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	40003800 	.word	0x40003800
 8003624:	4000380c 	.word	0x4000380c

08003628 <FT800_WriteSPI>:
/* ************************************************************************************ */
// Write data (transmit single byte over SPI)
/* ************************************************************************************ */

void FT800_WriteSPI(uint8_t data)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
	SPI_xchg(data);
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff ffd3 	bl	80035e4 <SPI_xchg>
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b002      	add	sp, #8
 8003644:	bd80      	pop	{r7, pc}

08003646 <FT800_ReadSPI>:
/* ************************************************************************************ */
// Read data (receive single byte over SPI)
/* ************************************************************************************ */

uint8_t FT800_ReadSPI(void)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	af00      	add	r7, sp, #0
	return SPI_xchg(0x00);
 800364a:	2000      	movs	r0, #0
 800364c:	f7ff ffca 	bl	80035e4 <SPI_xchg>
 8003650:	0003      	movs	r3, r0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <FT800_loadWAVfromSD>:
#define BUFF_SIZE 2048

uint8_t buff[BUFF_SIZE];

uint8_t FT800_loadWAVfromSD(uint32_t ram_offset, TCHAR *file_path, uint16_t *frmt, uint16_t *chn, uint32_t *sample, uint16_t *bpc, uint32_t *size)
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	4cd3      	ldr	r4, [pc, #844]	; (80039a8 <FT800_loadWAVfromSD+0x350>)
 800365c:	44a5      	add	sp, r4
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
    FIL myFile;
	unsigned int byteCount;   
    uint8_t  data[4];
    uint16_t wav_format=0, wav_channels=0, wav_bits_per_channel=0;
 8003668:	4bd0      	ldr	r3, [pc, #832]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	4acf      	ldr	r2, [pc, #828]	; (80039b0 <FT800_loadWAVfromSD+0x358>)
 8003672:	18bb      	adds	r3, r7, r2
 8003674:	2200      	movs	r2, #0
 8003676:	801a      	strh	r2, [r3, #0]
 8003678:	2093      	movs	r0, #147	; 0x93
 800367a:	0080      	lsls	r0, r0, #2
 800367c:	183b      	adds	r3, r7, r0
 800367e:	2200      	movs	r2, #0
 8003680:	801a      	strh	r2, [r3, #0]
    uint32_t wav_sample_rate=0, bytes=0, offset=0,i,s;
 8003682:	2300      	movs	r3, #0
 8003684:	2492      	movs	r4, #146	; 0x92
 8003686:	00a4      	lsls	r4, r4, #2
 8003688:	193d      	adds	r5, r7, r4
 800368a:	602b      	str	r3, [r5, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	259a      	movs	r5, #154	; 0x9a
 8003690:	00ad      	lsls	r5, r5, #2
 8003692:	197d      	adds	r5, r7, r5
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	2599      	movs	r5, #153	; 0x99
 800369a:	00ad      	lsls	r5, r5, #2
 800369c:	197d      	adds	r5, r7, r5
 800369e:	602b      	str	r3, [r5, #0]
    uint64_t wav_size=0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	2400      	movs	r4, #0
 80036a4:	2594      	movs	r5, #148	; 0x94
 80036a6:	00ad      	lsls	r5, r5, #2
 80036a8:	197e      	adds	r6, r7, r5
 80036aa:	6033      	str	r3, [r6, #0]
 80036ac:	6074      	str	r4, [r6, #4]
   
    //open
    f_open(&myFile, file_path, FA_READ);
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	241c      	movs	r4, #28
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	2201      	movs	r2, #1
 80036b6:	0018      	movs	r0, r3
 80036b8:	f002 fe2a 	bl	8006310 <f_open>
    //get format
    f_lseek(&myFile, WAV_FORMAT); 
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	2114      	movs	r1, #20
 80036c0:	0018      	movs	r0, r3
 80036c2:	f003 fb87 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 80036c6:	2518      	movs	r5, #24
 80036c8:	197b      	adds	r3, r7, r5
 80036ca:	2614      	movs	r6, #20
 80036cc:	19b9      	adds	r1, r7, r6
 80036ce:	1938      	adds	r0, r7, r4
 80036d0:	2202      	movs	r2, #2
 80036d2:	f003 f8d5 	bl	8006880 <f_read>
    wav_format=(data[1]<<8)|(data[0]);
 80036d6:	4bb7      	ldr	r3, [pc, #732]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 80036d8:	219c      	movs	r1, #156	; 0x9c
 80036da:	0089      	lsls	r1, r1, #2
 80036dc:	468c      	mov	ip, r1
 80036de:	44bc      	add	ip, r7
 80036e0:	4463      	add	r3, ip
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	b21a      	sxth	r2, r3
 80036e8:	4bb2      	ldr	r3, [pc, #712]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 80036ea:	219c      	movs	r1, #156	; 0x9c
 80036ec:	0089      	lsls	r1, r1, #2
 80036ee:	468c      	mov	ip, r1
 80036f0:	44bc      	add	ip, r7
 80036f2:	4463      	add	r3, ip
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b21a      	sxth	r2, r3
 80036fc:	4bab      	ldr	r3, [pc, #684]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	801a      	strh	r2, [r3, #0]
    //get channels - mono, stereo
    f_lseek(&myFile, WAV_CHANNELS); 
 8003702:	193b      	adds	r3, r7, r4
 8003704:	2116      	movs	r1, #22
 8003706:	0018      	movs	r0, r3
 8003708:	f003 fb64 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 800370c:	197b      	adds	r3, r7, r5
 800370e:	19b9      	adds	r1, r7, r6
 8003710:	1938      	adds	r0, r7, r4
 8003712:	2202      	movs	r2, #2
 8003714:	f003 f8b4 	bl	8006880 <f_read>
    wav_channels=(data[1]<<8)|(data[0]);
 8003718:	4ba6      	ldr	r3, [pc, #664]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 800371a:	219c      	movs	r1, #156	; 0x9c
 800371c:	0089      	lsls	r1, r1, #2
 800371e:	468c      	mov	ip, r1
 8003720:	44bc      	add	ip, r7
 8003722:	4463      	add	r3, ip
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	b21a      	sxth	r2, r3
 800372a:	4ba2      	ldr	r3, [pc, #648]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 800372c:	219c      	movs	r1, #156	; 0x9c
 800372e:	0089      	lsls	r1, r1, #2
 8003730:	468c      	mov	ip, r1
 8003732:	44bc      	add	ip, r7
 8003734:	4463      	add	r3, ip
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b21b      	sxth	r3, r3
 800373a:	4313      	orrs	r3, r2
 800373c:	b21a      	sxth	r2, r3
 800373e:	499c      	ldr	r1, [pc, #624]	; (80039b0 <FT800_loadWAVfromSD+0x358>)
 8003740:	187b      	adds	r3, r7, r1
 8003742:	801a      	strh	r2, [r3, #0]
    //get sample sample rate
    f_lseek(&myFile, WAV_SAMPLE_RATE);
 8003744:	193b      	adds	r3, r7, r4
 8003746:	2118      	movs	r1, #24
 8003748:	0018      	movs	r0, r3
 800374a:	f003 fb43 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 800374e:	197b      	adds	r3, r7, r5
 8003750:	19b9      	adds	r1, r7, r6
 8003752:	1938      	adds	r0, r7, r4
 8003754:	2204      	movs	r2, #4
 8003756:	f003 f893 	bl	8006880 <f_read>
    wav_sample_rate=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 800375a:	4b96      	ldr	r3, [pc, #600]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 800375c:	219c      	movs	r1, #156	; 0x9c
 800375e:	0089      	lsls	r1, r1, #2
 8003760:	468c      	mov	ip, r1
 8003762:	44bc      	add	ip, r7
 8003764:	4463      	add	r3, ip
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	061a      	lsls	r2, r3, #24
 800376a:	4b92      	ldr	r3, [pc, #584]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 800376c:	219c      	movs	r1, #156	; 0x9c
 800376e:	0089      	lsls	r1, r1, #2
 8003770:	468c      	mov	ip, r1
 8003772:	44bc      	add	ip, r7
 8003774:	4463      	add	r3, ip
 8003776:	789b      	ldrb	r3, [r3, #2]
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	431a      	orrs	r2, r3
 800377c:	4b8d      	ldr	r3, [pc, #564]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 800377e:	219c      	movs	r1, #156	; 0x9c
 8003780:	0089      	lsls	r1, r1, #2
 8003782:	468c      	mov	ip, r1
 8003784:	44bc      	add	ip, r7
 8003786:	4463      	add	r3, ip
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	4313      	orrs	r3, r2
 800378e:	4a89      	ldr	r2, [pc, #548]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 8003790:	219c      	movs	r1, #156	; 0x9c
 8003792:	0089      	lsls	r1, r1, #2
 8003794:	468c      	mov	ip, r1
 8003796:	44bc      	add	ip, r7
 8003798:	4462      	add	r2, ip
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	2292      	movs	r2, #146	; 0x92
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	18ba      	adds	r2, r7, r2
 80037a4:	6013      	str	r3, [r2, #0]
    //get bits per channel 
    f_lseek(&myFile, WAV_BITS_PER_SAMPLE);
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	2122      	movs	r1, #34	; 0x22
 80037aa:	0018      	movs	r0, r3
 80037ac:	f003 fb12 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 80037b0:	197b      	adds	r3, r7, r5
 80037b2:	19b9      	adds	r1, r7, r6
 80037b4:	1938      	adds	r0, r7, r4
 80037b6:	2204      	movs	r2, #4
 80037b8:	f003 f862 	bl	8006880 <f_read>
    wav_bits_per_channel=(data[1]<<8)|(data[0]);
 80037bc:	4b7d      	ldr	r3, [pc, #500]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 80037be:	229c      	movs	r2, #156	; 0x9c
 80037c0:	0092      	lsls	r2, r2, #2
 80037c2:	4694      	mov	ip, r2
 80037c4:	44bc      	add	ip, r7
 80037c6:	4463      	add	r3, ip
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	4b79      	ldr	r3, [pc, #484]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 80037d0:	219c      	movs	r1, #156	; 0x9c
 80037d2:	0089      	lsls	r1, r1, #2
 80037d4:	468c      	mov	ip, r1
 80037d6:	44bc      	add	ip, r7
 80037d8:	4463      	add	r3, ip
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b21b      	sxth	r3, r3
 80037de:	4313      	orrs	r3, r2
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	2093      	movs	r0, #147	; 0x93
 80037e4:	0080      	lsls	r0, r0, #2
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	801a      	strh	r2, [r3, #0]
    //get wav data size
    f_lseek(&myFile, WAV_SIZE);
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	2128      	movs	r1, #40	; 0x28
 80037ee:	0018      	movs	r0, r3
 80037f0:	f003 faf0 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 80037f4:	197b      	adds	r3, r7, r5
 80037f6:	19b9      	adds	r1, r7, r6
 80037f8:	1938      	adds	r0, r7, r4
 80037fa:	2204      	movs	r2, #4
 80037fc:	f003 f840 	bl	8006880 <f_read>
    wav_size=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 8003802:	229c      	movs	r2, #156	; 0x9c
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	4694      	mov	ip, r2
 8003808:	44bc      	add	ip, r7
 800380a:	4463      	add	r3, ip
 800380c:	78db      	ldrb	r3, [r3, #3]
 800380e:	061a      	lsls	r2, r3, #24
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 8003812:	219c      	movs	r1, #156	; 0x9c
 8003814:	0089      	lsls	r1, r1, #2
 8003816:	468c      	mov	ip, r1
 8003818:	44bc      	add	ip, r7
 800381a:	4463      	add	r3, ip
 800381c:	789b      	ldrb	r3, [r3, #2]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 8003824:	219c      	movs	r1, #156	; 0x9c
 8003826:	0089      	lsls	r1, r1, #2
 8003828:	468c      	mov	ip, r1
 800382a:	44bc      	add	ip, r7
 800382c:	4463      	add	r3, ip
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	4313      	orrs	r3, r2
 8003834:	4a5f      	ldr	r2, [pc, #380]	; (80039b4 <FT800_loadWAVfromSD+0x35c>)
 8003836:	219c      	movs	r1, #156	; 0x9c
 8003838:	0089      	lsls	r1, r1, #2
 800383a:	468c      	mov	ip, r1
 800383c:	44bc      	add	ip, r7
 800383e:	4462      	add	r2, ip
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	2594      	movs	r5, #148	; 0x94
 8003846:	00ad      	lsls	r5, r5, #2
 8003848:	197a      	adds	r2, r7, r5
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	17db      	asrs	r3, r3, #31
 800384e:	2295      	movs	r2, #149	; 0x95
 8003850:	0092      	lsls	r2, r2, #2
 8003852:	18ba      	adds	r2, r7, r2
 8003854:	6013      	str	r3, [r2, #0]
    
    if(wav_format==PCM_FRMT)
 8003856:	4b55      	ldr	r3, [pc, #340]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10f      	bne.n	8003880 <FT800_loadWAVfromSD+0x228>
    {
        if(wav_bits_per_channel==8)wav_format=PCM;
 8003860:	2393      	movs	r3, #147	; 0x93
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <FT800_loadWAVfromSD+0x21e>
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2200      	movs	r2, #0
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e01c      	b.n	80038b0 <FT800_loadWAVfromSD+0x258>
        else wav_format=UNDEFINED;
 8003876:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2203      	movs	r2, #3
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	e017      	b.n	80038b0 <FT800_loadWAVfromSD+0x258>
    }
    else if(wav_format==ULAW_FRMT)wav_format=ULAW;
 8003880:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	2b07      	cmp	r3, #7
 8003888:	d104      	bne.n	8003894 <FT800_loadWAVfromSD+0x23c>
 800388a:	4b48      	ldr	r3, [pc, #288]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2201      	movs	r2, #1
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	e00d      	b.n	80038b0 <FT800_loadWAVfromSD+0x258>
    else if(wav_format==ADPCM_FRMT)wav_format=ADPCM;
 8003894:	4b45      	ldr	r3, [pc, #276]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2b11      	cmp	r3, #17
 800389c:	d104      	bne.n	80038a8 <FT800_loadWAVfromSD+0x250>
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2202      	movs	r2, #2
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e003      	b.n	80038b0 <FT800_loadWAVfromSD+0x258>
    else wav_format=UNDEFINED;
 80038a8:	4b40      	ldr	r3, [pc, #256]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2203      	movs	r2, #3
 80038ae:	801a      	strh	r2, [r3, #0]
    
    if(wav_format<=UNDEFINED)
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d900      	bls.n	80038bc <FT800_loadWAVfromSD+0x264>
 80038ba:	e0ea      	b.n	8003a92 <FT800_loadWAVfromSD+0x43a>
    {
        if(wav_size>RAM_G_SIZE)wav_size=RAM_G_SIZE;
 80038bc:	2395      	movs	r3, #149	; 0x95
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <FT800_loadWAVfromSD+0x28c>
 80038c8:	2395      	movs	r3, #149	; 0x95
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10f      	bne.n	80038f4 <FT800_loadWAVfromSD+0x29c>
 80038d4:	2394      	movs	r3, #148	; 0x94
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	02db      	lsls	r3, r3, #11
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d907      	bls.n	80038f4 <FT800_loadWAVfromSD+0x29c>
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	02db      	lsls	r3, r3, #11
 80038e8:	2400      	movs	r4, #0
 80038ea:	2294      	movs	r2, #148	; 0x94
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	18ba      	adds	r2, r7, r2
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	6054      	str	r4, [r2, #4]
        s=wav_size;
 80038f4:	2394      	movs	r3, #148	; 0x94
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2297      	movs	r2, #151	; 0x97
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	18ba      	adds	r2, r7, r2
 8003902:	6013      	str	r3, [r2, #0]

        offset=ram_offset;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2299      	movs	r2, #153	; 0x99
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	18ba      	adds	r2, r7, r2
 800390c:	6013      	str	r3, [r2, #0]
        f_lseek(&myFile, WAV_DATA);
 800390e:	231c      	movs	r3, #28
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	0018      	movs	r0, r3
 8003916:	f003 fa5d 	bl	8006dd4 <f_lseek>
        while(s)
 800391a:	e084      	b.n	8003a26 <FT800_loadWAVfromSD+0x3ce>
        {
            if(s>BUFF_SIZE)bytes=BUFF_SIZE;
 800391c:	2397      	movs	r3, #151	; 0x97
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	429a      	cmp	r2, r3
 800392a:	d906      	bls.n	800393a <FT800_loadWAVfromSD+0x2e2>
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	229a      	movs	r2, #154	; 0x9a
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	18ba      	adds	r2, r7, r2
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e007      	b.n	800394a <FT800_loadWAVfromSD+0x2f2>
            else bytes=s;
 800393a:	2397      	movs	r3, #151	; 0x97
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	229a      	movs	r2, #154	; 0x9a
 8003944:	0092      	lsls	r2, r2, #2
 8003946:	18ba      	adds	r2, r7, r2
 8003948:	6013      	str	r3, [r2, #0]
            f_read(&myFile, &buff, bytes, &byteCount);
 800394a:	2318      	movs	r3, #24
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	229a      	movs	r2, #154	; 0x9a
 8003950:	0092      	lsls	r2, r2, #2
 8003952:	18ba      	adds	r2, r7, r2
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	4918      	ldr	r1, [pc, #96]	; (80039b8 <FT800_loadWAVfromSD+0x360>)
 8003958:	201c      	movs	r0, #28
 800395a:	1838      	adds	r0, r7, r0
 800395c:	f002 ff90 	bl	8006880 <f_read>

            FT800_CS_LO();                      // CS low 
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <FT800_loadWAVfromSD+0x364>)
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	0552      	lsls	r2, r2, #21
 8003966:	619a      	str	r2, [r3, #24]
            FT800_WriteAddress(RAM_G+offset,WRITE);// Send the address                                  
 8003968:	2399      	movs	r3, #153	; 0x99
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0018      	movs	r0, r3
 8003974:	f7fd fe50 	bl	8001618 <FT800_WriteAddress>
            for(i=0;i<bytes;i++)
 8003978:	2300      	movs	r3, #0
 800397a:	2298      	movs	r2, #152	; 0x98
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	18ba      	adds	r2, r7, r2
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e02e      	b.n	80039e2 <FT800_loadWAVfromSD+0x38a>
            {
                if(wav_format==PCM)FT800_WriteSPI((int8_t)buff[i]-128);
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <FT800_loadWAVfromSD+0x354>)
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d118      	bne.n	80039c0 <FT800_loadWAVfromSD+0x368>
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <FT800_loadWAVfromSD+0x360>)
 8003990:	2398      	movs	r3, #152	; 0x98
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	18d3      	adds	r3, r2, r3
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	3b80      	subs	r3, #128	; 0x80
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff fe41 	bl	8003628 <FT800_WriteSPI>
 80039a6:	e015      	b.n	80039d4 <FT800_loadWAVfromSD+0x37c>
 80039a8:	fffffd8c 	.word	0xfffffd8c
 80039ac:	0000026e 	.word	0x0000026e
 80039b0:	0000024e 	.word	0x0000024e
 80039b4:	fffffda4 	.word	0xfffffda4
 80039b8:	20000398 	.word	0x20000398
 80039bc:	48000400 	.word	0x48000400
                else FT800_WriteSPI(buff[i]);
 80039c0:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <FT800_loadWAVfromSD+0x4a4>)
 80039c2:	2398      	movs	r3, #152	; 0x98
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	18d3      	adds	r3, r2, r3
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7ff fe2a 	bl	8003628 <FT800_WriteSPI>
            for(i=0;i<bytes;i++)
 80039d4:	2298      	movs	r2, #152	; 0x98
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	18bb      	adds	r3, r7, r2
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	18ba      	adds	r2, r7, r2
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	2398      	movs	r3, #152	; 0x98
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	239a      	movs	r3, #154	; 0x9a
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3c6      	bcc.n	8003984 <FT800_loadWAVfromSD+0x32c>
            }
            FT800_CS_HI();    
 80039f6:	4b42      	ldr	r3, [pc, #264]	; (8003b00 <FT800_loadWAVfromSD+0x4a8>)
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	0152      	lsls	r2, r2, #5
 80039fc:	619a      	str	r2, [r3, #24]
            offset+=bytes;
 80039fe:	2199      	movs	r1, #153	; 0x99
 8003a00:	0089      	lsls	r1, r1, #2
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	209a      	movs	r0, #154	; 0x9a
 8003a08:	0080      	lsls	r0, r0, #2
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	18d3      	adds	r3, r2, r3
 8003a10:	187a      	adds	r2, r7, r1
 8003a12:	6013      	str	r3, [r2, #0]
            s=s-bytes;
 8003a14:	2197      	movs	r1, #151	; 0x97
 8003a16:	0089      	lsls	r1, r1, #2
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	183b      	adds	r3, r7, r0
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	187a      	adds	r2, r7, r1
 8003a24:	6013      	str	r3, [r2, #0]
        while(s)
 8003a26:	2397      	movs	r3, #151	; 0x97
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d000      	beq.n	8003a34 <FT800_loadWAVfromSD+0x3dc>
 8003a32:	e773      	b.n	800391c <FT800_loadWAVfromSD+0x2c4>
        }
        *frmt=wav_format;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a33      	ldr	r2, [pc, #204]	; (8003b04 <FT800_loadWAVfromSD+0x4ac>)
 8003a38:	18ba      	adds	r2, r7, r2
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	801a      	strh	r2, [r3, #0]
        *chn=wav_channels;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <FT800_loadWAVfromSD+0x4b0>)
 8003a42:	18ba      	adds	r2, r7, r2
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	801a      	strh	r2, [r3, #0]
        *sample=wav_sample_rate;
 8003a48:	23a0      	movs	r3, #160	; 0xa0
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	4694      	mov	ip, r2
 8003a50:	44bc      	add	ip, r7
 8003a52:	4463      	add	r3, ip
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2292      	movs	r2, #146	; 0x92
 8003a58:	0092      	lsls	r2, r2, #2
 8003a5a:	18ba      	adds	r2, r7, r2
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	601a      	str	r2, [r3, #0]
        *bpc=wav_bits_per_channel;
 8003a60:	23a1      	movs	r3, #161	; 0xa1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	2208      	movs	r2, #8
 8003a66:	4694      	mov	ip, r2
 8003a68:	44bc      	add	ip, r7
 8003a6a:	4463      	add	r3, ip
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2293      	movs	r2, #147	; 0x93
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	18ba      	adds	r2, r7, r2
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	801a      	strh	r2, [r3, #0]
        *size=wav_size;
 8003a78:	2394      	movs	r3, #148	; 0x94
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	23a2      	movs	r3, #162	; 0xa2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	2108      	movs	r1, #8
 8003a86:	468c      	mov	ip, r1
 8003a88:	44bc      	add	ip, r7
 8003a8a:	4463      	add	r3, ip
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e020      	b.n	8003ad4 <FT800_loadWAVfromSD+0x47c>
    }
    else
    {
        *frmt=0;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	801a      	strh	r2, [r3, #0]
        *chn=0;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
        *sample=0;
 8003a9e:	23a0      	movs	r3, #160	; 0xa0
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4694      	mov	ip, r2
 8003aa6:	44bc      	add	ip, r7
 8003aa8:	4463      	add	r3, ip
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
        *bpc=0;
 8003ab0:	23a1      	movs	r3, #161	; 0xa1
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	4694      	mov	ip, r2
 8003ab8:	44bc      	add	ip, r7
 8003aba:	4463      	add	r3, ip
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
        *size=0;        
 8003ac2:	23a2      	movs	r3, #162	; 0xa2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	4694      	mov	ip, r2
 8003aca:	44bc      	add	ip, r7
 8003acc:	4463      	add	r3, ip
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    }
    //close file
    f_close(&myFile);
 8003ad4:	231c      	movs	r3, #28
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f003 f943 	bl	8006d64 <f_close>


    if(wav_format<=UNDEFINED) return 1; 
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <FT800_loadWAVfromSD+0x4ac>)
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d801      	bhi.n	8003aec <FT800_loadWAVfromSD+0x494>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <FT800_loadWAVfromSD+0x496>
    else return 0;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	239d      	movs	r3, #157	; 0x9d
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	449d      	add	sp, r3
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20000398 	.word	0x20000398
 8003b00:	48000400 	.word	0x48000400
 8003b04:	0000026e 	.word	0x0000026e
 8003b08:	0000024e 	.word	0x0000024e

08003b0c <FT800_loadBMPfromSD>:
uint8_t FT800_loadBMPfromSD(uint32_t ram_offset, TCHAR *file_path, uint16_t *width, uint16_t *height, uint8_t *bpc)
{
 8003b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0e:	4ccc      	ldr	r4, [pc, #816]	; (8003e40 <FT800_loadBMPfromSD+0x334>)
 8003b10:	44a5      	add	sp, r4
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
	FIL myFile;
    unsigned int byteCount;
    uint8_t  data[4];
    uint32_t y, x, bmp_offset=0, img_width, img_height, img_bpp, offset=0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2296      	movs	r2, #150	; 0x96
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	18b9      	adds	r1, r7, r2
 8003b24:	600b      	str	r3, [r1, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	2197      	movs	r1, #151	; 0x97
 8003b2a:	0089      	lsls	r1, r1, #2
 8003b2c:	1879      	adds	r1, r7, r1
 8003b2e:	600b      	str	r3, [r1, #0]
    uint8_t bytes;
    
    //open
    f_open(&myFile, file_path, FA_READ);
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	241c      	movs	r4, #28
 8003b34:	193b      	adds	r3, r7, r4
 8003b36:	2201      	movs	r2, #1
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f002 fbe9 	bl	8006310 <f_open>
    //offset
    f_lseek(&myFile, BMP_DIB); 
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	210e      	movs	r1, #14
 8003b42:	0018      	movs	r0, r3
 8003b44:	f003 f946 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8003b48:	2518      	movs	r5, #24
 8003b4a:	197b      	adds	r3, r7, r5
 8003b4c:	2614      	movs	r6, #20
 8003b4e:	19b9      	adds	r1, r7, r6
 8003b50:	1938      	adds	r0, r7, r4
 8003b52:	2204      	movs	r2, #4
 8003b54:	f002 fe94 	bl	8006880 <f_read>
    bmp_offset=((data[3]<<24)|(data[2]<<16) |(data[1]<<8)|(data[0]))+BMP_DIB;
 8003b58:	4bba      	ldr	r3, [pc, #744]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003b5a:	219a      	movs	r1, #154	; 0x9a
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	468c      	mov	ip, r1
 8003b60:	44bc      	add	ip, r7
 8003b62:	4463      	add	r3, ip
 8003b64:	78db      	ldrb	r3, [r3, #3]
 8003b66:	061a      	lsls	r2, r3, #24
 8003b68:	4bb6      	ldr	r3, [pc, #728]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003b6a:	219a      	movs	r1, #154	; 0x9a
 8003b6c:	0089      	lsls	r1, r1, #2
 8003b6e:	468c      	mov	ip, r1
 8003b70:	44bc      	add	ip, r7
 8003b72:	4463      	add	r3, ip
 8003b74:	789b      	ldrb	r3, [r3, #2]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	4bb2      	ldr	r3, [pc, #712]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003b7c:	219a      	movs	r1, #154	; 0x9a
 8003b7e:	0089      	lsls	r1, r1, #2
 8003b80:	468c      	mov	ip, r1
 8003b82:	44bc      	add	ip, r7
 8003b84:	4463      	add	r3, ip
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	4aad      	ldr	r2, [pc, #692]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003b8e:	219a      	movs	r1, #154	; 0x9a
 8003b90:	0089      	lsls	r1, r1, #2
 8003b92:	468c      	mov	ip, r1
 8003b94:	44bc      	add	ip, r7
 8003b96:	4462      	add	r2, ip
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	330e      	adds	r3, #14
 8003b9e:	2296      	movs	r2, #150	; 0x96
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	18b9      	adds	r1, r7, r2
 8003ba4:	600b      	str	r3, [r1, #0]
    //get image width
    f_lseek(&myFile, BMP_WIDTH);
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	2112      	movs	r1, #18
 8003baa:	0018      	movs	r0, r3
 8003bac:	f003 f912 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8003bb0:	197b      	adds	r3, r7, r5
 8003bb2:	19b9      	adds	r1, r7, r6
 8003bb4:	1938      	adds	r0, r7, r4
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	f002 fe62 	bl	8006880 <f_read>
    img_width=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 8003bbc:	4ba1      	ldr	r3, [pc, #644]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003bbe:	219a      	movs	r1, #154	; 0x9a
 8003bc0:	0089      	lsls	r1, r1, #2
 8003bc2:	468c      	mov	ip, r1
 8003bc4:	44bc      	add	ip, r7
 8003bc6:	4463      	add	r3, ip
 8003bc8:	78db      	ldrb	r3, [r3, #3]
 8003bca:	061a      	lsls	r2, r3, #24
 8003bcc:	4b9d      	ldr	r3, [pc, #628]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003bce:	219a      	movs	r1, #154	; 0x9a
 8003bd0:	0089      	lsls	r1, r1, #2
 8003bd2:	468c      	mov	ip, r1
 8003bd4:	44bc      	add	ip, r7
 8003bd6:	4463      	add	r3, ip
 8003bd8:	789b      	ldrb	r3, [r3, #2]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	4b99      	ldr	r3, [pc, #612]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003be0:	219a      	movs	r1, #154	; 0x9a
 8003be2:	0089      	lsls	r1, r1, #2
 8003be4:	468c      	mov	ip, r1
 8003be6:	44bc      	add	ip, r7
 8003be8:	4463      	add	r3, ip
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	4a94      	ldr	r2, [pc, #592]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003bf2:	219a      	movs	r1, #154	; 0x9a
 8003bf4:	0089      	lsls	r1, r1, #2
 8003bf6:	468c      	mov	ip, r1
 8003bf8:	44bc      	add	ip, r7
 8003bfa:	4462      	add	r2, ip
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	2195      	movs	r1, #149	; 0x95
 8003c02:	0089      	lsls	r1, r1, #2
 8003c04:	1879      	adds	r1, r7, r1
 8003c06:	600b      	str	r3, [r1, #0]
    //get image height
    f_lseek(&myFile, BMP_HEIGHT);
 8003c08:	193b      	adds	r3, r7, r4
 8003c0a:	2116      	movs	r1, #22
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f003 f8e1 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8003c12:	197b      	adds	r3, r7, r5
 8003c14:	19b9      	adds	r1, r7, r6
 8003c16:	1938      	adds	r0, r7, r4
 8003c18:	2204      	movs	r2, #4
 8003c1a:	f002 fe31 	bl	8006880 <f_read>
    img_height=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 8003c1e:	4b89      	ldr	r3, [pc, #548]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003c20:	219a      	movs	r1, #154	; 0x9a
 8003c22:	0089      	lsls	r1, r1, #2
 8003c24:	468c      	mov	ip, r1
 8003c26:	44bc      	add	ip, r7
 8003c28:	4463      	add	r3, ip
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	061a      	lsls	r2, r3, #24
 8003c2e:	4b85      	ldr	r3, [pc, #532]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003c30:	219a      	movs	r1, #154	; 0x9a
 8003c32:	0089      	lsls	r1, r1, #2
 8003c34:	468c      	mov	ip, r1
 8003c36:	44bc      	add	ip, r7
 8003c38:	4463      	add	r3, ip
 8003c3a:	789b      	ldrb	r3, [r3, #2]
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	4b80      	ldr	r3, [pc, #512]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003c42:	219a      	movs	r1, #154	; 0x9a
 8003c44:	0089      	lsls	r1, r1, #2
 8003c46:	468c      	mov	ip, r1
 8003c48:	44bc      	add	ip, r7
 8003c4a:	4463      	add	r3, ip
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	4313      	orrs	r3, r2
 8003c52:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003c54:	219a      	movs	r1, #154	; 0x9a
 8003c56:	0089      	lsls	r1, r1, #2
 8003c58:	468c      	mov	ip, r1
 8003c5a:	44bc      	add	ip, r7
 8003c5c:	4462      	add	r2, ip
 8003c5e:	7812      	ldrb	r2, [r2, #0]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	2194      	movs	r1, #148	; 0x94
 8003c64:	0089      	lsls	r1, r1, #2
 8003c66:	1879      	adds	r1, r7, r1
 8003c68:	600b      	str	r3, [r1, #0]
    //get image Bits Per Pixel
    f_lseek(&myFile, BMP_BPP);
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	211c      	movs	r1, #28
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f003 f8b0 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8003c74:	197b      	adds	r3, r7, r5
 8003c76:	19b9      	adds	r1, r7, r6
 8003c78:	1938      	adds	r0, r7, r4
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	f002 fe00 	bl	8006880 <f_read>
    img_bpp=(data[1]<<8)|(data[0]);
 8003c80:	4b70      	ldr	r3, [pc, #448]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003c82:	219a      	movs	r1, #154	; 0x9a
 8003c84:	0089      	lsls	r1, r1, #2
 8003c86:	468c      	mov	ip, r1
 8003c88:	44bc      	add	ip, r7
 8003c8a:	4463      	add	r3, ip
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	4a6c      	ldr	r2, [pc, #432]	; (8003e44 <FT800_loadBMPfromSD+0x338>)
 8003c92:	219a      	movs	r1, #154	; 0x9a
 8003c94:	0089      	lsls	r1, r1, #2
 8003c96:	468c      	mov	ip, r1
 8003c98:	44bc      	add	ip, r7
 8003c9a:	4462      	add	r2, ip
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	2593      	movs	r5, #147	; 0x93
 8003ca2:	00ad      	lsls	r5, r5, #2
 8003ca4:	1979      	adds	r1, r7, r5
 8003ca6:	600b      	str	r3, [r1, #0]
    //go to image data
    f_lseek(&myFile, bmp_offset); 
 8003ca8:	2296      	movs	r2, #150	; 0x96
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	18bb      	adds	r3, r7, r2
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	193b      	adds	r3, r7, r4
 8003cb2:	0011      	movs	r1, r2
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f003 f88d 	bl	8006dd4 <f_lseek>
    
    //get bytes per color
    bytes=img_bpp>>3;
 8003cba:	197b      	adds	r3, r7, r5
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	08da      	lsrs	r2, r3, #3
 8003cc0:	4961      	ldr	r1, [pc, #388]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	701a      	strb	r2, [r3, #0]

    if(bytes==2) //only RGB565 is supported 2 bytes per pixel
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d000      	beq.n	8003cd0 <FT800_loadBMPfromSD+0x1c4>
 8003cce:	e095      	b.n	8003dfc <FT800_loadBMPfromSD+0x2f0>
    {
        offset=(img_width*bytes)*(img_height-1)+ram_offset;
 8003cd0:	4b5d      	ldr	r3, [pc, #372]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2295      	movs	r2, #149	; 0x95
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	18ba      	adds	r2, r7, r2
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	4353      	muls	r3, r2
 8003ce0:	2294      	movs	r2, #148	; 0x94
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	18ba      	adds	r2, r7, r2
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	4353      	muls	r3, r2
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	18d3      	adds	r3, r2, r3
 8003cf0:	2297      	movs	r2, #151	; 0x97
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	18ba      	adds	r2, r7, r2
 8003cf6:	6013      	str	r3, [r2, #0]
        for(y=0;y<img_height;y++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2299      	movs	r2, #153	; 0x99
 8003cfc:	0092      	lsls	r2, r2, #2
 8003cfe:	18ba      	adds	r2, r7, r2
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e057      	b.n	8003db4 <FT800_loadBMPfromSD+0x2a8>
        {

            f_read(&myFile, &buff, img_width*bytes, &byteCount);
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2295      	movs	r2, #149	; 0x95
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	18ba      	adds	r2, r7, r2
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	435a      	muls	r2, r3
 8003d14:	2318      	movs	r3, #24
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	494c      	ldr	r1, [pc, #304]	; (8003e4c <FT800_loadBMPfromSD+0x340>)
 8003d1a:	201c      	movs	r0, #28
 8003d1c:	1838      	adds	r0, r7, r0
 8003d1e:	f002 fdaf 	bl	8006880 <f_read>

            FT800_CS_LO();                      // CS low 
 8003d22:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <FT800_loadBMPfromSD+0x344>)
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0552      	lsls	r2, r2, #21
 8003d28:	619a      	str	r2, [r3, #24]
            FT800_WriteAddress(RAM_G+offset,WRITE);// Send the address                                  
 8003d2a:	2397      	movs	r3, #151	; 0x97
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fd fc6f 	bl	8001618 <FT800_WriteAddress>
            for(x=0;x<(img_width*bytes);x++)FT800_WriteSPI(buff[x]);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2298      	movs	r2, #152	; 0x98
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	18ba      	adds	r2, r7, r2
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e00e      	b.n	8003d64 <FT800_loadBMPfromSD+0x258>
 8003d46:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <FT800_loadBMPfromSD+0x340>)
 8003d48:	2498      	movs	r4, #152	; 0x98
 8003d4a:	00a4      	lsls	r4, r4, #2
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	18d3      	adds	r3, r2, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fc67 	bl	8003628 <FT800_WriteSPI>
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	193a      	adds	r2, r7, r4
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2295      	movs	r2, #149	; 0x95
 8003d6c:	0092      	lsls	r2, r2, #2
 8003d6e:	18ba      	adds	r2, r7, r2
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	4353      	muls	r3, r2
 8003d74:	2298      	movs	r2, #152	; 0x98
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	18ba      	adds	r2, r7, r2
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3e2      	bcc.n	8003d46 <FT800_loadBMPfromSD+0x23a>
            FT800_CS_HI();    
 8003d80:	4b33      	ldr	r3, [pc, #204]	; (8003e50 <FT800_loadBMPfromSD+0x344>)
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	0152      	lsls	r2, r2, #5
 8003d86:	619a      	str	r2, [r3, #24]
            offset-=((img_width)*bytes);
 8003d88:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2295      	movs	r2, #149	; 0x95
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	18ba      	adds	r2, r7, r2
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	4353      	muls	r3, r2
 8003d98:	2197      	movs	r1, #151	; 0x97
 8003d9a:	0089      	lsls	r1, r1, #2
 8003d9c:	187a      	adds	r2, r7, r1
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	187a      	adds	r2, r7, r1
 8003da4:	6013      	str	r3, [r2, #0]
        for(y=0;y<img_height;y++)
 8003da6:	2299      	movs	r2, #153	; 0x99
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	18bb      	adds	r3, r7, r2
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	18ba      	adds	r2, r7, r2
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	2399      	movs	r3, #153	; 0x99
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2394      	movs	r3, #148	; 0x94
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d39d      	bcc.n	8003d04 <FT800_loadBMPfromSD+0x1f8>
        }
        *width=img_width;
 8003dc8:	2395      	movs	r3, #149	; 0x95
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	801a      	strh	r2, [r3, #0]
        *height=img_height;
 8003dd6:	2394      	movs	r3, #148	; 0x94
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	801a      	strh	r2, [r3, #0]
        *bpc=bytes;
 8003de4:	239c      	movs	r3, #156	; 0x9c
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	2210      	movs	r2, #16
 8003dea:	4694      	mov	ip, r2
 8003dec:	44bc      	add	ip, r7
 8003dee:	4463      	add	r3, ip
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003df4:	18ba      	adds	r2, r7, r2
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e00e      	b.n	8003e1a <FT800_loadBMPfromSD+0x30e>
    }
    else
    {
        *width=0;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	801a      	strh	r2, [r3, #0]
        *height=0;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	801a      	strh	r2, [r3, #0]
        *bpc=0;        
 8003e08:	239c      	movs	r3, #156	; 0x9c
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	4694      	mov	ip, r2
 8003e10:	44bc      	add	ip, r7
 8003e12:	4463      	add	r3, ip
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
    }
    //close
    f_close(&myFile);
 8003e1a:	231c      	movs	r3, #28
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f002 ffa0 	bl	8006d64 <f_close>
    
    if(bytes==2)return 1;
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <FT800_loadBMPfromSD+0x33c>)
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d101      	bne.n	8003e32 <FT800_loadBMPfromSD+0x326>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <FT800_loadBMPfromSD+0x328>
    else return 0;
 8003e32:	2300      	movs	r3, #0
    
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	239b      	movs	r3, #155	; 0x9b
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	449d      	add	sp, r3
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e40:	fffffd94 	.word	0xfffffd94
 8003e44:	fffffdac 	.word	0xfffffdac
 8003e48:	0000024b 	.word	0x0000024b
 8003e4c:	20000398 	.word	0x20000398
 8003e50:	48000400 	.word	0x48000400

08003e54 <FT800_loadJPGfromSD>:


uint8_t FT800_loadJPGfromSD(uint32_t ram_offset, TCHAR *file_path, uint16_t *width, uint16_t *height)
{
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	4cae      	ldr	r4, [pc, #696]	; (8004110 <FT800_loadJPGfromSD+0x2bc>)
 8003e58:	44a5      	add	sp, r4
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]
	FIL myFile;
    unsigned int byteCount;
    uint8_t  data[8], read=1;
 8003e64:	4bab      	ldr	r3, [pc, #684]	; (8004114 <FT800_loadJPGfromSD+0x2c0>)
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
    uint32_t bytes, size=0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2295      	movs	r2, #149	; 0x95
 8003e70:	0092      	lsls	r2, r2, #2
 8003e72:	18ba      	adds	r2, r7, r2
 8003e74:	6013      	str	r3, [r2, #0]
    uint16_t len, marker=0, i;
 8003e76:	4ba8      	ldr	r3, [pc, #672]	; (8004118 <FT800_loadJPGfromSD+0x2c4>)
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	801a      	strh	r2, [r3, #0]
    //uint16_t soi,app0,length;

    //open
    f_open(&myFile, file_path, FA_READ);
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	2420      	movs	r4, #32
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	2201      	movs	r2, #1
 8003e86:	0018      	movs	r0, r3
 8003e88:	f002 fa42 	bl	8006310 <f_open>
    //offset
    f_lseek(&myFile, JPG_SOI); 
 8003e8c:	193b      	adds	r3, r7, r4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	0018      	movs	r0, r3
 8003e92:	f002 ff9f 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 8003e96:	251c      	movs	r5, #28
 8003e98:	197b      	adds	r3, r7, r5
 8003e9a:	2614      	movs	r6, #20
 8003e9c:	19b9      	adds	r1, r7, r6
 8003e9e:	1938      	adds	r0, r7, r4
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f002 fced 	bl	8006880 <f_read>
    //soi=(data[0]<<8)|(data[1]);
    //get image width
    f_lseek(&myFile, JPG_APP0);
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f002 ff92 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 8003eb0:	197b      	adds	r3, r7, r5
 8003eb2:	19b9      	adds	r1, r7, r6
 8003eb4:	1938      	adds	r0, r7, r4
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f002 fce2 	bl	8006880 <f_read>
    //app0=(data[0]<<8)|(data[1]);
    //get image height
    f_lseek(&myFile, JPG_LEN);
 8003ebc:	193b      	adds	r3, r7, r4
 8003ebe:	2104      	movs	r1, #4
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f002 ff87 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 8003ec6:	197b      	adds	r3, r7, r5
 8003ec8:	19b9      	adds	r1, r7, r6
 8003eca:	1938      	adds	r0, r7, r4
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f002 fcd7 	bl	8006880 <f_read>
    len=(data[0]<<8)|(data[1]);
 8003ed2:	4b92      	ldr	r3, [pc, #584]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003ed4:	2298      	movs	r2, #152	; 0x98
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	4694      	mov	ip, r2
 8003eda:	44bc      	add	ip, r7
 8003edc:	4463      	add	r3, ip
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	b21a      	sxth	r2, r3
 8003ee4:	4b8d      	ldr	r3, [pc, #564]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003ee6:	2198      	movs	r1, #152	; 0x98
 8003ee8:	0089      	lsls	r1, r1, #2
 8003eea:	468c      	mov	ip, r1
 8003eec:	44bc      	add	ip, r7
 8003eee:	4463      	add	r3, ip
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b21a      	sxth	r2, r3
 8003ef8:	4b89      	ldr	r3, [pc, #548]	; (8004120 <FT800_loadJPGfromSD+0x2cc>)
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	801a      	strh	r2, [r3, #0]


    //go to image data

      while(1) {
        if(marker == 0xFFC0) break;
 8003efe:	4b86      	ldr	r3, [pc, #536]	; (8004118 <FT800_loadJPGfromSD+0x2c4>)
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	4a87      	ldr	r2, [pc, #540]	; (8004124 <FT800_loadJPGfromSD+0x2d0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d03e      	beq.n	8003f88 <FT800_loadJPGfromSD+0x134>
        if(marker == 0xFF00) break;
 8003f0a:	4b83      	ldr	r3, [pc, #524]	; (8004118 <FT800_loadJPGfromSD+0x2c4>)
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	881a      	ldrh	r2, [r3, #0]
 8003f10:	23ff      	movs	r3, #255	; 0xff
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d039      	beq.n	8003f8c <FT800_loadJPGfromSD+0x138>
        if (f_lseek(&myFile, len+2+size) != 0) break;
 8003f18:	4b81      	ldr	r3, [pc, #516]	; (8004120 <FT800_loadJPGfromSD+0x2cc>)
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	881a      	ldrh	r2, [r3, #0]
 8003f1e:	2395      	movs	r3, #149	; 0x95
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	18d3      	adds	r3, r2, r3
 8003f28:	1c9a      	adds	r2, r3, #2
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f002 ff4f 	bl	8006dd4 <f_lseek>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d12a      	bne.n	8003f90 <FT800_loadJPGfromSD+0x13c>
        f_read(&myFile, &data, 4, &byteCount);
 8003f3a:	231c      	movs	r3, #28
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2214      	movs	r2, #20
 8003f40:	18b9      	adds	r1, r7, r2
 8003f42:	2220      	movs	r2, #32
 8003f44:	18b8      	adds	r0, r7, r2
 8003f46:	2204      	movs	r2, #4
 8003f48:	f002 fc9a 	bl	8006880 <f_read>
        marker = data[0] << 8 | data[1];
 8003f4c:	4b73      	ldr	r3, [pc, #460]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003f4e:	2298      	movs	r2, #152	; 0x98
 8003f50:	0092      	lsls	r2, r2, #2
 8003f52:	4694      	mov	ip, r2
 8003f54:	44bc      	add	ip, r7
 8003f56:	4463      	add	r3, ip
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	b21a      	sxth	r2, r3
 8003f5e:	4b6f      	ldr	r3, [pc, #444]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003f60:	2198      	movs	r1, #152	; 0x98
 8003f62:	0089      	lsls	r1, r1, #2
 8003f64:	468c      	mov	ip, r1
 8003f66:	44bc      	add	ip, r7
 8003f68:	4463      	add	r3, ip
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	4b69      	ldr	r3, [pc, #420]	; (8004118 <FT800_loadJPGfromSD+0x2c4>)
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	801a      	strh	r2, [r3, #0]
       //length = data[2] << 8 | data[3];
        size+=4;
 8003f78:	2295      	movs	r2, #149	; 0x95
 8003f7a:	0092      	lsls	r2, r2, #2
 8003f7c:	18bb      	adds	r3, r7, r2
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3304      	adds	r3, #4
 8003f82:	18ba      	adds	r2, r7, r2
 8003f84:	6013      	str	r3, [r2, #0]
        if(marker == 0xFFC0) break;
 8003f86:	e7ba      	b.n	8003efe <FT800_loadJPGfromSD+0xaa>
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	e002      	b.n	8003f92 <FT800_loadJPGfromSD+0x13e>
        if(marker == 0xFF00) break;
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	e000      	b.n	8003f92 <FT800_loadJPGfromSD+0x13e>
        if (f_lseek(&myFile, len+2+size) != 0) break;
 8003f90:	46c0      	nop			; (mov r8, r8)
    }
    f_lseek(&myFile, len+2+size+1);
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <FT800_loadJPGfromSD+0x2cc>)
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	2395      	movs	r3, #149	; 0x95
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	18d3      	adds	r3, r2, r3
 8003fa2:	1cda      	adds	r2, r3, #3
 8003fa4:	2420      	movs	r4, #32
 8003fa6:	193b      	adds	r3, r7, r4
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f002 ff12 	bl	8006dd4 <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8003fb0:	231c      	movs	r3, #28
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2214      	movs	r2, #20
 8003fb6:	18b9      	adds	r1, r7, r2
 8003fb8:	1938      	adds	r0, r7, r4
 8003fba:	2204      	movs	r2, #4
 8003fbc:	f002 fc60 	bl	8006880 <f_read>
    *height=(data[0]<< 8)|data[1];
 8003fc0:	4b56      	ldr	r3, [pc, #344]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003fc2:	2298      	movs	r2, #152	; 0x98
 8003fc4:	0092      	lsls	r2, r2, #2
 8003fc6:	4694      	mov	ip, r2
 8003fc8:	44bc      	add	ip, r7
 8003fca:	4463      	add	r3, ip
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	b21a      	sxth	r2, r3
 8003fd2:	4b52      	ldr	r3, [pc, #328]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003fd4:	2198      	movs	r1, #152	; 0x98
 8003fd6:	0089      	lsls	r1, r1, #2
 8003fd8:	468c      	mov	ip, r1
 8003fda:	44bc      	add	ip, r7
 8003fdc:	4463      	add	r3, ip
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	801a      	strh	r2, [r3, #0]
    *width=(data[2]<< 8)|data[3];
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8003fee:	2298      	movs	r2, #152	; 0x98
 8003ff0:	0092      	lsls	r2, r2, #2
 8003ff2:	4694      	mov	ip, r2
 8003ff4:	44bc      	add	ip, r7
 8003ff6:	4463      	add	r3, ip
 8003ff8:	789b      	ldrb	r3, [r3, #2]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	b21a      	sxth	r2, r3
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <FT800_loadJPGfromSD+0x2c8>)
 8004000:	2198      	movs	r1, #152	; 0x98
 8004002:	0089      	lsls	r1, r1, #2
 8004004:	468c      	mov	ip, r1
 8004006:	44bc      	add	ip, r7
 8004008:	4463      	add	r3, ip
 800400a:	78db      	ldrb	r3, [r3, #3]
 800400c:	b21b      	sxth	r3, r3
 800400e:	4313      	orrs	r3, r2
 8004010:	b21b      	sxth	r3, r3
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	801a      	strh	r2, [r3, #0]

   
    f_lseek(&myFile, 0); 
 8004018:	193b      	adds	r3, r7, r4
 800401a:	2100      	movs	r1, #0
 800401c:	0018      	movs	r0, r3
 800401e:	f002 fed9 	bl	8006dd4 <f_lseek>
    FT800_finishList();
 8004022:	f7fd fdfd 	bl	8001c20 <FT800_finishList>

    FT800_loadJpgCMD(ram_offset,OPT_NODL);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2102      	movs	r1, #2
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff faa1 	bl	8003572 <FT800_loadJpgCMD>
    while(read)
 8004030:	e053      	b.n	80040da <FT800_loadJPGfromSD+0x286>
    {
      f_read(&myFile, &buff, 2048, &byteCount);
 8004032:	231c      	movs	r3, #28
 8004034:	18fc      	adds	r4, r7, r3
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	011a      	lsls	r2, r3, #4
 800403a:	493b      	ldr	r1, [pc, #236]	; (8004128 <FT800_loadJPGfromSD+0x2d4>)
 800403c:	2320      	movs	r3, #32
 800403e:	18f8      	adds	r0, r7, r3
 8004040:	0023      	movs	r3, r4
 8004042:	f002 fc1d 	bl	8006880 <f_read>

      if(byteCount<2048)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4a38      	ldr	r2, [pc, #224]	; (800412c <FT800_loadJPGfromSD+0x2d8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d809      	bhi.n	8004062 <FT800_loadJPGfromSD+0x20e>
      {
        bytes=byteCount;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2296      	movs	r2, #150	; 0x96
 8004052:	0092      	lsls	r2, r2, #2
 8004054:	18ba      	adds	r2, r7, r2
 8004056:	6013      	str	r3, [r2, #0]
        read=0;
 8004058:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <FT800_loadJPGfromSD+0x2c0>)
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e00e      	b.n	8004080 <FT800_loadJPGfromSD+0x22c>
      }
      else bytes=2048;
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	2296      	movs	r2, #150	; 0x96
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	18ba      	adds	r2, r7, r2
 800406c:	6013      	str	r3, [r2, #0]
      while(FT800_getFreeSpace()<bytes)
 800406e:	e007      	b.n	8004080 <FT800_loadJPGfromSD+0x22c>
      set_CMD_Offset(FT800_Read16(REG_CMD_WRITE));
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <FT800_loadJPGfromSD+0x2dc>)
 8004072:	0018      	movs	r0, r3
 8004074:	f7fd fbe0 	bl	8001838 <FT800_Read16>
 8004078:	0003      	movs	r3, r0
 800407a:	0018      	movs	r0, r3
 800407c:	f7fd fab2 	bl	80015e4 <set_CMD_Offset>
      while(FT800_getFreeSpace()<bytes)
 8004080:	f7fd fe02 	bl	8001c88 <FT800_getFreeSpace>
 8004084:	0003      	movs	r3, r0
 8004086:	001a      	movs	r2, r3
 8004088:	2396      	movs	r3, #150	; 0x96
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4293      	cmp	r3, r2
 8004092:	d8ed      	bhi.n	8004070 <FT800_loadJPGfromSD+0x21c>
      for(i=0;i<bytes;i++) FT800_Write8(RAM_CMD,buff[i]);    
 8004094:	2394      	movs	r3, #148	; 0x94
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2200      	movs	r2, #0
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	e010      	b.n	80040c2 <FT800_loadJPGfromSD+0x26e>
 80040a0:	2494      	movs	r4, #148	; 0x94
 80040a2:	00a4      	lsls	r4, r4, #2
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <FT800_loadJPGfromSD+0x2d4>)
 80040aa:	5cd2      	ldrb	r2, [r2, r3]
 80040ac:	2384      	movs	r3, #132	; 0x84
 80040ae:	035b      	lsls	r3, r3, #13
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f7fd faf6 	bl	80016a4 <FT800_Write8>
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	881a      	ldrh	r2, [r3, #0]
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	3201      	adds	r2, #1
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	2394      	movs	r3, #148	; 0x94
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	2296      	movs	r2, #150	; 0x96
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	18ba      	adds	r2, r7, r2
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d8e4      	bhi.n	80040a0 <FT800_loadJPGfromSD+0x24c>
      FT800_executeCommands();
 80040d6:	f7fd fdc7 	bl	8001c68 <FT800_executeCommands>
    while(read)
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <FT800_loadJPGfromSD+0x2c0>)
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1a6      	bne.n	8004032 <FT800_loadJPGfromSD+0x1de>
   }
       
   FT800_align(bytes);
 80040e4:	2396      	movs	r3, #150	; 0x96
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7fd feea 	bl	8001ec8 <FT800_align>
   FT800_endOfList(); 
 80040f4:	f7fd fd76 	bl	8001be4 <FT800_endOfList>
       
   f_close(&myFile);
 80040f8:	2320      	movs	r3, #32
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	0018      	movs	r0, r3
 80040fe:	f002 fe31 	bl	8006d64 <f_close>
   
   return 1;
 8004102:	2301      	movs	r3, #1
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	2399      	movs	r3, #153	; 0x99
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	449d      	add	sp, r3
 800410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004110:	fffffd9c 	.word	0xfffffd9c
 8004114:	0000025f 	.word	0x0000025f
 8004118:	00000252 	.word	0x00000252
 800411c:	fffffdb4 	.word	0xfffffdb4
 8004120:	0000024e 	.word	0x0000024e
 8004124:	0000ffc0 	.word	0x0000ffc0
 8004128:	20000398 	.word	0x20000398
 800412c:	000007ff 	.word	0x000007ff
 8004130:	001024e8 	.word	0x001024e8

08004134 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	0002      	movs	r2, r0
 800413c:	1dfb      	adds	r3, r7, #7
 800413e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004140:	1dfb      	adds	r3, r7, #7
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <disk_status+0x40>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	3304      	adds	r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	1dfa      	adds	r2, r7, #7
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	4907      	ldr	r1, [pc, #28]	; (8004174 <disk_status+0x40>)
 8004156:	188a      	adds	r2, r1, r2
 8004158:	7a12      	ldrb	r2, [r2, #8]
 800415a:	250f      	movs	r5, #15
 800415c:	197c      	adds	r4, r7, r5
 800415e:	0010      	movs	r0, r2
 8004160:	4798      	blx	r3
 8004162:	0003      	movs	r3, r0
 8004164:	7023      	strb	r3, [r4, #0]
  return stat;
 8004166:	197b      	adds	r3, r7, r5
 8004168:	781b      	ldrb	r3, [r3, #0]
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bdb0      	pop	{r4, r5, r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000120 	.word	0x20000120

08004178 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	0002      	movs	r2, r0
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004184:	230f      	movs	r3, #15
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <disk_initialize+0x60>)
 8004192:	5cd3      	ldrb	r3, [r2, r3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d117      	bne.n	80041c8 <disk_initialize+0x50>
  { 
    disk.is_initialized[pdrv] = 1;
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <disk_initialize+0x60>)
 800419e:	2101      	movs	r1, #1
 80041a0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <disk_initialize+0x60>)
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	3304      	adds	r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	1dfa      	adds	r2, r7, #7
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <disk_initialize+0x60>)
 80041b8:	188a      	adds	r2, r1, r2
 80041ba:	7a12      	ldrb	r2, [r2, #8]
 80041bc:	210f      	movs	r1, #15
 80041be:	187c      	adds	r4, r7, r1
 80041c0:	0010      	movs	r0, r2
 80041c2:	4798      	blx	r3
 80041c4:	0003      	movs	r3, r0
 80041c6:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80041c8:	230f      	movs	r3, #15
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b005      	add	sp, #20
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	20000120 	.word	0x20000120

080041dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	210f      	movs	r1, #15
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	1c02      	adds	r2, r0, #0
 80041ee:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <disk_read+0x4c>)
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	18d3      	adds	r3, r2, r3
 80041fa:	3304      	adds	r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689d      	ldr	r5, [r3, #8]
 8004200:	187b      	adds	r3, r7, r1
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <disk_read+0x4c>)
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	7a18      	ldrb	r0, [r3, #8]
 800420a:	2617      	movs	r6, #23
 800420c:	19bc      	adds	r4, r7, r6
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	47a8      	blx	r5
 8004216:	0003      	movs	r3, r0
 8004218:	7023      	strb	r3, [r4, #0]
  return res;
 800421a:	19bb      	adds	r3, r7, r6
 800421c:	781b      	ldrb	r3, [r3, #0]
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b007      	add	sp, #28
 8004224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20000120 	.word	0x20000120

0800422c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	210f      	movs	r1, #15
 800423a:	187b      	adds	r3, r7, r1
 800423c:	1c02      	adds	r2, r0, #0
 800423e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004240:	187b      	adds	r3, r7, r1
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <disk_write+0x4c>)
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	3304      	adds	r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68dd      	ldr	r5, [r3, #12]
 8004250:	187b      	adds	r3, r7, r1
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4a08      	ldr	r2, [pc, #32]	; (8004278 <disk_write+0x4c>)
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	7a18      	ldrb	r0, [r3, #8]
 800425a:	2617      	movs	r6, #23
 800425c:	19bc      	adds	r4, r7, r6
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	47a8      	blx	r5
 8004266:	0003      	movs	r3, r0
 8004268:	7023      	strb	r3, [r4, #0]
  return res;
 800426a:	19bb      	adds	r3, r7, r6
 800426c:	781b      	ldrb	r3, [r3, #0]
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b007      	add	sp, #28
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	20000120 	.word	0x20000120

0800427c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	603a      	str	r2, [r7, #0]
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	1dbb      	adds	r3, r7, #6
 800428c:	1c0a      	adds	r2, r1, #0
 800428e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <disk_ioctl+0x4c>)
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	18d3      	adds	r3, r2, r3
 800429a:	3304      	adds	r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	1dfa      	adds	r2, r7, #7
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	4908      	ldr	r1, [pc, #32]	; (80042c8 <disk_ioctl+0x4c>)
 80042a6:	188a      	adds	r2, r1, r2
 80042a8:	7a10      	ldrb	r0, [r2, #8]
 80042aa:	260f      	movs	r6, #15
 80042ac:	19bc      	adds	r4, r7, r6
 80042ae:	683d      	ldr	r5, [r7, #0]
 80042b0:	1dba      	adds	r2, r7, #6
 80042b2:	7811      	ldrb	r1, [r2, #0]
 80042b4:	002a      	movs	r2, r5
 80042b6:	4798      	blx	r3
 80042b8:	0003      	movs	r3, r0
 80042ba:	7023      	strb	r3, [r4, #0]
  return res;
 80042bc:	19bb      	adds	r3, r7, r6
 80042be:	781b      	ldrb	r3, [r3, #0]
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b005      	add	sp, #20
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c8:	20000120 	.word	0x20000120

080042cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80042e0:	e007      	b.n	80042f2 <mem_cpy+0x26>
		*d++ = *s++;
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	1c53      	adds	r3, r2, #1
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1c59      	adds	r1, r3, #1
 80042ec:	6179      	str	r1, [r7, #20]
 80042ee:	7812      	ldrb	r2, [r2, #0]
 80042f0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1e5a      	subs	r2, r3, #1
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f2      	bne.n	80042e2 <mem_cpy+0x16>
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b006      	add	sp, #24
 8004302:	bd80      	pop	{r7, pc}

08004304 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004314:	e005      	b.n	8004322 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	617a      	str	r2, [r7, #20]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1e5a      	subs	r2, r3, #1
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f4      	bne.n	8004316 <mem_set+0x12>
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b006      	add	sp, #24
 8004332:	bd80      	pop	{r7, pc}

08004334 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <mem_cmp+0x40>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	0019      	movs	r1, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	61ba      	str	r2, [r7, #24]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	1acb      	subs	r3, r1, r3
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ec      	beq.n	800434e <mem_cmp+0x1a>
	return r;
 8004374:	697b      	ldr	r3, [r7, #20]
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b008      	add	sp, #32
 800437c:	bd80      	pop	{r7, pc}

0800437e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004388:	e002      	b.n	8004390 <chk_chr+0x12>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3301      	adds	r3, #1
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <chk_chr+0x26>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	001a      	movs	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d1f2      	bne.n	800438a <chk_chr+0xc>
	return *str;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	781b      	ldrb	r3, [r3, #0]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e038      	b.n	8004436 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80043c4:	492f      	ldr	r1, [pc, #188]	; (8004484 <chk_lock+0xd4>)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	0013      	movs	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	585b      	ldr	r3, [r3, r1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02a      	beq.n	800442c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80043d6:	492b      	ldr	r1, [pc, #172]	; (8004484 <chk_lock+0xd4>)
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	0013      	movs	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	585a      	ldr	r2, [r3, r1]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	58cb      	ldr	r3, [r1, r3]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d11f      	bne.n	8004430 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80043f0:	4924      	ldr	r1, [pc, #144]	; (8004484 <chk_lock+0xd4>)
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	0013      	movs	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	189b      	adds	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	18cb      	adds	r3, r1, r3
 80043fe:	3304      	adds	r3, #4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	2382      	movs	r3, #130	; 0x82
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800440a:	429a      	cmp	r2, r3
 800440c:	d110      	bne.n	8004430 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800440e:	491d      	ldr	r1, [pc, #116]	; (8004484 <chk_lock+0xd4>)
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	0013      	movs	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	189b      	adds	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	18cb      	adds	r3, r1, r3
 800441c:	3308      	adds	r3, #8
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4919      	ldr	r1, [pc, #100]	; (8004488 <chk_lock+0xd8>)
 8004424:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8004426:	429a      	cmp	r2, r3
 8004428:	d102      	bne.n	8004430 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800442a:	e007      	b.n	800443c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d9c3      	bls.n	80043c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d109      	bne.n	8004456 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <chk_lock+0x9e>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d101      	bne.n	8004452 <chk_lock+0xa2>
 800444e:	2300      	movs	r3, #0
 8004450:	e014      	b.n	800447c <chk_lock+0xcc>
 8004452:	2312      	movs	r3, #18
 8004454:	e012      	b.n	800447c <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10c      	bne.n	8004476 <chk_lock+0xc6>
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <chk_lock+0xd4>)
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	0013      	movs	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	189b      	adds	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	18cb      	adds	r3, r1, r3
 800446a:	330a      	adds	r3, #10
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	429a      	cmp	r2, r3
 8004474:	d101      	bne.n	800447a <chk_lock+0xca>
 8004476:	2310      	movs	r3, #16
 8004478:	e000      	b.n	800447c <chk_lock+0xcc>
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b004      	add	sp, #16
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000108 	.word	0x20000108
 8004488:	00000206 	.word	0x00000206

0800448c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	e002      	b.n	800449e <enq_lock+0x12>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3301      	adds	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d808      	bhi.n	80044b6 <enq_lock+0x2a>
 80044a4:	4908      	ldr	r1, [pc, #32]	; (80044c8 <enq_lock+0x3c>)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	0013      	movs	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	585b      	ldr	r3, [r3, r1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3b02      	subs	r3, #2
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	4193      	sbcs	r3, r2
 80044be:	b2db      	uxtb	r3, r3
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000108 	.word	0x20000108

080044cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e02c      	b.n	8004536 <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 80044dc:	4955      	ldr	r1, [pc, #340]	; (8004634 <inc_lock+0x168>)
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	0013      	movs	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	585a      	ldr	r2, [r3, r1]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	58cb      	ldr	r3, [r1, r3]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11c      	bne.n	8004530 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 80044f6:	494f      	ldr	r1, [pc, #316]	; (8004634 <inc_lock+0x168>)
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	0013      	movs	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	18cb      	adds	r3, r1, r3
 8004504:	3304      	adds	r3, #4
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	2382      	movs	r3, #130	; 0x82
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8004510:	429a      	cmp	r2, r3
 8004512:	d10d      	bne.n	8004530 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8004514:	4947      	ldr	r1, [pc, #284]	; (8004634 <inc_lock+0x168>)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	0013      	movs	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	189b      	adds	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	18cb      	adds	r3, r1, r3
 8004522:	3308      	adds	r3, #8
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4943      	ldr	r1, [pc, #268]	; (8004638 <inc_lock+0x16c>)
 800452a:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 800452c:	429a      	cmp	r2, r3
 800452e:	d006      	beq.n	800453e <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d9cf      	bls.n	80044dc <inc_lock+0x10>
 800453c:	e000      	b.n	8004540 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 800453e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d145      	bne.n	80045d2 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e002      	b.n	8004552 <inc_lock+0x86>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d808      	bhi.n	800456a <inc_lock+0x9e>
 8004558:	4936      	ldr	r1, [pc, #216]	; (8004634 <inc_lock+0x168>)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	0013      	movs	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	189b      	adds	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	585b      	ldr	r3, [r3, r1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d101      	bne.n	8004574 <inc_lock+0xa8>
 8004570:	2300      	movs	r3, #0
 8004572:	e05a      	b.n	800462a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	58d0      	ldr	r0, [r2, r3]
 800457c:	492d      	ldr	r1, [pc, #180]	; (8004634 <inc_lock+0x168>)
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	0013      	movs	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	189b      	adds	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	2382      	movs	r3, #130	; 0x82
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	58d1      	ldr	r1, [r2, r3]
 8004592:	4828      	ldr	r0, [pc, #160]	; (8004634 <inc_lock+0x168>)
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	0013      	movs	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	189b      	adds	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	18c3      	adds	r3, r0, r3
 80045a0:	3304      	adds	r3, #4
 80045a2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a24      	ldr	r2, [pc, #144]	; (8004638 <inc_lock+0x16c>)
 80045a8:	5a98      	ldrh	r0, [r3, r2]
 80045aa:	4922      	ldr	r1, [pc, #136]	; (8004634 <inc_lock+0x168>)
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	0013      	movs	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	18cb      	adds	r3, r1, r3
 80045b8:	3308      	adds	r3, #8
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80045be:	491d      	ldr	r1, [pc, #116]	; (8004634 <inc_lock+0x168>)
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	0013      	movs	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	18cb      	adds	r3, r1, r3
 80045cc:	330a      	adds	r3, #10
 80045ce:	2200      	movs	r2, #0
 80045d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <inc_lock+0x126>
 80045d8:	4916      	ldr	r1, [pc, #88]	; (8004634 <inc_lock+0x168>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	0013      	movs	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18cb      	adds	r3, r1, r3
 80045e6:	330a      	adds	r3, #10
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <inc_lock+0x126>
 80045ee:	2300      	movs	r3, #0
 80045f0:	e01b      	b.n	800462a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <inc_lock+0x144>
 80045f8:	490e      	ldr	r1, [pc, #56]	; (8004634 <inc_lock+0x168>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	0013      	movs	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	189b      	adds	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	18cb      	adds	r3, r1, r3
 8004606:	330a      	adds	r3, #10
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	e001      	b.n	8004614 <inc_lock+0x148>
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	005a      	lsls	r2, r3, #1
 8004614:	4807      	ldr	r0, [pc, #28]	; (8004634 <inc_lock+0x168>)
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	000b      	movs	r3, r1
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	185b      	adds	r3, r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	18c3      	adds	r3, r0, r3
 8004622:	330a      	adds	r3, #10
 8004624:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	20000108 	.word	0x20000108
 8004638:	00000206 	.word	0x00000206

0800463c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d83d      	bhi.n	80046cc <dec_lock+0x90>
		n = Files[i].ctr;
 8004650:	240e      	movs	r4, #14
 8004652:	1939      	adds	r1, r7, r4
 8004654:	4823      	ldr	r0, [pc, #140]	; (80046e4 <dec_lock+0xa8>)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	0013      	movs	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	189b      	adds	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18c3      	adds	r3, r0, r3
 8004662:	330a      	adds	r3, #10
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004668:	193b      	adds	r3, r7, r4
 800466a:	881a      	ldrh	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	429a      	cmp	r2, r3
 8004672:	d103      	bne.n	800467c <dec_lock+0x40>
 8004674:	230e      	movs	r3, #14
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	2200      	movs	r2, #0
 800467a:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 800467c:	230e      	movs	r3, #14
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <dec_lock+0x56>
 8004686:	210e      	movs	r1, #14
 8004688:	187b      	adds	r3, r7, r1
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	187b      	adds	r3, r7, r1
 800468e:	3a01      	subs	r2, #1
 8004690:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8004692:	4914      	ldr	r1, [pc, #80]	; (80046e4 <dec_lock+0xa8>)
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	0013      	movs	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	189b      	adds	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	18cb      	adds	r3, r1, r3
 80046a0:	330a      	adds	r3, #10
 80046a2:	210e      	movs	r1, #14
 80046a4:	187a      	adds	r2, r7, r1
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d107      	bne.n	80046c2 <dec_lock+0x86>
 80046b2:	490c      	ldr	r1, [pc, #48]	; (80046e4 <dec_lock+0xa8>)
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	0013      	movs	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	2200      	movs	r2, #0
 80046c0:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 80046c2:	230d      	movs	r3, #13
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e003      	b.n	80046d4 <dec_lock+0x98>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80046cc:	230d      	movs	r3, #13
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	2202      	movs	r2, #2
 80046d2:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80046d4:	230d      	movs	r3, #13
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b005      	add	sp, #20
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	20000108 	.word	0x20000108

080046e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e014      	b.n	8004720 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80046f6:	490e      	ldr	r1, [pc, #56]	; (8004730 <clear_lock+0x48>)
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	0013      	movs	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	585b      	ldr	r3, [r3, r1]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d107      	bne.n	800471a <clear_lock+0x32>
 800470a:	4909      	ldr	r1, [pc, #36]	; (8004730 <clear_lock+0x48>)
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	0013      	movs	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	189b      	adds	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	2200      	movs	r2, #0
 8004718:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d9e7      	bls.n	80046f6 <clear_lock+0xe>
	}
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	20000108 	.word	0x20000108

08004734 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800473c:	230f      	movs	r3, #15
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	2381      	movs	r3, #129	; 0x81
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d03e      	beq.n	80047ce <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	238b      	movs	r3, #139	; 0x8b
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	58d3      	ldr	r3, [r2, r3]
 8004758:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <sync_window+0xa8>)
 800475e:	5c98      	ldrb	r0, [r3, r2]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	2301      	movs	r3, #1
 8004766:	f7ff fd61 	bl	800422c <disk_write>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d004      	beq.n	8004778 <sync_window+0x44>
			res = FR_DISK_ERR;
 800476e:	230f      	movs	r3, #15
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e02a      	b.n	80047ce <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	2381      	movs	r3, #129	; 0x81
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	2100      	movs	r1, #0
 8004780:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	2388      	movs	r3, #136	; 0x88
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	58d3      	ldr	r3, [r2, r3]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	1ad2      	subs	r2, r2, r3
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	2386      	movs	r3, #134	; 0x86
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	58cb      	ldr	r3, [r1, r3]
 8004796:	429a      	cmp	r2, r3
 8004798:	d219      	bcs.n	80047ce <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <sync_window+0xac>)
 800479e:	5c9b      	ldrb	r3, [r3, r2]
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e011      	b.n	80047c8 <sync_window+0x94>
					wsect += fs->fsize;
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	2386      	movs	r3, #134	; 0x86
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	58d3      	ldr	r3, [r2, r3]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a09      	ldr	r2, [pc, #36]	; (80047dc <sync_window+0xa8>)
 80047b6:	5c98      	ldrb	r0, [r3, r2]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	2301      	movs	r3, #1
 80047be:	f7ff fd35 	bl	800422c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d8ea      	bhi.n	80047a4 <sync_window+0x70>
				}
			}
		}
	}
	return res;
 80047ce:	230f      	movs	r3, #15
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	781b      	ldrb	r3, [r3, #0]
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b006      	add	sp, #24
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	00000201 	.word	0x00000201
 80047e0:	00000203 	.word	0x00000203

080047e4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80047e4:	b5b0      	push	{r4, r5, r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80047ee:	230f      	movs	r3, #15
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	238b      	movs	r3, #139	; 0x8b
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	58d3      	ldr	r3, [r2, r3]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d021      	beq.n	8004848 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004804:	250f      	movs	r5, #15
 8004806:	197c      	adds	r4, r7, r5
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff ff92 	bl	8004734 <sync_window>
 8004810:	0003      	movs	r3, r0
 8004812:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004814:	197b      	adds	r3, r7, r5
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d115      	bne.n	8004848 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <move_window+0x74>)
 8004820:	5c98      	ldrb	r0, [r3, r2]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	2301      	movs	r3, #1
 8004828:	f7ff fcd8 	bl	80041dc <disk_read>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d006      	beq.n	800483e <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004830:	2301      	movs	r3, #1
 8004832:	425b      	negs	r3, r3
 8004834:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004836:	230f      	movs	r3, #15
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	238b      	movs	r3, #139	; 0x8b
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8004848:	230f      	movs	r3, #15
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b004      	add	sp, #16
 8004854:	bdb0      	pop	{r4, r5, r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	00000201 	.word	0x00000201

0800485c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004864:	250f      	movs	r5, #15
 8004866:	197c      	adds	r4, r7, r5
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff ff62 	bl	8004734 <sync_window>
 8004870:	0003      	movs	r3, r0
 8004872:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004874:	197b      	adds	r3, r7, r5
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d000      	beq.n	800487e <sync_fs+0x22>
 800487c:	e0b4      	b.n	80049e8 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	5cd3      	ldrb	r3, [r2, r3]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d000      	beq.n	800488c <sync_fs+0x30>
 800488a:	e09f      	b.n	80049cc <sync_fs+0x170>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a5a      	ldr	r2, [pc, #360]	; (80049f8 <sync_fs+0x19c>)
 8004890:	5c9b      	ldrb	r3, [r3, r2]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d000      	beq.n	8004898 <sync_fs+0x3c>
 8004896:	e099      	b.n	80049cc <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	001a      	movs	r2, r3
 80048a0:	2100      	movs	r1, #0
 80048a2:	f7ff fd2f 	bl	8004304 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	23ff      	movs	r3, #255	; 0xff
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2155      	movs	r1, #85	; 0x55
 80048ae:	54d1      	strb	r1, [r2, r3]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a52      	ldr	r2, [pc, #328]	; (80049fc <sync_fs+0x1a0>)
 80048b4:	21aa      	movs	r1, #170	; 0xaa
 80048b6:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2252      	movs	r2, #82	; 0x52
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2252      	movs	r2, #82	; 0x52
 80048c2:	705a      	strb	r2, [r3, #1]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2261      	movs	r2, #97	; 0x61
 80048c8:	709a      	strb	r2, [r3, #2]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2241      	movs	r2, #65	; 0x41
 80048ce:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	23f2      	movs	r3, #242	; 0xf2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	2172      	movs	r1, #114	; 0x72
 80048d8:	54d1      	strb	r1, [r2, r3]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	23e6      	movs	r3, #230	; 0xe6
 80048de:	33ff      	adds	r3, #255	; 0xff
 80048e0:	2172      	movs	r1, #114	; 0x72
 80048e2:	54d1      	strb	r1, [r2, r3]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	23f3      	movs	r3, #243	; 0xf3
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	2141      	movs	r1, #65	; 0x41
 80048ec:	54d1      	strb	r1, [r2, r3]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	23e8      	movs	r3, #232	; 0xe8
 80048f2:	33ff      	adds	r3, #255	; 0xff
 80048f4:	2161      	movs	r1, #97	; 0x61
 80048f6:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	2384      	movs	r3, #132	; 0x84
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	58d3      	ldr	r3, [r2, r3]
 8004900:	b2d9      	uxtb	r1, r3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	23f4      	movs	r3, #244	; 0xf4
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	54d1      	strb	r1, [r2, r3]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	2384      	movs	r3, #132	; 0x84
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	58d3      	ldr	r3, [r2, r3]
 8004912:	b29b      	uxth	r3, r3
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	b29b      	uxth	r3, r3
 8004918:	b2d9      	uxtb	r1, r3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	23ea      	movs	r3, #234	; 0xea
 800491e:	33ff      	adds	r3, #255	; 0xff
 8004920:	54d1      	strb	r1, [r2, r3]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	2384      	movs	r3, #132	; 0x84
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	58d3      	ldr	r3, [r2, r3]
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	b2d9      	uxtb	r1, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	23f5      	movs	r3, #245	; 0xf5
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	54d1      	strb	r1, [r2, r3]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	2384      	movs	r3, #132	; 0x84
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	58d3      	ldr	r3, [r2, r3]
 800493e:	0e1b      	lsrs	r3, r3, #24
 8004940:	b2d9      	uxtb	r1, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	23ec      	movs	r3, #236	; 0xec
 8004946:	33ff      	adds	r3, #255	; 0xff
 8004948:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	2383      	movs	r3, #131	; 0x83
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	58d3      	ldr	r3, [r2, r3]
 8004952:	b2d9      	uxtb	r1, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	23f6      	movs	r3, #246	; 0xf6
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	54d1      	strb	r1, [r2, r3]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	2383      	movs	r3, #131	; 0x83
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	58d3      	ldr	r3, [r2, r3]
 8004964:	b29b      	uxth	r3, r3
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	b29b      	uxth	r3, r3
 800496a:	b2d9      	uxtb	r1, r3
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	23ee      	movs	r3, #238	; 0xee
 8004970:	33ff      	adds	r3, #255	; 0xff
 8004972:	54d1      	strb	r1, [r2, r3]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	2383      	movs	r3, #131	; 0x83
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	58d3      	ldr	r3, [r2, r3]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	b2d9      	uxtb	r1, r3
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	23f7      	movs	r3, #247	; 0xf7
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	54d1      	strb	r1, [r2, r3]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	2383      	movs	r3, #131	; 0x83
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	58d3      	ldr	r3, [r2, r3]
 8004990:	0e1b      	lsrs	r3, r3, #24
 8004992:	b2d9      	uxtb	r1, r3
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	23f0      	movs	r3, #240	; 0xf0
 8004998:	33ff      	adds	r3, #255	; 0xff
 800499a:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	2387      	movs	r3, #135	; 0x87
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	58d3      	ldr	r3, [r2, r3]
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	238b      	movs	r3, #139	; 0x8b
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <sync_fs+0x1a4>)
 80049b2:	5c98      	ldrb	r0, [r3, r2]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	238b      	movs	r3, #139	; 0x8b
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	58d2      	ldr	r2, [r2, r3]
 80049be:	2301      	movs	r3, #1
 80049c0:	f7ff fc34 	bl	800422c <disk_write>
			fs->fsi_flag = 0;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <sync_fs+0x19c>)
 80049c8:	2100      	movs	r1, #0
 80049ca:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <sync_fs+0x1a4>)
 80049d0:	5c9b      	ldrb	r3, [r3, r2]
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7ff fc50 	bl	800427c <disk_ioctl>
 80049dc:	1e03      	subs	r3, r0, #0
 80049de:	d003      	beq.n	80049e8 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 80049e0:	230f      	movs	r3, #15
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80049e8:	230f      	movs	r3, #15
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b004      	add	sp, #16
 80049f4:	bdb0      	pop	{r4, r5, r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	00000205 	.word	0x00000205
 80049fc:	000001ff 	.word	0x000001ff
 8004a00:	00000201 	.word	0x00000201

08004a04 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	3b02      	subs	r3, #2
 8004a12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	2385      	movs	r3, #133	; 0x85
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	58d3      	ldr	r3, [r2, r3]
 8004a1c:	3b02      	subs	r3, #2
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d301      	bcc.n	8004a28 <clust2sect+0x24>
 8004a24:	2300      	movs	r3, #0
 8004a26:	e00a      	b.n	8004a3e <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <clust2sect+0x44>)
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	435a      	muls	r2, r3
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	238a      	movs	r3, #138	; 0x8a
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	58cb      	ldr	r3, [r1, r3]
 8004a3c:	18d3      	adds	r3, r2, r3
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	00000202 	.word	0x00000202

08004a4c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d906      	bls.n	8004a6a <get_fat+0x1e>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	2385      	movs	r3, #133	; 0x85
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	58d3      	ldr	r3, [r2, r3]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <get_fat+0x24>
		val = 1;	/* Internal error */
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e0a7      	b.n	8004bc0 <get_fat+0x174>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a70:	2301      	movs	r3, #1
 8004a72:	425b      	negs	r3, r3
 8004a74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	5cd3      	ldrb	r3, [r2, r3]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d046      	beq.n	8004b10 <get_fat+0xc4>
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d067      	beq.n	8004b56 <get_fat+0x10a>
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d000      	beq.n	8004a8c <get_fat+0x40>
 8004a8a:	e08f      	b.n	8004bac <get_fat+0x160>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	2388      	movs	r3, #136	; 0x88
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	58d2      	ldr	r2, [r2, r3]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0a5b      	lsrs	r3, r3, #9
 8004aa6:	18d2      	adds	r2, r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	0011      	movs	r1, r2
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff fe99 	bl	80047e4 <move_window>
 8004ab2:	1e03      	subs	r3, r0, #0
 8004ab4:	d000      	beq.n	8004ab8 <get_fat+0x6c>
 8004ab6:	e07c      	b.n	8004bb2 <get_fat+0x166>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	60fa      	str	r2, [r7, #12]
 8004abe:	05db      	lsls	r3, r3, #23
 8004ac0:	0ddb      	lsrs	r3, r3, #23
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	2388      	movs	r3, #136	; 0x88
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	58d2      	ldr	r2, [r2, r3]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	0a5b      	lsrs	r3, r3, #9
 8004ad4:	18d2      	adds	r2, r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0011      	movs	r1, r2
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff fe82 	bl	80047e4 <move_window>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d168      	bne.n	8004bb6 <get_fat+0x16a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	05db      	lsls	r3, r3, #23
 8004ae8:	0ddb      	lsrs	r3, r3, #23
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	001a      	movs	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	4013      	ands	r3, r2
 8004afe:	d002      	beq.n	8004b06 <get_fat+0xba>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	e002      	b.n	8004b0c <get_fat+0xc0>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	051b      	lsls	r3, r3, #20
 8004b0a:	0d1b      	lsrs	r3, r3, #20
 8004b0c:	617b      	str	r3, [r7, #20]
			break;
 8004b0e:	e057      	b.n	8004bc0 <get_fat+0x174>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	2388      	movs	r3, #136	; 0x88
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	58d2      	ldr	r2, [r2, r3]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	18d2      	adds	r2, r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0011      	movs	r1, r2
 8004b22:	0018      	movs	r0, r3
 8004b24:	f7ff fe5e 	bl	80047e4 <move_window>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d146      	bne.n	8004bba <get_fat+0x16e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	005a      	lsls	r2, r3, #1
 8004b30:	23ff      	movs	r3, #255	; 0xff
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	b21a      	sxth	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	b21b      	sxth	r3, r3
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	617b      	str	r3, [r7, #20]
			break;
 8004b54:	e034      	b.n	8004bc0 <get_fat+0x174>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	2388      	movs	r3, #136	; 0x88
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	58d2      	ldr	r2, [r2, r3]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	18d2      	adds	r2, r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0011      	movs	r1, r2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7ff fe3b 	bl	80047e4 <move_window>
 8004b6e:	1e03      	subs	r3, r0, #0
 8004b70:	d125      	bne.n	8004bbe <get_fat+0x172>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	009a      	lsls	r2, r3, #2
 8004b76:	23fe      	movs	r3, #254	; 0xfe
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	18d3      	adds	r3, r2, r3
 8004b80:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3303      	adds	r3, #3
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	061a      	lsls	r2, r3, #24
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	041b      	lsls	r3, r3, #16
 8004b92:	4313      	orrs	r3, r2
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	3201      	adds	r2, #1
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	0212      	lsls	r2, r2, #8
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
			break;
 8004baa:	e009      	b.n	8004bc0 <get_fat+0x174>

		default:
			val = 1;	/* Internal error */
 8004bac:	2301      	movs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e006      	b.n	8004bc0 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	e004      	b.n	8004bc0 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	e002      	b.n	8004bc0 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	e000      	b.n	8004bc0 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bbe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8004bc0:	697b      	ldr	r3, [r7, #20]
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b006      	add	sp, #24
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004bca:	b5b0      	push	{r4, r5, r7, lr}
 8004bcc:	b088      	sub	sp, #32
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d906      	bls.n	8004bea <put_fat+0x20>
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	2385      	movs	r3, #133	; 0x85
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	58d3      	ldr	r3, [r2, r3]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d304      	bcc.n	8004bf4 <put_fat+0x2a>
		res = FR_INT_ERR;
 8004bea:	231f      	movs	r3, #31
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	2202      	movs	r2, #2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e10f      	b.n	8004e14 <put_fat+0x24a>

	} else {
		switch (fs->fs_type) {
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d100      	bne.n	8004c02 <put_fat+0x38>
 8004c00:	e07e      	b.n	8004d00 <put_fat+0x136>
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d100      	bne.n	8004c08 <put_fat+0x3e>
 8004c06:	e0a9      	b.n	8004d5c <put_fat+0x192>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d000      	beq.n	8004c0e <put_fat+0x44>
 8004c0c:	e0f6      	b.n	8004dfc <put_fat+0x232>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	18d3      	adds	r3, r2, r3
 8004c1a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	2388      	movs	r3, #136	; 0x88
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	58d2      	ldr	r2, [r2, r3]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	0a5b      	lsrs	r3, r3, #9
 8004c28:	18d2      	adds	r2, r2, r3
 8004c2a:	251f      	movs	r5, #31
 8004c2c:	197c      	adds	r4, r7, r5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0011      	movs	r1, r2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7ff fdd6 	bl	80047e4 <move_window>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004c3c:	197b      	adds	r3, r7, r5
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d000      	beq.n	8004c46 <put_fat+0x7c>
 8004c44:	e0df      	b.n	8004e06 <put_fat+0x23c>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	617a      	str	r2, [r7, #20]
 8004c4c:	05db      	lsls	r3, r3, #23
 8004c4e:	0ddb      	lsrs	r3, r3, #23
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	18d3      	adds	r3, r2, r3
 8004c54:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00d      	beq.n	8004c7a <put_fat+0xb0>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	220f      	movs	r2, #15
 8004c66:	4013      	ands	r3, r2
 8004c68:	b25a      	sxtb	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	b25b      	sxtb	r3, r3
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e001      	b.n	8004c7e <put_fat+0xb4>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	2381      	movs	r3, #129	; 0x81
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	2101      	movs	r1, #1
 8004c8a:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	2388      	movs	r3, #136	; 0x88
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	58d2      	ldr	r2, [r2, r3]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	0a5b      	lsrs	r3, r3, #9
 8004c98:	18d2      	adds	r2, r2, r3
 8004c9a:	251f      	movs	r5, #31
 8004c9c:	197c      	adds	r4, r7, r5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0011      	movs	r1, r2
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7ff fd9e 	bl	80047e4 <move_window>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004cac:	197b      	adds	r3, r7, r5
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d000      	beq.n	8004cb6 <put_fat+0xec>
 8004cb4:	e0a9      	b.n	8004e0a <put_fat+0x240>
			p = &fs->win.d8[bc % SS(fs)];
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	0ddb      	lsrs	r3, r3, #23
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	18d3      	adds	r3, r2, r3
 8004cc0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <put_fat+0x108>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e00e      	b.n	8004cf0 <put_fat+0x126>
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	220f      	movs	r2, #15
 8004cda:	4393      	bics	r3, r2
 8004cdc:	b25a      	sxtb	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	b25b      	sxtb	r3, r3
 8004ce4:	210f      	movs	r1, #15
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	4313      	orrs	r3, r2
 8004cec:	b25b      	sxtb	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	2381      	movs	r3, #129	; 0x81
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	54d1      	strb	r1, [r2, r3]
			break;
 8004cfe:	e089      	b.n	8004e14 <put_fat+0x24a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	2388      	movs	r3, #136	; 0x88
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	58d2      	ldr	r2, [r2, r3]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	18d2      	adds	r2, r2, r3
 8004d0e:	251f      	movs	r5, #31
 8004d10:	197c      	adds	r4, r7, r5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	0011      	movs	r1, r2
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7ff fd64 	bl	80047e4 <move_window>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004d20:	197b      	adds	r3, r7, r5
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d172      	bne.n	8004e0e <put_fat+0x244>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	005a      	lsls	r2, r3, #1
 8004d2c:	23ff      	movs	r3, #255	; 0xff
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4013      	ands	r3, r2
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	18d3      	adds	r3, r2, r3
 8004d36:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	2381      	movs	r3, #129	; 0x81
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	2101      	movs	r1, #1
 8004d58:	54d1      	strb	r1, [r2, r3]
			break;
 8004d5a:	e05b      	b.n	8004e14 <put_fat+0x24a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	2388      	movs	r3, #136	; 0x88
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	58d2      	ldr	r2, [r2, r3]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	18d2      	adds	r2, r2, r3
 8004d6a:	251f      	movs	r5, #31
 8004d6c:	197c      	adds	r4, r7, r5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	0011      	movs	r1, r2
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7ff fd36 	bl	80047e4 <move_window>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004d7c:	197b      	adds	r3, r7, r5
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d146      	bne.n	8004e12 <put_fat+0x248>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	009a      	lsls	r2, r3, #2
 8004d88:	23fe      	movs	r3, #254	; 0xfe
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	18d3      	adds	r3, r2, r3
 8004d92:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	3303      	adds	r3, #3
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	061a      	lsls	r2, r3, #24
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	3302      	adds	r3, #2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	4313      	orrs	r3, r2
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	3201      	adds	r2, #1
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	0212      	lsls	r2, r2, #8
 8004dae:	4313      	orrs	r3, r2
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	0f1b      	lsrs	r3, r3, #28
 8004db8:	071b      	lsls	r3, r3, #28
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0c1a      	lsrs	r2, r3, #16
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	3302      	adds	r3, #2
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0e1a      	lsrs	r2, r3, #24
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	3303      	adds	r3, #3
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	2381      	movs	r3, #129	; 0x81
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	2101      	movs	r1, #1
 8004df8:	54d1      	strb	r1, [r2, r3]
			break;
 8004dfa:	e00b      	b.n	8004e14 <put_fat+0x24a>

		default :
			res = FR_INT_ERR;
 8004dfc:	231f      	movs	r3, #31
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2202      	movs	r2, #2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e006      	b.n	8004e14 <put_fat+0x24a>
			if (res != FR_OK) break;
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	e004      	b.n	8004e14 <put_fat+0x24a>
			if (res != FR_OK) break;
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	e002      	b.n	8004e14 <put_fat+0x24a>
			if (res != FR_OK) break;
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	e000      	b.n	8004e14 <put_fat+0x24a>
			if (res != FR_OK) break;
 8004e12:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004e14:	231f      	movs	r3, #31
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	781b      	ldrb	r3, [r3, #0]
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b008      	add	sp, #32
 8004e20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004e24 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004e24:	b5b0      	push	{r4, r5, r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d906      	bls.n	8004e42 <remove_chain+0x1e>
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	2385      	movs	r3, #133	; 0x85
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	58d3      	ldr	r3, [r2, r3]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d304      	bcc.n	8004e4c <remove_chain+0x28>
		res = FR_INT_ERR;
 8004e42:	230f      	movs	r3, #15
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2202      	movs	r2, #2
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e052      	b.n	8004ef2 <remove_chain+0xce>

	} else {
		res = FR_OK;
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e54:	e042      	b.n	8004edc <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff fdf5 	bl	8004a4c <get_fat>
 8004e62:	0003      	movs	r3, r0
 8004e64:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d03f      	beq.n	8004eec <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d104      	bne.n	8004e7c <remove_chain+0x58>
 8004e72:	230f      	movs	r3, #15
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	2202      	movs	r2, #2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e03a      	b.n	8004ef2 <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	d104      	bne.n	8004e8c <remove_chain+0x68>
 8004e82:	230f      	movs	r3, #15
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e032      	b.n	8004ef2 <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004e8c:	250f      	movs	r5, #15
 8004e8e:	197c      	adds	r4, r7, r5
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff fe97 	bl	8004bca <put_fat>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004ea0:	197b      	adds	r3, r7, r5
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d123      	bne.n	8004ef0 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	2384      	movs	r3, #132	; 0x84
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	58d3      	ldr	r3, [r2, r3]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	d011      	beq.n	8004ed8 <remove_chain+0xb4>
				fs->free_clust++;
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	2384      	movs	r3, #132	; 0x84
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	58d3      	ldr	r3, [r2, r3]
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	2384      	movs	r3, #132	; 0x84
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <remove_chain+0xdc>)
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b2d9      	uxtb	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <remove_chain+0xdc>)
 8004ed6:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	2385      	movs	r3, #133	; 0x85
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	58d3      	ldr	r3, [r2, r3]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3b5      	bcc.n	8004e56 <remove_chain+0x32>
 8004eea:	e002      	b.n	8004ef2 <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	e000      	b.n	8004ef2 <remove_chain+0xce>
			if (res != FR_OK) break;
 8004ef0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004ef2:	230f      	movs	r3, #15
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	781b      	ldrb	r3, [r3, #0]
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b004      	add	sp, #16
 8004efe:	bdb0      	pop	{r4, r5, r7, pc}
 8004f00:	00000205 	.word	0x00000205

08004f04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004f04:	b5b0      	push	{r4, r5, r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d111      	bne.n	8004f38 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	2383      	movs	r3, #131	; 0x83
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	58d3      	ldr	r3, [r2, r3]
 8004f1c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <create_chain+0x2e>
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	2385      	movs	r3, #133	; 0x85
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	58d3      	ldr	r3, [r2, r3]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d31f      	bcc.n	8004f72 <create_chain+0x6e>
 8004f32:	2301      	movs	r3, #1
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e01c      	b.n	8004f72 <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0011      	movs	r1, r2
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f7ff fd84 	bl	8004a4c <get_fat>
 8004f44:	0003      	movs	r3, r0
 8004f46:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d801      	bhi.n	8004f52 <create_chain+0x4e>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e086      	b.n	8005060 <create_chain+0x15c>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3301      	adds	r3, #1
 8004f56:	d101      	bne.n	8004f5c <create_chain+0x58>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	e081      	b.n	8005060 <create_chain+0x15c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	2385      	movs	r3, #133	; 0x85
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	58d3      	ldr	r3, [r2, r3]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d201      	bcs.n	8004f6e <create_chain+0x6a>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	e078      	b.n	8005060 <create_chain+0x15c>
		scl = clst;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	2385      	movs	r3, #133	; 0x85
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	58d3      	ldr	r3, [r2, r3]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d307      	bcc.n	8004f9a <create_chain+0x96>
			ncl = 2;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d901      	bls.n	8004f9a <create_chain+0x96>
 8004f96:	2300      	movs	r3, #0
 8004f98:	e062      	b.n	8005060 <create_chain+0x15c>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0011      	movs	r1, r2
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff fd53 	bl	8004a4c <get_fat>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	d002      	beq.n	8004fbc <create_chain+0xb8>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <create_chain+0xbc>
			return cs;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	e04f      	b.n	8005060 <create_chain+0x15c>
		if (ncl == scl) return 0;		/* No free cluster */
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1d6      	bne.n	8004f76 <create_chain+0x72>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e049      	b.n	8005060 <create_chain+0x15c>
		if (cs == 0) break;				/* Found a free cluster */
 8004fcc:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004fce:	250f      	movs	r5, #15
 8004fd0:	197c      	adds	r4, r7, r5
 8004fd2:	4a25      	ldr	r2, [pc, #148]	; (8005068 <create_chain+0x164>)
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7ff fdf6 	bl	8004bca <put_fat>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8004fe2:	197b      	adds	r3, r7, r5
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10c      	bne.n	8005004 <create_chain+0x100>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <create_chain+0x100>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	18fc      	adds	r4, r7, r3
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff fde5 	bl	8004bca <put_fat>
 8005000:	0003      	movs	r3, r0
 8005002:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8005004:	230f      	movs	r3, #15
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11d      	bne.n	800504a <create_chain+0x146>
		fs->last_clust = ncl;			/* Update FSINFO */
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	2383      	movs	r3, #131	; 0x83
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	6979      	ldr	r1, [r7, #20]
 8005016:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	2384      	movs	r3, #132	; 0x84
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	58d3      	ldr	r3, [r2, r3]
 8005020:	3301      	adds	r3, #1
 8005022:	d01c      	beq.n	800505e <create_chain+0x15a>
			fs->free_clust--;
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	2384      	movs	r3, #132	; 0x84
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	58d3      	ldr	r3, [r2, r3]
 800502c:	1e59      	subs	r1, r3, #1
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	2384      	movs	r3, #132	; 0x84
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a0c      	ldr	r2, [pc, #48]	; (800506c <create_chain+0x168>)
 800503a:	5c9b      	ldrb	r3, [r3, r2]
 800503c:	2201      	movs	r2, #1
 800503e:	4313      	orrs	r3, r2
 8005040:	b2d9      	uxtb	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a09      	ldr	r2, [pc, #36]	; (800506c <create_chain+0x168>)
 8005046:	5499      	strb	r1, [r3, r2]
 8005048:	e009      	b.n	800505e <create_chain+0x15a>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800504a:	230f      	movs	r3, #15
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d102      	bne.n	800505a <create_chain+0x156>
 8005054:	2301      	movs	r3, #1
 8005056:	425b      	negs	r3, r3
 8005058:	e000      	b.n	800505c <create_chain+0x158>
 800505a:	2301      	movs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800505e:	697b      	ldr	r3, [r7, #20]
}
 8005060:	0018      	movs	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	b006      	add	sp, #24
 8005066:	bdb0      	pop	{r4, r5, r7, pc}
 8005068:	0fffffff 	.word	0x0fffffff
 800506c:	00000205 	.word	0x00000205

08005070 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	2389      	movs	r3, #137	; 0x89
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	58d3      	ldr	r3, [r2, r3]
 8005082:	3304      	adds	r3, #4
 8005084:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	0a58      	lsrs	r0, r3, #9
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	58d3      	ldr	r3, [r2, r3]
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <clmt_clust+0x70>)
 8005094:	5c9b      	ldrb	r3, [r3, r2]
 8005096:	0019      	movs	r1, r3
 8005098:	f7fb f848 	bl	800012c <__udivsi3>
 800509c:	0003      	movs	r3, r0
 800509e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	613a      	str	r2, [r7, #16]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <clmt_clust+0x44>
 80050b0:	2300      	movs	r3, #0
 80050b2:	e010      	b.n	80050d6 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d307      	bcc.n	80050cc <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	3304      	adds	r3, #4
 80050c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050ca:	e7e9      	b.n	80050a0 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80050cc:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	18d3      	adds	r3, r2, r3
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b006      	add	sp, #24
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	00000202 	.word	0x00000202

080050e4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b299      	uxth	r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a51      	ldr	r2, [pc, #324]	; (800523c <dir_sdi+0x158>)
 80050f6:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	2382      	movs	r3, #130	; 0x82
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	58d3      	ldr	r3, [r2, r3]
 8005100:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d009      	beq.n	800511c <dir_sdi+0x38>
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	58d2      	ldr	r2, [r2, r3]
 8005110:	2385      	movs	r3, #133	; 0x85
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	58d3      	ldr	r3, [r2, r3]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	d301      	bcc.n	8005120 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800511c:	2302      	movs	r3, #2
 800511e:	e088      	b.n	8005232 <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d110      	bne.n	8005148 <dir_sdi+0x64>
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	58d2      	ldr	r2, [r2, r3]
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d107      	bne.n	8005148 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	58d2      	ldr	r2, [r2, r3]
 8005140:	2389      	movs	r3, #137	; 0x89
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	58d3      	ldr	r3, [r2, r3]
 8005146:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d115      	bne.n	800517a <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	58d2      	ldr	r2, [r2, r3]
 8005156:	2382      	movs	r3, #130	; 0x82
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	5ad3      	ldrh	r3, [r2, r3]
 800515c:	001a      	movs	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4293      	cmp	r3, r2
 8005162:	d301      	bcc.n	8005168 <dir_sdi+0x84>
			return FR_INT_ERR;
 8005164:	2302      	movs	r3, #2
 8005166:	e064      	b.n	8005232 <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	58d2      	ldr	r2, [r2, r3]
 8005170:	2389      	movs	r3, #137	; 0x89
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	58d3      	ldr	r3, [r2, r3]
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	e03a      	b.n	80051f0 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	58d3      	ldr	r3, [r2, r3]
 8005182:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <dir_sdi+0x15c>)
 8005184:	5c9b      	ldrb	r3, [r3, r2]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800518a:	e022      	b.n	80051d2 <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	58d3      	ldr	r3, [r2, r3]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	0011      	movs	r1, r2
 8005198:	0018      	movs	r0, r3
 800519a:	f7ff fc57 	bl	8004a4c <get_fat>
 800519e:	0003      	movs	r3, r0
 80051a0:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	3301      	adds	r3, #1
 80051a6:	d101      	bne.n	80051ac <dir_sdi+0xc8>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e042      	b.n	8005232 <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d909      	bls.n	80051c6 <dir_sdi+0xe2>
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	58d2      	ldr	r2, [r2, r3]
 80051ba:	2385      	movs	r3, #133	; 0x85
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	58d3      	ldr	r3, [r2, r3]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d301      	bcc.n	80051ca <dir_sdi+0xe6>
				return FR_INT_ERR;
 80051c6:	2302      	movs	r3, #2
 80051c8:	e033      	b.n	8005232 <dir_sdi+0x14e>
			idx -= ic;
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d2d8      	bcs.n	800518c <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	58d3      	ldr	r3, [r2, r3]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	0011      	movs	r1, r2
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7ff fc0c 	bl	8004a04 <clust2sect>
 80051ec:	0003      	movs	r3, r0
 80051ee:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	2383      	movs	r3, #131	; 0x83
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <dir_sdi+0x120>
 8005200:	2302      	movs	r3, #2
 8005202:	e016      	b.n	8005232 <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	091a      	lsrs	r2, r3, #4
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	18d1      	adds	r1, r2, r3
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	2384      	movs	r3, #132	; 0x84
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	58d3      	ldr	r3, [r2, r3]
 800521c:	0019      	movs	r1, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	220f      	movs	r2, #15
 8005222:	4013      	ands	r3, r2
 8005224:	015b      	lsls	r3, r3, #5
 8005226:	18c9      	adds	r1, r1, r3
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	2385      	movs	r3, #133	; 0x85
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b006      	add	sp, #24
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	00000206 	.word	0x00000206
 8005240:	00000202 	.word	0x00000202

08005244 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a87      	ldr	r2, [pc, #540]	; (8005470 <dir_next+0x22c>)
 8005252:	5a9b      	ldrh	r3, [r3, r2]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	d005      	beq.n	800526c <dir_next+0x28>
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	2384      	movs	r3, #132	; 0x84
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	58d3      	ldr	r3, [r2, r3]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <dir_next+0x2c>
		return FR_NO_FILE;
 800526c:	2304      	movs	r3, #4
 800526e:	e0fb      	b.n	8005468 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	220f      	movs	r2, #15
 8005274:	4013      	ands	r3, r2
 8005276:	d000      	beq.n	800527a <dir_next+0x36>
 8005278:	e0e2      	b.n	8005440 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	2384      	movs	r3, #132	; 0x84
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	58d3      	ldr	r3, [r2, r3]
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	2384      	movs	r3, #132	; 0x84
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	2383      	movs	r3, #131	; 0x83
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	58d3      	ldr	r3, [r2, r3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10d      	bne.n	80052b4 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	58d2      	ldr	r2, [r2, r3]
 80052a0:	2382      	movs	r3, #130	; 0x82
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	5ad3      	ldrh	r3, [r2, r3]
 80052a6:	001a      	movs	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d200      	bcs.n	80052b0 <dir_next+0x6c>
 80052ae:	e0c7      	b.n	8005440 <dir_next+0x1fc>
				return FR_NO_FILE;
 80052b0:	2304      	movs	r3, #4
 80052b2:	e0d9      	b.n	8005468 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	0092      	lsls	r2, r2, #2
 80052be:	588a      	ldr	r2, [r1, r2]
 80052c0:	496c      	ldr	r1, [pc, #432]	; (8005474 <dir_next+0x230>)
 80052c2:	5c52      	ldrb	r2, [r2, r1]
 80052c4:	3a01      	subs	r2, #1
 80052c6:	4013      	ands	r3, r2
 80052c8:	d000      	beq.n	80052cc <dir_next+0x88>
 80052ca:	e0b9      	b.n	8005440 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	58d0      	ldr	r0, [r2, r3]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	2383      	movs	r3, #131	; 0x83
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	58d3      	ldr	r3, [r2, r3]
 80052dc:	0019      	movs	r1, r3
 80052de:	f7ff fbb5 	bl	8004a4c <get_fat>
 80052e2:	0003      	movs	r3, r0
 80052e4:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d801      	bhi.n	80052f0 <dir_next+0xac>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0bb      	b.n	8005468 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3301      	adds	r3, #1
 80052f4:	d101      	bne.n	80052fa <dir_next+0xb6>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0b6      	b.n	8005468 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	58d2      	ldr	r2, [r2, r3]
 8005302:	2385      	movs	r3, #133	; 0x85
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	58d3      	ldr	r3, [r2, r3]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d200      	bcs.n	8005310 <dir_next+0xcc>
 800530e:	e084      	b.n	800541a <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <dir_next+0xd6>
 8005316:	2304      	movs	r3, #4
 8005318:	e0a6      	b.n	8005468 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	58d0      	ldr	r0, [r2, r3]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	2383      	movs	r3, #131	; 0x83
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	58d3      	ldr	r3, [r2, r3]
 800532a:	0019      	movs	r1, r3
 800532c:	f7ff fdea 	bl	8004f04 <create_chain>
 8005330:	0003      	movs	r3, r0
 8005332:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <dir_next+0xfa>
 800533a:	2307      	movs	r3, #7
 800533c:	e094      	b.n	8005468 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <dir_next+0x104>
 8005344:	2302      	movs	r3, #2
 8005346:	e08f      	b.n	8005468 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3301      	adds	r3, #1
 800534c:	d101      	bne.n	8005352 <dir_next+0x10e>
 800534e:	2301      	movs	r3, #1
 8005350:	e08a      	b.n	8005468 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	58d3      	ldr	r3, [r2, r3]
 800535a:	0018      	movs	r0, r3
 800535c:	f7ff f9ea 	bl	8004734 <sync_window>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d001      	beq.n	8005368 <dir_next+0x124>
 8005364:	2301      	movs	r3, #1
 8005366:	e07f      	b.n	8005468 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	58d3      	ldr	r3, [r2, r3]
 8005370:	0018      	movs	r0, r3
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	001a      	movs	r2, r3
 8005378:	2100      	movs	r1, #0
 800537a:	f7fe ffc3 	bl	8004304 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	58d0      	ldr	r0, [r2, r3]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	58d4      	ldr	r4, [r2, r3]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	0019      	movs	r1, r3
 8005392:	f7ff fb37 	bl	8004a04 <clust2sect>
 8005396:	0002      	movs	r2, r0
 8005398:	238b      	movs	r3, #139	; 0x8b
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e020      	b.n	80053e6 <dir_next+0x1a2>
						dp->fs->wflag = 1;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	58d2      	ldr	r2, [r2, r3]
 80053ac:	2381      	movs	r3, #129	; 0x81
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	2101      	movs	r1, #1
 80053b2:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	58d3      	ldr	r3, [r2, r3]
 80053bc:	0018      	movs	r0, r3
 80053be:	f7ff f9b9 	bl	8004734 <sync_window>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d001      	beq.n	80053ca <dir_next+0x186>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e04e      	b.n	8005468 <dir_next+0x224>
						dp->fs->winsect++;
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	58d3      	ldr	r3, [r2, r3]
 80053d2:	228b      	movs	r2, #139	; 0x8b
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	589a      	ldr	r2, [r3, r2]
 80053d8:	1c51      	adds	r1, r2, #1
 80053da:	228b      	movs	r2, #139	; 0x8b
 80053dc:	0092      	lsls	r2, r2, #2
 80053de:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3301      	adds	r3, #1
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	58d3      	ldr	r3, [r2, r3]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <dir_next+0x230>)
 80053f0:	5c9b      	ldrb	r3, [r3, r2]
 80053f2:	001a      	movs	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d3d4      	bcc.n	80053a4 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	58d2      	ldr	r2, [r2, r3]
 8005402:	238b      	movs	r3, #139	; 0x8b
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	58d1      	ldr	r1, [r2, r3]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	2380      	movs	r3, #128	; 0x80
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	58d2      	ldr	r2, [r2, r3]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ac9      	subs	r1, r1, r3
 8005414:	238b      	movs	r3, #139	; 0x8b
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	2383      	movs	r3, #131	; 0x83
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	6979      	ldr	r1, [r7, #20]
 8005422:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	58d3      	ldr	r3, [r2, r3]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	0011      	movs	r1, r2
 8005430:	0018      	movs	r0, r3
 8005432:	f7ff fae7 	bl	8004a04 <clust2sect>
 8005436:	0001      	movs	r1, r0
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	2384      	movs	r3, #132	; 0x84
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	b299      	uxth	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <dir_next+0x22c>)
 8005448:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	58d3      	ldr	r3, [r2, r3]
 8005452:	0019      	movs	r1, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	220f      	movs	r2, #15
 8005458:	4013      	ands	r3, r2
 800545a:	015b      	lsls	r3, r3, #5
 800545c:	18c9      	adds	r1, r1, r3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	2385      	movs	r3, #133	; 0x85
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b007      	add	sp, #28
 800546e:	bd90      	pop	{r4, r7, pc}
 8005470:	00000206 	.word	0x00000206
 8005474:	00000202 	.word	0x00000202

08005478 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005482:	250f      	movs	r5, #15
 8005484:	197c      	adds	r4, r7, r5
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2100      	movs	r1, #0
 800548a:	0018      	movs	r0, r3
 800548c:	f7ff fe2a 	bl	80050e4 <dir_sdi>
 8005490:	0003      	movs	r3, r0
 8005492:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005494:	197b      	adds	r3, r7, r5
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d13b      	bne.n	8005514 <dir_alloc+0x9c>
		n = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	58d0      	ldr	r0, [r2, r3]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	2384      	movs	r3, #132	; 0x84
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	58d3      	ldr	r3, [r2, r3]
 80054b0:	250f      	movs	r5, #15
 80054b2:	197c      	adds	r4, r7, r5
 80054b4:	0019      	movs	r1, r3
 80054b6:	f7ff f995 	bl	80047e4 <move_window>
 80054ba:	0003      	movs	r3, r0
 80054bc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80054be:	197b      	adds	r3, r7, r5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d125      	bne.n	8005512 <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	2385      	movs	r3, #133	; 0x85
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	58d3      	ldr	r3, [r2, r3]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2be5      	cmp	r3, #229	; 0xe5
 80054d2:	d006      	beq.n	80054e2 <dir_alloc+0x6a>
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	2385      	movs	r3, #133	; 0x85
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	58d3      	ldr	r3, [r2, r3]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60bb      	str	r3, [r7, #8]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d102      	bne.n	80054f6 <dir_alloc+0x7e>
 80054f0:	e010      	b.n	8005514 <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80054f6:	250f      	movs	r5, #15
 80054f8:	197c      	adds	r4, r7, r5
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2101      	movs	r1, #1
 80054fe:	0018      	movs	r0, r3
 8005500:	f7ff fea0 	bl	8005244 <dir_next>
 8005504:	0003      	movs	r3, r0
 8005506:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8005508:	197b      	adds	r3, r7, r5
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0c7      	beq.n	80054a0 <dir_alloc+0x28>
 8005510:	e000      	b.n	8005514 <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8005512:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005514:	230f      	movs	r3, #15
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d103      	bne.n	8005526 <dir_alloc+0xae>
 800551e:	230f      	movs	r3, #15
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	2207      	movs	r2, #7
 8005524:	701a      	strb	r2, [r3, #0]
	return res;
 8005526:	230f      	movs	r3, #15
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	781b      	ldrb	r3, [r3, #0]
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bdb0      	pop	{r4, r5, r7, pc}

08005534 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	331b      	adds	r3, #27
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	b21a      	sxth	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	331a      	adds	r3, #26
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b21b      	sxth	r3, r3
 8005550:	4313      	orrs	r3, r2
 8005552:	b21b      	sxth	r3, r3
 8005554:	b29b      	uxth	r3, r3
 8005556:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d10f      	bne.n	8005584 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	3315      	adds	r3, #21
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	b21a      	sxth	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	b21b      	sxth	r3, r3
 8005576:	4313      	orrs	r3, r2
 8005578:	b21b      	sxth	r3, r3
 800557a:	b29b      	uxth	r3, r3
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

	return cl;
 8005584:	68fb      	ldr	r3, [r7, #12]
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b004      	add	sp, #16
 800558c:	bd80      	pop	{r7, pc}

0800558e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	331a      	adds	r3, #26
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	331b      	adds	r3, #27
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	0c1a      	lsrs	r2, r3, #16
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3314      	adds	r3, #20
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3315      	adds	r3, #21
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
}
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80055e0:	2517      	movs	r5, #23
 80055e2:	197c      	adds	r4, r7, r5
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2100      	movs	r1, #0
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff fd7b 	bl	80050e4 <dir_sdi>
 80055ee:	0003      	movs	r3, r0
 80055f0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80055f2:	197b      	adds	r3, r7, r5
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <dir_find+0x2a>
 80055fa:	2317      	movs	r3, #23
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	e04b      	b.n	800569a <dir_find+0xc2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	58d0      	ldr	r0, [r2, r3]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	2384      	movs	r3, #132	; 0x84
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	58d3      	ldr	r3, [r2, r3]
 8005612:	2517      	movs	r5, #23
 8005614:	197c      	adds	r4, r7, r5
 8005616:	0019      	movs	r1, r3
 8005618:	f7ff f8e4 	bl	80047e4 <move_window>
 800561c:	0003      	movs	r3, r0
 800561e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8005620:	197b      	adds	r3, r7, r5
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d132      	bne.n	800568e <dir_find+0xb6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	2385      	movs	r3, #133	; 0x85
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	58d3      	ldr	r3, [r2, r3]
 8005630:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005632:	210f      	movs	r1, #15
 8005634:	187b      	adds	r3, r7, r1
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800563c:	187b      	adds	r3, r7, r1
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <dir_find+0x76>
 8005644:	2317      	movs	r3, #23
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	2204      	movs	r2, #4
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e022      	b.n	8005694 <dir_find+0xbc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	330b      	adds	r3, #11
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	001a      	movs	r2, r3
 8005656:	2308      	movs	r3, #8
 8005658:	4013      	ands	r3, r2
 800565a:	d10a      	bne.n	8005672 <dir_find+0x9a>
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2386      	movs	r3, #134	; 0x86
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	58d1      	ldr	r1, [r2, r3]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	220b      	movs	r2, #11
 8005668:	0018      	movs	r0, r3
 800566a:	f7fe fe63 	bl	8004334 <mem_cmp>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d00f      	beq.n	8005692 <dir_find+0xba>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005672:	2517      	movs	r5, #23
 8005674:	197c      	adds	r4, r7, r5
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2100      	movs	r1, #0
 800567a:	0018      	movs	r0, r3
 800567c:	f7ff fde2 	bl	8005244 <dir_next>
 8005680:	0003      	movs	r3, r0
 8005682:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8005684:	197b      	adds	r3, r7, r5
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ba      	beq.n	8005602 <dir_find+0x2a>
 800568c:	e002      	b.n	8005694 <dir_find+0xbc>
		if (res != FR_OK) break;
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	e000      	b.n	8005694 <dir_find+0xbc>
			break;
 8005692:	46c0      	nop			; (mov r8, r8)

	return res;
 8005694:	2317      	movs	r3, #23
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	781b      	ldrb	r3, [r3, #0]
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b006      	add	sp, #24
 80056a0:	bdb0      	pop	{r4, r5, r7, pc}

080056a2 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056a2:	b5b0      	push	{r4, r5, r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80056aa:	250f      	movs	r5, #15
 80056ac:	197c      	adds	r4, r7, r5
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2101      	movs	r1, #1
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fee0 	bl	8005478 <dir_alloc>
 80056b8:	0003      	movs	r3, r0
 80056ba:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80056bc:	197b      	adds	r3, r7, r5
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d12f      	bne.n	8005724 <dir_register+0x82>
		res = move_window(dp->fs, dp->sect);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	58d0      	ldr	r0, [r2, r3]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	2384      	movs	r3, #132	; 0x84
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	58d3      	ldr	r3, [r2, r3]
 80056d4:	250f      	movs	r5, #15
 80056d6:	197c      	adds	r4, r7, r5
 80056d8:	0019      	movs	r1, r3
 80056da:	f7ff f883 	bl	80047e4 <move_window>
 80056de:	0003      	movs	r3, r0
 80056e0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80056e2:	197b      	adds	r3, r7, r5
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11c      	bne.n	8005724 <dir_register+0x82>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	2385      	movs	r3, #133	; 0x85
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	58d3      	ldr	r3, [r2, r3]
 80056f2:	2220      	movs	r2, #32
 80056f4:	2100      	movs	r1, #0
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7fe fe04 	bl	8004304 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	2385      	movs	r3, #133	; 0x85
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	58d0      	ldr	r0, [r2, r3]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	2386      	movs	r3, #134	; 0x86
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	58d3      	ldr	r3, [r2, r3]
 800570c:	220b      	movs	r2, #11
 800570e:	0019      	movs	r1, r3
 8005710:	f7fe fddc 	bl	80042cc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	58d2      	ldr	r2, [r2, r3]
 800571c:	2381      	movs	r3, #129	; 0x81
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	2101      	movs	r1, #1
 8005722:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8005724:	230f      	movs	r3, #15
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	781b      	ldrb	r3, [r3, #0]
}
 800572a:	0018      	movs	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005734 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e002      	b.n	800574c <create_name+0x18>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b2f      	cmp	r3, #47	; 0x2f
 8005752:	d0f8      	beq.n	8005746 <create_name+0x12>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b5c      	cmp	r3, #92	; 0x5c
 800575a:	d0f4      	beq.n	8005746 <create_name+0x12>
	sfn = dp->fn;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	2386      	movs	r3, #134	; 0x86
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	58d3      	ldr	r3, [r2, r3]
 8005764:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	220b      	movs	r2, #11
 800576a:	2120      	movs	r1, #32
 800576c:	0018      	movs	r0, r3
 800576e:	f7fe fdc9 	bl	8004304 <mem_set>
	si = i = b = 0; ni = 8;
 8005772:	231f      	movs	r3, #31
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	2308      	movs	r3, #8
 8005784:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	617a      	str	r2, [r7, #20]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	18d2      	adds	r2, r2, r3
 8005790:	211e      	movs	r1, #30
 8005792:	187b      	adds	r3, r7, r1
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005798:	187b      	adds	r3, r7, r1
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b20      	cmp	r3, #32
 800579e:	d800      	bhi.n	80057a2 <create_name+0x6e>
 80057a0:	e07e      	b.n	80058a0 <create_name+0x16c>
 80057a2:	231e      	movs	r3, #30
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b2f      	cmp	r3, #47	; 0x2f
 80057aa:	d100      	bne.n	80057ae <create_name+0x7a>
 80057ac:	e078      	b.n	80058a0 <create_name+0x16c>
 80057ae:	231e      	movs	r3, #30
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b5c      	cmp	r3, #92	; 0x5c
 80057b6:	d100      	bne.n	80057ba <create_name+0x86>
 80057b8:	e072      	b.n	80058a0 <create_name+0x16c>
		if (c == '.' || i >= ni) {
 80057ba:	231e      	movs	r3, #30
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b2e      	cmp	r3, #46	; 0x2e
 80057c2:	d003      	beq.n	80057cc <create_name+0x98>
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d314      	bcc.n	80057f6 <create_name+0xc2>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d104      	bne.n	80057dc <create_name+0xa8>
 80057d2:	231e      	movs	r3, #30
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b2e      	cmp	r3, #46	; 0x2e
 80057da:	d001      	beq.n	80057e0 <create_name+0xac>
 80057dc:	2306      	movs	r3, #6
 80057de:	e0a7      	b.n	8005930 <create_name+0x1fc>
			i = 8; ni = 11;
 80057e0:	2308      	movs	r3, #8
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	230b      	movs	r3, #11
 80057e6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80057e8:	221f      	movs	r2, #31
 80057ea:	18bb      	adds	r3, r7, r2
 80057ec:	18ba      	adds	r2, r7, r2
 80057ee:	7812      	ldrb	r2, [r2, #0]
 80057f0:	0092      	lsls	r2, r2, #2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e053      	b.n	800589e <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended character? */
 80057f6:	231e      	movs	r3, #30
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da0f      	bge.n	8005822 <create_name+0xee>
			b |= 3;						/* Eliminate NT flag */
 8005802:	221f      	movs	r2, #31
 8005804:	18bb      	adds	r3, r7, r2
 8005806:	18ba      	adds	r2, r7, r2
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	2103      	movs	r1, #3
 800580c:	430a      	orrs	r2, r1
 800580e:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005810:	211e      	movs	r1, #30
 8005812:	187b      	adds	r3, r7, r1
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	3b80      	subs	r3, #128	; 0x80
 8005818:	001a      	movs	r2, r3
 800581a:	187b      	adds	r3, r7, r1
 800581c:	4946      	ldr	r1, [pc, #280]	; (8005938 <create_name+0x204>)
 800581e:	5c8a      	ldrb	r2, [r1, r2]
 8005820:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005822:	231e      	movs	r3, #30
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	4b44      	ldr	r3, [pc, #272]	; (800593c <create_name+0x208>)
 800582a:	0011      	movs	r1, r2
 800582c:	0018      	movs	r0, r3
 800582e:	f7fe fda6 	bl	800437e <chk_chr>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d001      	beq.n	800583a <create_name+0x106>
				return FR_INVALID_NAME;
 8005836:	2306      	movs	r3, #6
 8005838:	e07a      	b.n	8005930 <create_name+0x1fc>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800583a:	231e      	movs	r3, #30
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d90c      	bls.n	800585e <create_name+0x12a>
 8005844:	231e      	movs	r3, #30
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b5a      	cmp	r3, #90	; 0x5a
 800584c:	d807      	bhi.n	800585e <create_name+0x12a>
				b |= 2;
 800584e:	221f      	movs	r2, #31
 8005850:	18bb      	adds	r3, r7, r2
 8005852:	18ba      	adds	r2, r7, r2
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	2102      	movs	r1, #2
 8005858:	430a      	orrs	r2, r1
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e016      	b.n	800588c <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800585e:	231e      	movs	r3, #30
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b60      	cmp	r3, #96	; 0x60
 8005866:	d911      	bls.n	800588c <create_name+0x158>
 8005868:	231e      	movs	r3, #30
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b7a      	cmp	r3, #122	; 0x7a
 8005870:	d80c      	bhi.n	800588c <create_name+0x158>
					b |= 1; c -= 0x20;
 8005872:	221f      	movs	r2, #31
 8005874:	18bb      	adds	r3, r7, r2
 8005876:	18ba      	adds	r2, r7, r2
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	2101      	movs	r1, #1
 800587c:	430a      	orrs	r2, r1
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	221e      	movs	r2, #30
 8005882:	18bb      	adds	r3, r7, r2
 8005884:	18ba      	adds	r2, r7, r2
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	3a20      	subs	r2, #32
 800588a:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	613a      	str	r2, [r7, #16]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	18d3      	adds	r3, r2, r3
 8005896:	221e      	movs	r2, #30
 8005898:	18ba      	adds	r2, r7, r2
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800589e:	e772      	b.n	8005786 <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	18d2      	adds	r2, r2, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80058aa:	231e      	movs	r3, #30
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d801      	bhi.n	80058b8 <create_name+0x184>
 80058b4:	2204      	movs	r2, #4
 80058b6:	e000      	b.n	80058ba <create_name+0x186>
 80058b8:	2200      	movs	r2, #0
 80058ba:	231e      	movs	r3, #30
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <create_name+0x196>
 80058c6:	2306      	movs	r3, #6
 80058c8:	e032      	b.n	8005930 <create_name+0x1fc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2be5      	cmp	r3, #229	; 0xe5
 80058d0:	d102      	bne.n	80058d8 <create_name+0x1a4>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2205      	movs	r2, #5
 80058d6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d105      	bne.n	80058ea <create_name+0x1b6>
 80058de:	221f      	movs	r2, #31
 80058e0:	18bb      	adds	r3, r7, r2
 80058e2:	18ba      	adds	r2, r7, r2
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80058ea:	231f      	movs	r3, #31
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2203      	movs	r2, #3
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d106      	bne.n	8005906 <create_name+0x1d2>
 80058f8:	221e      	movs	r2, #30
 80058fa:	18bb      	adds	r3, r7, r2
 80058fc:	18ba      	adds	r2, r7, r2
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	2110      	movs	r1, #16
 8005902:	430a      	orrs	r2, r1
 8005904:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005906:	231f      	movs	r3, #31
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	220c      	movs	r2, #12
 800590e:	4013      	ands	r3, r2
 8005910:	2b04      	cmp	r3, #4
 8005912:	d106      	bne.n	8005922 <create_name+0x1ee>
 8005914:	221e      	movs	r2, #30
 8005916:	18bb      	adds	r3, r7, r2
 8005918:	18ba      	adds	r2, r7, r2
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	2108      	movs	r1, #8
 800591e:	430a      	orrs	r2, r1
 8005920:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	330b      	adds	r3, #11
 8005926:	221e      	movs	r2, #30
 8005928:	18ba      	adds	r2, r7, r2
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800592e:	2300      	movs	r3, #0
#endif
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b008      	add	sp, #32
 8005936:	bd80      	pop	{r7, pc}
 8005938:	0800ab0c 	.word	0x0800ab0c
 800593c:	0800ab8c 	.word	0x0800ab8c

08005940 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005940:	b5b0      	push	{r4, r5, r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b2f      	cmp	r3, #47	; 0x2f
 8005950:	d003      	beq.n	800595a <follow_path+0x1a>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b5c      	cmp	r3, #92	; 0x5c
 8005958:	d102      	bne.n	8005960 <follow_path+0x20>
		path++;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	2382      	movs	r3, #130	; 0x82
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	2100      	movs	r1, #0
 8005968:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b1f      	cmp	r3, #31
 8005970:	d80e      	bhi.n	8005990 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 8005972:	230f      	movs	r3, #15
 8005974:	18fc      	adds	r4, r7, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2100      	movs	r1, #0
 800597a:	0018      	movs	r0, r3
 800597c:	f7ff fbb2 	bl	80050e4 <dir_sdi>
 8005980:	0003      	movs	r3, r0
 8005982:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	2385      	movs	r3, #133	; 0x85
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	2100      	movs	r1, #0
 800598c:	50d1      	str	r1, [r2, r3]
 800598e:	e05c      	b.n	8005a4a <follow_path+0x10a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005990:	250f      	movs	r5, #15
 8005992:	197c      	adds	r4, r7, r5
 8005994:	003a      	movs	r2, r7
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0011      	movs	r1, r2
 800599a:	0018      	movs	r0, r3
 800599c:	f7ff feca 	bl	8005734 <create_name>
 80059a0:	0003      	movs	r3, r0
 80059a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80059a4:	197b      	adds	r3, r7, r5
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d149      	bne.n	8005a40 <follow_path+0x100>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80059ac:	250f      	movs	r5, #15
 80059ae:	197c      	adds	r4, r7, r5
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7ff fe10 	bl	80055d8 <dir_find>
 80059b8:	0003      	movs	r3, r0
 80059ba:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	2386      	movs	r3, #134	; 0x86
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	58d2      	ldr	r2, [r2, r3]
 80059c4:	230e      	movs	r3, #14
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	7ad2      	ldrb	r2, [r2, #11]
 80059ca:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80059cc:	197b      	adds	r3, r7, r5
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00f      	beq.n	80059f4 <follow_path+0xb4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80059d4:	230f      	movs	r3, #15
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d132      	bne.n	8005a44 <follow_path+0x104>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80059de:	230e      	movs	r3, #14
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2204      	movs	r2, #4
 80059e6:	4013      	ands	r3, r2
 80059e8:	d12c      	bne.n	8005a44 <follow_path+0x104>
 80059ea:	230f      	movs	r3, #15
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	2205      	movs	r2, #5
 80059f0:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80059f2:	e027      	b.n	8005a44 <follow_path+0x104>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059f4:	230e      	movs	r3, #14
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2204      	movs	r2, #4
 80059fc:	4013      	ands	r3, r2
 80059fe:	d123      	bne.n	8005a48 <follow_path+0x108>
			dir = dp->dir;						/* Follow the sub-directory */
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	2385      	movs	r3, #133	; 0x85
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	58d3      	ldr	r3, [r2, r3]
 8005a08:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	330b      	adds	r3, #11
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	001a      	movs	r2, r3
 8005a12:	2310      	movs	r3, #16
 8005a14:	4013      	ands	r3, r2
 8005a16:	d104      	bne.n	8005a22 <follow_path+0xe2>
				res = FR_NO_PATH; break;
 8005a18:	230f      	movs	r3, #15
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	2205      	movs	r2, #5
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	e013      	b.n	8005a4a <follow_path+0x10a>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	58d3      	ldr	r3, [r2, r3]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f7ff fd80 	bl	8005534 <ld_clust>
 8005a34:	0001      	movs	r1, r0
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	2382      	movs	r3, #130	; 0x82
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a3e:	e7a7      	b.n	8005990 <follow_path+0x50>
			if (res != FR_OK) break;
 8005a40:	46c0      	nop			; (mov r8, r8)
 8005a42:	e002      	b.n	8005a4a <follow_path+0x10a>
				break;
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	e000      	b.n	8005a4a <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a48:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8005a4a:	230f      	movs	r3, #15
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	781b      	ldrb	r3, [r3, #0]
}
 8005a50:	0018      	movs	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b004      	add	sp, #16
 8005a56:	bdb0      	pop	{r4, r5, r7, pc}

08005a58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a60:	2301      	movs	r3, #1
 8005a62:	425b      	negs	r3, r3
 8005a64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d031      	beq.n	8005ad2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e002      	b.n	8005a7c <get_ldnumber+0x24>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d903      	bls.n	8005a8c <get_ldnumber+0x34>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b3a      	cmp	r3, #58	; 0x3a
 8005a8a:	d1f4      	bne.n	8005a76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b3a      	cmp	r3, #58	; 0x3a
 8005a92:	d11c      	bne.n	8005ace <get_ldnumber+0x76>
			tp = *path;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	60fa      	str	r2, [r7, #12]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	3b30      	subs	r3, #48	; 0x30
 8005aa4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	d80e      	bhi.n	8005aca <get_ldnumber+0x72>
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d10a      	bne.n	8005aca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d107      	bne.n	8005aca <get_ldnumber+0x72>
					vol = (int)i;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	e002      	b.n	8005ad4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005ad2:	693b      	ldr	r3, [r7, #16]
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b006      	add	sp, #24
 8005ada:	bd80      	pop	{r7, pc}

08005adc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	2381      	movs	r3, #129	; 0x81
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	2100      	movs	r1, #0
 8005aee:	54d1      	strb	r1, [r2, r3]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	238b      	movs	r3, #139	; 0x8b
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	2101      	movs	r1, #1
 8005af8:	4249      	negs	r1, r1
 8005afa:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0011      	movs	r1, r2
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fe fe6e 	bl	80047e4 <move_window>
 8005b08:	1e03      	subs	r3, r0, #0
 8005b0a:	d001      	beq.n	8005b10 <check_fs+0x34>
		return 3;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e04b      	b.n	8005ba8 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	33ff      	adds	r3, #255	; 0xff
 8005b14:	33ff      	adds	r3, #255	; 0xff
 8005b16:	3301      	adds	r3, #1
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	b21a      	sxth	r2, r3
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	23ff      	movs	r3, #255	; 0xff
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	5ccb      	ldrb	r3, [r1, r3]
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	b21b      	sxth	r3, r3
 8005b2c:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <check_fs+0xd4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d001      	beq.n	8005b36 <check_fs+0x5a>
		return 2;
 8005b32:	2302      	movs	r3, #2
 8005b34:	e038      	b.n	8005ba8 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3336      	adds	r3, #54	; 0x36
 8005b3a:	3303      	adds	r3, #3
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	061a      	lsls	r2, r3, #24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3336      	adds	r3, #54	; 0x36
 8005b44:	3302      	adds	r3, #2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	3236      	adds	r2, #54	; 0x36
 8005b50:	3201      	adds	r2, #1
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	0212      	lsls	r2, r2, #8
 8005b56:	4313      	orrs	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	2136      	movs	r1, #54	; 0x36
 8005b5c:	5c52      	ldrb	r2, [r2, r1]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <check_fs+0xd8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <check_fs+0x92>
		return 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e01c      	b.n	8005ba8 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3352      	adds	r3, #82	; 0x52
 8005b72:	3303      	adds	r3, #3
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	061a      	lsls	r2, r3, #24
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3352      	adds	r3, #82	; 0x52
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	4313      	orrs	r3, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	3252      	adds	r2, #82	; 0x52
 8005b88:	3201      	adds	r2, #1
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	0212      	lsls	r2, r2, #8
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	2152      	movs	r1, #82	; 0x52
 8005b94:	5c52      	ldrb	r2, [r2, r1]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <check_fs+0xd8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <check_fs+0xca>
		return 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <check_fs+0xcc>

	return 1;
 8005ba6:	2301      	movs	r3, #1
}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	ffffaa55 	.word	0xffffaa55
 8005bb4:	00544146 	.word	0x00544146

08005bb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005bb8:	b5b0      	push	{r4, r5, r7, lr}
 8005bba:	b096      	sub	sp, #88	; 0x58
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	1dfb      	adds	r3, r7, #7
 8005bc4:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7ff ff42 	bl	8005a58 <get_ldnumber>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da01      	bge.n	8005be2 <find_volume+0x2a>
 8005bde:	230b      	movs	r3, #11
 8005be0:	e2f1      	b.n	80061c6 <find_volume+0x60e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005be2:	4bce      	ldr	r3, [pc, #824]	; (8005f1c <find_volume+0x364>)
 8005be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005be6:	0092      	lsls	r2, r2, #2
 8005be8:	58d3      	ldr	r3, [r2, r3]
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <find_volume+0x3e>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	e2e7      	b.n	80061c6 <find_volume+0x60e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bfa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	5cd3      	ldrb	r3, [r2, r3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01c      	beq.n	8005c42 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	4ac5      	ldr	r2, [pc, #788]	; (8005f20 <find_volume+0x368>)
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	2537      	movs	r5, #55	; 0x37
 8005c10:	197c      	adds	r4, r7, r5
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fe fa8e 	bl	8004134 <disk_status>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005c1c:	197b      	adds	r3, r7, r5
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	4013      	ands	r3, r2
 8005c24:	d10d      	bne.n	8005c42 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005c26:	1dfb      	adds	r3, r7, #7
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <find_volume+0x86>
 8005c2e:	2337      	movs	r3, #55	; 0x37
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	4013      	ands	r3, r2
 8005c38:	d001      	beq.n	8005c3e <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	e2c3      	b.n	80061c6 <find_volume+0x60e>
			return FR_OK;				/* The file system object is valid */
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e2c1      	b.n	80061c6 <find_volume+0x60e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	2100      	movs	r1, #0
 8005c4a:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4e:	b2d9      	uxtb	r1, r3
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	4ab3      	ldr	r2, [pc, #716]	; (8005f20 <find_volume+0x368>)
 8005c54:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	4ab1      	ldr	r2, [pc, #708]	; (8005f20 <find_volume+0x368>)
 8005c5a:	5c9b      	ldrb	r3, [r3, r2]
 8005c5c:	2537      	movs	r5, #55	; 0x37
 8005c5e:	197c      	adds	r4, r7, r5
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7fe fa89 	bl	8004178 <disk_initialize>
 8005c66:	0003      	movs	r3, r0
 8005c68:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005c6a:	197b      	adds	r3, r7, r5
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4013      	ands	r3, r2
 8005c72:	d001      	beq.n	8005c78 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005c74:	2303      	movs	r3, #3
 8005c76:	e2a6      	b.n	80061c6 <find_volume+0x60e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005c78:	1dfb      	adds	r3, r7, #7
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <find_volume+0xd8>
 8005c80:	2337      	movs	r3, #55	; 0x37
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2204      	movs	r2, #4
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d001      	beq.n	8005c90 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8005c8c:	230a      	movs	r3, #10
 8005c8e:	e29a      	b.n	80061c6 <find_volume+0x60e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005c94:	2557      	movs	r5, #87	; 0x57
 8005c96:	197c      	adds	r4, r7, r5
 8005c98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	0011      	movs	r1, r2
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7ff ff1c 	bl	8005adc <check_fs>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005ca8:	197b      	adds	r3, r7, r5
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d155      	bne.n	8005d5c <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb4:	e027      	b.n	8005d06 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	33bf      	adds	r3, #191	; 0xbf
 8005cbe:	33ff      	adds	r3, #255	; 0xff
 8005cc0:	18d3      	adds	r3, r2, r3
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d012      	beq.n	8005cf4 <find_volume+0x13c>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	330b      	adds	r3, #11
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	061a      	lsls	r2, r3, #24
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	330a      	adds	r3, #10
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	3209      	adds	r2, #9
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	0212      	lsls	r2, r2, #8
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cec:	3208      	adds	r2, #8
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	e000      	b.n	8005cf6 <find_volume+0x13e>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2214      	movs	r2, #20
 8005cf8:	18ba      	adds	r2, r7, r2
 8005cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cfc:	0089      	lsls	r1, r1, #2
 8005cfe:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d02:	3301      	adds	r3, #1
 8005d04:	643b      	str	r3, [r7, #64]	; 0x40
 8005d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d9d4      	bls.n	8005cb6 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <find_volume+0x164>
 8005d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005d1c:	2314      	movs	r3, #20
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	58d3      	ldr	r3, [r2, r3]
 8005d26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <find_volume+0x188>
 8005d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	0011      	movs	r1, r2
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7ff fed1 	bl	8005adc <check_fs>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	e000      	b.n	8005d42 <find_volume+0x18a>
 8005d40:	2202      	movs	r2, #2
 8005d42:	2157      	movs	r1, #87	; 0x57
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <find_volume+0x1a4>
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	3301      	adds	r3, #1
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d9df      	bls.n	8005d1c <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005d5c:	2357      	movs	r3, #87	; 0x57
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d101      	bne.n	8005d6a <find_volume+0x1b2>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e22d      	b.n	80061c6 <find_volume+0x60e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d6a:	2357      	movs	r3, #87	; 0x57
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <find_volume+0x1c0>
 8005d74:	230d      	movs	r3, #13
 8005d76:	e226      	b.n	80061c6 <find_volume+0x60e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	7b1b      	ldrb	r3, [r3, #12]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	b21a      	sxth	r2, r3
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	7adb      	ldrb	r3, [r3, #11]
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b21a      	sxth	r2, r3
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d001      	beq.n	8005d96 <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 8005d92:	230d      	movs	r3, #13
 8005d94:	e217      	b.n	80061c6 <find_volume+0x60e>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	7ddb      	ldrb	r3, [r3, #23]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	b21a      	sxth	r2, r3
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	7d9b      	ldrb	r3, [r3, #22]
 8005da2:	b21b      	sxth	r3, r3
 8005da4:	4313      	orrs	r3, r2
 8005da6:	b21b      	sxth	r3, r3
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d112      	bne.n	8005dd8 <find_volume+0x220>
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	2227      	movs	r2, #39	; 0x27
 8005db6:	5c9b      	ldrb	r3, [r3, r2]
 8005db8:	061a      	lsls	r2, r3, #24
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	2126      	movs	r1, #38	; 0x26
 8005dbe:	5c5b      	ldrb	r3, [r3, r1]
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc6:	2125      	movs	r1, #37	; 0x25
 8005dc8:	5c52      	ldrb	r2, [r2, r1]
 8005dca:	0212      	lsls	r2, r2, #8
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd0:	2124      	movs	r1, #36	; 0x24
 8005dd2:	5c52      	ldrb	r2, [r2, r1]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dda:	2386      	movs	r3, #134	; 0x86
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005de0:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	7c19      	ldrb	r1, [r3, #16]
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	4a4e      	ldr	r2, [pc, #312]	; (8005f24 <find_volume+0x36c>)
 8005dea:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	4a4d      	ldr	r2, [pc, #308]	; (8005f24 <find_volume+0x36c>)
 8005df0:	5c9b      	ldrb	r3, [r3, r2]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d006      	beq.n	8005e04 <find_volume+0x24c>
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	4a4a      	ldr	r2, [pc, #296]	; (8005f24 <find_volume+0x36c>)
 8005dfa:	5c9b      	ldrb	r3, [r3, r2]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d001      	beq.n	8005e04 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 8005e00:	230d      	movs	r3, #13
 8005e02:	e1e0      	b.n	80061c6 <find_volume+0x60e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	4a47      	ldr	r2, [pc, #284]	; (8005f24 <find_volume+0x36c>)
 8005e08:	5c9b      	ldrb	r3, [r3, r2]
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0e:	4353      	muls	r3, r2
 8005e10:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	7b59      	ldrb	r1, [r3, #13]
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	4a43      	ldr	r2, [pc, #268]	; (8005f28 <find_volume+0x370>)
 8005e1a:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	4a42      	ldr	r2, [pc, #264]	; (8005f28 <find_volume+0x370>)
 8005e20:	5c9b      	ldrb	r3, [r3, r2]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <find_volume+0x282>
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	4a3f      	ldr	r2, [pc, #252]	; (8005f28 <find_volume+0x370>)
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	0019      	movs	r1, r3
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	4a3d      	ldr	r2, [pc, #244]	; (8005f28 <find_volume+0x370>)
 8005e32:	5c9b      	ldrb	r3, [r3, r2]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	400b      	ands	r3, r1
 8005e38:	d001      	beq.n	8005e3e <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 8005e3a:	230d      	movs	r3, #13
 8005e3c:	e1c3      	b.n	80061c6 <find_volume+0x60e>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	7c9b      	ldrb	r3, [r3, #18]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	b21a      	sxth	r2, r3
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	7c5b      	ldrb	r3, [r3, #17]
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	b299      	uxth	r1, r3
 8005e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e54:	2382      	movs	r3, #130	; 0x82
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e5c:	2382      	movs	r3, #130	; 0x82
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	5ad3      	ldrh	r3, [r2, r3]
 8005e62:	220f      	movs	r2, #15
 8005e64:	4013      	ands	r3, r2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 8005e6c:	230d      	movs	r3, #13
 8005e6e:	e1aa      	b.n	80061c6 <find_volume+0x60e>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	7d1b      	ldrb	r3, [r3, #20]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	b21a      	sxth	r2, r3
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	7cdb      	ldrb	r3, [r3, #19]
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d112      	bne.n	8005eb2 <find_volume+0x2fa>
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	2223      	movs	r2, #35	; 0x23
 8005e90:	5c9b      	ldrb	r3, [r3, r2]
 8005e92:	061a      	lsls	r2, r3, #24
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	2122      	movs	r1, #34	; 0x22
 8005e98:	5c5b      	ldrb	r3, [r3, r1]
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea0:	2121      	movs	r1, #33	; 0x21
 8005ea2:	5c52      	ldrb	r2, [r2, r1]
 8005ea4:	0212      	lsls	r2, r2, #8
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eaa:	2120      	movs	r1, #32
 8005eac:	5c52      	ldrb	r2, [r2, r1]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	7bdb      	ldrb	r3, [r3, #15]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	b21a      	sxth	r2, r3
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	7b9b      	ldrb	r3, [r3, #14]
 8005ebe:	b21b      	sxth	r3, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	b21a      	sxth	r2, r3
 8005ec4:	212e      	movs	r1, #46	; 0x2e
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005eca:	187b      	adds	r3, r7, r1
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <find_volume+0x31e>
 8005ed2:	230d      	movs	r3, #13
 8005ed4:	e177      	b.n	80061c6 <find_volume+0x60e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005ed6:	232e      	movs	r3, #46	; 0x2e
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	881a      	ldrh	r2, [r3, #0]
 8005edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ede:	18d3      	adds	r3, r2, r3
 8005ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ee2:	2282      	movs	r2, #130	; 0x82
 8005ee4:	0092      	lsls	r2, r2, #2
 8005ee6:	5a8a      	ldrh	r2, [r1, r2]
 8005ee8:	0912      	lsrs	r2, r2, #4
 8005eea:	b292      	uxth	r2, r2
 8005eec:	189b      	adds	r3, r3, r2
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d201      	bcs.n	8005efc <find_volume+0x344>
 8005ef8:	230d      	movs	r3, #13
 8005efa:	e164      	b.n	80061c6 <find_volume+0x60e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	1ad0      	subs	r0, r2, r3
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <find_volume+0x370>)
 8005f06:	5c9b      	ldrb	r3, [r3, r2]
 8005f08:	0019      	movs	r1, r3
 8005f0a:	f7fa f90f 	bl	800012c <__udivsi3>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <find_volume+0x374>
 8005f18:	230d      	movs	r3, #13
 8005f1a:	e154      	b.n	80061c6 <find_volume+0x60e>
 8005f1c:	20000100 	.word	0x20000100
 8005f20:	00000201 	.word	0x00000201
 8005f24:	00000203 	.word	0x00000203
 8005f28:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8005f2c:	2357      	movs	r3, #87	; 0x57
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	4aa6      	ldr	r2, [pc, #664]	; (80061d0 <find_volume+0x618>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d903      	bls.n	8005f44 <find_volume+0x38c>
 8005f3c:	2357      	movs	r3, #87	; 0x57
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2202      	movs	r2, #2
 8005f42:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	4aa3      	ldr	r2, [pc, #652]	; (80061d4 <find_volume+0x61c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d903      	bls.n	8005f54 <find_volume+0x39c>
 8005f4c:	2357      	movs	r3, #87	; 0x57
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	2203      	movs	r2, #3
 8005f52:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	1c99      	adds	r1, r3, #2
 8005f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f5a:	2385      	movs	r3, #133	; 0x85
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8005f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f62:	2387      	movs	r3, #135	; 0x87
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f68:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005f6a:	232e      	movs	r3, #46	; 0x2e
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f72:	18d1      	adds	r1, r2, r3
 8005f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f76:	2388      	movs	r3, #136	; 0x88
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8005f7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	18d1      	adds	r1, r2, r3
 8005f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f84:	238a      	movs	r3, #138	; 0x8a
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8005f8a:	2357      	movs	r3, #87	; 0x57
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d125      	bne.n	8005fe0 <find_volume+0x428>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f96:	2382      	movs	r3, #130	; 0x82
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	5ad3      	ldrh	r3, [r2, r3]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <find_volume+0x3ec>
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	e110      	b.n	80061c6 <find_volume+0x60e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	222f      	movs	r2, #47	; 0x2f
 8005fa8:	5c9b      	ldrb	r3, [r3, r2]
 8005faa:	061a      	lsls	r2, r3, #24
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	212e      	movs	r1, #46	; 0x2e
 8005fb0:	5c5b      	ldrb	r3, [r3, r1]
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb8:	212d      	movs	r1, #45	; 0x2d
 8005fba:	5c52      	ldrb	r2, [r2, r1]
 8005fbc:	0212      	lsls	r2, r2, #8
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc2:	212c      	movs	r1, #44	; 0x2c
 8005fc4:	5c52      	ldrb	r2, [r2, r1]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	0019      	movs	r1, r3
 8005fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fcc:	2389      	movs	r3, #137	; 0x89
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd4:	2385      	movs	r3, #133	; 0x85
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	58d3      	ldr	r3, [r2, r3]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	e02c      	b.n	800603a <find_volume+0x482>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe2:	2382      	movs	r3, #130	; 0x82
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	5ad3      	ldrh	r3, [r2, r3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <find_volume+0x438>
 8005fec:	230d      	movs	r3, #13
 8005fee:	e0ea      	b.n	80061c6 <find_volume+0x60e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff2:	2388      	movs	r3, #136	; 0x88
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	58d2      	ldr	r2, [r2, r3]
 8005ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffa:	18d1      	adds	r1, r2, r3
 8005ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffe:	2389      	movs	r3, #137	; 0x89
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006004:	2357      	movs	r3, #87	; 0x57
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d105      	bne.n	800601a <find_volume+0x462>
 800600e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006010:	2385      	movs	r3, #133	; 0x85
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	58d3      	ldr	r3, [r2, r3]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	e00e      	b.n	8006038 <find_volume+0x480>
 800601a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800601c:	2385      	movs	r3, #133	; 0x85
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	58d2      	ldr	r2, [r2, r3]
 8006022:	0013      	movs	r3, r2
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	189b      	adds	r3, r3, r2
 8006028:	085a      	lsrs	r2, r3, #1
 800602a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800602c:	2385      	movs	r3, #133	; 0x85
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	58cb      	ldr	r3, [r1, r3]
 8006032:	2101      	movs	r1, #1
 8006034:	400b      	ands	r3, r1
 8006036:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006038:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800603a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603c:	2386      	movs	r3, #134	; 0x86
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	58d2      	ldr	r2, [r2, r3]
 8006042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006044:	4964      	ldr	r1, [pc, #400]	; (80061d8 <find_volume+0x620>)
 8006046:	468c      	mov	ip, r1
 8006048:	4463      	add	r3, ip
 800604a:	0a5b      	lsrs	r3, r3, #9
 800604c:	429a      	cmp	r2, r3
 800604e:	d201      	bcs.n	8006054 <find_volume+0x49c>
		return FR_NO_FILESYSTEM;
 8006050:	230d      	movs	r3, #13
 8006052:	e0b8      	b.n	80061c6 <find_volume+0x60e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006056:	2384      	movs	r3, #132	; 0x84
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	2101      	movs	r1, #1
 800605c:	4249      	negs	r1, r1
 800605e:	50d1      	str	r1, [r2, r3]
 8006060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006062:	2384      	movs	r3, #132	; 0x84
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	58d1      	ldr	r1, [r2, r3]
 8006068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800606a:	2383      	movs	r3, #131	; 0x83
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	4a5a      	ldr	r2, [pc, #360]	; (80061dc <find_volume+0x624>)
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006078:	2357      	movs	r3, #87	; 0x57
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d000      	beq.n	8006084 <find_volume+0x4cc>
 8006082:	e089      	b.n	8006198 <find_volume+0x5e0>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2231      	movs	r2, #49	; 0x31
 8006088:	5c9b      	ldrb	r3, [r3, r2]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	b21a      	sxth	r2, r3
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	2130      	movs	r1, #48	; 0x30
 8006092:	5c5b      	ldrb	r3, [r3, r1]
 8006094:	b21b      	sxth	r3, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	b21b      	sxth	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	d000      	beq.n	80060a0 <find_volume+0x4e8>
 800609e:	e07b      	b.n	8006198 <find_volume+0x5e0>
		&& move_window(fs, bsect + 1) == FR_OK)
 80060a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	0011      	movs	r1, r2
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7fe fb9b 	bl	80047e4 <move_window>
 80060ae:	1e03      	subs	r3, r0, #0
 80060b0:	d172      	bne.n	8006198 <find_volume+0x5e0>
	{
		fs->fsi_flag = 0;
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	4a49      	ldr	r2, [pc, #292]	; (80061dc <find_volume+0x624>)
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	4a46      	ldr	r2, [pc, #280]	; (80061d8 <find_volume+0x620>)
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	b21a      	sxth	r2, r3
 80060c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c6:	23ff      	movs	r3, #255	; 0xff
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	5ccb      	ldrb	r3, [r1, r3]
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	4a43      	ldr	r2, [pc, #268]	; (80061e0 <find_volume+0x628>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d15f      	bne.n	8006198 <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	78db      	ldrb	r3, [r3, #3]
 80060dc:	061a      	lsls	r2, r3, #24
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	789b      	ldrb	r3, [r3, #2]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	4313      	orrs	r3, r2
 80060e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e8:	7852      	ldrb	r2, [r2, #1]
 80060ea:	0212      	lsls	r2, r2, #8
 80060ec:	4313      	orrs	r3, r2
 80060ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	4a3b      	ldr	r2, [pc, #236]	; (80061e4 <find_volume+0x62c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d14e      	bne.n	8006198 <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80060fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060fc:	23e8      	movs	r3, #232	; 0xe8
 80060fe:	33ff      	adds	r3, #255	; 0xff
 8006100:	5cd3      	ldrb	r3, [r2, r3]
 8006102:	061a      	lsls	r2, r3, #24
 8006104:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006106:	23f3      	movs	r3, #243	; 0xf3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	4313      	orrs	r3, r2
 8006110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006112:	22e6      	movs	r2, #230	; 0xe6
 8006114:	32ff      	adds	r2, #255	; 0xff
 8006116:	5c8a      	ldrb	r2, [r1, r2]
 8006118:	0212      	lsls	r2, r2, #8
 800611a:	4313      	orrs	r3, r2
 800611c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800611e:	22f2      	movs	r2, #242	; 0xf2
 8006120:	0052      	lsls	r2, r2, #1
 8006122:	5c8a      	ldrb	r2, [r1, r2]
 8006124:	4313      	orrs	r3, r2
 8006126:	4a30      	ldr	r2, [pc, #192]	; (80061e8 <find_volume+0x630>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d135      	bne.n	8006198 <find_volume+0x5e0>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800612c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800612e:	23ec      	movs	r3, #236	; 0xec
 8006130:	33ff      	adds	r3, #255	; 0xff
 8006132:	5cd3      	ldrb	r3, [r2, r3]
 8006134:	061a      	lsls	r2, r3, #24
 8006136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006138:	23f5      	movs	r3, #245	; 0xf5
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	5ccb      	ldrb	r3, [r1, r3]
 800613e:	041b      	lsls	r3, r3, #16
 8006140:	4313      	orrs	r3, r2
 8006142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006144:	22ea      	movs	r2, #234	; 0xea
 8006146:	32ff      	adds	r2, #255	; 0xff
 8006148:	5c8a      	ldrb	r2, [r1, r2]
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	4313      	orrs	r3, r2
 800614e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006150:	22f4      	movs	r2, #244	; 0xf4
 8006152:	0052      	lsls	r2, r2, #1
 8006154:	5c8a      	ldrb	r2, [r1, r2]
 8006156:	4313      	orrs	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800615c:	2384      	movs	r3, #132	; 0x84
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006164:	23f0      	movs	r3, #240	; 0xf0
 8006166:	33ff      	adds	r3, #255	; 0xff
 8006168:	5cd3      	ldrb	r3, [r2, r3]
 800616a:	061a      	lsls	r2, r3, #24
 800616c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800616e:	23f7      	movs	r3, #247	; 0xf7
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	4313      	orrs	r3, r2
 8006178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800617a:	22ee      	movs	r2, #238	; 0xee
 800617c:	32ff      	adds	r2, #255	; 0xff
 800617e:	5c8a      	ldrb	r2, [r1, r2]
 8006180:	0212      	lsls	r2, r2, #8
 8006182:	4313      	orrs	r3, r2
 8006184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006186:	22f6      	movs	r2, #246	; 0xf6
 8006188:	0052      	lsls	r2, r2, #1
 800618a:	5c8a      	ldrb	r2, [r1, r2]
 800618c:	4313      	orrs	r3, r2
 800618e:	0019      	movs	r1, r3
 8006190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006192:	2383      	movs	r3, #131	; 0x83
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619a:	2357      	movs	r3, #87	; 0x57
 800619c:	18f9      	adds	r1, r7, r3
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	7809      	ldrb	r1, [r1, #0]
 80061a4:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <find_volume+0x634>)
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	3301      	adds	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <find_volume+0x634>)
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <find_volume+0x634>)
 80061b4:	8819      	ldrh	r1, [r3, #0]
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <find_volume+0x638>)
 80061ba:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	0018      	movs	r0, r3
 80061c0:	f7fe fa92 	bl	80046e8 <clear_lock>
#endif

	return FR_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b016      	add	sp, #88	; 0x58
 80061cc:	bdb0      	pop	{r4, r5, r7, pc}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	00000ff5 	.word	0x00000ff5
 80061d4:	0000fff5 	.word	0x0000fff5
 80061d8:	000001ff 	.word	0x000001ff
 80061dc:	00000205 	.word	0x00000205
 80061e0:	ffffaa55 	.word	0xffffaa55
 80061e4:	41615252 	.word	0x41615252
 80061e8:	61417272 	.word	0x61417272
 80061ec:	20000104 	.word	0x20000104
 80061f0:	00000206 	.word	0x00000206

080061f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d028      	beq.n	8006258 <validate+0x64>
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	58d3      	ldr	r3, [r2, r3]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d022      	beq.n	8006258 <validate+0x64>
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	58d2      	ldr	r2, [r2, r3]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	5cd3      	ldrb	r3, [r2, r3]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d019      	beq.n	8006258 <validate+0x64>
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	58d3      	ldr	r3, [r2, r3]
 800622c:	4a0e      	ldr	r2, [pc, #56]	; (8006268 <validate+0x74>)
 800622e:	5a9a      	ldrh	r2, [r3, r2]
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	2381      	movs	r3, #129	; 0x81
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	5acb      	ldrh	r3, [r1, r3]
 8006238:	429a      	cmp	r2, r3
 800623a:	d10d      	bne.n	8006258 <validate+0x64>
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	58d3      	ldr	r3, [r2, r3]
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <validate+0x78>)
 8006246:	5c9b      	ldrb	r3, [r3, r2]
 8006248:	0018      	movs	r0, r3
 800624a:	f7fd ff73 	bl	8004134 <disk_status>
 800624e:	0003      	movs	r3, r0
 8006250:	001a      	movs	r2, r3
 8006252:	2301      	movs	r3, #1
 8006254:	4013      	ands	r3, r2
 8006256:	d001      	beq.n	800625c <validate+0x68>
		return FR_INVALID_OBJECT;
 8006258:	2309      	movs	r3, #9
 800625a:	e000      	b.n	800625e <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	00000206 	.word	0x00000206
 800626c:	00000201 	.word	0x00000201

08006270 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006270:	b5b0      	push	{r4, r5, r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006282:	2310      	movs	r3, #16
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	0018      	movs	r0, r3
 8006288:	f7ff fbe6 	bl	8005a58 <get_ldnumber>
 800628c:	0003      	movs	r3, r0
 800628e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da01      	bge.n	800629a <f_mount+0x2a>
 8006296:	230b      	movs	r3, #11
 8006298:	e034      	b.n	8006304 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800629a:	4b1c      	ldr	r3, [pc, #112]	; (800630c <f_mount+0x9c>)
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	58d3      	ldr	r3, [r2, r3]
 80062a2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7fe fa1b 	bl	80046e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	2100      	movs	r1, #0
 80062ba:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	2100      	movs	r1, #0
 80062ca:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80062cc:	68f9      	ldr	r1, [r7, #12]
 80062ce:	4b0f      	ldr	r3, [pc, #60]	; (800630c <f_mount+0x9c>)
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	0092      	lsls	r2, r2, #2
 80062d4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <f_mount+0x74>
 80062dc:	1dfb      	adds	r3, r7, #7
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d001      	beq.n	80062e8 <f_mount+0x78>
 80062e4:	2300      	movs	r3, #0
 80062e6:	e00d      	b.n	8006304 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80062e8:	2517      	movs	r5, #23
 80062ea:	197c      	adds	r4, r7, r5
 80062ec:	2308      	movs	r3, #8
 80062ee:	18f9      	adds	r1, r7, r3
 80062f0:	230c      	movs	r3, #12
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	2200      	movs	r2, #0
 80062f6:	0018      	movs	r0, r3
 80062f8:	f7ff fc5e 	bl	8005bb8 <find_volume>
 80062fc:	0003      	movs	r3, r0
 80062fe:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8006300:	197b      	adds	r3, r7, r5
 8006302:	781b      	ldrb	r3, [r3, #0]
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b008      	add	sp, #32
 800630a:	bdb0      	pop	{r4, r5, r7, pc}
 800630c:	20000100 	.word	0x20000100

08006310 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006312:	4ce1      	ldr	r4, [pc, #900]	; (8006698 <f_open+0x388>)
 8006314:	44a5      	add	sp, r4
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	4bdf      	ldr	r3, [pc, #892]	; (800669c <f_open+0x38c>)
 800631e:	2194      	movs	r1, #148	; 0x94
 8006320:	0089      	lsls	r1, r1, #2
 8006322:	468c      	mov	ip, r1
 8006324:	44bc      	add	ip, r7
 8006326:	4463      	add	r3, ip
 8006328:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <f_open+0x24>
 8006330:	2309      	movs	r3, #9
 8006332:	e294      	b.n	800685e <f_open+0x54e>
	fp->fs = 0;			/* Clear file object */
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	2100      	movs	r1, #0
 800633c:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800633e:	4bd7      	ldr	r3, [pc, #860]	; (800669c <f_open+0x38c>)
 8006340:	2294      	movs	r2, #148	; 0x94
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	4694      	mov	ip, r2
 8006346:	44bc      	add	ip, r7
 8006348:	4463      	add	r3, ip
 800634a:	4ad4      	ldr	r2, [pc, #848]	; (800669c <f_open+0x38c>)
 800634c:	2194      	movs	r1, #148	; 0x94
 800634e:	0089      	lsls	r1, r1, #2
 8006350:	468c      	mov	ip, r1
 8006352:	44bc      	add	ip, r7
 8006354:	4462      	add	r2, ip
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	211f      	movs	r1, #31
 800635a:	400a      	ands	r2, r1
 800635c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800635e:	4bcf      	ldr	r3, [pc, #828]	; (800669c <f_open+0x38c>)
 8006360:	2294      	movs	r2, #148	; 0x94
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	4694      	mov	ip, r2
 8006366:	44bc      	add	ip, r7
 8006368:	4463      	add	r3, ip
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2201      	movs	r2, #1
 800636e:	4393      	bics	r3, r2
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4dcb      	ldr	r5, [pc, #812]	; (80066a0 <f_open+0x390>)
 8006374:	197c      	adds	r4, r7, r5
 8006376:	2308      	movs	r3, #8
 8006378:	18f9      	adds	r1, r7, r3
 800637a:	2320      	movs	r3, #32
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	2080      	movs	r0, #128	; 0x80
 8006380:	0080      	lsls	r0, r0, #2
 8006382:	4684      	mov	ip, r0
 8006384:	4463      	add	r3, ip
 8006386:	0018      	movs	r0, r3
 8006388:	f7ff fc16 	bl	8005bb8 <find_volume>
 800638c:	0003      	movs	r3, r0
 800638e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006390:	197b      	adds	r3, r7, r5
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d000      	beq.n	800639a <f_open+0x8a>
 8006398:	e25e      	b.n	8006858 <f_open+0x548>
		INIT_BUF(dj);
 800639a:	4bc2      	ldr	r3, [pc, #776]	; (80066a4 <f_open+0x394>)
 800639c:	2594      	movs	r5, #148	; 0x94
 800639e:	00ad      	lsls	r5, r5, #2
 80063a0:	197a      	adds	r2, r7, r5
 80063a2:	18d2      	adds	r2, r2, r3
 80063a4:	2386      	movs	r3, #134	; 0x86
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	2114      	movs	r1, #20
 80063aa:	1879      	adds	r1, r7, r1
 80063ac:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4ebb      	ldr	r6, [pc, #748]	; (80066a0 <f_open+0x390>)
 80063b2:	19bc      	adds	r4, r7, r6
 80063b4:	2320      	movs	r3, #32
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	0011      	movs	r1, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7ff fac0 	bl	8005940 <follow_path>
 80063c0:	0003      	movs	r3, r0
 80063c2:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 80063c4:	4bb7      	ldr	r3, [pc, #732]	; (80066a4 <f_open+0x394>)
 80063c6:	197a      	adds	r2, r7, r5
 80063c8:	18d2      	adds	r2, r2, r3
 80063ca:	2385      	movs	r3, #133	; 0x85
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	58d3      	ldr	r3, [r2, r3]
 80063d0:	2292      	movs	r2, #146	; 0x92
 80063d2:	0092      	lsls	r2, r2, #2
 80063d4:	18ba      	adds	r2, r7, r2
 80063d6:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80063d8:	19bb      	adds	r3, r7, r6
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d121      	bne.n	8006424 <f_open+0x114>
			if (!dir)	/* Default directory itself */
 80063e0:	2392      	movs	r3, #146	; 0x92
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80063ec:	4bac      	ldr	r3, [pc, #688]	; (80066a0 <f_open+0x390>)
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	2206      	movs	r2, #6
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e016      	b.n	8006424 <f_open+0x114>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80063f6:	4ba9      	ldr	r3, [pc, #676]	; (800669c <f_open+0x38c>)
 80063f8:	2294      	movs	r2, #148	; 0x94
 80063fa:	0092      	lsls	r2, r2, #2
 80063fc:	4694      	mov	ip, r2
 80063fe:	44bc      	add	ip, r7
 8006400:	4463      	add	r3, ip
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2201      	movs	r2, #1
 8006406:	4393      	bics	r3, r2
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	4193      	sbcs	r3, r2
 800640c:	b2db      	uxtb	r3, r3
 800640e:	001a      	movs	r2, r3
 8006410:	4ba3      	ldr	r3, [pc, #652]	; (80066a0 <f_open+0x390>)
 8006412:	18fc      	adds	r4, r7, r3
 8006414:	2320      	movs	r3, #32
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	0011      	movs	r1, r2
 800641a:	0018      	movs	r0, r3
 800641c:	f7fd ffc8 	bl	80043b0 <chk_lock>
 8006420:	0003      	movs	r3, r0
 8006422:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006424:	4b9d      	ldr	r3, [pc, #628]	; (800669c <f_open+0x38c>)
 8006426:	2294      	movs	r2, #148	; 0x94
 8006428:	0092      	lsls	r2, r2, #2
 800642a:	4694      	mov	ip, r2
 800642c:	44bc      	add	ip, r7
 800642e:	4463      	add	r3, ip
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	221c      	movs	r2, #28
 8006434:	4013      	ands	r3, r2
 8006436:	d100      	bne.n	800643a <f_open+0x12a>
 8006438:	e119      	b.n	800666e <f_open+0x35e>
			if (res != FR_OK) {					/* No file, create new */
 800643a:	4b99      	ldr	r3, [pc, #612]	; (80066a0 <f_open+0x390>)
 800643c:	18fb      	adds	r3, r7, r3
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d031      	beq.n	80064a8 <f_open+0x198>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006444:	4b96      	ldr	r3, [pc, #600]	; (80066a0 <f_open+0x390>)
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b04      	cmp	r3, #4
 800644c:	d10f      	bne.n	800646e <f_open+0x15e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800644e:	f7fe f81d 	bl	800448c <enq_lock>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d007      	beq.n	8006466 <f_open+0x156>
 8006456:	2320      	movs	r3, #32
 8006458:	18fb      	adds	r3, r7, r3
 800645a:	0018      	movs	r0, r3
 800645c:	f7ff f921 	bl	80056a2 <dir_register>
 8006460:	0003      	movs	r3, r0
 8006462:	001a      	movs	r2, r3
 8006464:	e000      	b.n	8006468 <f_open+0x158>
 8006466:	2212      	movs	r2, #18
 8006468:	4b8d      	ldr	r3, [pc, #564]	; (80066a0 <f_open+0x390>)
 800646a:	18fb      	adds	r3, r7, r3
 800646c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800646e:	4b8b      	ldr	r3, [pc, #556]	; (800669c <f_open+0x38c>)
 8006470:	2294      	movs	r2, #148	; 0x94
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	4694      	mov	ip, r2
 8006476:	44bc      	add	ip, r7
 8006478:	4463      	add	r3, ip
 800647a:	4a88      	ldr	r2, [pc, #544]	; (800669c <f_open+0x38c>)
 800647c:	2194      	movs	r1, #148	; 0x94
 800647e:	0089      	lsls	r1, r1, #2
 8006480:	468c      	mov	ip, r1
 8006482:	44bc      	add	ip, r7
 8006484:	4462      	add	r2, ip
 8006486:	7812      	ldrb	r2, [r2, #0]
 8006488:	2108      	movs	r1, #8
 800648a:	430a      	orrs	r2, r1
 800648c:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800648e:	4b85      	ldr	r3, [pc, #532]	; (80066a4 <f_open+0x394>)
 8006490:	2294      	movs	r2, #148	; 0x94
 8006492:	0092      	lsls	r2, r2, #2
 8006494:	18ba      	adds	r2, r7, r2
 8006496:	18d2      	adds	r2, r2, r3
 8006498:	2385      	movs	r3, #133	; 0x85
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	58d3      	ldr	r3, [r2, r3]
 800649e:	2292      	movs	r2, #146	; 0x92
 80064a0:	0092      	lsls	r2, r2, #2
 80064a2:	18ba      	adds	r2, r7, r2
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	e01c      	b.n	80064e2 <f_open+0x1d2>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064a8:	2392      	movs	r3, #146	; 0x92
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330b      	adds	r3, #11
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	001a      	movs	r2, r3
 80064b6:	2311      	movs	r3, #17
 80064b8:	4013      	ands	r3, r2
 80064ba:	d004      	beq.n	80064c6 <f_open+0x1b6>
					res = FR_DENIED;
 80064bc:	4b78      	ldr	r3, [pc, #480]	; (80066a0 <f_open+0x390>)
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	2207      	movs	r2, #7
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e00d      	b.n	80064e2 <f_open+0x1d2>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80064c6:	4b75      	ldr	r3, [pc, #468]	; (800669c <f_open+0x38c>)
 80064c8:	2294      	movs	r2, #148	; 0x94
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	4694      	mov	ip, r2
 80064ce:	44bc      	add	ip, r7
 80064d0:	4463      	add	r3, ip
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2204      	movs	r2, #4
 80064d6:	4013      	ands	r3, r2
 80064d8:	d003      	beq.n	80064e2 <f_open+0x1d2>
						res = FR_EXIST;
 80064da:	4b71      	ldr	r3, [pc, #452]	; (80066a0 <f_open+0x390>)
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	2208      	movs	r2, #8
 80064e0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80064e2:	4b6f      	ldr	r3, [pc, #444]	; (80066a0 <f_open+0x390>)
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d000      	beq.n	80064ee <f_open+0x1de>
 80064ec:	e0f4      	b.n	80066d8 <f_open+0x3c8>
 80064ee:	4b6b      	ldr	r3, [pc, #428]	; (800669c <f_open+0x38c>)
 80064f0:	2294      	movs	r2, #148	; 0x94
 80064f2:	0092      	lsls	r2, r2, #2
 80064f4:	4694      	mov	ip, r2
 80064f6:	44bc      	add	ip, r7
 80064f8:	4463      	add	r3, ip
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2208      	movs	r2, #8
 80064fe:	4013      	ands	r3, r2
 8006500:	d100      	bne.n	8006504 <f_open+0x1f4>
 8006502:	e0e9      	b.n	80066d8 <f_open+0x3c8>
				dw = GET_FATTIME();				/* Created time */
 8006504:	f001 fd4c 	bl	8007fa0 <get_fattime>
 8006508:	0003      	movs	r3, r0
 800650a:	2091      	movs	r0, #145	; 0x91
 800650c:	0080      	lsls	r0, r0, #2
 800650e:	183a      	adds	r2, r7, r0
 8006510:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006512:	2192      	movs	r1, #146	; 0x92
 8006514:	0089      	lsls	r1, r1, #2
 8006516:	187b      	adds	r3, r7, r1
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330e      	adds	r3, #14
 800651c:	183a      	adds	r2, r7, r0
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	183b      	adds	r3, r7, r0
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	0a1b      	lsrs	r3, r3, #8
 800652c:	b29a      	uxth	r2, r3
 800652e:	187b      	adds	r3, r7, r1
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330f      	adds	r3, #15
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	183b      	adds	r3, r7, r0
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	0c1a      	lsrs	r2, r3, #16
 800653e:	187b      	adds	r3, r7, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3310      	adds	r3, #16
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	183b      	adds	r3, r7, r0
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	0e1a      	lsrs	r2, r3, #24
 800654e:	187b      	adds	r3, r7, r1
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3311      	adds	r3, #17
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006558:	187b      	adds	r3, r7, r1
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330b      	adds	r3, #11
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006562:	187b      	adds	r3, r7, r1
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	331c      	adds	r3, #28
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	187b      	adds	r3, r7, r1
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	331d      	adds	r3, #29
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	187b      	adds	r3, r7, r1
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	331e      	adds	r3, #30
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	187b      	adds	r3, r7, r1
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	331f      	adds	r3, #31
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800658a:	4b46      	ldr	r3, [pc, #280]	; (80066a4 <f_open+0x394>)
 800658c:	2594      	movs	r5, #148	; 0x94
 800658e:	00ad      	lsls	r5, r5, #2
 8006590:	197a      	adds	r2, r7, r5
 8006592:	18d2      	adds	r2, r2, r3
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	58d3      	ldr	r3, [r2, r3]
 800659a:	000c      	movs	r4, r1
 800659c:	187a      	adds	r2, r7, r1
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	0011      	movs	r1, r2
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7fe ffc6 	bl	8005534 <ld_clust>
 80065a8:	0003      	movs	r3, r0
 80065aa:	2690      	movs	r6, #144	; 0x90
 80065ac:	00b6      	lsls	r6, r6, #2
 80065ae:	19ba      	adds	r2, r7, r6
 80065b0:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80065b2:	0021      	movs	r1, r4
 80065b4:	187b      	adds	r3, r7, r1
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2100      	movs	r1, #0
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fe ffe7 	bl	800558e <st_clust>
				dj.fs->wflag = 1;
 80065c0:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <f_open+0x394>)
 80065c2:	197a      	adds	r2, r7, r5
 80065c4:	18d2      	adds	r2, r2, r3
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	58d2      	ldr	r2, [r2, r3]
 80065cc:	2381      	movs	r3, #129	; 0x81
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	2101      	movs	r1, #1
 80065d2:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 80065d4:	19bb      	adds	r3, r7, r6
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d100      	bne.n	80065de <f_open+0x2ce>
 80065dc:	e07c      	b.n	80066d8 <f_open+0x3c8>
					dw = dj.fs->winsect;
 80065de:	4b31      	ldr	r3, [pc, #196]	; (80066a4 <f_open+0x394>)
 80065e0:	2194      	movs	r1, #148	; 0x94
 80065e2:	0089      	lsls	r1, r1, #2
 80065e4:	187a      	adds	r2, r7, r1
 80065e6:	18d2      	adds	r2, r2, r3
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	58d2      	ldr	r2, [r2, r3]
 80065ee:	238b      	movs	r3, #139	; 0x8b
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	58d3      	ldr	r3, [r2, r3]
 80065f4:	2291      	movs	r2, #145	; 0x91
 80065f6:	0092      	lsls	r2, r2, #2
 80065f8:	18ba      	adds	r2, r7, r2
 80065fa:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80065fc:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <f_open+0x394>)
 80065fe:	187a      	adds	r2, r7, r1
 8006600:	18d2      	adds	r2, r2, r3
 8006602:	2380      	movs	r3, #128	; 0x80
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	58d3      	ldr	r3, [r2, r3]
 8006608:	4d25      	ldr	r5, [pc, #148]	; (80066a0 <f_open+0x390>)
 800660a:	197c      	adds	r4, r7, r5
 800660c:	2290      	movs	r2, #144	; 0x90
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	18ba      	adds	r2, r7, r2
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	0011      	movs	r1, r2
 8006616:	0018      	movs	r0, r3
 8006618:	f7fe fc04 	bl	8004e24 <remove_chain>
 800661c:	0003      	movs	r3, r0
 800661e:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8006620:	197b      	adds	r3, r7, r5
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d157      	bne.n	80066d8 <f_open+0x3c8>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <f_open+0x394>)
 800662a:	2094      	movs	r0, #148	; 0x94
 800662c:	0080      	lsls	r0, r0, #2
 800662e:	183a      	adds	r2, r7, r0
 8006630:	18d2      	adds	r2, r2, r3
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	58d2      	ldr	r2, [r2, r3]
 8006638:	2390      	movs	r3, #144	; 0x90
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	1e59      	subs	r1, r3, #1
 8006642:	2383      	movs	r3, #131	; 0x83
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8006648:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <f_open+0x394>)
 800664a:	183a      	adds	r2, r7, r0
 800664c:	18d2      	adds	r2, r2, r3
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	58d3      	ldr	r3, [r2, r3]
 8006654:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <f_open+0x390>)
 8006656:	18bc      	adds	r4, r7, r2
 8006658:	2291      	movs	r2, #145	; 0x91
 800665a:	0092      	lsls	r2, r2, #2
 800665c:	18ba      	adds	r2, r7, r2
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f7fe f8be 	bl	80047e4 <move_window>
 8006668:	0003      	movs	r3, r0
 800666a:	7023      	strb	r3, [r4, #0]
 800666c:	e034      	b.n	80066d8 <f_open+0x3c8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <f_open+0x390>)
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d12f      	bne.n	80066d8 <f_open+0x3c8>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006678:	2392      	movs	r3, #146	; 0x92
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330b      	adds	r3, #11
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	001a      	movs	r2, r3
 8006686:	2310      	movs	r3, #16
 8006688:	4013      	ands	r3, r2
 800668a:	d00d      	beq.n	80066a8 <f_open+0x398>
					res = FR_NO_FILE;
 800668c:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <f_open+0x390>)
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	2204      	movs	r2, #4
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	e020      	b.n	80066d8 <f_open+0x3c8>
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	fffffdac 	.word	0xfffffdac
 800669c:	fffffdb7 	.word	0xfffffdb7
 80066a0:	0000024f 	.word	0x0000024f
 80066a4:	fffffdd0 	.word	0xfffffdd0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80066a8:	4b70      	ldr	r3, [pc, #448]	; (800686c <f_open+0x55c>)
 80066aa:	2294      	movs	r2, #148	; 0x94
 80066ac:	0092      	lsls	r2, r2, #2
 80066ae:	4694      	mov	ip, r2
 80066b0:	44bc      	add	ip, r7
 80066b2:	4463      	add	r3, ip
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2202      	movs	r2, #2
 80066b8:	4013      	ands	r3, r2
 80066ba:	d00d      	beq.n	80066d8 <f_open+0x3c8>
 80066bc:	2392      	movs	r3, #146	; 0x92
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330b      	adds	r3, #11
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	001a      	movs	r2, r3
 80066ca:	2301      	movs	r3, #1
 80066cc:	4013      	ands	r3, r2
 80066ce:	d003      	beq.n	80066d8 <f_open+0x3c8>
						res = FR_DENIED;
 80066d0:	4b67      	ldr	r3, [pc, #412]	; (8006870 <f_open+0x560>)
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	2207      	movs	r2, #7
 80066d6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 80066d8:	4b65      	ldr	r3, [pc, #404]	; (8006870 <f_open+0x560>)
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d152      	bne.n	8006788 <f_open+0x478>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80066e2:	4b62      	ldr	r3, [pc, #392]	; (800686c <f_open+0x55c>)
 80066e4:	2294      	movs	r2, #148	; 0x94
 80066e6:	0092      	lsls	r2, r2, #2
 80066e8:	4694      	mov	ip, r2
 80066ea:	44bc      	add	ip, r7
 80066ec:	4463      	add	r3, ip
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2208      	movs	r2, #8
 80066f2:	4013      	ands	r3, r2
 80066f4:	d00f      	beq.n	8006716 <f_open+0x406>
				mode |= FA__WRITTEN;
 80066f6:	4b5d      	ldr	r3, [pc, #372]	; (800686c <f_open+0x55c>)
 80066f8:	2294      	movs	r2, #148	; 0x94
 80066fa:	0092      	lsls	r2, r2, #2
 80066fc:	4694      	mov	ip, r2
 80066fe:	44bc      	add	ip, r7
 8006700:	4463      	add	r3, ip
 8006702:	4a5a      	ldr	r2, [pc, #360]	; (800686c <f_open+0x55c>)
 8006704:	2194      	movs	r1, #148	; 0x94
 8006706:	0089      	lsls	r1, r1, #2
 8006708:	468c      	mov	ip, r1
 800670a:	44bc      	add	ip, r7
 800670c:	4462      	add	r2, ip
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	2120      	movs	r1, #32
 8006712:	430a      	orrs	r2, r1
 8006714:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006716:	4b57      	ldr	r3, [pc, #348]	; (8006874 <f_open+0x564>)
 8006718:	2294      	movs	r2, #148	; 0x94
 800671a:	0092      	lsls	r2, r2, #2
 800671c:	18ba      	adds	r2, r7, r2
 800671e:	18d2      	adds	r2, r2, r3
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	58d2      	ldr	r2, [r2, r3]
 8006726:	238b      	movs	r3, #139	; 0x8b
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	58d1      	ldr	r1, [r2, r3]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	2387      	movs	r3, #135	; 0x87
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	2388      	movs	r3, #136	; 0x88
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	2192      	movs	r1, #146	; 0x92
 800673c:	0089      	lsls	r1, r1, #2
 800673e:	1879      	adds	r1, r7, r1
 8006740:	6809      	ldr	r1, [r1, #0]
 8006742:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006744:	4b49      	ldr	r3, [pc, #292]	; (800686c <f_open+0x55c>)
 8006746:	2294      	movs	r2, #148	; 0x94
 8006748:	0092      	lsls	r2, r2, #2
 800674a:	4694      	mov	ip, r2
 800674c:	44bc      	add	ip, r7
 800674e:	4463      	add	r3, ip
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2201      	movs	r2, #1
 8006754:	4393      	bics	r3, r2
 8006756:	1e5a      	subs	r2, r3, #1
 8006758:	4193      	sbcs	r3, r2
 800675a:	b2db      	uxtb	r3, r3
 800675c:	001a      	movs	r2, r3
 800675e:	2320      	movs	r3, #32
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	0011      	movs	r1, r2
 8006764:	0018      	movs	r0, r3
 8006766:	f7fd feb1 	bl	80044cc <inc_lock>
 800676a:	0001      	movs	r1, r0
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	238a      	movs	r3, #138	; 0x8a
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	238a      	movs	r3, #138	; 0x8a
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	58d3      	ldr	r3, [r2, r3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <f_open+0x478>
 8006780:	4b3b      	ldr	r3, [pc, #236]	; (8006870 <f_open+0x560>)
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	2202      	movs	r2, #2
 8006786:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006788:	4b39      	ldr	r3, [pc, #228]	; (8006870 <f_open+0x560>)
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d162      	bne.n	8006858 <f_open+0x548>
			fp->flag = mode;					/* File access mode */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a35      	ldr	r2, [pc, #212]	; (800686c <f_open+0x55c>)
 8006796:	2194      	movs	r1, #148	; 0x94
 8006798:	0089      	lsls	r1, r1, #2
 800679a:	468c      	mov	ip, r1
 800679c:	44bc      	add	ip, r7
 800679e:	4462      	add	r2, ip
 80067a0:	4935      	ldr	r1, [pc, #212]	; (8006878 <f_open+0x568>)
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a34      	ldr	r2, [pc, #208]	; (800687c <f_open+0x56c>)
 80067aa:	2100      	movs	r1, #0
 80067ac:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80067ae:	4b31      	ldr	r3, [pc, #196]	; (8006874 <f_open+0x564>)
 80067b0:	2594      	movs	r5, #148	; 0x94
 80067b2:	00ad      	lsls	r5, r5, #2
 80067b4:	197a      	adds	r2, r7, r5
 80067b6:	18d2      	adds	r2, r2, r3
 80067b8:	2380      	movs	r3, #128	; 0x80
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	58d3      	ldr	r3, [r2, r3]
 80067be:	2192      	movs	r1, #146	; 0x92
 80067c0:	0089      	lsls	r1, r1, #2
 80067c2:	000c      	movs	r4, r1
 80067c4:	187a      	adds	r2, r7, r1
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	0011      	movs	r1, r2
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7fe feb2 	bl	8005534 <ld_clust>
 80067d0:	0001      	movs	r1, r0
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	2384      	movs	r3, #132	; 0x84
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80067da:	0021      	movs	r1, r4
 80067dc:	187b      	adds	r3, r7, r1
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	331f      	adds	r3, #31
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	061a      	lsls	r2, r3, #24
 80067e6:	187b      	adds	r3, r7, r1
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	331e      	adds	r3, #30
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	4313      	orrs	r3, r2
 80067f2:	187a      	adds	r2, r7, r1
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	321d      	adds	r2, #29
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	0212      	lsls	r2, r2, #8
 80067fc:	4313      	orrs	r3, r2
 80067fe:	187a      	adds	r2, r7, r1
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	321c      	adds	r2, #28
 8006804:	7812      	ldrb	r2, [r2, #0]
 8006806:	4313      	orrs	r3, r2
 8006808:	0019      	movs	r1, r3
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	2383      	movs	r3, #131	; 0x83
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	2382      	movs	r3, #130	; 0x82
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	2100      	movs	r1, #0
 800681a:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	2386      	movs	r3, #134	; 0x86
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	2100      	movs	r1, #0
 8006824:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	2389      	movs	r3, #137	; 0x89
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	2100      	movs	r1, #0
 800682e:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006830:	4b10      	ldr	r3, [pc, #64]	; (8006874 <f_open+0x564>)
 8006832:	197a      	adds	r2, r7, r5
 8006834:	18d2      	adds	r2, r2, r3
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	58d1      	ldr	r1, [r2, r3]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	58d3      	ldr	r3, [r2, r3]
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <f_open+0x568>)
 800684e:	5a99      	ldrh	r1, [r3, r2]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	2381      	movs	r3, #129	; 0x81
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <f_open+0x560>)
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	781b      	ldrb	r3, [r3, #0]
}
 800685e:	0018      	movs	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	2395      	movs	r3, #149	; 0x95
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	449d      	add	sp, r3
 8006868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	fffffdb7 	.word	0xfffffdb7
 8006870:	0000024f 	.word	0x0000024f
 8006874:	fffffdd0 	.word	0xfffffdd0
 8006878:	00000206 	.word	0x00000206
 800687c:	00000207 	.word	0x00000207

08006880 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006880:	b5b0      	push	{r4, r5, r7, lr}
 8006882:	b08c      	sub	sp, #48	; 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006898:	251f      	movs	r5, #31
 800689a:	197c      	adds	r4, r7, r5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff fca8 	bl	80061f4 <validate>
 80068a4:	0003      	movs	r3, r0
 80068a6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80068a8:	197b      	adds	r3, r7, r5
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <f_read+0x38>
 80068b0:	231f      	movs	r3, #31
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	e173      	b.n	8006ba0 <f_read+0x320>
	if (fp->err)								/* Check error */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4abb      	ldr	r2, [pc, #748]	; (8006ba8 <f_read+0x328>)
 80068bc:	5c9b      	ldrb	r3, [r3, r2]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <f_read+0x4a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4ab8      	ldr	r2, [pc, #736]	; (8006ba8 <f_read+0x328>)
 80068c6:	5c9b      	ldrb	r3, [r3, r2]
 80068c8:	e16a      	b.n	8006ba0 <f_read+0x320>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4ab7      	ldr	r2, [pc, #732]	; (8006bac <f_read+0x32c>)
 80068ce:	5c9b      	ldrb	r3, [r3, r2]
 80068d0:	001a      	movs	r2, r3
 80068d2:	2301      	movs	r3, #1
 80068d4:	4013      	ands	r3, r2
 80068d6:	d101      	bne.n	80068dc <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80068d8:	2307      	movs	r3, #7
 80068da:	e161      	b.n	8006ba0 <f_read+0x320>
	remain = fp->fsize - fp->fptr;
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	2383      	movs	r3, #131	; 0x83
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	58d2      	ldr	r2, [r2, r3]
 80068e4:	68f9      	ldr	r1, [r7, #12]
 80068e6:	2382      	movs	r3, #130	; 0x82
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	58cb      	ldr	r3, [r1, r3]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d800      	bhi.n	80068fa <f_read+0x7a>
 80068f8:	e14d      	b.n	8006b96 <f_read+0x316>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80068fe:	e14a      	b.n	8006b96 <f_read+0x316>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	2382      	movs	r3, #130	; 0x82
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	58d3      	ldr	r3, [r2, r3]
 8006908:	05db      	lsls	r3, r3, #23
 800690a:	0ddb      	lsrs	r3, r3, #23
 800690c:	d000      	beq.n	8006910 <f_read+0x90>
 800690e:	e10d      	b.n	8006b2c <f_read+0x2ac>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	2382      	movs	r3, #130	; 0x82
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	58d3      	ldr	r3, [r2, r3]
 8006918:	0a5b      	lsrs	r3, r3, #9
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	2380      	movs	r3, #128	; 0x80
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	58cb      	ldr	r3, [r1, r3]
 8006924:	49a2      	ldr	r1, [pc, #648]	; (8006bb0 <f_read+0x330>)
 8006926:	5c5b      	ldrb	r3, [r3, r1]
 8006928:	3b01      	subs	r3, #1
 800692a:	b2d9      	uxtb	r1, r3
 800692c:	2017      	movs	r0, #23
 800692e:	183b      	adds	r3, r7, r0
 8006930:	400a      	ands	r2, r1
 8006932:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 8006934:	183b      	adds	r3, r7, r0
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d141      	bne.n	80069c0 <f_read+0x140>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	2382      	movs	r3, #130	; 0x82
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	58d3      	ldr	r3, [r2, r3]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <f_read+0xd4>
					clst = fp->sclust;			/* Follow from the origin */
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	2384      	movs	r3, #132	; 0x84
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	58d3      	ldr	r3, [r2, r3]
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006952:	e01e      	b.n	8006992 <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	2389      	movs	r3, #137	; 0x89
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	58d3      	ldr	r3, [r2, r3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <f_read+0xf8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	2382      	movs	r3, #130	; 0x82
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	58d2      	ldr	r2, [r2, r3]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	0011      	movs	r1, r2
 800696c:	0018      	movs	r0, r3
 800696e:	f7fe fb7f 	bl	8005070 <clmt_clust>
 8006972:	0003      	movs	r3, r0
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006976:	e00c      	b.n	8006992 <f_read+0x112>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	2380      	movs	r3, #128	; 0x80
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	58d0      	ldr	r0, [r2, r3]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	2385      	movs	r3, #133	; 0x85
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	58d3      	ldr	r3, [r2, r3]
 8006988:	0019      	movs	r1, r3
 800698a:	f7fe f85f 	bl	8004a4c <get_fat>
 800698e:	0003      	movs	r3, r0
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d805      	bhi.n	80069a4 <f_read+0x124>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4a83      	ldr	r2, [pc, #524]	; (8006ba8 <f_read+0x328>)
 800699c:	2102      	movs	r1, #2
 800699e:	5499      	strb	r1, [r3, r2]
 80069a0:	2302      	movs	r3, #2
 80069a2:	e0fd      	b.n	8006ba0 <f_read+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	3301      	adds	r3, #1
 80069a8:	d105      	bne.n	80069b6 <f_read+0x136>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a7e      	ldr	r2, [pc, #504]	; (8006ba8 <f_read+0x328>)
 80069ae:	2101      	movs	r1, #1
 80069b0:	5499      	strb	r1, [r3, r2]
 80069b2:	2301      	movs	r3, #1
 80069b4:	e0f4      	b.n	8006ba0 <f_read+0x320>
				fp->clust = clst;				/* Update current cluster */
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	2385      	movs	r3, #133	; 0x85
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069be:	50d1      	str	r1, [r2, r3]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	2380      	movs	r3, #128	; 0x80
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	58d0      	ldr	r0, [r2, r3]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	2385      	movs	r3, #133	; 0x85
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	58d3      	ldr	r3, [r2, r3]
 80069d0:	0019      	movs	r1, r3
 80069d2:	f7fe f817 	bl	8004a04 <clust2sect>
 80069d6:	0003      	movs	r3, r0
 80069d8:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <f_read+0x16c>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a71      	ldr	r2, [pc, #452]	; (8006ba8 <f_read+0x328>)
 80069e4:	2102      	movs	r1, #2
 80069e6:	5499      	strb	r1, [r3, r2]
 80069e8:	2302      	movs	r3, #2
 80069ea:	e0d9      	b.n	8006ba0 <f_read+0x320>
			sect += csect;
 80069ec:	2317      	movs	r3, #23
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	18d3      	adds	r3, r2, r3
 80069f6:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0a5b      	lsrs	r3, r3, #9
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d04e      	beq.n	8006aa2 <f_read+0x222>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006a04:	2317      	movs	r3, #23
 8006a06:	18fb      	adds	r3, r7, r3
 8006a08:	781a      	ldrb	r2, [r3, #0]
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	18d3      	adds	r3, r2, r3
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	2280      	movs	r2, #128	; 0x80
 8006a12:	0092      	lsls	r2, r2, #2
 8006a14:	588a      	ldr	r2, [r1, r2]
 8006a16:	4966      	ldr	r1, [pc, #408]	; (8006bb0 <f_read+0x330>)
 8006a18:	5c52      	ldrb	r2, [r2, r1]
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d90b      	bls.n	8006a36 <f_read+0x1b6>
					cc = fp->fs->csize - csect;
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	58d3      	ldr	r3, [r2, r3]
 8006a26:	4a62      	ldr	r2, [pc, #392]	; (8006bb0 <f_read+0x330>)
 8006a28:	5c9b      	ldrb	r3, [r3, r2]
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	2317      	movs	r3, #23
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	58d3      	ldr	r3, [r2, r3]
 8006a3e:	4a5d      	ldr	r2, [pc, #372]	; (8006bb4 <f_read+0x334>)
 8006a40:	5c98      	ldrb	r0, [r3, r2]
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	6a39      	ldr	r1, [r7, #32]
 8006a48:	f7fd fbc8 	bl	80041dc <disk_read>
 8006a4c:	1e03      	subs	r3, r0, #0
 8006a4e:	d005      	beq.n	8006a5c <f_read+0x1dc>
					ABORT(fp->fs, FR_DISK_ERR);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4a55      	ldr	r2, [pc, #340]	; (8006ba8 <f_read+0x328>)
 8006a54:	2101      	movs	r1, #1
 8006a56:	5499      	strb	r1, [r3, r2]
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0a1      	b.n	8006ba0 <f_read+0x320>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a53      	ldr	r2, [pc, #332]	; (8006bac <f_read+0x32c>)
 8006a60:	5c9b      	ldrb	r3, [r3, r2]
 8006a62:	001a      	movs	r2, r3
 8006a64:	2340      	movs	r3, #64	; 0x40
 8006a66:	4013      	ands	r3, r2
 8006a68:	d017      	beq.n	8006a9a <f_read+0x21a>
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	2386      	movs	r3, #134	; 0x86
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	58d2      	ldr	r2, [r2, r3]
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d90e      	bls.n	8006a9a <f_read+0x21a>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	2386      	movs	r3, #134	; 0x86
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	58d2      	ldr	r2, [r2, r3]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	6a3a      	ldr	r2, [r7, #32]
 8006a8c:	18d0      	adds	r0, r2, r3
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	001a      	movs	r2, r3
 8006a96:	f7fd fc19 	bl	80042cc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	025b      	lsls	r3, r3, #9
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006aa0:	e061      	b.n	8006b66 <f_read+0x2e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	2386      	movs	r3, #134	; 0x86
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	58d3      	ldr	r3, [r2, r3]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d038      	beq.n	8006b22 <f_read+0x2a2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a3e      	ldr	r2, [pc, #248]	; (8006bac <f_read+0x32c>)
 8006ab4:	5c9b      	ldrb	r3, [r3, r2]
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	4013      	ands	r3, r2
 8006abc:	d01e      	beq.n	8006afc <f_read+0x27c>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	58d3      	ldr	r3, [r2, r3]
 8006ac6:	4a3b      	ldr	r2, [pc, #236]	; (8006bb4 <f_read+0x334>)
 8006ac8:	5c98      	ldrb	r0, [r3, r2]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	2386      	movs	r3, #134	; 0x86
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	58d2      	ldr	r2, [r2, r3]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f7fd fba9 	bl	800422c <disk_write>
 8006ada:	1e03      	subs	r3, r0, #0
 8006adc:	d005      	beq.n	8006aea <f_read+0x26a>
						ABORT(fp->fs, FR_DISK_ERR);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a31      	ldr	r2, [pc, #196]	; (8006ba8 <f_read+0x328>)
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	5499      	strb	r1, [r3, r2]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e05a      	b.n	8006ba0 <f_read+0x320>
					fp->flag &= ~FA__DIRTY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a2f      	ldr	r2, [pc, #188]	; (8006bac <f_read+0x32c>)
 8006aee:	5c9b      	ldrb	r3, [r3, r2]
 8006af0:	2240      	movs	r2, #64	; 0x40
 8006af2:	4393      	bics	r3, r2
 8006af4:	b2d9      	uxtb	r1, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a2c      	ldr	r2, [pc, #176]	; (8006bac <f_read+0x32c>)
 8006afa:	5499      	strb	r1, [r3, r2]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	58d3      	ldr	r3, [r2, r3]
 8006b04:	4a2b      	ldr	r2, [pc, #172]	; (8006bb4 <f_read+0x334>)
 8006b06:	5c98      	ldrb	r0, [r3, r2]
 8006b08:	68f9      	ldr	r1, [r7, #12]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f7fd fb65 	bl	80041dc <disk_read>
 8006b12:	1e03      	subs	r3, r0, #0
 8006b14:	d005      	beq.n	8006b22 <f_read+0x2a2>
					ABORT(fp->fs, FR_DISK_ERR);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a23      	ldr	r2, [pc, #140]	; (8006ba8 <f_read+0x328>)
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	5499      	strb	r1, [r3, r2]
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e03e      	b.n	8006ba0 <f_read+0x320>
			}
#endif
			fp->dsect = sect;
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	2386      	movs	r3, #134	; 0x86
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	6939      	ldr	r1, [r7, #16]
 8006b2a:	50d1      	str	r1, [r2, r3]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	2382      	movs	r3, #130	; 0x82
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	58d3      	ldr	r3, [r2, r3]
 8006b34:	05db      	lsls	r3, r3, #23
 8006b36:	0ddb      	lsrs	r3, r3, #23
 8006b38:	2280      	movs	r2, #128	; 0x80
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d901      	bls.n	8006b4c <f_read+0x2cc>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	2382      	movs	r3, #130	; 0x82
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	58d3      	ldr	r3, [r2, r3]
 8006b54:	05db      	lsls	r3, r3, #23
 8006b56:	0ddb      	lsrs	r3, r3, #23
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	18d1      	adds	r1, r2, r3
 8006b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f7fd fbb3 	bl	80042cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	18d3      	adds	r3, r2, r3
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	2382      	movs	r3, #130	; 0x82
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	58d2      	ldr	r2, [r2, r3]
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	18d1      	adds	r1, r2, r3
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	2382      	movs	r3, #130	; 0x82
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	50d1      	str	r1, [r2, r3]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	18d2      	adds	r2, r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d000      	beq.n	8006b9e <f_read+0x31e>
 8006b9c:	e6b0      	b.n	8006900 <f_read+0x80>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b00c      	add	sp, #48	; 0x30
 8006ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba8:	00000207 	.word	0x00000207
 8006bac:	00000206 	.word	0x00000206
 8006bb0:	00000202 	.word	0x00000202
 8006bb4:	00000201 	.word	0x00000201

08006bb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006bb8:	b5b0      	push	{r4, r5, r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006bc0:	2517      	movs	r5, #23
 8006bc2:	197c      	adds	r4, r7, r5
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7ff fb14 	bl	80061f4 <validate>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006bd0:	197b      	adds	r3, r7, r5
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d000      	beq.n	8006bda <f_sync+0x22>
 8006bd8:	e0b9      	b.n	8006d4e <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a5f      	ldr	r2, [pc, #380]	; (8006d5c <f_sync+0x1a4>)
 8006bde:	5c9b      	ldrb	r3, [r3, r2]
 8006be0:	001a      	movs	r2, r3
 8006be2:	2320      	movs	r3, #32
 8006be4:	4013      	ands	r3, r2
 8006be6:	d100      	bne.n	8006bea <f_sync+0x32>
 8006be8:	e0b1      	b.n	8006d4e <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a5b      	ldr	r2, [pc, #364]	; (8006d5c <f_sync+0x1a4>)
 8006bee:	5c9b      	ldrb	r3, [r3, r2]
 8006bf0:	001a      	movs	r2, r3
 8006bf2:	2340      	movs	r3, #64	; 0x40
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d01a      	beq.n	8006c2e <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	58d3      	ldr	r3, [r2, r3]
 8006c00:	4a57      	ldr	r2, [pc, #348]	; (8006d60 <f_sync+0x1a8>)
 8006c02:	5c98      	ldrb	r0, [r3, r2]
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	2386      	movs	r3, #134	; 0x86
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	58d2      	ldr	r2, [r2, r3]
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f7fd fb0c 	bl	800422c <disk_write>
 8006c14:	1e03      	subs	r3, r0, #0
 8006c16:	d001      	beq.n	8006c1c <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e09b      	b.n	8006d54 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a4f      	ldr	r2, [pc, #316]	; (8006d5c <f_sync+0x1a4>)
 8006c20:	5c9b      	ldrb	r3, [r3, r2]
 8006c22:	2240      	movs	r2, #64	; 0x40
 8006c24:	4393      	bics	r3, r2
 8006c26:	b2d9      	uxtb	r1, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a4c      	ldr	r2, [pc, #304]	; (8006d5c <f_sync+0x1a4>)
 8006c2c:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	58d0      	ldr	r0, [r2, r3]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	2387      	movs	r3, #135	; 0x87
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	58d3      	ldr	r3, [r2, r3]
 8006c3e:	2517      	movs	r5, #23
 8006c40:	197c      	adds	r4, r7, r5
 8006c42:	0019      	movs	r1, r3
 8006c44:	f7fd fdce 	bl	80047e4 <move_window>
 8006c48:	0003      	movs	r3, r0
 8006c4a:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8006c4c:	197b      	adds	r3, r7, r5
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d17c      	bne.n	8006d4e <f_sync+0x196>
				dir = fp->dir_ptr;
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	2388      	movs	r3, #136	; 0x88
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	58d3      	ldr	r3, [r2, r3]
 8006c5c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	330b      	adds	r3, #11
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	330b      	adds	r3, #11
 8006c68:	2120      	movs	r1, #32
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	2383      	movs	r3, #131	; 0x83
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	58d2      	ldr	r2, [r2, r3]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	331c      	adds	r3, #28
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	2383      	movs	r3, #131	; 0x83
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	58d3      	ldr	r3, [r2, r3]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	331d      	adds	r3, #29
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	2383      	movs	r3, #131	; 0x83
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	58d3      	ldr	r3, [r2, r3]
 8006c9e:	0c1a      	lsrs	r2, r3, #16
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	331e      	adds	r3, #30
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	2383      	movs	r3, #131	; 0x83
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	58d3      	ldr	r3, [r2, r3]
 8006cb0:	0e1a      	lsrs	r2, r3, #24
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	331f      	adds	r3, #31
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	2384      	movs	r3, #132	; 0x84
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	58d2      	ldr	r2, [r2, r3]
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	0011      	movs	r1, r2
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f7fe fc61 	bl	800558e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006ccc:	f001 f968 	bl	8007fa0 <get_fattime>
 8006cd0:	0003      	movs	r3, r0
 8006cd2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	3316      	adds	r3, #22
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3317      	adds	r3, #23
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	0c1a      	lsrs	r2, r3, #16
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	0e1a      	lsrs	r2, r3, #24
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3319      	adds	r3, #25
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	3312      	adds	r3, #18
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	3313      	adds	r3, #19
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <f_sync+0x1a4>)
 8006d1a:	5c9b      	ldrb	r3, [r3, r2]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	4393      	bics	r3, r2
 8006d20:	b2d9      	uxtb	r1, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a0d      	ldr	r2, [pc, #52]	; (8006d5c <f_sync+0x1a4>)
 8006d26:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	2380      	movs	r3, #128	; 0x80
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	58d2      	ldr	r2, [r2, r3]
 8006d30:	2381      	movs	r3, #129	; 0x81
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	2101      	movs	r1, #1
 8006d36:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	58d3      	ldr	r3, [r2, r3]
 8006d40:	2217      	movs	r2, #23
 8006d42:	18bc      	adds	r4, r7, r2
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7fd fd89 	bl	800485c <sync_fs>
 8006d4a:	0003      	movs	r3, r0
 8006d4c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006d4e:	2317      	movs	r3, #23
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	781b      	ldrb	r3, [r3, #0]
}
 8006d54:	0018      	movs	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b006      	add	sp, #24
 8006d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d5c:	00000206 	.word	0x00000206
 8006d60:	00000201 	.word	0x00000201

08006d64 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006d64:	b5b0      	push	{r4, r5, r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006d6c:	250f      	movs	r5, #15
 8006d6e:	197c      	adds	r4, r7, r5
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7ff ff20 	bl	8006bb8 <f_sync>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8006d7c:	197b      	adds	r3, r7, r5
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11f      	bne.n	8006dc4 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006d84:	250f      	movs	r5, #15
 8006d86:	197c      	adds	r4, r7, r5
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7ff fa32 	bl	80061f4 <validate>
 8006d90:	0003      	movs	r3, r0
 8006d92:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006d94:	197b      	adds	r3, r7, r5
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d113      	bne.n	8006dc4 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	238a      	movs	r3, #138	; 0x8a
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	58d3      	ldr	r3, [r2, r3]
 8006da4:	250f      	movs	r5, #15
 8006da6:	197c      	adds	r4, r7, r5
 8006da8:	0018      	movs	r0, r3
 8006daa:	f7fd fc47 	bl	800463c <dec_lock>
 8006dae:	0003      	movs	r3, r0
 8006db0:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8006db2:	197b      	adds	r3, r7, r5
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006dc4:	230f      	movs	r3, #15
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	781b      	ldrb	r3, [r3, #0]
}
 8006dca:	0018      	movs	r0, r3
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b004      	add	sp, #16
 8006dd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006dd4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b090      	sub	sp, #64	; 0x40
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8006dde:	253f      	movs	r5, #63	; 0x3f
 8006de0:	197c      	adds	r4, r7, r5
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7ff fa05 	bl	80061f4 <validate>
 8006dea:	0003      	movs	r3, r0
 8006dec:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006dee:	197b      	adds	r3, r7, r5
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <f_lseek+0x2a>
 8006df6:	233f      	movs	r3, #63	; 0x3f
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	e28b      	b.n	8007316 <f_lseek+0x542>
	if (fp->err)						/* Check error */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4ad9      	ldr	r2, [pc, #868]	; (8007168 <f_lseek+0x394>)
 8006e02:	5c9b      	ldrb	r3, [r3, r2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <f_lseek+0x3c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4ad7      	ldr	r2, [pc, #860]	; (8007168 <f_lseek+0x394>)
 8006e0c:	5c9b      	ldrb	r3, [r3, r2]
 8006e0e:	e282      	b.n	8007316 <f_lseek+0x542>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	2389      	movs	r3, #137	; 0x89
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	58d3      	ldr	r3, [r2, r3]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d100      	bne.n	8006e1e <f_lseek+0x4a>
 8006e1c:	e103      	b.n	8007026 <f_lseek+0x252>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	d16c      	bne.n	8006efe <f_lseek+0x12a>
			tbl = fp->cltbl;
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	2389      	movs	r3, #137	; 0x89
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	58d3      	ldr	r3, [r2, r3]
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	627a      	str	r2, [r7, #36]	; 0x24
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	2302      	movs	r3, #2
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	2384      	movs	r3, #132	; 0x84
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	58d3      	ldr	r3, [r2, r3]
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d045      	beq.n	8006ed8 <f_lseek+0x104>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	2300      	movs	r3, #0
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	3302      	adds	r3, #2
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	3301      	adds	r3, #1
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	2380      	movs	r3, #128	; 0x80
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	58d3      	ldr	r3, [r2, r3]
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	0011      	movs	r1, r2
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7fd fdeb 	bl	8004a4c <get_fat>
 8006e76:	0003      	movs	r3, r0
 8006e78:	633b      	str	r3, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d805      	bhi.n	8006e8c <f_lseek+0xb8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4ab9      	ldr	r2, [pc, #740]	; (8007168 <f_lseek+0x394>)
 8006e84:	2102      	movs	r1, #2
 8006e86:	5499      	strb	r1, [r3, r2]
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e244      	b.n	8007316 <f_lseek+0x542>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	3301      	adds	r3, #1
 8006e90:	d105      	bne.n	8006e9e <f_lseek+0xca>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4ab4      	ldr	r2, [pc, #720]	; (8007168 <f_lseek+0x394>)
 8006e96:	2101      	movs	r1, #1
 8006e98:	5499      	strb	r1, [r3, r2]
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e23b      	b.n	8007316 <f_lseek+0x542>
					} while (cl == pcl + 1);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d0d8      	beq.n	8006e5a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d809      	bhi.n	8006ec4 <f_lseek+0xf0>
						*tbl++ = ncl; *tbl++ = tcl;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8006eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	2380      	movs	r3, #128	; 0x80
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	58d2      	ldr	r2, [r2, r3]
 8006ecc:	2385      	movs	r3, #133	; 0x85
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	58d3      	ldr	r3, [r2, r3]
 8006ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3b9      	bcc.n	8006e4c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	2389      	movs	r3, #137	; 0x89
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	58d3      	ldr	r3, [r2, r3]
 8006ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8006ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d803      	bhi.n	8006ef4 <f_lseek+0x120>
				*tbl = 0;		/* Terminate table */
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	e20d      	b.n	8007310 <f_lseek+0x53c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006ef4:	233f      	movs	r3, #63	; 0x3f
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	2211      	movs	r2, #17
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	e208      	b.n	8007310 <f_lseek+0x53c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	2383      	movs	r3, #131	; 0x83
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	58d3      	ldr	r3, [r2, r3]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d904      	bls.n	8006f16 <f_lseek+0x142>
				ofs = fp->fsize;
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	2383      	movs	r3, #131	; 0x83
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	58d3      	ldr	r3, [r2, r3]
 8006f14:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	2382      	movs	r3, #130	; 0x82
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d100      	bne.n	8006f28 <f_lseek+0x154>
 8006f26:	e1f3      	b.n	8007310 <f_lseek+0x53c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	1e5a      	subs	r2, r3, #1
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7fe f89d 	bl	8005070 <clmt_clust>
 8006f36:	0001      	movs	r1, r0
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	2385      	movs	r3, #133	; 0x85
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	2380      	movs	r3, #128	; 0x80
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	58d0      	ldr	r0, [r2, r3]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	2385      	movs	r3, #133	; 0x85
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	58d3      	ldr	r3, [r2, r3]
 8006f50:	0019      	movs	r1, r3
 8006f52:	f7fd fd57 	bl	8004a04 <clust2sect>
 8006f56:	0003      	movs	r3, r0
 8006f58:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <f_lseek+0x198>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a81      	ldr	r2, [pc, #516]	; (8007168 <f_lseek+0x394>)
 8006f64:	2102      	movs	r1, #2
 8006f66:	5499      	strb	r1, [r3, r2]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e1d4      	b.n	8007316 <f_lseek+0x542>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	0a5b      	lsrs	r3, r3, #9
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	2280      	movs	r2, #128	; 0x80
 8006f76:	0092      	lsls	r2, r2, #2
 8006f78:	588a      	ldr	r2, [r1, r2]
 8006f7a:	497c      	ldr	r1, [pc, #496]	; (800716c <f_lseek+0x398>)
 8006f7c:	5c52      	ldrb	r2, [r2, r1]
 8006f7e:	3a01      	subs	r2, #1
 8006f80:	4013      	ands	r3, r2
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	18d3      	adds	r3, r2, r3
 8006f86:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	2382      	movs	r3, #130	; 0x82
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	58d3      	ldr	r3, [r2, r3]
 8006f90:	05db      	lsls	r3, r3, #23
 8006f92:	0ddb      	lsrs	r3, r3, #23
 8006f94:	d100      	bne.n	8006f98 <f_lseek+0x1c4>
 8006f96:	e1bb      	b.n	8007310 <f_lseek+0x53c>
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	2386      	movs	r3, #134	; 0x86
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	58d3      	ldr	r3, [r2, r3]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d100      	bne.n	8006fa8 <f_lseek+0x1d4>
 8006fa6:	e1b3      	b.n	8007310 <f_lseek+0x53c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a71      	ldr	r2, [pc, #452]	; (8007170 <f_lseek+0x39c>)
 8006fac:	5c9b      	ldrb	r3, [r3, r2]
 8006fae:	001a      	movs	r2, r3
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	d01e      	beq.n	8006ff4 <f_lseek+0x220>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	2380      	movs	r3, #128	; 0x80
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	58d3      	ldr	r3, [r2, r3]
 8006fbe:	4a6d      	ldr	r2, [pc, #436]	; (8007174 <f_lseek+0x3a0>)
 8006fc0:	5c98      	ldrb	r0, [r3, r2]
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	2386      	movs	r3, #134	; 0x86
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	58d2      	ldr	r2, [r2, r3]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f7fd f92d 	bl	800422c <disk_write>
 8006fd2:	1e03      	subs	r3, r0, #0
 8006fd4:	d005      	beq.n	8006fe2 <f_lseek+0x20e>
							ABORT(fp->fs, FR_DISK_ERR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a63      	ldr	r2, [pc, #396]	; (8007168 <f_lseek+0x394>)
 8006fda:	2101      	movs	r1, #1
 8006fdc:	5499      	strb	r1, [r3, r2]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e199      	b.n	8007316 <f_lseek+0x542>
						fp->flag &= ~FA__DIRTY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a62      	ldr	r2, [pc, #392]	; (8007170 <f_lseek+0x39c>)
 8006fe6:	5c9b      	ldrb	r3, [r3, r2]
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	4393      	bics	r3, r2
 8006fec:	b2d9      	uxtb	r1, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a5f      	ldr	r2, [pc, #380]	; (8007170 <f_lseek+0x39c>)
 8006ff2:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	2380      	movs	r3, #128	; 0x80
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	58d3      	ldr	r3, [r2, r3]
 8006ffc:	4a5d      	ldr	r2, [pc, #372]	; (8007174 <f_lseek+0x3a0>)
 8006ffe:	5c98      	ldrb	r0, [r3, r2]
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	2301      	movs	r3, #1
 8007006:	f7fd f8e9 	bl	80041dc <disk_read>
 800700a:	1e03      	subs	r3, r0, #0
 800700c:	d005      	beq.n	800701a <f_lseek+0x246>
						ABORT(fp->fs, FR_DISK_ERR);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a55      	ldr	r2, [pc, #340]	; (8007168 <f_lseek+0x394>)
 8007012:	2101      	movs	r1, #1
 8007014:	5499      	strb	r1, [r3, r2]
 8007016:	2301      	movs	r3, #1
 8007018:	e17d      	b.n	8007316 <f_lseek+0x542>
#endif
					fp->dsect = dsc;
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	2386      	movs	r3, #134	; 0x86
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	69b9      	ldr	r1, [r7, #24]
 8007022:	50d1      	str	r1, [r2, r3]
 8007024:	e174      	b.n	8007310 <f_lseek+0x53c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	2383      	movs	r3, #131	; 0x83
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	58d3      	ldr	r3, [r2, r3]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d90b      	bls.n	800704c <f_lseek+0x278>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a4e      	ldr	r2, [pc, #312]	; (8007170 <f_lseek+0x39c>)
 8007038:	5c9b      	ldrb	r3, [r3, r2]
 800703a:	001a      	movs	r2, r3
 800703c:	2302      	movs	r3, #2
 800703e:	4013      	ands	r3, r2
 8007040:	d104      	bne.n	800704c <f_lseek+0x278>
#endif
			) ofs = fp->fsize;
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	2383      	movs	r3, #131	; 0x83
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	58d3      	ldr	r3, [r2, r3]
 800704a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	2382      	movs	r3, #130	; 0x82
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	58d3      	ldr	r3, [r2, r3]
 8007054:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	2382      	movs	r3, #130	; 0x82
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007062:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d100      	bne.n	800706c <f_lseek+0x298>
 800706a:	e0ea      	b.n	8007242 <f_lseek+0x46e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	2380      	movs	r3, #128	; 0x80
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	58d3      	ldr	r3, [r2, r3]
 8007074:	4a3d      	ldr	r2, [pc, #244]	; (800716c <f_lseek+0x398>)
 8007076:	5c9b      	ldrb	r3, [r3, r2]
 8007078:	025b      	lsls	r3, r3, #9
 800707a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d027      	beq.n	80070d2 <f_lseek+0x2fe>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	3b01      	subs	r3, #1
 8007086:	69f9      	ldr	r1, [r7, #28]
 8007088:	0018      	movs	r0, r3
 800708a:	f7f9 f84f 	bl	800012c <__udivsi3>
 800708e:	0003      	movs	r3, r0
 8007090:	001c      	movs	r4, r3
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	3b01      	subs	r3, #1
 8007096:	69f9      	ldr	r1, [r7, #28]
 8007098:	0018      	movs	r0, r3
 800709a:	f7f9 f847 	bl	800012c <__udivsi3>
 800709e:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 80070a0:	429c      	cmp	r4, r3
 80070a2:	d316      	bcc.n	80070d2 <f_lseek+0x2fe>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	4252      	negs	r2, r2
 80070ac:	401a      	ands	r2, r3
 80070ae:	0011      	movs	r1, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	2382      	movs	r3, #130	; 0x82
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	2382      	movs	r3, #130	; 0x82
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	58d3      	ldr	r3, [r2, r3]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	2385      	movs	r3, #133	; 0x85
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	58d3      	ldr	r3, [r2, r3]
 80070ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d0:	e02d      	b.n	800712e <f_lseek+0x35a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	2384      	movs	r3, #132	; 0x84
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	58d3      	ldr	r3, [r2, r3]
 80070da:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d120      	bne.n	8007124 <f_lseek+0x350>
					clst = create_chain(fp->fs, 0);
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	58d3      	ldr	r3, [r2, r3]
 80070ea:	2100      	movs	r1, #0
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7fd ff09 	bl	8004f04 <create_chain>
 80070f2:	0003      	movs	r3, r0
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d105      	bne.n	8007108 <f_lseek+0x334>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <f_lseek+0x394>)
 8007100:	2102      	movs	r1, #2
 8007102:	5499      	strb	r1, [r3, r2]
 8007104:	2302      	movs	r3, #2
 8007106:	e106      	b.n	8007316 <f_lseek+0x542>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	3301      	adds	r3, #1
 800710c:	d105      	bne.n	800711a <f_lseek+0x346>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <f_lseek+0x394>)
 8007112:	2101      	movs	r1, #1
 8007114:	5499      	strb	r1, [r3, r2]
 8007116:	2301      	movs	r3, #1
 8007118:	e0fd      	b.n	8007316 <f_lseek+0x542>
					fp->sclust = clst;
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	2384      	movs	r3, #132	; 0x84
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007122:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	2385      	movs	r3, #133	; 0x85
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800712c:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d100      	bne.n	8007136 <f_lseek+0x362>
 8007134:	e085      	b.n	8007242 <f_lseek+0x46e>
				while (ofs > bcs) {						/* Cluster following loop */
 8007136:	e059      	b.n	80071ec <f_lseek+0x418>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <f_lseek+0x39c>)
 800713c:	5c9b      	ldrb	r3, [r3, r2]
 800713e:	001a      	movs	r2, r3
 8007140:	2302      	movs	r3, #2
 8007142:	4013      	ands	r3, r2
 8007144:	d018      	beq.n	8007178 <f_lseek+0x3a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	2380      	movs	r3, #128	; 0x80
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	58d3      	ldr	r3, [r2, r3]
 800714e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f7fd fed6 	bl	8004f04 <create_chain>
 8007158:	0003      	movs	r3, r0
 800715a:	63bb      	str	r3, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d115      	bne.n	800718e <f_lseek+0x3ba>
							ofs = bcs; break;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	e045      	b.n	80071f4 <f_lseek+0x420>
 8007168:	00000207 	.word	0x00000207
 800716c:	00000202 	.word	0x00000202
 8007170:	00000206 	.word	0x00000206
 8007174:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	58d3      	ldr	r3, [r2, r3]
 8007180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007182:	0011      	movs	r1, r2
 8007184:	0018      	movs	r0, r3
 8007186:	f7fd fc61 	bl	8004a4c <get_fat>
 800718a:	0003      	movs	r3, r0
 800718c:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	3301      	adds	r3, #1
 8007192:	d105      	bne.n	80071a0 <f_lseek+0x3cc>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a62      	ldr	r2, [pc, #392]	; (8007320 <f_lseek+0x54c>)
 8007198:	2101      	movs	r1, #1
 800719a:	5499      	strb	r1, [r3, r2]
 800719c:	2301      	movs	r3, #1
 800719e:	e0ba      	b.n	8007316 <f_lseek+0x542>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d909      	bls.n	80071ba <f_lseek+0x3e6>
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	58d2      	ldr	r2, [r2, r3]
 80071ae:	2385      	movs	r3, #133	; 0x85
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	58d3      	ldr	r3, [r2, r3]
 80071b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d305      	bcc.n	80071c6 <f_lseek+0x3f2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a58      	ldr	r2, [pc, #352]	; (8007320 <f_lseek+0x54c>)
 80071be:	2102      	movs	r1, #2
 80071c0:	5499      	strb	r1, [r3, r2]
 80071c2:	2302      	movs	r3, #2
 80071c4:	e0a7      	b.n	8007316 <f_lseek+0x542>
					fp->clust = clst;
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	2385      	movs	r3, #133	; 0x85
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071ce:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	2382      	movs	r3, #130	; 0x82
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	58d2      	ldr	r2, [r2, r3]
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	18d1      	adds	r1, r2, r3
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	2382      	movs	r3, #130	; 0x82
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d8a1      	bhi.n	8007138 <f_lseek+0x364>
				}
				fp->fptr += ofs;
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	2382      	movs	r3, #130	; 0x82
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	58d2      	ldr	r2, [r2, r3]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	18d1      	adds	r1, r2, r3
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	2382      	movs	r3, #130	; 0x82
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	05db      	lsls	r3, r3, #23
 800720c:	0ddb      	lsrs	r3, r3, #23
 800720e:	d018      	beq.n	8007242 <f_lseek+0x46e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	2380      	movs	r3, #128	; 0x80
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	58d3      	ldr	r3, [r2, r3]
 8007218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800721a:	0011      	movs	r1, r2
 800721c:	0018      	movs	r0, r3
 800721e:	f7fd fbf1 	bl	8004a04 <clust2sect>
 8007222:	0003      	movs	r3, r0
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <f_lseek+0x464>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a3c      	ldr	r2, [pc, #240]	; (8007320 <f_lseek+0x54c>)
 8007230:	2102      	movs	r1, #2
 8007232:	5499      	strb	r1, [r3, r2]
 8007234:	2302      	movs	r3, #2
 8007236:	e06e      	b.n	8007316 <f_lseek+0x542>
					nsect += ofs / SS(fp->fs);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	0a5b      	lsrs	r3, r3, #9
 800723c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800723e:	18d3      	adds	r3, r2, r3
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	2382      	movs	r3, #130	; 0x82
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	58d3      	ldr	r3, [r2, r3]
 800724a:	05db      	lsls	r3, r3, #23
 800724c:	0ddb      	lsrs	r3, r3, #23
 800724e:	d044      	beq.n	80072da <f_lseek+0x506>
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	2386      	movs	r3, #134	; 0x86
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	58d3      	ldr	r3, [r2, r3]
 8007258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800725a:	429a      	cmp	r2, r3
 800725c:	d03d      	beq.n	80072da <f_lseek+0x506>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a30      	ldr	r2, [pc, #192]	; (8007324 <f_lseek+0x550>)
 8007262:	5c9b      	ldrb	r3, [r3, r2]
 8007264:	001a      	movs	r2, r3
 8007266:	2340      	movs	r3, #64	; 0x40
 8007268:	4013      	ands	r3, r2
 800726a:	d01e      	beq.n	80072aa <f_lseek+0x4d6>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	58d3      	ldr	r3, [r2, r3]
 8007274:	4a2c      	ldr	r2, [pc, #176]	; (8007328 <f_lseek+0x554>)
 8007276:	5c98      	ldrb	r0, [r3, r2]
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	2386      	movs	r3, #134	; 0x86
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	58d2      	ldr	r2, [r2, r3]
 8007282:	2301      	movs	r3, #1
 8007284:	f7fc ffd2 	bl	800422c <disk_write>
 8007288:	1e03      	subs	r3, r0, #0
 800728a:	d005      	beq.n	8007298 <f_lseek+0x4c4>
					ABORT(fp->fs, FR_DISK_ERR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a24      	ldr	r2, [pc, #144]	; (8007320 <f_lseek+0x54c>)
 8007290:	2101      	movs	r1, #1
 8007292:	5499      	strb	r1, [r3, r2]
 8007294:	2301      	movs	r3, #1
 8007296:	e03e      	b.n	8007316 <f_lseek+0x542>
				fp->flag &= ~FA__DIRTY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a22      	ldr	r2, [pc, #136]	; (8007324 <f_lseek+0x550>)
 800729c:	5c9b      	ldrb	r3, [r3, r2]
 800729e:	2240      	movs	r2, #64	; 0x40
 80072a0:	4393      	bics	r3, r2
 80072a2:	b2d9      	uxtb	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <f_lseek+0x550>)
 80072a8:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	58d3      	ldr	r3, [r2, r3]
 80072b2:	4a1d      	ldr	r2, [pc, #116]	; (8007328 <f_lseek+0x554>)
 80072b4:	5c98      	ldrb	r0, [r3, r2]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ba:	2301      	movs	r3, #1
 80072bc:	f7fc ff8e 	bl	80041dc <disk_read>
 80072c0:	1e03      	subs	r3, r0, #0
 80072c2:	d005      	beq.n	80072d0 <f_lseek+0x4fc>
				ABORT(fp->fs, FR_DISK_ERR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a16      	ldr	r2, [pc, #88]	; (8007320 <f_lseek+0x54c>)
 80072c8:	2101      	movs	r1, #1
 80072ca:	5499      	strb	r1, [r3, r2]
 80072cc:	2301      	movs	r3, #1
 80072ce:	e022      	b.n	8007316 <f_lseek+0x542>
#endif
			fp->dsect = nsect;
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	2386      	movs	r3, #134	; 0x86
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072d8:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	2382      	movs	r3, #130	; 0x82
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	58d2      	ldr	r2, [r2, r3]
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	2383      	movs	r3, #131	; 0x83
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	58cb      	ldr	r3, [r1, r3]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d910      	bls.n	8007310 <f_lseek+0x53c>
			fp->fsize = fp->fptr;
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	2382      	movs	r3, #130	; 0x82
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	58d1      	ldr	r1, [r2, r3]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	2383      	movs	r3, #131	; 0x83
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <f_lseek+0x550>)
 8007302:	5c9b      	ldrb	r3, [r3, r2]
 8007304:	2220      	movs	r2, #32
 8007306:	4313      	orrs	r3, r2
 8007308:	b2d9      	uxtb	r1, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a05      	ldr	r2, [pc, #20]	; (8007324 <f_lseek+0x550>)
 800730e:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007310:	233f      	movs	r3, #63	; 0x3f
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	781b      	ldrb	r3, [r3, #0]
}
 8007316:	0018      	movs	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	b010      	add	sp, #64	; 0x40
 800731c:	bdb0      	pop	{r4, r5, r7, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	00000207 	.word	0x00000207
 8007324:	00000206 	.word	0x00000206
 8007328:	00000201 	.word	0x00000201

0800732c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	1dfb      	adds	r3, r7, #7
 8007338:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800733a:	2317      	movs	r3, #23
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8007342:	2316      	movs	r3, #22
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800734a:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 800734c:	7a5b      	ldrb	r3, [r3, #9]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d838      	bhi.n	80073c6 <FATFS_LinkDriverEx+0x9a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007354:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 8007356:	7a5b      	ldrb	r3, [r3, #9]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	001a      	movs	r2, r3
 800735c:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 800735e:	2100      	movs	r1, #0
 8007360:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 8007364:	7a5b      	ldrb	r3, [r3, #9]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	18d3      	adds	r3, r2, r3
 800736e:	3304      	adds	r3, #4
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8007374:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 8007376:	7a5b      	ldrb	r3, [r3, #9]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	001a      	movs	r2, r3
 800737c:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 800737e:	189b      	adds	r3, r3, r2
 8007380:	1dfa      	adds	r2, r7, #7
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007386:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 8007388:	7a5b      	ldrb	r3, [r3, #9]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	b2d1      	uxtb	r1, r2
 8007390:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <FATFS_LinkDriverEx+0xa8>)
 8007392:	7251      	strb	r1, [r2, #9]
 8007394:	2116      	movs	r1, #22
 8007396:	187a      	adds	r2, r7, r1
 8007398:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800739a:	187b      	adds	r3, r7, r1
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	3330      	adds	r3, #48	; 0x30
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3301      	adds	r3, #1
 80073aa:	223a      	movs	r2, #58	; 0x3a
 80073ac:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3302      	adds	r3, #2
 80073b2:	222f      	movs	r2, #47	; 0x2f
 80073b4:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	3303      	adds	r3, #3
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80073be:	2317      	movs	r3, #23
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80073c6:	2317      	movs	r3, #23
 80073c8:	18fb      	adds	r3, r7, r3
 80073ca:	781b      	ldrb	r3, [r3, #0]
}
 80073cc:	0018      	movs	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	b006      	add	sp, #24
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000120 	.word	0x20000120

080073d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff ff9f 	bl	800732c <FATFS_LinkDriverEx>
 80073ee:	0003      	movs	r3, r0
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	000a      	movs	r2, r1
 8007402:	1cfb      	adds	r3, r7, #3
 8007404:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8007406:	230e      	movs	r3, #14
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800740e:	230f      	movs	r3, #15
 8007410:	18fb      	adds	r3, r7, r3
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr >= 1)
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <FATFS_UnLinkDriverEx+0x88>)
 8007418:	7a5b      	ldrb	r3, [r3, #9]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d028      	beq.n	8007472 <FATFS_UnLinkDriverEx+0x7a>
  {    
    DiskNum = path[0] - '0';
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	210e      	movs	r1, #14
 8007426:	187b      	adds	r3, r7, r1
 8007428:	3a30      	subs	r2, #48	; 0x30
 800742a:	701a      	strb	r2, [r3, #0]
    if(disk.drv[DiskNum] != 0)
 800742c:	187b      	adds	r3, r7, r1
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	4a13      	ldr	r2, [pc, #76]	; (8007480 <FATFS_UnLinkDriverEx+0x88>)
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	18d3      	adds	r3, r2, r3
 8007436:	3304      	adds	r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d019      	beq.n	8007472 <FATFS_UnLinkDriverEx+0x7a>
    {
      disk.drv[DiskNum] = 0;
 800743e:	210e      	movs	r1, #14
 8007440:	187b      	adds	r3, r7, r1
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	4a0e      	ldr	r2, [pc, #56]	; (8007480 <FATFS_UnLinkDriverEx+0x88>)
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	18d3      	adds	r3, r2, r3
 800744a:	3304      	adds	r3, #4
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
      disk.lun[DiskNum] = 0;
 8007450:	187b      	adds	r3, r7, r1
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <FATFS_UnLinkDriverEx+0x88>)
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	2200      	movs	r2, #0
 800745a:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800745c:	4b08      	ldr	r3, [pc, #32]	; (8007480 <FATFS_UnLinkDriverEx+0x88>)
 800745e:	7a5b      	ldrb	r3, [r3, #9]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	4b06      	ldr	r3, [pc, #24]	; (8007480 <FATFS_UnLinkDriverEx+0x88>)
 8007468:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800746a:	230f      	movs	r3, #15
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 8007472:	230f      	movs	r3, #15
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	781b      	ldrb	r3, [r3, #0]
}
 8007478:	0018      	movs	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	b004      	add	sp, #16
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000120 	.word	0x20000120

08007484 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2100      	movs	r1, #0
 8007490:	0018      	movs	r0, r3
 8007492:	f7ff ffb1 	bl	80073f8 <FATFS_UnLinkDriverEx>
 8007496:	0003      	movs	r3, r0
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b002      	add	sp, #8
 800749e:	bd80      	pop	{r7, pc}

080074a0 <SD_SPI_init>:
 * SD SPI functions
 **************************************/

/* slave select */
static void SD_SPI_init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
	//Configure with CubeMX
	SET_BIT(SD_SPI->CR1, SPI_CR1_SPE);	//Enable SPI function
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <SD_SPI_init+0x18>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4b03      	ldr	r3, [pc, #12]	; (80074b8 <SD_SPI_init+0x18>)
 80074aa:	2140      	movs	r1, #64	; 0x40
 80074ac:	430a      	orrs	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]
}
 80074b0:	46c0      	nop			; (mov r8, r8)
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	40013000 	.word	0x40013000

080074bc <SD_SPI_select>:
static void SD_SPI_select(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
	SD_CS_LOW();
 80074c0:	2390      	movs	r3, #144	; 0x90
 80074c2:	05db      	lsls	r3, r3, #23
 80074c4:	2280      	movs	r2, #128	; 0x80
 80074c6:	0352      	lsls	r2, r2, #13
 80074c8:	619a      	str	r2, [r3, #24]
}
 80074ca:	46c0      	nop			; (mov r8, r8)
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SD_SPI_deselect>:

/* slave deselect */
static void SD_SPI_deselect(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
	SD_CS_HIGH();
 80074d4:	2390      	movs	r3, #144	; 0x90
 80074d6:	05db      	lsls	r3, r3, #23
 80074d8:	2210      	movs	r2, #16
 80074da:	619a      	str	r2, [r3, #24]
}
 80074dc:	46c0      	nop			; (mov r8, r8)
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <SD_SPI_xchg>:

// SPI exchange bytes
static uint8_t SD_SPI_xchg(uint8_t data)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	0002      	movs	r2, r0
 80074ec:	1dfb      	adds	r3, r7, #7
 80074ee:	701a      	strb	r2, [r3, #0]
	//__IO  ->  Defines 'read / write' permissions
	while (!(SD_SPI->SR&SPI_FLAG_TXE)); //wait for empty TX buffer
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <SD_SPI_xchg+0x3c>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2202      	movs	r2, #2
 80074f8:	4013      	ands	r3, r2
 80074fa:	d0fa      	beq.n	80074f2 <SD_SPI_xchg+0xe>
	*((__IO uint8_t *)&SD_SPI->DR)=data;
 80074fc:	4a09      	ldr	r2, [pc, #36]	; (8007524 <SD_SPI_xchg+0x40>)
 80074fe:	1dfb      	adds	r3, r7, #7
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	7013      	strb	r3, [r2, #0]
	while (!(SD_SPI->SR&SPI_FLAG_RXNE));//wait for not empty RX buffer
 8007504:	46c0      	nop			; (mov r8, r8)
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <SD_SPI_xchg+0x3c>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2201      	movs	r2, #1
 800750c:	4013      	ands	r3, r2
 800750e:	d0fa      	beq.n	8007506 <SD_SPI_xchg+0x22>
	return *((__IO uint8_t *)&SD_SPI->DR);
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <SD_SPI_xchg+0x40>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b002      	add	sp, #8
 800751c:	bd80      	pop	{r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	40013000 	.word	0x40013000
 8007524:	4001300c 	.word	0x4001300c

08007528 <SD_SPI_xmit_multi>:

// buff - Pointer to the data, btx - Number of bytes to send (even number)
static void SD_SPI_xmit_multi(uint8_t *buff, UINT btx)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	uint16_t i;

	for(i=0;i<btx;i++)
 8007532:	230e      	movs	r3, #14
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	2200      	movs	r2, #0
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	e00d      	b.n	8007558 <SD_SPI_xmit_multi+0x30>
	{
		SD_SPI_xchg(*buff);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	0018      	movs	r0, r3
 8007542:	f7ff ffcf 	bl	80074e4 <SD_SPI_xchg>
		buff++;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3301      	adds	r3, #1
 800754a:	607b      	str	r3, [r7, #4]
	for(i=0;i<btx;i++)
 800754c:	210e      	movs	r1, #14
 800754e:	187b      	adds	r3, r7, r1
 8007550:	881a      	ldrh	r2, [r3, #0]
 8007552:	187b      	adds	r3, r7, r1
 8007554:	3201      	adds	r2, #1
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	230e      	movs	r3, #14
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d8eb      	bhi.n	800753c <SD_SPI_xmit_multi+0x14>
	}
}
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b004      	add	sp, #16
 800756a:	bd80      	pop	{r7, pc}

0800756c <SD_SPI_rcvr_multi>:

// buff - Pointer to data buffer, btr - Number of bytes to receive (even number)
static void SD_SPI_rcvr_multi(BYTE *buff,	UINT btr)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	uint16_t i;

	for(i=0;i<btr;i++)
 8007576:	230e      	movs	r3, #14
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	2200      	movs	r2, #0
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e00f      	b.n	80075a0 <SD_SPI_rcvr_multi+0x34>
	{
		*buff=SD_SPI_xchg(0xFF);
 8007580:	20ff      	movs	r0, #255	; 0xff
 8007582:	f7ff ffaf 	bl	80074e4 <SD_SPI_xchg>
 8007586:	0003      	movs	r3, r0
 8007588:	001a      	movs	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	701a      	strb	r2, [r3, #0]
		buff++;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3301      	adds	r3, #1
 8007592:	607b      	str	r3, [r7, #4]
	for(i=0;i<btr;i++)
 8007594:	210e      	movs	r1, #14
 8007596:	187b      	adds	r3, r7, r1
 8007598:	881a      	ldrh	r2, [r3, #0]
 800759a:	187b      	adds	r3, r7, r1
 800759c:	3201      	adds	r2, #1
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	230e      	movs	r3, #14
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d8e9      	bhi.n	8007580 <SD_SPI_rcvr_multi+0x14>
	}
}
 80075ac:	46c0      	nop			; (mov r8, r8)
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b004      	add	sp, #16
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <SD_ReadyWait+0x38>)
 80075bc:	22fa      	movs	r2, #250	; 0xfa
 80075be:	0052      	lsls	r2, r2, #1
 80075c0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SD_SPI_xchg(0xFF);
 80075c2:	1dfc      	adds	r4, r7, #7
 80075c4:	20ff      	movs	r0, #255	; 0xff
 80075c6:	f7ff ff8d 	bl	80074e4 <SD_SPI_xchg>
 80075ca:	0003      	movs	r3, r0
 80075cc:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && Timer2);
 80075ce:	1dfb      	adds	r3, r7, #7
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2bff      	cmp	r3, #255	; 0xff
 80075d4:	d003      	beq.n	80075de <SD_ReadyWait+0x2a>
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <SD_ReadyWait+0x38>)
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f1      	bne.n	80075c2 <SD_ReadyWait+0xe>

	return res;
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	781b      	ldrb	r3, [r3, #0]
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b003      	add	sp, #12
 80075e8:	bd90      	pop	{r4, r7, pc}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	20000b98 	.word	0x20000b98

080075f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80075f6:	4b21      	ldr	r3, [pc, #132]	; (800767c <SD_PowerOn+0x8c>)
 80075f8:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	SD_SPI_deselect();
 80075fa:	f7ff ff69 	bl	80074d0 <SD_SPI_deselect>
	for(int i = 0; i < 10; i++)
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]
 8007602:	e005      	b.n	8007610 <SD_PowerOn+0x20>
	{
		SD_SPI_xchg(0xFF);
 8007604:	20ff      	movs	r0, #255	; 0xff
 8007606:	f7ff ff6d 	bl	80074e4 <SD_SPI_xchg>
	for(int i = 0; i < 10; i++)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	3301      	adds	r3, #1
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b09      	cmp	r3, #9
 8007614:	ddf6      	ble.n	8007604 <SD_PowerOn+0x14>
	}

	/* slave select */
	SD_SPI_select();
 8007616:	f7ff ff51 	bl	80074bc <SD_SPI_select>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800761a:	003b      	movs	r3, r7
 800761c:	2240      	movs	r2, #64	; 0x40
 800761e:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 8007620:	003b      	movs	r3, r7
 8007622:	2200      	movs	r2, #0
 8007624:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 8007626:	003b      	movs	r3, r7
 8007628:	2200      	movs	r2, #0
 800762a:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 800762c:	003b      	movs	r3, r7
 800762e:	2200      	movs	r2, #0
 8007630:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 8007632:	003b      	movs	r3, r7
 8007634:	2200      	movs	r2, #0
 8007636:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 8007638:	003b      	movs	r3, r7
 800763a:	2295      	movs	r2, #149	; 0x95
 800763c:	715a      	strb	r2, [r3, #5]

	SD_SPI_xmit_multi(args, sizeof(args));
 800763e:	003b      	movs	r3, r7
 8007640:	2106      	movs	r1, #6
 8007642:	0018      	movs	r0, r3
 8007644:	f7ff ff70 	bl	8007528 <SD_SPI_xmit_multi>
	/* wait response */
	while ((SD_SPI_xchg(0xFF) != 0x01) && cnt)
 8007648:	e002      	b.n	8007650 <SD_PowerOn+0x60>
	{
		cnt--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b01      	subs	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]
	while ((SD_SPI_xchg(0xFF) != 0x01) && cnt)
 8007650:	20ff      	movs	r0, #255	; 0xff
 8007652:	f7ff ff47 	bl	80074e4 <SD_SPI_xchg>
 8007656:	0003      	movs	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d002      	beq.n	8007662 <SD_PowerOn+0x72>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f3      	bne.n	800764a <SD_PowerOn+0x5a>
	}

	SD_SPI_deselect();
 8007662:	f7ff ff35 	bl	80074d0 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 8007666:	20ff      	movs	r0, #255	; 0xff
 8007668:	f7ff ff3c 	bl	80074e4 <SD_SPI_xchg>

	PowerFlag = 1;
 800766c:	4b04      	ldr	r3, [pc, #16]	; (8007680 <SD_PowerOn+0x90>)
 800766e:	2201      	movs	r2, #1
 8007670:	701a      	strb	r2, [r3, #0]
}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	46bd      	mov	sp, r7
 8007676:	b004      	add	sp, #16
 8007678:	bd80      	pop	{r7, pc}
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	00001fff 	.word	0x00001fff
 8007680:	2000012d 	.word	0x2000012d

08007684 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <SD_PowerOff+0x10>)
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2000012d 	.word	0x2000012d

08007698 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <SD_CheckPower+0x10>)
 800769e:	781b      	ldrb	r3, [r3, #0]
}
 80076a0:	0018      	movs	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	2000012d 	.word	0x2000012d

080076ac <SD_RxDataBlock>:


/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80076ac:	b5b0      	push	{r4, r5, r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <SD_RxDataBlock+0x60>)
 80076b8:	22c8      	movs	r2, #200	; 0xc8
 80076ba:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SD_SPI_xchg(0xFF);
 80076bc:	250f      	movs	r5, #15
 80076be:	197c      	adds	r4, r7, r5
 80076c0:	20ff      	movs	r0, #255	; 0xff
 80076c2:	f7ff ff0f 	bl	80074e4 <SD_SPI_xchg>
 80076c6:	0003      	movs	r3, r0
 80076c8:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && Timer1);
 80076ca:	197b      	adds	r3, r7, r5
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2bff      	cmp	r3, #255	; 0xff
 80076d0:	d103      	bne.n	80076da <SD_RxDataBlock+0x2e>
 80076d2:	4b0e      	ldr	r3, [pc, #56]	; (800770c <SD_RxDataBlock+0x60>)
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f0      	bne.n	80076bc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80076da:	230f      	movs	r3, #15
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2bfe      	cmp	r3, #254	; 0xfe
 80076e2:	d001      	beq.n	80076e8 <SD_RxDataBlock+0x3c>
 80076e4:	2300      	movs	r3, #0
 80076e6:	e00c      	b.n	8007702 <SD_RxDataBlock+0x56>

	/* receive data */
	SD_SPI_rcvr_multi(buff,len);
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	0011      	movs	r1, r2
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7ff ff3c 	bl	800756c <SD_SPI_rcvr_multi>

	/* discard CRC */
	SD_SPI_xchg(0xFF);
 80076f4:	20ff      	movs	r0, #255	; 0xff
 80076f6:	f7ff fef5 	bl	80074e4 <SD_SPI_xchg>
	SD_SPI_xchg(0xFF);
 80076fa:	20ff      	movs	r0, #255	; 0xff
 80076fc:	f7ff fef2 	bl	80074e4 <SD_SPI_xchg>

	return TRUE;
 8007700:	2301      	movs	r3, #1
}
 8007702:	0018      	movs	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	b004      	add	sp, #16
 8007708:	bdb0      	pop	{r4, r5, r7, pc}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	20000b9a 	.word	0x20000b9a

08007710 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8007710:	b5b0      	push	{r4, r5, r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	000a      	movs	r2, r1
 800771a:	1cfb      	adds	r3, r7, #3
 800771c:	701a      	strb	r2, [r3, #0]
	uint8_t resp=0;
 800771e:	230f      	movs	r3, #15
 8007720:	18fb      	adds	r3, r7, r3
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8007726:	230e      	movs	r3, #14
 8007728:	18fb      	adds	r3, r7, r3
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800772e:	f7ff ff41 	bl	80075b4 <SD_ReadyWait>
 8007732:	0003      	movs	r3, r0
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d001      	beq.n	800773c <SD_TxDataBlock+0x2c>
 8007738:	2300      	movs	r3, #0
 800773a:	e040      	b.n	80077be <SD_TxDataBlock+0xae>

	/* transmit token */
	SD_SPI_xchg(token);
 800773c:	1cfb      	adds	r3, r7, #3
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	0018      	movs	r0, r3
 8007742:	f7ff fecf 	bl	80074e4 <SD_SPI_xchg>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8007746:	1cfb      	adds	r3, r7, #3
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2bfd      	cmp	r3, #253	; 0xfd
 800774c:	d02d      	beq.n	80077aa <SD_TxDataBlock+0x9a>
	{
		SD_SPI_xmit_multi((uint8_t*)buff, 512);
 800774e:	2380      	movs	r3, #128	; 0x80
 8007750:	009a      	lsls	r2, r3, #2
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	0011      	movs	r1, r2
 8007756:	0018      	movs	r0, r3
 8007758:	f7ff fee6 	bl	8007528 <SD_SPI_xmit_multi>
		/* discard CRC */
		SD_SPI_xchg(0xFF);
 800775c:	20ff      	movs	r0, #255	; 0xff
 800775e:	f7ff fec1 	bl	80074e4 <SD_SPI_xchg>
		SD_SPI_xchg(0xFF);
 8007762:	20ff      	movs	r0, #255	; 0xff
 8007764:	f7ff febe 	bl	80074e4 <SD_SPI_xchg>

		/* receive response */
		while (i <= 64)
 8007768:	e012      	b.n	8007790 <SD_TxDataBlock+0x80>
		{
			resp = SD_SPI_xchg(0xFF);
 800776a:	250f      	movs	r5, #15
 800776c:	197c      	adds	r4, r7, r5
 800776e:	20ff      	movs	r0, #255	; 0xff
 8007770:	f7ff feb8 	bl	80074e4 <SD_SPI_xchg>
 8007774:	0003      	movs	r3, r0
 8007776:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8007778:	197b      	adds	r3, r7, r5
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	221f      	movs	r2, #31
 800777e:	4013      	ands	r3, r2
 8007780:	2b05      	cmp	r3, #5
 8007782:	d00b      	beq.n	800779c <SD_TxDataBlock+0x8c>
			i++;
 8007784:	210e      	movs	r1, #14
 8007786:	187b      	adds	r3, r7, r1
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	187b      	adds	r3, r7, r1
 800778c:	3201      	adds	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 8007790:	230e      	movs	r3, #14
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d9e7      	bls.n	800776a <SD_TxDataBlock+0x5a>
 800779a:	e000      	b.n	800779e <SD_TxDataBlock+0x8e>
			if ((resp & 0x1F) == 0x05) break;
 800779c:	46c0      	nop			; (mov r8, r8)
		}

		/* recv buffer clear */
		while (SD_SPI_xchg(0xFF) == 0);
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	20ff      	movs	r0, #255	; 0xff
 80077a2:	f7ff fe9f 	bl	80074e4 <SD_SPI_xchg>
 80077a6:	1e03      	subs	r3, r0, #0
 80077a8:	d0fa      	beq.n	80077a0 <SD_TxDataBlock+0x90>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80077aa:	230f      	movs	r3, #15
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	221f      	movs	r2, #31
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d101      	bne.n	80077bc <SD_TxDataBlock+0xac>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <SD_TxDataBlock+0xae>

	return FALSE;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	0018      	movs	r0, r3
 80077c0:	46bd      	mov	sp, r7
 80077c2:	b004      	add	sp, #16
 80077c4:	bdb0      	pop	{r4, r5, r7, pc}

080077c6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80077c6:	b5b0      	push	{r4, r5, r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	0002      	movs	r2, r0
 80077ce:	6039      	str	r1, [r7, #0]
 80077d0:	1dfb      	adds	r3, r7, #7
 80077d2:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80077d4:	f7ff feee 	bl	80075b4 <SD_ReadyWait>
 80077d8:	0003      	movs	r3, r0
 80077da:	2bff      	cmp	r3, #255	; 0xff
 80077dc:	d001      	beq.n	80077e2 <SD_SendCmd+0x1c>
 80077de:	23ff      	movs	r3, #255	; 0xff
 80077e0:	e05b      	b.n	800789a <SD_SendCmd+0xd4>

	/* transmit command */
	SD_SPI_xchg(cmd); 					/* Command */
 80077e2:	1dfb      	adds	r3, r7, #7
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	0018      	movs	r0, r3
 80077e8:	f7ff fe7c 	bl	80074e4 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	0e1b      	lsrs	r3, r3, #24
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7ff fe76 	bl	80074e4 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	0c1b      	lsrs	r3, r3, #16
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	0018      	movs	r0, r3
 8007800:	f7ff fe70 	bl	80074e4 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b2db      	uxtb	r3, r3
 800780a:	0018      	movs	r0, r3
 800780c:	f7ff fe6a 	bl	80074e4 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)arg); 			/* Argument[7..0] */
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	0018      	movs	r0, r3
 8007816:	f7ff fe65 	bl	80074e4 <SD_SPI_xchg>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800781a:	1dfb      	adds	r3, r7, #7
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d104      	bne.n	800782c <SD_SendCmd+0x66>
 8007822:	230f      	movs	r3, #15
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	2295      	movs	r2, #149	; 0x95
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	e00c      	b.n	8007846 <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800782c:	1dfb      	adds	r3, r7, #7
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b48      	cmp	r3, #72	; 0x48
 8007832:	d104      	bne.n	800783e <SD_SendCmd+0x78>
 8007834:	230f      	movs	r3, #15
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2287      	movs	r2, #135	; 0x87
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e003      	b.n	8007846 <SD_SendCmd+0x80>
	else crc = 1;
 800783e:	230f      	movs	r3, #15
 8007840:	18fb      	adds	r3, r7, r3
 8007842:	2201      	movs	r2, #1
 8007844:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SD_SPI_xchg(crc);
 8007846:	230f      	movs	r3, #15
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	0018      	movs	r0, r3
 800784e:	f7ff fe49 	bl	80074e4 <SD_SPI_xchg>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SD_SPI_xchg(0xFF);
 8007852:	1dfb      	adds	r3, r7, #7
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b4c      	cmp	r3, #76	; 0x4c
 8007858:	d102      	bne.n	8007860 <SD_SendCmd+0x9a>
 800785a:	20ff      	movs	r0, #255	; 0xff
 800785c:	f7ff fe42 	bl	80074e4 <SD_SPI_xchg>

	/* receive response */
	uint8_t n = 10;
 8007860:	230e      	movs	r3, #14
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	220a      	movs	r2, #10
 8007866:	701a      	strb	r2, [r3, #0]
	do {
		res = SD_SPI_xchg(0xFF);
 8007868:	250d      	movs	r5, #13
 800786a:	197c      	adds	r4, r7, r5
 800786c:	20ff      	movs	r0, #255	; 0xff
 800786e:	f7ff fe39 	bl	80074e4 <SD_SPI_xchg>
 8007872:	0003      	movs	r3, r0
 8007874:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8007876:	197b      	adds	r3, r7, r5
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b25b      	sxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	da09      	bge.n	8007894 <SD_SendCmd+0xce>
 8007880:	210e      	movs	r1, #14
 8007882:	187b      	adds	r3, r7, r1
 8007884:	187a      	adds	r2, r7, r1
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	3a01      	subs	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	187b      	adds	r3, r7, r1
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e9      	bne.n	8007868 <SD_SendCmd+0xa2>

	return res;
 8007894:	230d      	movs	r3, #13
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	781b      	ldrb	r3, [r3, #0]
}
 800789a:	0018      	movs	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	b004      	add	sp, #16
 80078a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080078a4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80078a4:	b5b0      	push	{r4, r5, r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	0002      	movs	r2, r0
 80078ac:	1dfb      	adds	r3, r7, #7
 80078ae:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80078b0:	1dfb      	adds	r3, r7, #7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <SD_disk_initialize+0x18>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e107      	b.n	8007acc <SD_disk_initialize+0x228>
	SD_SPI_init();
 80078bc:	f7ff fdf0 	bl	80074a0 <SD_SPI_init>
	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80078c0:	4b84      	ldr	r3, [pc, #528]	; (8007ad4 <SD_disk_initialize+0x230>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	001a      	movs	r2, r3
 80078c8:	2302      	movs	r3, #2
 80078ca:	4013      	ands	r3, r2
 80078cc:	d003      	beq.n	80078d6 <SD_disk_initialize+0x32>
 80078ce:	4b81      	ldr	r3, [pc, #516]	; (8007ad4 <SD_disk_initialize+0x230>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	e0fa      	b.n	8007acc <SD_disk_initialize+0x228>

	FCLK_SLOW();
 80078d6:	4b80      	ldr	r3, [pc, #512]	; (8007ad8 <SD_disk_initialize+0x234>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2238      	movs	r2, #56	; 0x38
 80078dc:	4393      	bics	r3, r2
 80078de:	001a      	movs	r2, r3
 80078e0:	4b7d      	ldr	r3, [pc, #500]	; (8007ad8 <SD_disk_initialize+0x234>)
 80078e2:	2130      	movs	r1, #48	; 0x30
 80078e4:	430a      	orrs	r2, r1
 80078e6:	601a      	str	r2, [r3, #0]
	/* power on */
	SD_PowerOn();
 80078e8:	f7ff fe82 	bl	80075f0 <SD_PowerOn>

	/* slave select */
	SD_SPI_select();
 80078ec:	f7ff fde6 	bl	80074bc <SD_SPI_select>

	/* check disk type */
	type = 0;
 80078f0:	230e      	movs	r3, #14
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80078f8:	2100      	movs	r1, #0
 80078fa:	2040      	movs	r0, #64	; 0x40
 80078fc:	f7ff ff63 	bl	80077c6 <SD_SendCmd>
 8007900:	0003      	movs	r3, r0
 8007902:	2b01      	cmp	r3, #1
 8007904:	d000      	beq.n	8007908 <SD_disk_initialize+0x64>
 8007906:	e0bf      	b.n	8007a88 <SD_disk_initialize+0x1e4>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8007908:	4b74      	ldr	r3, [pc, #464]	; (8007adc <SD_disk_initialize+0x238>)
 800790a:	22fa      	movs	r2, #250	; 0xfa
 800790c:	0092      	lsls	r2, r2, #2
 800790e:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8007910:	23d5      	movs	r3, #213	; 0xd5
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	0019      	movs	r1, r3
 8007916:	2048      	movs	r0, #72	; 0x48
 8007918:	f7ff ff55 	bl	80077c6 <SD_SendCmd>
 800791c:	0003      	movs	r3, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	d000      	beq.n	8007924 <SD_disk_initialize+0x80>
 8007922:	e06e      	b.n	8007a02 <SD_disk_initialize+0x15e>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8007924:	230f      	movs	r3, #15
 8007926:	18fb      	adds	r3, r7, r3
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e00f      	b.n	800794e <SD_disk_initialize+0xaa>
			{
				ocr[n] = SD_SPI_xchg(0xFF);
 800792e:	250f      	movs	r5, #15
 8007930:	197b      	adds	r3, r7, r5
 8007932:	781c      	ldrb	r4, [r3, #0]
 8007934:	20ff      	movs	r0, #255	; 0xff
 8007936:	f7ff fdd5 	bl	80074e4 <SD_SPI_xchg>
 800793a:	0003      	movs	r3, r0
 800793c:	001a      	movs	r2, r3
 800793e:	2308      	movs	r3, #8
 8007940:	18fb      	adds	r3, r7, r3
 8007942:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 8007944:	197b      	adds	r3, r7, r5
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	197b      	adds	r3, r7, r5
 800794a:	3201      	adds	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	230f      	movs	r3, #15
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d9ea      	bls.n	800792e <SD_disk_initialize+0x8a>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8007958:	2308      	movs	r3, #8
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d000      	beq.n	8007964 <SD_disk_initialize+0xc0>
 8007962:	e091      	b.n	8007a88 <SD_disk_initialize+0x1e4>
 8007964:	2308      	movs	r3, #8
 8007966:	18fb      	adds	r3, r7, r3
 8007968:	78db      	ldrb	r3, [r3, #3]
 800796a:	2baa      	cmp	r3, #170	; 0xaa
 800796c:	d000      	beq.n	8007970 <SD_disk_initialize+0xcc>
 800796e:	e08b      	b.n	8007a88 <SD_disk_initialize+0x1e4>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8007970:	2100      	movs	r1, #0
 8007972:	2077      	movs	r0, #119	; 0x77
 8007974:	f7ff ff27 	bl	80077c6 <SD_SendCmd>
 8007978:	0003      	movs	r3, r0
 800797a:	2b01      	cmp	r3, #1
 800797c:	d807      	bhi.n	800798e <SD_disk_initialize+0xea>
 800797e:	2380      	movs	r3, #128	; 0x80
 8007980:	05db      	lsls	r3, r3, #23
 8007982:	0019      	movs	r1, r3
 8007984:	2069      	movs	r0, #105	; 0x69
 8007986:	f7ff ff1e 	bl	80077c6 <SD_SendCmd>
 800798a:	1e03      	subs	r3, r0, #0
 800798c:	d004      	beq.n	8007998 <SD_disk_initialize+0xf4>
				} while (Timer1);
 800798e:	4b53      	ldr	r3, [pc, #332]	; (8007adc <SD_disk_initialize+0x238>)
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1ec      	bne.n	8007970 <SD_disk_initialize+0xcc>
 8007996:	e000      	b.n	800799a <SD_disk_initialize+0xf6>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8007998:	46c0      	nop			; (mov r8, r8)

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800799a:	4b50      	ldr	r3, [pc, #320]	; (8007adc <SD_disk_initialize+0x238>)
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d100      	bne.n	80079a4 <SD_disk_initialize+0x100>
 80079a2:	e071      	b.n	8007a88 <SD_disk_initialize+0x1e4>
 80079a4:	2100      	movs	r1, #0
 80079a6:	207a      	movs	r0, #122	; 0x7a
 80079a8:	f7ff ff0d 	bl	80077c6 <SD_SendCmd>
 80079ac:	1e03      	subs	r3, r0, #0
 80079ae:	d000      	beq.n	80079b2 <SD_disk_initialize+0x10e>
 80079b0:	e06a      	b.n	8007a88 <SD_disk_initialize+0x1e4>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80079b2:	230f      	movs	r3, #15
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	e00f      	b.n	80079dc <SD_disk_initialize+0x138>
					{
						ocr[n] = SD_SPI_xchg(0xFF);
 80079bc:	250f      	movs	r5, #15
 80079be:	197b      	adds	r3, r7, r5
 80079c0:	781c      	ldrb	r4, [r3, #0]
 80079c2:	20ff      	movs	r0, #255	; 0xff
 80079c4:	f7ff fd8e 	bl	80074e4 <SD_SPI_xchg>
 80079c8:	0003      	movs	r3, r0
 80079ca:	001a      	movs	r2, r3
 80079cc:	2308      	movs	r3, #8
 80079ce:	18fb      	adds	r3, r7, r3
 80079d0:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 80079d2:	197b      	adds	r3, r7, r5
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	197b      	adds	r3, r7, r5
 80079d8:	3201      	adds	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	230f      	movs	r3, #15
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d9ea      	bls.n	80079bc <SD_disk_initialize+0x118>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80079e6:	2308      	movs	r3, #8
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	001a      	movs	r2, r3
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	4013      	ands	r3, r2
 80079f2:	d001      	beq.n	80079f8 <SD_disk_initialize+0x154>
 80079f4:	220c      	movs	r2, #12
 80079f6:	e000      	b.n	80079fa <SD_disk_initialize+0x156>
 80079f8:	2204      	movs	r2, #4
 80079fa:	230e      	movs	r3, #14
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e042      	b.n	8007a88 <SD_disk_initialize+0x1e4>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8007a02:	2100      	movs	r1, #0
 8007a04:	2077      	movs	r0, #119	; 0x77
 8007a06:	f7ff fede 	bl	80077c6 <SD_SendCmd>
 8007a0a:	0003      	movs	r3, r0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d808      	bhi.n	8007a22 <SD_disk_initialize+0x17e>
 8007a10:	2100      	movs	r1, #0
 8007a12:	2069      	movs	r0, #105	; 0x69
 8007a14:	f7ff fed7 	bl	80077c6 <SD_SendCmd>
 8007a18:	0003      	movs	r3, r0
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d801      	bhi.n	8007a22 <SD_disk_initialize+0x17e>
 8007a1e:	2202      	movs	r2, #2
 8007a20:	e000      	b.n	8007a24 <SD_disk_initialize+0x180>
 8007a22:	2201      	movs	r2, #1
 8007a24:	230e      	movs	r3, #14
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 8007a2a:	230e      	movs	r3, #14
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d10d      	bne.n	8007a50 <SD_disk_initialize+0x1ac>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8007a34:	2100      	movs	r1, #0
 8007a36:	2077      	movs	r0, #119	; 0x77
 8007a38:	f7ff fec5 	bl	80077c6 <SD_SendCmd>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d80c      	bhi.n	8007a5c <SD_disk_initialize+0x1b8>
 8007a42:	2100      	movs	r1, #0
 8007a44:	2069      	movs	r0, #105	; 0x69
 8007a46:	f7ff febe 	bl	80077c6 <SD_SendCmd>
 8007a4a:	1e03      	subs	r3, r0, #0
 8007a4c:	d106      	bne.n	8007a5c <SD_disk_initialize+0x1b8>
 8007a4e:	e00b      	b.n	8007a68 <SD_disk_initialize+0x1c4>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8007a50:	2100      	movs	r1, #0
 8007a52:	2041      	movs	r0, #65	; 0x41
 8007a54:	f7ff feb7 	bl	80077c6 <SD_SendCmd>
 8007a58:	1e03      	subs	r3, r0, #0
 8007a5a:	d004      	beq.n	8007a66 <SD_disk_initialize+0x1c2>
				}

			} while (Timer1);
 8007a5c:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <SD_disk_initialize+0x238>)
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e2      	bne.n	8007a2a <SD_disk_initialize+0x186>
 8007a64:	e000      	b.n	8007a68 <SD_disk_initialize+0x1c4>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8007a66:	46c0      	nop			; (mov r8, r8)

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8007a68:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <SD_disk_initialize+0x238>)
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <SD_disk_initialize+0x1dc>
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	0019      	movs	r1, r3
 8007a76:	2050      	movs	r0, #80	; 0x50
 8007a78:	f7ff fea5 	bl	80077c6 <SD_SendCmd>
 8007a7c:	1e03      	subs	r3, r0, #0
 8007a7e:	d003      	beq.n	8007a88 <SD_disk_initialize+0x1e4>
 8007a80:	230e      	movs	r3, #14
 8007a82:	18fb      	adds	r3, r7, r3
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 8007a88:	4b15      	ldr	r3, [pc, #84]	; (8007ae0 <SD_disk_initialize+0x23c>)
 8007a8a:	240e      	movs	r4, #14
 8007a8c:	193a      	adds	r2, r7, r4
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]

	/* Idle */
	SD_SPI_deselect();
 8007a92:	f7ff fd1d 	bl	80074d0 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 8007a96:	20ff      	movs	r0, #255	; 0xff
 8007a98:	f7ff fd24 	bl	80074e4 <SD_SPI_xchg>

	/* Clear STA_NOINIT */
	if (type)
 8007a9c:	193b      	adds	r3, r7, r4
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00e      	beq.n	8007ac2 <SD_disk_initialize+0x21e>
	{
		FCLK_FAST();
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <SD_disk_initialize+0x234>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <SD_disk_initialize+0x234>)
 8007aaa:	2138      	movs	r1, #56	; 0x38
 8007aac:	438a      	bics	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;
 8007ab0:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <SD_disk_initialize+0x230>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4393      	bics	r3, r2
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <SD_disk_initialize+0x230>)
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e001      	b.n	8007ac6 <SD_disk_initialize+0x222>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8007ac2:	f7ff fddf 	bl	8007684 <SD_PowerOff>
	}

	return Stat;
 8007ac6:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <SD_disk_initialize+0x230>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
}
 8007acc:	0018      	movs	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b004      	add	sp, #16
 8007ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad4:	20000005 	.word	0x20000005
 8007ad8:	40013000 	.word	0x40013000
 8007adc:	20000b9a 	.word	0x20000b9a
 8007ae0:	2000012c 	.word	0x2000012c

08007ae4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	0002      	movs	r2, r0
 8007aec:	1dfb      	adds	r3, r7, #7
 8007aee:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 8007af0:	1dfb      	adds	r3, r7, #7
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <SD_disk_status+0x18>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e002      	b.n	8007b02 <SD_disk_status+0x1e>
	return Stat;
 8007afc:	4b03      	ldr	r3, [pc, #12]	; (8007b0c <SD_disk_status+0x28>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b2db      	uxtb	r3, r3
}
 8007b02:	0018      	movs	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b002      	add	sp, #8
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	20000005 	.word	0x20000005

08007b10 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	210f      	movs	r1, #15
 8007b1e:	187b      	adds	r3, r7, r1
 8007b20:	1c02      	adds	r2, r0, #0
 8007b22:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8007b24:	187b      	adds	r3, r7, r1
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <SD_disk_read+0x22>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <SD_disk_read+0x26>
 8007b32:	2304      	movs	r3, #4
 8007b34:	e054      	b.n	8007be0 <SD_disk_read+0xd0>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007b36:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <SD_disk_read+0xd8>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	001a      	movs	r2, r3
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4013      	ands	r3, r2
 8007b42:	d001      	beq.n	8007b48 <SD_disk_read+0x38>
 8007b44:	2303      	movs	r3, #3
 8007b46:	e04b      	b.n	8007be0 <SD_disk_read+0xd0>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8007b48:	4b28      	ldr	r3, [pc, #160]	; (8007bec <SD_disk_read+0xdc>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	001a      	movs	r2, r3
 8007b4e:	2304      	movs	r3, #4
 8007b50:	4013      	ands	r3, r2
 8007b52:	d102      	bne.n	8007b5a <SD_disk_read+0x4a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	025b      	lsls	r3, r3, #9
 8007b58:	607b      	str	r3, [r7, #4]

	SD_SPI_select();
 8007b5a:	f7ff fcaf 	bl	80074bc <SD_SPI_select>

	if (count == 1)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d112      	bne.n	8007b8a <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	0019      	movs	r1, r3
 8007b68:	2051      	movs	r0, #81	; 0x51
 8007b6a:	f7ff fe2c 	bl	80077c6 <SD_SendCmd>
 8007b6e:	1e03      	subs	r3, r0, #0
 8007b70:	d12d      	bne.n	8007bce <SD_disk_read+0xbe>
 8007b72:	2380      	movs	r3, #128	; 0x80
 8007b74:	009a      	lsls	r2, r3, #2
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	0011      	movs	r1, r2
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f7ff fd96 	bl	80076ac <SD_RxDataBlock>
 8007b80:	1e03      	subs	r3, r0, #0
 8007b82:	d024      	beq.n	8007bce <SD_disk_read+0xbe>
 8007b84:	2300      	movs	r3, #0
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	e021      	b.n	8007bce <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0019      	movs	r1, r3
 8007b8e:	2052      	movs	r0, #82	; 0x52
 8007b90:	f7ff fe19 	bl	80077c6 <SD_SendCmd>
 8007b94:	1e03      	subs	r3, r0, #0
 8007b96:	d11a      	bne.n	8007bce <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	009a      	lsls	r2, r3, #2
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	0011      	movs	r1, r2
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f7ff fd83 	bl	80076ac <SD_RxDataBlock>
 8007ba6:	1e03      	subs	r3, r0, #0
 8007ba8:	d00c      	beq.n	8007bc4 <SD_disk_read+0xb4>
				buff += 512;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2280      	movs	r2, #128	; 0x80
 8007bae:	0092      	lsls	r2, r2, #2
 8007bb0:	4694      	mov	ip, r2
 8007bb2:	4463      	add	r3, ip
 8007bb4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1ea      	bne.n	8007b98 <SD_disk_read+0x88>
 8007bc2:	e000      	b.n	8007bc6 <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 8007bc4:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	204c      	movs	r0, #76	; 0x4c
 8007bca:	f7ff fdfc 	bl	80077c6 <SD_SendCmd>
		}
	}

	/* Idle */
	SD_SPI_deselect();
 8007bce:	f7ff fc7f 	bl	80074d0 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 8007bd2:	20ff      	movs	r0, #255	; 0xff
 8007bd4:	f7ff fc86 	bl	80074e4 <SD_SPI_xchg>

	return count ? RES_ERROR : RES_OK;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	1e5a      	subs	r2, r3, #1
 8007bdc:	4193      	sbcs	r3, r2
 8007bde:	b2db      	uxtb	r3, r3
}
 8007be0:	0018      	movs	r0, r3
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b004      	add	sp, #16
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000005 	.word	0x20000005
 8007bec:	2000012c 	.word	0x2000012c

08007bf0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	210f      	movs	r1, #15
 8007bfe:	187b      	adds	r3, r7, r1
 8007c00:	1c02      	adds	r2, r0, #0
 8007c02:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8007c04:	187b      	adds	r3, r7, r1
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <SD_disk_write+0x22>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <SD_disk_write+0x26>
 8007c12:	2304      	movs	r3, #4
 8007c14:	e06c      	b.n	8007cf0 <SD_disk_write+0x100>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007c16:	4b38      	ldr	r3, [pc, #224]	; (8007cf8 <SD_disk_write+0x108>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4013      	ands	r3, r2
 8007c22:	d001      	beq.n	8007c28 <SD_disk_write+0x38>
 8007c24:	2303      	movs	r3, #3
 8007c26:	e063      	b.n	8007cf0 <SD_disk_write+0x100>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8007c28:	4b33      	ldr	r3, [pc, #204]	; (8007cf8 <SD_disk_write+0x108>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	001a      	movs	r2, r3
 8007c30:	2304      	movs	r3, #4
 8007c32:	4013      	ands	r3, r2
 8007c34:	d001      	beq.n	8007c3a <SD_disk_write+0x4a>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e05a      	b.n	8007cf0 <SD_disk_write+0x100>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8007c3a:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <SD_disk_write+0x10c>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	001a      	movs	r2, r3
 8007c40:	2304      	movs	r3, #4
 8007c42:	4013      	ands	r3, r2
 8007c44:	d102      	bne.n	8007c4c <SD_disk_write+0x5c>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	025b      	lsls	r3, r3, #9
 8007c4a:	607b      	str	r3, [r7, #4]

	SD_SPI_select();
 8007c4c:	f7ff fc36 	bl	80074bc <SD_SPI_select>

	if (count == 1)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d110      	bne.n	8007c78 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	0019      	movs	r1, r3
 8007c5a:	2058      	movs	r0, #88	; 0x58
 8007c5c:	f7ff fdb3 	bl	80077c6 <SD_SendCmd>
 8007c60:	1e03      	subs	r3, r0, #0
 8007c62:	d13c      	bne.n	8007cde <SD_disk_write+0xee>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	21fe      	movs	r1, #254	; 0xfe
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f7ff fd51 	bl	8007710 <SD_TxDataBlock>
 8007c6e:	1e03      	subs	r3, r0, #0
 8007c70:	d035      	beq.n	8007cde <SD_disk_write+0xee>
			count = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	603b      	str	r3, [r7, #0]
 8007c76:	e032      	b.n	8007cde <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8007c78:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <SD_disk_write+0x10c>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	001a      	movs	r2, r3
 8007c7e:	2302      	movs	r3, #2
 8007c80:	4013      	ands	r3, r2
 8007c82:	d008      	beq.n	8007c96 <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 8007c84:	2100      	movs	r1, #0
 8007c86:	2077      	movs	r0, #119	; 0x77
 8007c88:	f7ff fd9d 	bl	80077c6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	0019      	movs	r1, r3
 8007c90:	2057      	movs	r0, #87	; 0x57
 8007c92:	f7ff fd98 	bl	80077c6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0019      	movs	r1, r3
 8007c9a:	2059      	movs	r0, #89	; 0x59
 8007c9c:	f7ff fd93 	bl	80077c6 <SD_SendCmd>
 8007ca0:	1e03      	subs	r3, r0, #0
 8007ca2:	d11c      	bne.n	8007cde <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	21fc      	movs	r1, #252	; 0xfc
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7ff fd31 	bl	8007710 <SD_TxDataBlock>
 8007cae:	1e03      	subs	r3, r0, #0
 8007cb0:	d00c      	beq.n	8007ccc <SD_disk_write+0xdc>
				buff += 512;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2280      	movs	r2, #128	; 0x80
 8007cb6:	0092      	lsls	r2, r2, #2
 8007cb8:	4694      	mov	ip, r2
 8007cba:	4463      	add	r3, ip
 8007cbc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1ec      	bne.n	8007ca4 <SD_disk_write+0xb4>
 8007cca:	e000      	b.n	8007cce <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8007ccc:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8007cce:	21fd      	movs	r1, #253	; 0xfd
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f7ff fd1d 	bl	8007710 <SD_TxDataBlock>
 8007cd6:	1e03      	subs	r3, r0, #0
 8007cd8:	d101      	bne.n	8007cde <SD_disk_write+0xee>
			{
				count = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	SD_SPI_deselect();
 8007cde:	f7ff fbf7 	bl	80074d0 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 8007ce2:	20ff      	movs	r0, #255	; 0xff
 8007ce4:	f7ff fbfe 	bl	80074e4 <SD_SPI_xchg>

	return count ? RES_ERROR : RES_OK;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	4193      	sbcs	r3, r2
 8007cee:	b2db      	uxtb	r3, r3
}
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b004      	add	sp, #16
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000005 	.word	0x20000005
 8007cfc:	2000012c 	.word	0x2000012c

08007d00 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8007d00:	b590      	push	{r4, r7, lr}
 8007d02:	b08b      	sub	sp, #44	; 0x2c
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	603a      	str	r2, [r7, #0]
 8007d08:	1dfb      	adds	r3, r7, #7
 8007d0a:	1c02      	adds	r2, r0, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	1dbb      	adds	r3, r7, #6
 8007d10:	1c0a      	adds	r2, r1, #0
 8007d12:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8007d18:	1dfb      	adds	r3, r7, #7
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <SD_disk_ioctl+0x24>
 8007d20:	2304      	movs	r3, #4
 8007d22:	e11e      	b.n	8007f62 <SD_disk_ioctl+0x262>
	res = RES_ERROR;
 8007d24:	2327      	movs	r3, #39	; 0x27
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	2201      	movs	r2, #1
 8007d2a:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 8007d2c:	1dbb      	adds	r3, r7, #6
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d125      	bne.n	8007d80 <SD_disk_ioctl+0x80>
	{
		switch (*ptr)
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d00a      	beq.n	8007d52 <SD_disk_ioctl+0x52>
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d00f      	beq.n	8007d60 <SD_disk_ioctl+0x60>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d118      	bne.n	8007d76 <SD_disk_ioctl+0x76>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8007d44:	f7ff fc9e 	bl	8007684 <SD_PowerOff>
			res = RES_OK;
 8007d48:	2327      	movs	r3, #39	; 0x27
 8007d4a:	18fb      	adds	r3, r7, r3
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
			break;
 8007d50:	e104      	b.n	8007f5c <SD_disk_ioctl+0x25c>
		case 1:
			SD_PowerOn();		/* Power On */
 8007d52:	f7ff fc4d 	bl	80075f0 <SD_PowerOn>
			res = RES_OK;
 8007d56:	2327      	movs	r3, #39	; 0x27
 8007d58:	18fb      	adds	r3, r7, r3
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
			break;
 8007d5e:	e0fd      	b.n	8007f5c <SD_disk_ioctl+0x25c>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	1c5c      	adds	r4, r3, #1
 8007d64:	f7ff fc98 	bl	8007698 <SD_CheckPower>
 8007d68:	0003      	movs	r3, r0
 8007d6a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8007d6c:	2327      	movs	r3, #39	; 0x27
 8007d6e:	18fb      	adds	r3, r7, r3
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
			break;
 8007d74:	e0f2      	b.n	8007f5c <SD_disk_ioctl+0x25c>
		default:
			res = RES_PARERR;
 8007d76:	2327      	movs	r3, #39	; 0x27
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e0ed      	b.n	8007f5c <SD_disk_ioctl+0x25c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d80:	4b7a      	ldr	r3, [pc, #488]	; (8007f6c <SD_disk_ioctl+0x26c>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	001a      	movs	r2, r3
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	d001      	beq.n	8007d92 <SD_disk_ioctl+0x92>
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e0e7      	b.n	8007f62 <SD_disk_ioctl+0x262>

		SD_SPI_select();
 8007d92:	f7ff fb93 	bl	80074bc <SD_SPI_select>

		switch (ctrl)
 8007d96:	1dbb      	adds	r3, r7, #6
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b0d      	cmp	r3, #13
 8007d9c:	d900      	bls.n	8007da0 <SD_disk_ioctl+0xa0>
 8007d9e:	e0ca      	b.n	8007f36 <SD_disk_ioctl+0x236>
 8007da0:	009a      	lsls	r2, r3, #2
 8007da2:	4b73      	ldr	r3, [pc, #460]	; (8007f70 <SD_disk_ioctl+0x270>)
 8007da4:	18d3      	adds	r3, r2, r3
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8007daa:	2100      	movs	r1, #0
 8007dac:	2049      	movs	r0, #73	; 0x49
 8007dae:	f7ff fd0a 	bl	80077c6 <SD_SendCmd>
 8007db2:	1e03      	subs	r3, r0, #0
 8007db4:	d000      	beq.n	8007db8 <SD_disk_ioctl+0xb8>
 8007db6:	e0c3      	b.n	8007f40 <SD_disk_ioctl+0x240>
 8007db8:	230c      	movs	r3, #12
 8007dba:	18fb      	adds	r3, r7, r3
 8007dbc:	2110      	movs	r1, #16
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f7ff fc74 	bl	80076ac <SD_RxDataBlock>
 8007dc4:	1e03      	subs	r3, r0, #0
 8007dc6:	d100      	bne.n	8007dca <SD_disk_ioctl+0xca>
 8007dc8:	e0ba      	b.n	8007f40 <SD_disk_ioctl+0x240>
			{
				if ((csd[0] >> 6) == 1)
 8007dca:	230c      	movs	r3, #12
 8007dcc:	18fb      	adds	r3, r7, r3
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	099b      	lsrs	r3, r3, #6
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d114      	bne.n	8007e02 <SD_disk_ioctl+0x102>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8007dd8:	210c      	movs	r1, #12
 8007dda:	187b      	adds	r3, r7, r1
 8007ddc:	7a5b      	ldrb	r3, [r3, #9]
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	187b      	adds	r3, r7, r1
 8007de2:	7a1b      	ldrb	r3, [r3, #8]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	18d3      	adds	r3, r2, r3
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	211e      	movs	r1, #30
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	3201      	adds	r2, #1
 8007df4:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	029a      	lsls	r2, r3, #10
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e03a      	b.n	8007e78 <SD_disk_ioctl+0x178>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007e02:	200c      	movs	r0, #12
 8007e04:	183b      	adds	r3, r7, r0
 8007e06:	795b      	ldrb	r3, [r3, #5]
 8007e08:	220f      	movs	r2, #15
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	7a9b      	ldrb	r3, [r3, #10]
 8007e12:	09db      	lsrs	r3, r3, #7
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	18d3      	adds	r3, r2, r3
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	183b      	adds	r3, r7, r0
 8007e1c:	7a5b      	ldrb	r3, [r3, #9]
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2106      	movs	r1, #6
 8007e24:	400b      	ands	r3, r1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	18d3      	adds	r3, r2, r3
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	2426      	movs	r4, #38	; 0x26
 8007e2e:	193b      	adds	r3, r7, r4
 8007e30:	3202      	adds	r2, #2
 8007e32:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8007e34:	183b      	adds	r3, r7, r0
 8007e36:	7a1b      	ldrb	r3, [r3, #8]
 8007e38:	099b      	lsrs	r3, r3, #6
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	183b      	adds	r3, r7, r0
 8007e40:	79db      	ldrb	r3, [r3, #7]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	18d3      	adds	r3, r2, r3
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	183b      	adds	r3, r7, r0
 8007e4e:	799b      	ldrb	r3, [r3, #6]
 8007e50:	029b      	lsls	r3, r3, #10
 8007e52:	b299      	uxth	r1, r3
 8007e54:	23c0      	movs	r3, #192	; 0xc0
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	400b      	ands	r3, r1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	18d3      	adds	r3, r2, r3
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	211e      	movs	r1, #30
 8007e62:	187b      	adds	r3, r7, r1
 8007e64:	3201      	adds	r2, #1
 8007e66:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	881a      	ldrh	r2, [r3, #0]
 8007e6c:	193b      	adds	r3, r7, r4
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	3b09      	subs	r3, #9
 8007e72:	409a      	lsls	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8007e78:	2327      	movs	r3, #39	; 0x27
 8007e7a:	18fb      	adds	r3, r7, r3
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007e80:	e05e      	b.n	8007f40 <SD_disk_ioctl+0x240>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2280      	movs	r2, #128	; 0x80
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8007e8a:	2327      	movs	r3, #39	; 0x27
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
			break;
 8007e92:	e05e      	b.n	8007f52 <SD_disk_ioctl+0x252>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8007e94:	f7ff fb8e 	bl	80075b4 <SD_ReadyWait>
 8007e98:	0003      	movs	r3, r0
 8007e9a:	2bff      	cmp	r3, #255	; 0xff
 8007e9c:	d152      	bne.n	8007f44 <SD_disk_ioctl+0x244>
 8007e9e:	2327      	movs	r3, #39	; 0x27
 8007ea0:	18fb      	adds	r3, r7, r3
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
			break;
 8007ea6:	e04d      	b.n	8007f44 <SD_disk_ioctl+0x244>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	2049      	movs	r0, #73	; 0x49
 8007eac:	f7ff fc8b 	bl	80077c6 <SD_SendCmd>
 8007eb0:	1e03      	subs	r3, r0, #0
 8007eb2:	d149      	bne.n	8007f48 <SD_disk_ioctl+0x248>
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	2110      	movs	r1, #16
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f7ff fbf7 	bl	80076ac <SD_RxDataBlock>
 8007ebe:	1e03      	subs	r3, r0, #0
 8007ec0:	d042      	beq.n	8007f48 <SD_disk_ioctl+0x248>
 8007ec2:	2327      	movs	r3, #39	; 0x27
 8007ec4:	18fb      	adds	r3, r7, r3
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
			break;
 8007eca:	e03d      	b.n	8007f48 <SD_disk_ioctl+0x248>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8007ecc:	2100      	movs	r1, #0
 8007ece:	204a      	movs	r0, #74	; 0x4a
 8007ed0:	f7ff fc79 	bl	80077c6 <SD_SendCmd>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d139      	bne.n	8007f4c <SD_disk_ioctl+0x24c>
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2110      	movs	r1, #16
 8007edc:	0018      	movs	r0, r3
 8007ede:	f7ff fbe5 	bl	80076ac <SD_RxDataBlock>
 8007ee2:	1e03      	subs	r3, r0, #0
 8007ee4:	d032      	beq.n	8007f4c <SD_disk_ioctl+0x24c>
 8007ee6:	2327      	movs	r3, #39	; 0x27
 8007ee8:	18fb      	adds	r3, r7, r3
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
			break;
 8007eee:	e02d      	b.n	8007f4c <SD_disk_ioctl+0x24c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	207a      	movs	r0, #122	; 0x7a
 8007ef4:	f7ff fc67 	bl	80077c6 <SD_SendCmd>
 8007ef8:	1e03      	subs	r3, r0, #0
 8007efa:	d129      	bne.n	8007f50 <SD_disk_ioctl+0x250>
			{
				for (n = 0; n < 4; n++)
 8007efc:	2326      	movs	r3, #38	; 0x26
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	e00d      	b.n	8007f22 <SD_disk_ioctl+0x222>
				{
					*ptr++ = SD_SPI_xchg(0xFF);
 8007f06:	6a3c      	ldr	r4, [r7, #32]
 8007f08:	1c63      	adds	r3, r4, #1
 8007f0a:	623b      	str	r3, [r7, #32]
 8007f0c:	20ff      	movs	r0, #255	; 0xff
 8007f0e:	f7ff fae9 	bl	80074e4 <SD_SPI_xchg>
 8007f12:	0003      	movs	r3, r0
 8007f14:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8007f16:	2126      	movs	r1, #38	; 0x26
 8007f18:	187b      	adds	r3, r7, r1
 8007f1a:	781a      	ldrb	r2, [r3, #0]
 8007f1c:	187b      	adds	r3, r7, r1
 8007f1e:	3201      	adds	r2, #1
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	2326      	movs	r3, #38	; 0x26
 8007f24:	18fb      	adds	r3, r7, r3
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d9ec      	bls.n	8007f06 <SD_disk_ioctl+0x206>
				}
				res = RES_OK;
 8007f2c:	2327      	movs	r3, #39	; 0x27
 8007f2e:	18fb      	adds	r3, r7, r3
 8007f30:	2200      	movs	r2, #0
 8007f32:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007f34:	e00c      	b.n	8007f50 <SD_disk_ioctl+0x250>
		default:
			res = RES_PARERR;
 8007f36:	2327      	movs	r3, #39	; 0x27
 8007f38:	18fb      	adds	r3, r7, r3
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e008      	b.n	8007f52 <SD_disk_ioctl+0x252>
			break;
 8007f40:	46c0      	nop			; (mov r8, r8)
 8007f42:	e006      	b.n	8007f52 <SD_disk_ioctl+0x252>
			break;
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	e004      	b.n	8007f52 <SD_disk_ioctl+0x252>
			break;
 8007f48:	46c0      	nop			; (mov r8, r8)
 8007f4a:	e002      	b.n	8007f52 <SD_disk_ioctl+0x252>
			break;
 8007f4c:	46c0      	nop			; (mov r8, r8)
 8007f4e:	e000      	b.n	8007f52 <SD_disk_ioctl+0x252>
			break;
 8007f50:	46c0      	nop			; (mov r8, r8)
		}

		SD_SPI_deselect();
 8007f52:	f7ff fabd 	bl	80074d0 <SD_SPI_deselect>
		SD_SPI_xchg(0xFF);
 8007f56:	20ff      	movs	r0, #255	; 0xff
 8007f58:	f7ff fac4 	bl	80074e4 <SD_SPI_xchg>
	}

	return res;
 8007f5c:	2327      	movs	r3, #39	; 0x27
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	781b      	ldrb	r3, [r3, #0]
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b00b      	add	sp, #44	; 0x2c
 8007f68:	bd90      	pop	{r4, r7, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	20000005 	.word	0x20000005
 8007f70:	0800ab9c 	.word	0x0800ab9c

08007f74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f78:	4a06      	ldr	r2, [pc, #24]	; (8007f94 <MX_FATFS_Init+0x20>)
 8007f7a:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <MX_FATFS_Init+0x24>)
 8007f7c:	0011      	movs	r1, r2
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7ff fa2a 	bl	80073d8 <FATFS_LinkDriver>
 8007f84:	0003      	movs	r3, r0
 8007f86:	001a      	movs	r2, r3
 8007f88:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <MX_FATFS_Init+0x28>)
 8007f8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007f8c:	46c0      	nop			; (mov r8, r8)
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	20000b9c 	.word	0x20000b9c
 8007f98:	20000068 	.word	0x20000068
 8007f9c:	20000ba0 	.word	0x20000ba0

08007fa0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007fa4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <getNote>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t getNote(char key)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	0002      	movs	r2, r0
 8007fb4:	1dfb      	adds	r3, r7, #7
 8007fb6:	701a      	strb	r2, [r3, #0]
    uint8_t note=0;
 8007fb8:	230f      	movs	r3, #15
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]

    if(key=='C')note=72;
 8007fc0:	1dfb      	adds	r3, r7, #7
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b43      	cmp	r3, #67	; 0x43
 8007fc6:	d103      	bne.n	8007fd0 <getNote+0x24>
 8007fc8:	230f      	movs	r3, #15
 8007fca:	18fb      	adds	r3, r7, r3
 8007fcc:	2248      	movs	r2, #72	; 0x48
 8007fce:	701a      	strb	r2, [r3, #0]
    if(key=='c')note=73;
 8007fd0:	1dfb      	adds	r3, r7, #7
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b63      	cmp	r3, #99	; 0x63
 8007fd6:	d103      	bne.n	8007fe0 <getNote+0x34>
 8007fd8:	230f      	movs	r3, #15
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	2249      	movs	r2, #73	; 0x49
 8007fde:	701a      	strb	r2, [r3, #0]
    if(key=='D')note=74;
 8007fe0:	1dfb      	adds	r3, r7, #7
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b44      	cmp	r3, #68	; 0x44
 8007fe6:	d103      	bne.n	8007ff0 <getNote+0x44>
 8007fe8:	230f      	movs	r3, #15
 8007fea:	18fb      	adds	r3, r7, r3
 8007fec:	224a      	movs	r2, #74	; 0x4a
 8007fee:	701a      	strb	r2, [r3, #0]
    if(key=='d')note=75;
 8007ff0:	1dfb      	adds	r3, r7, #7
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b64      	cmp	r3, #100	; 0x64
 8007ff6:	d103      	bne.n	8008000 <getNote+0x54>
 8007ff8:	230f      	movs	r3, #15
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	224b      	movs	r2, #75	; 0x4b
 8007ffe:	701a      	strb	r2, [r3, #0]
    if(key=='E')note=76;
 8008000:	1dfb      	adds	r3, r7, #7
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b45      	cmp	r3, #69	; 0x45
 8008006:	d103      	bne.n	8008010 <getNote+0x64>
 8008008:	230f      	movs	r3, #15
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	224c      	movs	r2, #76	; 0x4c
 800800e:	701a      	strb	r2, [r3, #0]
    if(key=='F')note=77;
 8008010:	1dfb      	adds	r3, r7, #7
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b46      	cmp	r3, #70	; 0x46
 8008016:	d103      	bne.n	8008020 <getNote+0x74>
 8008018:	230f      	movs	r3, #15
 800801a:	18fb      	adds	r3, r7, r3
 800801c:	224d      	movs	r2, #77	; 0x4d
 800801e:	701a      	strb	r2, [r3, #0]
    if(key=='f')note=78;
 8008020:	1dfb      	adds	r3, r7, #7
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b66      	cmp	r3, #102	; 0x66
 8008026:	d103      	bne.n	8008030 <getNote+0x84>
 8008028:	230f      	movs	r3, #15
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	224e      	movs	r2, #78	; 0x4e
 800802e:	701a      	strb	r2, [r3, #0]
    if(key=='G')note=79;
 8008030:	1dfb      	adds	r3, r7, #7
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b47      	cmp	r3, #71	; 0x47
 8008036:	d103      	bne.n	8008040 <getNote+0x94>
 8008038:	230f      	movs	r3, #15
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	224f      	movs	r2, #79	; 0x4f
 800803e:	701a      	strb	r2, [r3, #0]
    if(key=='g')note=80;
 8008040:	1dfb      	adds	r3, r7, #7
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b67      	cmp	r3, #103	; 0x67
 8008046:	d103      	bne.n	8008050 <getNote+0xa4>
 8008048:	230f      	movs	r3, #15
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	2250      	movs	r2, #80	; 0x50
 800804e:	701a      	strb	r2, [r3, #0]
    if(key=='A')note=81;
 8008050:	1dfb      	adds	r3, r7, #7
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b41      	cmp	r3, #65	; 0x41
 8008056:	d103      	bne.n	8008060 <getNote+0xb4>
 8008058:	230f      	movs	r3, #15
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	2251      	movs	r2, #81	; 0x51
 800805e:	701a      	strb	r2, [r3, #0]
    if(key=='a')note=82;
 8008060:	1dfb      	adds	r3, r7, #7
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b61      	cmp	r3, #97	; 0x61
 8008066:	d103      	bne.n	8008070 <getNote+0xc4>
 8008068:	230f      	movs	r3, #15
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	2252      	movs	r2, #82	; 0x52
 800806e:	701a      	strb	r2, [r3, #0]
    if(key=='B')note=83;
 8008070:	1dfb      	adds	r3, r7, #7
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b42      	cmp	r3, #66	; 0x42
 8008076:	d103      	bne.n	8008080 <getNote+0xd4>
 8008078:	230f      	movs	r3, #15
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	2253      	movs	r2, #83	; 0x53
 800807e:	701a      	strb	r2, [r3, #0]

    return note;
 8008080:	230f      	movs	r3, #15
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	781b      	ldrb	r3, [r3, #0]
}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	b004      	add	sp, #16
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008092:	b097      	sub	sp, #92	; 0x5c
 8008094:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008096:	f7f8 f9bf 	bl	8000418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800809a:	f001 fdc3 	bl	8009c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800809e:	f001 fe85 	bl	8009dac <MX_GPIO_Init>
  MX_SPI1_Init();
 80080a2:	f001 fe07 	bl	8009cb4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80080a6:	f001 fe43 	bl	8009d30 <MX_SPI2_Init>
  MX_FATFS_Init();
 80080aa:	f7ff ff63 	bl	8007f74 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //Test LEDs
  DATA_LED(1); STAT_LED(1);
 80080ae:	4b5a      	ldr	r3, [pc, #360]	; (8008218 <main+0x188>)
 80080b0:	2280      	movs	r2, #128	; 0x80
 80080b2:	0152      	lsls	r2, r2, #5
 80080b4:	619a      	str	r2, [r3, #24]
 80080b6:	4b58      	ldr	r3, [pc, #352]	; (8008218 <main+0x188>)
 80080b8:	2280      	movs	r2, #128	; 0x80
 80080ba:	0192      	lsls	r2, r2, #6
 80080bc:	619a      	str	r2, [r3, #24]
  D5_LED(1); D6_LED(1);
 80080be:	4b57      	ldr	r3, [pc, #348]	; (800821c <main+0x18c>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	619a      	str	r2, [r3, #24]
 80080c4:	4b55      	ldr	r3, [pc, #340]	; (800821c <main+0x18c>)
 80080c6:	2202      	movs	r2, #2
 80080c8:	619a      	str	r2, [r3, #24]
  delay_ms(1000);
 80080ca:	23fa      	movs	r3, #250	; 0xfa
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	0018      	movs	r0, r3
 80080d0:	f001 ff41 	bl	8009f56 <delay_ms>
  DATA_LED(0); STAT_LED(0);
 80080d4:	4b50      	ldr	r3, [pc, #320]	; (8008218 <main+0x188>)
 80080d6:	2280      	movs	r2, #128	; 0x80
 80080d8:	0552      	lsls	r2, r2, #21
 80080da:	619a      	str	r2, [r3, #24]
 80080dc:	4b4e      	ldr	r3, [pc, #312]	; (8008218 <main+0x188>)
 80080de:	2280      	movs	r2, #128	; 0x80
 80080e0:	0592      	lsls	r2, r2, #22
 80080e2:	619a      	str	r2, [r3, #24]
  D5_LED(0); D6_LED(0);
 80080e4:	4b4d      	ldr	r3, [pc, #308]	; (800821c <main+0x18c>)
 80080e6:	2280      	movs	r2, #128	; 0x80
 80080e8:	0252      	lsls	r2, r2, #9
 80080ea:	619a      	str	r2, [r3, #24]
 80080ec:	4b4b      	ldr	r3, [pc, #300]	; (800821c <main+0x18c>)
 80080ee:	2280      	movs	r2, #128	; 0x80
 80080f0:	0292      	lsls	r2, r2, #10
 80080f2:	619a      	str	r2, [r3, #24]

  FATFS_UnLinkDriver(USERPath);
 80080f4:	4b4a      	ldr	r3, [pc, #296]	; (8008220 <main+0x190>)
 80080f6:	0018      	movs	r0, r3
 80080f8:	f7ff f9c4 	bl	8007484 <FATFS_UnLinkDriver>
  f_mount(0, 0, 1);
 80080fc:	2201      	movs	r2, #1
 80080fe:	2100      	movs	r1, #0
 8008100:	2000      	movs	r0, #0
 8008102:	f7fe f8b5 	bl	8006270 <f_mount>

  FT800_init();
 8008106:	f7f9 fd0f 	bl	8001b28 <FT800_init>
  HAL_Delay(50);
 800810a:	2032      	movs	r0, #50	; 0x32
 800810c:	f7f8 f9e8 	bl	80004e0 <HAL_Delay>

  FATFS_LinkDriver(&USER_Driver, USERPath);
 8008110:	4a43      	ldr	r2, [pc, #268]	; (8008220 <main+0x190>)
 8008112:	4b44      	ldr	r3, [pc, #272]	; (8008224 <main+0x194>)
 8008114:	0011      	movs	r1, r2
 8008116:	0018      	movs	r0, r3
 8008118:	f7ff f95e 	bl	80073d8 <FATFS_LinkDriver>
  res=f_mount(&myFAT,"",0);
 800811c:	4942      	ldr	r1, [pc, #264]	; (8008228 <main+0x198>)
 800811e:	4b43      	ldr	r3, [pc, #268]	; (800822c <main+0x19c>)
 8008120:	2200      	movs	r2, #0
 8008122:	0018      	movs	r0, r3
 8008124:	f7fe f8a4 	bl	8006270 <f_mount>
 8008128:	0003      	movs	r3, r0
 800812a:	001a      	movs	r2, r3
 800812c:	4b40      	ldr	r3, [pc, #256]	; (8008230 <main+0x1a0>)
 800812e:	701a      	strb	r2, [r3, #0]

  FT800_drawLogo();
 8008130:	f7fb f82f 	bl	8003192 <FT800_drawLogo>
  FT800_waitLogo();
 8008134:	f7fb f83a 	bl	80031ac <FT800_waitLogo>

  FT800_startNewList();
 8008138:	f7f9 fd46 	bl	8001bc8 <FT800_startNewList>
  FT800_setBackgroundColor(DARKGRAY);
 800813c:	4b3d      	ldr	r3, [pc, #244]	; (8008234 <main+0x1a4>)
 800813e:	0018      	movs	r0, r3
 8008140:	f7f9 fdc8 	bl	8001cd4 <FT800_setBackgroundColor>
  FT800_clear(CLEAR_ALL);
 8008144:	2007      	movs	r0, #7
 8008146:	f7f9 fdd9 	bl	8001cfc <FT800_clear>
  FT800_runTouchCalibration();
 800814a:	f7fa ffcd 	bl	80030e8 <FT800_runTouchCalibration>
  FT800_endOfList();
 800814e:	f7f9 fd49 	bl	8001be4 <FT800_endOfList>

  strcpy(wallpaper_folder,bmp_folder);
 8008152:	4b39      	ldr	r3, [pc, #228]	; (8008238 <main+0x1a8>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4b39      	ldr	r3, [pc, #228]	; (800823c <main+0x1ac>)
 8008158:	0011      	movs	r1, r2
 800815a:	0018      	movs	r0, r3
 800815c:	f002 f8ba 	bl	800a2d4 <strcpy>
  strcpy(wallpaper,bmps[4]);
 8008160:	4b37      	ldr	r3, [pc, #220]	; (8008240 <main+0x1b0>)
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	4b37      	ldr	r3, [pc, #220]	; (8008244 <main+0x1b4>)
 8008166:	0011      	movs	r1, r2
 8008168:	0018      	movs	r0, r3
 800816a:	f002 f8b3 	bl	800a2d4 <strcpy>
  sprintf((char*)path, "%s/%s",wallpaper_folder, wallpaper);
 800816e:	4b35      	ldr	r3, [pc, #212]	; (8008244 <main+0x1b4>)
 8008170:	4a32      	ldr	r2, [pc, #200]	; (800823c <main+0x1ac>)
 8008172:	4935      	ldr	r1, [pc, #212]	; (8008248 <main+0x1b8>)
 8008174:	4835      	ldr	r0, [pc, #212]	; (800824c <main+0x1bc>)
 8008176:	f002 f88d 	bl	800a294 <siprintf>
  FT800_loadBMPfromSD(0,path, &img_width, &img_height, &img_bytes);
 800817a:	4835      	ldr	r0, [pc, #212]	; (8008250 <main+0x1c0>)
 800817c:	4a35      	ldr	r2, [pc, #212]	; (8008254 <main+0x1c4>)
 800817e:	4933      	ldr	r1, [pc, #204]	; (800824c <main+0x1bc>)
 8008180:	4b35      	ldr	r3, [pc, #212]	; (8008258 <main+0x1c8>)
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	0003      	movs	r3, r0
 8008186:	2000      	movs	r0, #0
 8008188:	f7fb fcc0 	bl	8003b0c <FT800_loadBMPfromSD>
  delay_ms(50);
 800818c:	2032      	movs	r0, #50	; 0x32
 800818e:	f001 fee2 	bl	8009f56 <delay_ms>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
        switch(menu)
 8008192:	4b32      	ldr	r3, [pc, #200]	; (800825c <main+0x1cc>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	3b81      	subs	r3, #129	; 0x81
 8008198:	2b0c      	cmp	r3, #12
 800819a:	d901      	bls.n	80081a0 <main+0x110>
 800819c:	f001 fba5 	bl	80098ea <main+0x185a>
 80081a0:	009a      	lsls	r2, r3, #2
 80081a2:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <main+0x1d0>)
 80081a4:	18d3      	adds	r3, r2, r3
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	469f      	mov	pc, r3
        {
            case MAIN_MENU:

                if(previous_menu==WAV||previous_menu==TRANSFORM||previous_menu==SCRSAVER||previous_menu==SKETCH)
 80081aa:	4b2e      	ldr	r3, [pc, #184]	; (8008264 <main+0x1d4>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b89      	cmp	r3, #137	; 0x89
 80081b0:	d00b      	beq.n	80081ca <main+0x13a>
 80081b2:	4b2c      	ldr	r3, [pc, #176]	; (8008264 <main+0x1d4>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b8b      	cmp	r3, #139	; 0x8b
 80081b8:	d007      	beq.n	80081ca <main+0x13a>
 80081ba:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <main+0x1d4>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b8d      	cmp	r3, #141	; 0x8d
 80081c0:	d003      	beq.n	80081ca <main+0x13a>
 80081c2:	4b28      	ldr	r3, [pc, #160]	; (8008264 <main+0x1d4>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b8c      	cmp	r3, #140	; 0x8c
 80081c8:	d154      	bne.n	8008274 <main+0x1e4>
                {
                    FT800_finishList();
 80081ca:	f7f9 fd29 	bl	8001c20 <FT800_finishList>
                    FT800_startNewList();
 80081ce:	f7f9 fcfb 	bl	8001bc8 <FT800_startNewList>
                    FT800_setBackgroundColor(BLACK);
 80081d2:	2000      	movs	r0, #0
 80081d4:	f7f9 fd7e 	bl	8001cd4 <FT800_setBackgroundColor>
                    FT800_clear(CLEAR_ALL);
 80081d8:	2007      	movs	r0, #7
 80081da:	f7f9 fd8f 	bl	8001cfc <FT800_clear>
                    FT800_stop();
 80081de:	f7fb f85f 	bl	80032a0 <FT800_stop>
                    FT800_endOfList();
 80081e2:	f7f9 fcff 	bl	8001be4 <FT800_endOfList>
                    sprintf((char*)path, "%s/%s",wallpaper_folder, wallpaper);
 80081e6:	4b17      	ldr	r3, [pc, #92]	; (8008244 <main+0x1b4>)
 80081e8:	4a14      	ldr	r2, [pc, #80]	; (800823c <main+0x1ac>)
 80081ea:	4917      	ldr	r1, [pc, #92]	; (8008248 <main+0x1b8>)
 80081ec:	4817      	ldr	r0, [pc, #92]	; (800824c <main+0x1bc>)
 80081ee:	f002 f851 	bl	800a294 <siprintf>
                    if(!strcmp(wallpaper_folder,bmp_folder))
 80081f2:	4b11      	ldr	r3, [pc, #68]	; (8008238 <main+0x1a8>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <main+0x1ac>)
 80081f8:	0011      	movs	r1, r2
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7f7 ff84 	bl	8000108 <strcmp>
 8008200:	1e03      	subs	r3, r0, #0
 8008202:	d131      	bne.n	8008268 <main+0x1d8>
                        FT800_loadBMPfromSD(0,path, &img_width, &img_height, &img_bytes);
 8008204:	4812      	ldr	r0, [pc, #72]	; (8008250 <main+0x1c0>)
 8008206:	4a13      	ldr	r2, [pc, #76]	; (8008254 <main+0x1c4>)
 8008208:	4910      	ldr	r1, [pc, #64]	; (800824c <main+0x1bc>)
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <main+0x1c8>)
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	0003      	movs	r3, r0
 8008210:	2000      	movs	r0, #0
 8008212:	f7fb fc7b 	bl	8003b0c <FT800_loadBMPfromSD>
 8008216:	e02d      	b.n	8008274 <main+0x1e4>
 8008218:	48000800 	.word	0x48000800
 800821c:	48000400 	.word	0x48000400
 8008220:	20000b9c 	.word	0x20000b9c
 8008224:	20000068 	.word	0x20000068
 8008228:	0800ac74 	.word	0x0800ac74
 800822c:	20000130 	.word	0x20000130
 8008230:	20001336 	.word	0x20001336
 8008234:	00202020 	.word	0x00202020
 8008238:	20000014 	.word	0x20000014
 800823c:	200012b8 	.word	0x200012b8
 8008240:	20000018 	.word	0x20000018
 8008244:	200012a0 	.word	0x200012a0
 8008248:	0800ac78 	.word	0x0800ac78
 800824c:	2000036c 	.word	0x2000036c
 8008250:	200012b4 	.word	0x200012b4
 8008254:	2000133c 	.word	0x2000133c
 8008258:	2000129c 	.word	0x2000129c
 800825c:	20000008 	.word	0x20000008
 8008260:	0800aea4 	.word	0x0800aea4
 8008264:	20000009 	.word	0x20000009
                    else
                        FT800_loadJPGfromSD(0,path,&img_width,&img_height);
 8008268:	4be6      	ldr	r3, [pc, #920]	; (8008604 <main+0x574>)
 800826a:	4ae7      	ldr	r2, [pc, #924]	; (8008608 <main+0x578>)
 800826c:	49e7      	ldr	r1, [pc, #924]	; (800860c <main+0x57c>)
 800826e:	2000      	movs	r0, #0
 8008270:	f7fb fdf0 	bl	8003e54 <FT800_loadJPGfromSD>
                }
                previous_menu=MAIN_MENU;
 8008274:	4be6      	ldr	r3, [pc, #920]	; (8008610 <main+0x580>)
 8008276:	2281      	movs	r2, #129	; 0x81
 8008278:	701a      	strb	r2, [r3, #0]


                FT800_finishList();
 800827a:	f7f9 fcd1 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 800827e:	f7f9 fca3 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(BLACK);
 8008282:	2000      	movs	r0, #0
 8008284:	f7f9 fd26 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 8008288:	2007      	movs	r0, #7
 800828a:	f7f9 fd37 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 800828e:	2000      	movs	r0, #0
 8008290:	f7fa fee9 	bl	8003066 <FT800_tagMask>
                FT800_bitmapSource(0);
 8008294:	2000      	movs	r0, #0
 8008296:	f7fb f8c5 	bl	8003424 <FT800_bitmapSource>
                FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 800829a:	4bde      	ldr	r3, [pc, #888]	; (8008614 <main+0x584>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4ad9      	ldr	r2, [pc, #868]	; (8008608 <main+0x578>)
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	4353      	muls	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	b219      	sxth	r1, r3
 80082aa:	4bd6      	ldr	r3, [pc, #856]	; (8008604 <main+0x574>)
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b21b      	sxth	r3, r3
 80082b0:	001a      	movs	r2, r3
 80082b2:	2007      	movs	r0, #7
 80082b4:	f7fb f82a 	bl	800330c <FT800_bitmapLayout>
                FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width, img_height);
 80082b8:	4bd3      	ldr	r3, [pc, #844]	; (8008608 <main+0x578>)
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b21a      	sxth	r2, r3
 80082be:	4bd1      	ldr	r3, [pc, #836]	; (8008604 <main+0x574>)
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b21b      	sxth	r3, r3
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	0013      	movs	r3, r2
 80082c8:	2200      	movs	r2, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	2000      	movs	r0, #0
 80082ce:	f7fb f85b 	bl	8003388 <FT800_bitmapSize>
                FT800_bitmapBegin();
 80082d2:	f7fb f80d 	bl	80032f0 <FT800_bitmapBegin>
                FT800_Vertex2II(0,0,0,0);
 80082d6:	2300      	movs	r3, #0
 80082d8:	2200      	movs	r2, #0
 80082da:	2100      	movs	r1, #0
 80082dc:	2000      	movs	r0, #0
 80082de:	f7f9 fdab 	bl	8001e38 <FT800_Vertex2II>

                FT800_setColorA(50);
 80082e2:	2032      	movs	r0, #50	; 0x32
 80082e4:	f7f9 fd22 	bl	8001d2c <FT800_setColorA>
                FT800_drawScrollBar(450, 20, 20, 200, DARKGRAY, WHITE, OPT_3D, scroll_v_value, 28, 256, SCROLL_V);
 80082e8:	4bcb      	ldr	r3, [pc, #812]	; (8008618 <main+0x588>)
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	22e1      	movs	r2, #225	; 0xe1
 80082ee:	0050      	lsls	r0, r2, #1
 80082f0:	2202      	movs	r2, #2
 80082f2:	9206      	str	r2, [sp, #24]
 80082f4:	2280      	movs	r2, #128	; 0x80
 80082f6:	0052      	lsls	r2, r2, #1
 80082f8:	9205      	str	r2, [sp, #20]
 80082fa:	221c      	movs	r2, #28
 80082fc:	9204      	str	r2, [sp, #16]
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	2300      	movs	r3, #0
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	4bc5      	ldr	r3, [pc, #788]	; (800861c <main+0x58c>)
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	4bc5      	ldr	r3, [pc, #788]	; (8008620 <main+0x590>)
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	23c8      	movs	r3, #200	; 0xc8
 800830e:	2214      	movs	r2, #20
 8008310:	2114      	movs	r1, #20
 8008312:	f7fa fb3f 	bl	8002994 <FT800_drawScrollBar>
                FT800_drawScrollBar(20, 240, 400, 20, DARKGRAY, WHITE, OPT_3D, scroll_h_value, 28, 512, SCROLL_H);
 8008316:	4bc3      	ldr	r3, [pc, #780]	; (8008624 <main+0x594>)
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	22c8      	movs	r2, #200	; 0xc8
 800831c:	0051      	lsls	r1, r2, #1
 800831e:	2203      	movs	r2, #3
 8008320:	9206      	str	r2, [sp, #24]
 8008322:	2280      	movs	r2, #128	; 0x80
 8008324:	0092      	lsls	r2, r2, #2
 8008326:	9205      	str	r2, [sp, #20]
 8008328:	221c      	movs	r2, #28
 800832a:	9204      	str	r2, [sp, #16]
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	2300      	movs	r3, #0
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	4bba      	ldr	r3, [pc, #744]	; (800861c <main+0x58c>)
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	4bba      	ldr	r3, [pc, #744]	; (8008620 <main+0x590>)
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	2314      	movs	r3, #20
 800833c:	000a      	movs	r2, r1
 800833e:	21f0      	movs	r1, #240	; 0xf0
 8008340:	2014      	movs	r0, #20
 8008342:	f7fa fb27 	bl	8002994 <FT800_drawScrollBar>
                int16_t x0=scroll_h_value-256;
 8008346:	4bb7      	ldr	r3, [pc, #732]	; (8008624 <main+0x594>)
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	3b01      	subs	r3, #1
 800834c:	3bff      	subs	r3, #255	; 0xff
 800834e:	b29a      	uxth	r2, r3
 8008350:	242e      	movs	r4, #46	; 0x2e
 8008352:	193b      	adds	r3, r7, r4
 8008354:	801a      	strh	r2, [r3, #0]
                int16_t y0=scroll_v_value-128;
 8008356:	4bb0      	ldr	r3, [pc, #704]	; (8008618 <main+0x588>)
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	3b80      	subs	r3, #128	; 0x80
 800835c:	b29a      	uxth	r2, r3
 800835e:	252c      	movs	r5, #44	; 0x2c
 8008360:	197b      	adds	r3, r7, r5
 8008362:	801a      	strh	r2, [r3, #0]
                FT800_drawScissorXY(0, 0);
 8008364:	2100      	movs	r1, #0
 8008366:	2000      	movs	r0, #0
 8008368:	f7fa fa34 	bl	80027d4 <FT800_drawScissorXY>
                FT800_drawScissorSize(440, 230);
 800836c:	23dc      	movs	r3, #220	; 0xdc
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	21e6      	movs	r1, #230	; 0xe6
 8008372:	0018      	movs	r0, r3
 8008374:	f7fa fa58 	bl	8002828 <FT800_drawScissorSize>
                FT800_setColorA(200);
 8008378:	20c8      	movs	r0, #200	; 0xc8
 800837a:	f7f9 fcd7 	bl	8001d2c <FT800_setColorA>
                FT800_drawButton(10+x0,10+y0,100,60,HOTPINK,23,OPT_3D,"Primitives",BLACK, PRIMITIVES);
 800837e:	193b      	adds	r3, r7, r4
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	330a      	adds	r3, #10
 8008384:	b29b      	uxth	r3, r3
 8008386:	b218      	sxth	r0, r3
 8008388:	197b      	adds	r3, r7, r5
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	330a      	adds	r3, #10
 800838e:	b29b      	uxth	r3, r3
 8008390:	b219      	sxth	r1, r3
 8008392:	2382      	movs	r3, #130	; 0x82
 8008394:	9305      	str	r3, [sp, #20]
 8008396:	2300      	movs	r3, #0
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	4ba3      	ldr	r3, [pc, #652]	; (8008628 <main+0x598>)
 800839c:	9303      	str	r3, [sp, #12]
 800839e:	2300      	movs	r3, #0
 80083a0:	9302      	str	r3, [sp, #8]
 80083a2:	2317      	movs	r3, #23
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	4ba1      	ldr	r3, [pc, #644]	; (800862c <main+0x59c>)
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	233c      	movs	r3, #60	; 0x3c
 80083ac:	2264      	movs	r2, #100	; 0x64
 80083ae:	f7fa f8b4 	bl	800251a <FT800_drawButton>
                FT800_drawButton(150+x0,10+y0,100,60,LIMEGREEN,23,OPT_3D,"Bars",BLACK, BARS);
 80083b2:	193b      	adds	r3, r7, r4
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	3396      	adds	r3, #150	; 0x96
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	b218      	sxth	r0, r3
 80083bc:	197b      	adds	r3, r7, r5
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	330a      	adds	r3, #10
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	b219      	sxth	r1, r3
 80083c6:	2383      	movs	r3, #131	; 0x83
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	2300      	movs	r3, #0
 80083cc:	9304      	str	r3, [sp, #16]
 80083ce:	4b98      	ldr	r3, [pc, #608]	; (8008630 <main+0x5a0>)
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	2317      	movs	r3, #23
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	4b96      	ldr	r3, [pc, #600]	; (8008634 <main+0x5a4>)
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	233c      	movs	r3, #60	; 0x3c
 80083e0:	2264      	movs	r2, #100	; 0x64
 80083e2:	f7fa f89a 	bl	800251a <FT800_drawButton>
                FT800_drawButton(290+x0,10+y0,100,60,TOMATO,23,OPT_3D,"Knobs",BLACK, KNOBS);
 80083e6:	193b      	adds	r3, r7, r4
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	3323      	adds	r3, #35	; 0x23
 80083ec:	33ff      	adds	r3, #255	; 0xff
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	b218      	sxth	r0, r3
 80083f2:	197b      	adds	r3, r7, r5
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	330a      	adds	r3, #10
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	b219      	sxth	r1, r3
 80083fc:	2384      	movs	r3, #132	; 0x84
 80083fe:	9305      	str	r3, [sp, #20]
 8008400:	2300      	movs	r3, #0
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	4b8c      	ldr	r3, [pc, #560]	; (8008638 <main+0x5a8>)
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	2300      	movs	r3, #0
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	2317      	movs	r3, #23
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	4b8a      	ldr	r3, [pc, #552]	; (800863c <main+0x5ac>)
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	233c      	movs	r3, #60	; 0x3c
 8008416:	2264      	movs	r2, #100	; 0x64
 8008418:	f7fa f87f 	bl	800251a <FT800_drawButton>
                FT800_drawButton(10+x0,90+y0,100,60,INDIGO,23,OPT_3D,"Toggle",WHITE, GRADIENT);
 800841c:	193b      	adds	r3, r7, r4
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	330a      	adds	r3, #10
 8008422:	b29b      	uxth	r3, r3
 8008424:	b218      	sxth	r0, r3
 8008426:	197b      	adds	r3, r7, r5
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	335a      	adds	r3, #90	; 0x5a
 800842c:	b29b      	uxth	r3, r3
 800842e:	b219      	sxth	r1, r3
 8008430:	2385      	movs	r3, #133	; 0x85
 8008432:	9305      	str	r3, [sp, #20]
 8008434:	4b79      	ldr	r3, [pc, #484]	; (800861c <main+0x58c>)
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	4b81      	ldr	r3, [pc, #516]	; (8008640 <main+0x5b0>)
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	2300      	movs	r3, #0
 800843e:	9302      	str	r3, [sp, #8]
 8008440:	2317      	movs	r3, #23
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	4b7f      	ldr	r3, [pc, #508]	; (8008644 <main+0x5b4>)
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	233c      	movs	r3, #60	; 0x3c
 800844a:	2264      	movs	r2, #100	; 0x64
 800844c:	f7fa f865 	bl	800251a <FT800_drawButton>
                FT800_drawButton(150+x0,90+y0,100,60,GOLD,23,OPT_3D,"Keys",BLACK, KEYS);
 8008450:	193b      	adds	r3, r7, r4
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	3396      	adds	r3, #150	; 0x96
 8008456:	b29b      	uxth	r3, r3
 8008458:	b218      	sxth	r0, r3
 800845a:	197b      	adds	r3, r7, r5
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	335a      	adds	r3, #90	; 0x5a
 8008460:	b29b      	uxth	r3, r3
 8008462:	b219      	sxth	r1, r3
 8008464:	2386      	movs	r3, #134	; 0x86
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	2300      	movs	r3, #0
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	4b76      	ldr	r3, [pc, #472]	; (8008648 <main+0x5b8>)
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	2300      	movs	r3, #0
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	2317      	movs	r3, #23
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	4b74      	ldr	r3, [pc, #464]	; (800864c <main+0x5bc>)
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	233c      	movs	r3, #60	; 0x3c
 800847e:	2264      	movs	r2, #100	; 0x64
 8008480:	f7fa f84b 	bl	800251a <FT800_drawButton>
                FT800_drawButton(290+x0,90+y0,100,60,CRIMSON,23,OPT_3D,"Sound",WHITE, SOUND);
 8008484:	193b      	adds	r3, r7, r4
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	3323      	adds	r3, #35	; 0x23
 800848a:	33ff      	adds	r3, #255	; 0xff
 800848c:	b29b      	uxth	r3, r3
 800848e:	b218      	sxth	r0, r3
 8008490:	197b      	adds	r3, r7, r5
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	335a      	adds	r3, #90	; 0x5a
 8008496:	b29b      	uxth	r3, r3
 8008498:	b219      	sxth	r1, r3
 800849a:	2387      	movs	r3, #135	; 0x87
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	4b5f      	ldr	r3, [pc, #380]	; (800861c <main+0x58c>)
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	4b6b      	ldr	r3, [pc, #428]	; (8008650 <main+0x5c0>)
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9302      	str	r3, [sp, #8]
 80084aa:	2317      	movs	r3, #23
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	4b69      	ldr	r3, [pc, #420]	; (8008654 <main+0x5c4>)
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	233c      	movs	r3, #60	; 0x3c
 80084b4:	2264      	movs	r2, #100	; 0x64
 80084b6:	f7fa f830 	bl	800251a <FT800_drawButton>
                FT800_drawButton(10+x0,170+y0,100,60,YELLOWGREEN,23,OPT_3D,"BMP",BLACK, BMP);
 80084ba:	193b      	adds	r3, r7, r4
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	330a      	adds	r3, #10
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	b218      	sxth	r0, r3
 80084c4:	197b      	adds	r3, r7, r5
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	33aa      	adds	r3, #170	; 0xaa
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	b219      	sxth	r1, r3
 80084ce:	2388      	movs	r3, #136	; 0x88
 80084d0:	9305      	str	r3, [sp, #20]
 80084d2:	2300      	movs	r3, #0
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	4b60      	ldr	r3, [pc, #384]	; (8008658 <main+0x5c8>)
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	2300      	movs	r3, #0
 80084dc:	9302      	str	r3, [sp, #8]
 80084de:	2317      	movs	r3, #23
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	4b5e      	ldr	r3, [pc, #376]	; (800865c <main+0x5cc>)
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	233c      	movs	r3, #60	; 0x3c
 80084e8:	2264      	movs	r2, #100	; 0x64
 80084ea:	f7fa f816 	bl	800251a <FT800_drawButton>
                FT800_drawButton(150+x0,170+y0,100,60,PLUM,23,OPT_3D,"WAV",BLACK, WAV);
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	3396      	adds	r3, #150	; 0x96
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	b218      	sxth	r0, r3
 80084f8:	197b      	adds	r3, r7, r5
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	33aa      	adds	r3, #170	; 0xaa
 80084fe:	b29b      	uxth	r3, r3
 8008500:	b219      	sxth	r1, r3
 8008502:	2389      	movs	r3, #137	; 0x89
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	2300      	movs	r3, #0
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	4b55      	ldr	r3, [pc, #340]	; (8008660 <main+0x5d0>)
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	2300      	movs	r3, #0
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	2317      	movs	r3, #23
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	4b53      	ldr	r3, [pc, #332]	; (8008664 <main+0x5d4>)
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	233c      	movs	r3, #60	; 0x3c
 800851c:	2264      	movs	r2, #100	; 0x64
 800851e:	f7f9 fffc 	bl	800251a <FT800_drawButton>
                FT800_drawButton(290+x0,170+y0,100,60,AQUAMARINE,23,OPT_3D,"JPG",BLACK, JPG);
 8008522:	193b      	adds	r3, r7, r4
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	3323      	adds	r3, #35	; 0x23
 8008528:	33ff      	adds	r3, #255	; 0xff
 800852a:	b29b      	uxth	r3, r3
 800852c:	b218      	sxth	r0, r3
 800852e:	197b      	adds	r3, r7, r5
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	33aa      	adds	r3, #170	; 0xaa
 8008534:	b29b      	uxth	r3, r3
 8008536:	b219      	sxth	r1, r3
 8008538:	238a      	movs	r3, #138	; 0x8a
 800853a:	9305      	str	r3, [sp, #20]
 800853c:	2300      	movs	r3, #0
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	4b49      	ldr	r3, [pc, #292]	; (8008668 <main+0x5d8>)
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	2300      	movs	r3, #0
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	2317      	movs	r3, #23
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	4b47      	ldr	r3, [pc, #284]	; (800866c <main+0x5dc>)
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	233c      	movs	r3, #60	; 0x3c
 8008552:	2264      	movs	r2, #100	; 0x64
 8008554:	f7f9 ffe1 	bl	800251a <FT800_drawButton>
                FT800_drawButton(10+x0,250+y0,100,60,KHAKI,23,OPT_3D,"Transform",BLACK, TRANSFORM);
 8008558:	193b      	adds	r3, r7, r4
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	330a      	adds	r3, #10
 800855e:	b29b      	uxth	r3, r3
 8008560:	b218      	sxth	r0, r3
 8008562:	197b      	adds	r3, r7, r5
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	33fa      	adds	r3, #250	; 0xfa
 8008568:	b29b      	uxth	r3, r3
 800856a:	b219      	sxth	r1, r3
 800856c:	238b      	movs	r3, #139	; 0x8b
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	2300      	movs	r3, #0
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	4b3e      	ldr	r3, [pc, #248]	; (8008670 <main+0x5e0>)
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	2300      	movs	r3, #0
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	2317      	movs	r3, #23
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	4b3c      	ldr	r3, [pc, #240]	; (8008674 <main+0x5e4>)
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	233c      	movs	r3, #60	; 0x3c
 8008586:	2264      	movs	r2, #100	; 0x64
 8008588:	f7f9 ffc7 	bl	800251a <FT800_drawButton>
                FT800_drawButton(150+x0,250+y0,100,60,TURQUOISE,23,OPT_3D,"Sketch",BLACK, SKETCH);
 800858c:	193b      	adds	r3, r7, r4
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	3396      	adds	r3, #150	; 0x96
 8008592:	b29b      	uxth	r3, r3
 8008594:	b218      	sxth	r0, r3
 8008596:	197b      	adds	r3, r7, r5
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	33fa      	adds	r3, #250	; 0xfa
 800859c:	b29b      	uxth	r3, r3
 800859e:	b219      	sxth	r1, r3
 80085a0:	238c      	movs	r3, #140	; 0x8c
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	2300      	movs	r3, #0
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	4b33      	ldr	r3, [pc, #204]	; (8008678 <main+0x5e8>)
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	2300      	movs	r3, #0
 80085ae:	9302      	str	r3, [sp, #8]
 80085b0:	2317      	movs	r3, #23
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	4b31      	ldr	r3, [pc, #196]	; (800867c <main+0x5ec>)
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	233c      	movs	r3, #60	; 0x3c
 80085ba:	2264      	movs	r2, #100	; 0x64
 80085bc:	f7f9 ffad 	bl	800251a <FT800_drawButton>
                FT800_drawButton(290+x0,250+y0,100,60,VIOLET,23,OPT_3D,"Scr. Saver",BLACK, SCRSAVER);
 80085c0:	193b      	adds	r3, r7, r4
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	3323      	adds	r3, #35	; 0x23
 80085c6:	33ff      	adds	r3, #255	; 0xff
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	b218      	sxth	r0, r3
 80085cc:	197b      	adds	r3, r7, r5
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	33fa      	adds	r3, #250	; 0xfa
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	b219      	sxth	r1, r3
 80085d6:	238d      	movs	r3, #141	; 0x8d
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	2300      	movs	r3, #0
 80085dc:	9304      	str	r3, [sp, #16]
 80085de:	4b28      	ldr	r3, [pc, #160]	; (8008680 <main+0x5f0>)
 80085e0:	9303      	str	r3, [sp, #12]
 80085e2:	2300      	movs	r3, #0
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	2317      	movs	r3, #23
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	4b26      	ldr	r3, [pc, #152]	; (8008684 <main+0x5f4>)
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	233c      	movs	r3, #60	; 0x3c
 80085f0:	2264      	movs	r2, #100	; 0x64
 80085f2:	f7f9 ff92 	bl	800251a <FT800_drawButton>
                FT800_setColorA(255);
 80085f6:	20ff      	movs	r0, #255	; 0xff
 80085f8:	f7f9 fb98 	bl	8001d2c <FT800_setColorA>


                FT800_endOfList();
 80085fc:	f7f9 faf2 	bl	8001be4 <FT800_endOfList>
                break;
 8008600:	f001 f973 	bl	80098ea <main+0x185a>
 8008604:	200012b4 	.word	0x200012b4
 8008608:	2000133c 	.word	0x2000133c
 800860c:	2000036c 	.word	0x2000036c
 8008610:	20000009 	.word	0x20000009
 8008614:	2000129c 	.word	0x2000129c
 8008618:	2000000c 	.word	0x2000000c
 800861c:	00ffffff 	.word	0x00ffffff
 8008620:	00202020 	.word	0x00202020
 8008624:	2000000e 	.word	0x2000000e
 8008628:	0800ac80 	.word	0x0800ac80
 800862c:	00ff69b4 	.word	0x00ff69b4
 8008630:	0800ac8c 	.word	0x0800ac8c
 8008634:	0032cd32 	.word	0x0032cd32
 8008638:	0800ac94 	.word	0x0800ac94
 800863c:	00ff6347 	.word	0x00ff6347
 8008640:	0800ac9c 	.word	0x0800ac9c
 8008644:	004b0082 	.word	0x004b0082
 8008648:	0800aca4 	.word	0x0800aca4
 800864c:	00ffd700 	.word	0x00ffd700
 8008650:	0800acac 	.word	0x0800acac
 8008654:	00dc143c 	.word	0x00dc143c
 8008658:	0800abd4 	.word	0x0800abd4
 800865c:	009acd32 	.word	0x009acd32
 8008660:	0800ac40 	.word	0x0800ac40
 8008664:	00dda0dd 	.word	0x00dda0dd
 8008668:	0800ac00 	.word	0x0800ac00
 800866c:	007fffd4 	.word	0x007fffd4
 8008670:	0800acb4 	.word	0x0800acb4
 8008674:	00f0e68c 	.word	0x00f0e68c
 8008678:	0800acc0 	.word	0x0800acc0
 800867c:	0040e0d0 	.word	0x0040e0d0
 8008680:	0800acc8 	.word	0x0800acc8
 8008684:	00ee82ee 	.word	0x00ee82ee
            case PRIMITIVES:
                FT800_finishList();
 8008688:	f7f9 faca 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 800868c:	f7f9 fa9c 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(DARKGRAY);
 8008690:	4bf6      	ldr	r3, [pc, #984]	; (8008a6c <main+0x9dc>)
 8008692:	0018      	movs	r0, r3
 8008694:	f7f9 fb1e 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 8008698:	2007      	movs	r0, #7
 800869a:	f7f9 fb2f 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 800869e:	2000      	movs	r0, #0
 80086a0:	f7fa fce1 	bl	8003066 <FT800_tagMask>

                short xs[10]={0, 50, 100, 150, 200, 250, 300, 350, 400, 472};
 80086a4:	2018      	movs	r0, #24
 80086a6:	183b      	adds	r3, r7, r0
 80086a8:	4af1      	ldr	r2, [pc, #964]	; (8008a70 <main+0x9e0>)
 80086aa:	ca32      	ldmia	r2!, {r1, r4, r5}
 80086ac:	c332      	stmia	r3!, {r1, r4, r5}
 80086ae:	ca12      	ldmia	r2!, {r1, r4}
 80086b0:	c312      	stmia	r3!, {r1, r4}
                short ys[10]={0, 200, 10, 50, 100, 150, 20, 40, 100, 0};
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	4aef      	ldr	r2, [pc, #956]	; (8008a74 <main+0x9e4>)
 80086b6:	ca32      	ldmia	r2!, {r1, r4, r5}
 80086b8:	c332      	stmia	r3!, {r1, r4, r5}
 80086ba:	ca12      	ldmia	r2!, {r1, r4}
 80086bc:	c312      	stmia	r3!, {r1, r4}
                FT800_drawEdgeLineStrip(xs, ys, 10, 'A', DARKGRAY);
 80086be:	1d39      	adds	r1, r7, #4
 80086c0:	0004      	movs	r4, r0
 80086c2:	1938      	adds	r0, r7, r4
 80086c4:	4be9      	ldr	r3, [pc, #932]	; (8008a6c <main+0x9dc>)
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2341      	movs	r3, #65	; 0x41
 80086ca:	220a      	movs	r2, #10
 80086cc:	f7f9 fdbc 	bl	8002248 <FT800_drawEdgeLineStrip>
                FT800_drawEdgeLineStrip(xs, ys, 10, 'B', LIGHTGRAY);
 80086d0:	1d39      	adds	r1, r7, #4
 80086d2:	1938      	adds	r0, r7, r4
 80086d4:	4be8      	ldr	r3, [pc, #928]	; (8008a78 <main+0x9e8>)
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2342      	movs	r3, #66	; 0x42
 80086da:	220a      	movs	r2, #10
 80086dc:	f7f9 fdb4 	bl	8002248 <FT800_drawEdgeLineStrip>
                FT800_drawLineStrip(xs, ys, 10,BLACK,80);
 80086e0:	1d39      	adds	r1, r7, #4
 80086e2:	0020      	movs	r0, r4
 80086e4:	1838      	adds	r0, r7, r0
 80086e6:	2350      	movs	r3, #80	; 0x50
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	220a      	movs	r2, #10
 80086ee:	f7f9 fd51 	bl	8002194 <FT800_drawLineStrip>
                FT800_drawPoint(300, 136, YELLOW, 1000);
 80086f2:	23fa      	movs	r3, #250	; 0xfa
 80086f4:	009a      	lsls	r2, r3, #2
 80086f6:	49e1      	ldr	r1, [pc, #900]	; (8008a7c <main+0x9ec>)
 80086f8:	2396      	movs	r3, #150	; 0x96
 80086fa:	0058      	lsls	r0, r3, #1
 80086fc:	0013      	movs	r3, r2
 80086fe:	000a      	movs	r2, r1
 8008700:	2188      	movs	r1, #136	; 0x88
 8008702:	f7f9 fc51 	bl	8001fa8 <FT800_drawPoint>
                FT800_drawLine(30,50,400,200,BLUE,320);
 8008706:	23c8      	movs	r3, #200	; 0xc8
 8008708:	005a      	lsls	r2, r3, #1
 800870a:	23a0      	movs	r3, #160	; 0xa0
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	23ff      	movs	r3, #255	; 0xff
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	23c8      	movs	r3, #200	; 0xc8
 8008716:	2132      	movs	r1, #50	; 0x32
 8008718:	201e      	movs	r0, #30
 800871a:	f7f9 fc8b 	bl	8002034 <FT800_drawLine>
                FT800_setColorA(150);
 800871e:	2096      	movs	r0, #150	; 0x96
 8008720:	f7f9 fb04 	bl	8001d2c <FT800_setColorA>
                FT800_drawRectangle(10,100,200,200,GREEN,40);
 8008724:	2328      	movs	r3, #40	; 0x28
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	23ff      	movs	r3, #255	; 0xff
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	23c8      	movs	r3, #200	; 0xc8
 8008730:	22c8      	movs	r2, #200	; 0xc8
 8008732:	2164      	movs	r1, #100	; 0x64
 8008734:	200a      	movs	r0, #10
 8008736:	f7f9 fcd5 	bl	80020e4 <FT800_drawRectangle>
                FT800_drawPoint(400, 220, RED, 400);
 800873a:	23c8      	movs	r3, #200	; 0xc8
 800873c:	0059      	lsls	r1, r3, #1
 800873e:	23ff      	movs	r3, #255	; 0xff
 8008740:	041a      	lsls	r2, r3, #16
 8008742:	23c8      	movs	r3, #200	; 0xc8
 8008744:	0058      	lsls	r0, r3, #1
 8008746:	000b      	movs	r3, r1
 8008748:	21dc      	movs	r1, #220	; 0xdc
 800874a:	f7f9 fc2d 	bl	8001fa8 <FT800_drawPoint>
                FT800_setColorA(255);
 800874e:	20ff      	movs	r0, #255	; 0xff
 8008750:	f7f9 faec 	bl	8001d2c <FT800_setColorA>
                FT800_drawLine(30,250,400,50,CYAN,80);
 8008754:	23c8      	movs	r3, #200	; 0xc8
 8008756:	005a      	lsls	r2, r3, #1
 8008758:	2350      	movs	r3, #80	; 0x50
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	4bc8      	ldr	r3, [pc, #800]	; (8008a80 <main+0x9f0>)
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2332      	movs	r3, #50	; 0x32
 8008762:	21fa      	movs	r1, #250	; 0xfa
 8008764:	201e      	movs	r0, #30
 8008766:	f7f9 fc65 	bl	8002034 <FT800_drawLine>
                FT800_drawChar(310,200,25,MAGENTA,'A');
 800876a:	4ac6      	ldr	r2, [pc, #792]	; (8008a84 <main+0x9f4>)
 800876c:	239b      	movs	r3, #155	; 0x9b
 800876e:	0058      	lsls	r0, r3, #1
 8008770:	2341      	movs	r3, #65	; 0x41
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	0013      	movs	r3, r2
 8008776:	2219      	movs	r2, #25
 8008778:	21c8      	movs	r1, #200	; 0xc8
 800877a:	f7f9 fdcb 	bl	8002314 <FT800_drawChar>
                FT800_drawChar(330,200,31,MAGENTA,'A');
 800877e:	4ac1      	ldr	r2, [pc, #772]	; (8008a84 <main+0x9f4>)
 8008780:	23a5      	movs	r3, #165	; 0xa5
 8008782:	0058      	lsls	r0, r3, #1
 8008784:	2341      	movs	r3, #65	; 0x41
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	0013      	movs	r3, r2
 800878a:	221f      	movs	r2, #31
 800878c:	21c8      	movs	r1, #200	; 0xc8
 800878e:	f7f9 fdc1 	bl	8002314 <FT800_drawChar>

                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 primitives: points, lines, rectangles");
 8008792:	4abd      	ldr	r2, [pc, #756]	; (8008a88 <main+0x9f8>)
 8008794:	4bbd      	ldr	r3, [pc, #756]	; (8008a8c <main+0x9fc>)
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	2380      	movs	r3, #128	; 0x80
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	0013      	movs	r3, r2
 80087a0:	2212      	movs	r2, #18
 80087a2:	2105      	movs	r1, #5
 80087a4:	2005      	movs	r0, #5
 80087a6:	f7f9 fe01 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 80087aa:	23be      	movs	r3, #190	; 0xbe
 80087ac:	33ff      	adds	r3, #255	; 0xff
 80087ae:	0018      	movs	r0, r3
 80087b0:	2381      	movs	r3, #129	; 0x81
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	4bb6      	ldr	r3, [pc, #728]	; (8008a90 <main+0xa00>)
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	4bb6      	ldr	r3, [pc, #728]	; (8008a94 <main+0xa04>)
 80087ba:	9303      	str	r3, [sp, #12]
 80087bc:	2300      	movs	r3, #0
 80087be:	9302      	str	r3, [sp, #8]
 80087c0:	231c      	movs	r3, #28
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	23ff      	movs	r3, #255	; 0xff
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	231e      	movs	r3, #30
 80087cc:	221e      	movs	r2, #30
 80087ce:	2105      	movs	r1, #5
 80087d0:	f7f9 fea3 	bl	800251a <FT800_drawButton>

                FT800_endOfList();
 80087d4:	f7f9 fa06 	bl	8001be4 <FT800_endOfList>
                break;
 80087d8:	f001 f887 	bl	80098ea <main+0x185a>
            case BARS:
                FT800_finishList();
 80087dc:	f7f9 fa20 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 80087e0:	f7f9 f9f2 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(DARKGRAY);
 80087e4:	4ba1      	ldr	r3, [pc, #644]	; (8008a6c <main+0x9dc>)
 80087e6:	0018      	movs	r0, r3
 80087e8:	f7f9 fa74 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 80087ec:	2007      	movs	r0, #7
 80087ee:	f7f9 fa85 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 80087f2:	2000      	movs	r0, #0
 80087f4:	f7fa fc37 	bl	8003066 <FT800_tagMask>

                FT800_drawProgressBar(20, 200, 440, 20, OPT_3D, slider_value, 1024, GREEN, LIGHTGRAY,0);
 80087f8:	4ba7      	ldr	r3, [pc, #668]	; (8008a98 <main+0xa08>)
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	22dc      	movs	r2, #220	; 0xdc
 80087fe:	0051      	lsls	r1, r2, #1
 8008800:	2200      	movs	r2, #0
 8008802:	9205      	str	r2, [sp, #20]
 8008804:	4a9c      	ldr	r2, [pc, #624]	; (8008a78 <main+0x9e8>)
 8008806:	9204      	str	r2, [sp, #16]
 8008808:	22ff      	movs	r2, #255	; 0xff
 800880a:	0212      	lsls	r2, r2, #8
 800880c:	9203      	str	r2, [sp, #12]
 800880e:	2280      	movs	r2, #128	; 0x80
 8008810:	00d2      	lsls	r2, r2, #3
 8008812:	9202      	str	r2, [sp, #8]
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	2300      	movs	r3, #0
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	2314      	movs	r3, #20
 800881c:	000a      	movs	r2, r1
 800881e:	21c8      	movs	r1, #200	; 0xc8
 8008820:	2014      	movs	r0, #20
 8008822:	f7fa fa53 	bl	8002ccc <FT800_drawProgressBar>
                FT800_drawDecimalNumb(200, 120, 31, OPT_FLAT, slider_value, YELLOW);
 8008826:	4b9c      	ldr	r3, [pc, #624]	; (8008a98 <main+0xa08>)
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	0019      	movs	r1, r3
 800882c:	2380      	movs	r3, #128	; 0x80
 800882e:	005a      	lsls	r2, r3, #1
 8008830:	4b92      	ldr	r3, [pc, #584]	; (8008a7c <main+0x9ec>)
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	9100      	str	r1, [sp, #0]
 8008836:	0013      	movs	r3, r2
 8008838:	221f      	movs	r2, #31
 800883a:	2178      	movs	r1, #120	; 0x78
 800883c:	20c8      	movs	r0, #200	; 0xc8
 800883e:	f7f9 fe13 	bl	8002468 <FT800_drawDecimalNumb>
                FT800_drawSlider(20, 60, 440, 20, OPT_3D, slider_value, 1024, BLUE, WHITE, WHITE, SLIDER);
 8008842:	4b95      	ldr	r3, [pc, #596]	; (8008a98 <main+0xa08>)
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	22dc      	movs	r2, #220	; 0xdc
 8008848:	0051      	lsls	r1, r2, #1
 800884a:	2201      	movs	r2, #1
 800884c:	9206      	str	r2, [sp, #24]
 800884e:	4a90      	ldr	r2, [pc, #576]	; (8008a90 <main+0xa00>)
 8008850:	9205      	str	r2, [sp, #20]
 8008852:	4a8f      	ldr	r2, [pc, #572]	; (8008a90 <main+0xa00>)
 8008854:	9204      	str	r2, [sp, #16]
 8008856:	22ff      	movs	r2, #255	; 0xff
 8008858:	9203      	str	r2, [sp, #12]
 800885a:	2280      	movs	r2, #128	; 0x80
 800885c:	00d2      	lsls	r2, r2, #3
 800885e:	9202      	str	r2, [sp, #8]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2300      	movs	r3, #0
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2314      	movs	r3, #20
 8008868:	000a      	movs	r2, r1
 800886a:	213c      	movs	r1, #60	; 0x3c
 800886c:	2014      	movs	r0, #20
 800886e:	f7fa f9a5 	bl	8002bbc <FT800_drawSlider>

                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 slider & progress bar");
 8008872:	4a85      	ldr	r2, [pc, #532]	; (8008a88 <main+0x9f8>)
 8008874:	4b89      	ldr	r3, [pc, #548]	; (8008a9c <main+0xa0c>)
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	2380      	movs	r3, #128	; 0x80
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	0013      	movs	r3, r2
 8008880:	2212      	movs	r2, #18
 8008882:	2105      	movs	r1, #5
 8008884:	2005      	movs	r0, #5
 8008886:	f7f9 fd91 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 800888a:	23be      	movs	r3, #190	; 0xbe
 800888c:	33ff      	adds	r3, #255	; 0xff
 800888e:	0018      	movs	r0, r3
 8008890:	2381      	movs	r3, #129	; 0x81
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	4b7e      	ldr	r3, [pc, #504]	; (8008a90 <main+0xa00>)
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	4b7e      	ldr	r3, [pc, #504]	; (8008a94 <main+0xa04>)
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	2300      	movs	r3, #0
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	231c      	movs	r3, #28
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	23ff      	movs	r3, #255	; 0xff
 80088a6:	041b      	lsls	r3, r3, #16
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	231e      	movs	r3, #30
 80088ac:	221e      	movs	r2, #30
 80088ae:	2105      	movs	r1, #5
 80088b0:	f7f9 fe33 	bl	800251a <FT800_drawButton>

                FT800_endOfList();
 80088b4:	f7f9 f996 	bl	8001be4 <FT800_endOfList>
                break;
 80088b8:	f001 f817 	bl	80098ea <main+0x185a>
            case KNOBS:
                FT800_finishList();
 80088bc:	f7f9 f9b0 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 80088c0:	f7f9 f982 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(DARKGRAY);
 80088c4:	4b69      	ldr	r3, [pc, #420]	; (8008a6c <main+0x9dc>)
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7f9 fa04 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 80088cc:	2007      	movs	r0, #7
 80088ce:	f7f9 fa15 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 80088d2:	2000      	movs	r0, #0
 80088d4:	f7fa fbc7 	bl	8003066 <FT800_tagMask>

                FT800_drawDial(85, 110, 65, OPT_3D, dial_value, BLUE, YELLOW, DIAL);
 80088d8:	4b71      	ldr	r3, [pc, #452]	; (8008aa0 <main+0xa10>)
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	2204      	movs	r2, #4
 80088de:	9203      	str	r2, [sp, #12]
 80088e0:	4a66      	ldr	r2, [pc, #408]	; (8008a7c <main+0x9ec>)
 80088e2:	9202      	str	r2, [sp, #8]
 80088e4:	22ff      	movs	r2, #255	; 0xff
 80088e6:	9201      	str	r2, [sp, #4]
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	2300      	movs	r3, #0
 80088ec:	2241      	movs	r2, #65	; 0x41
 80088ee:	216e      	movs	r1, #110	; 0x6e
 80088f0:	2055      	movs	r0, #85	; 0x55
 80088f2:	f7fa fa6f 	bl	8002dd4 <FT800_drawDial>
                FT800_drawGauge(235, 110, 65, OPT_3D, 5, 5, dial_value>>6, 1024, ORANGE, DARKGRAY,0);
 80088f6:	4b6a      	ldr	r3, [pc, #424]	; (8008aa0 <main+0xa10>)
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	099b      	lsrs	r3, r3, #6
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2200      	movs	r2, #0
 8008900:	9206      	str	r2, [sp, #24]
 8008902:	4a5a      	ldr	r2, [pc, #360]	; (8008a6c <main+0x9dc>)
 8008904:	9205      	str	r2, [sp, #20]
 8008906:	4a60      	ldr	r2, [pc, #384]	; (8008a88 <main+0x9f8>)
 8008908:	9204      	str	r2, [sp, #16]
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	00d2      	lsls	r2, r2, #3
 800890e:	9203      	str	r2, [sp, #12]
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	2305      	movs	r3, #5
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	2305      	movs	r3, #5
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	2241      	movs	r2, #65	; 0x41
 800891e:	216e      	movs	r1, #110	; 0x6e
 8008920:	20eb      	movs	r0, #235	; 0xeb
 8008922:	f7fa fac6 	bl	8002eb2 <FT800_drawGauge>
                FT800_drawClock(385, 110, 65, RED, OPT_3D, hour, min, sec, ms, WHITE,0);
 8008926:	4b5f      	ldr	r3, [pc, #380]	; (8008aa4 <main+0xa14>)
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	4a5f      	ldr	r2, [pc, #380]	; (8008aa8 <main+0xa18>)
 800892c:	8812      	ldrh	r2, [r2, #0]
 800892e:	495f      	ldr	r1, [pc, #380]	; (8008aac <main+0xa1c>)
 8008930:	8809      	ldrh	r1, [r1, #0]
 8008932:	485f      	ldr	r0, [pc, #380]	; (8008ab0 <main+0xa20>)
 8008934:	8800      	ldrh	r0, [r0, #0]
 8008936:	24ff      	movs	r4, #255	; 0xff
 8008938:	0426      	lsls	r6, r4, #16
 800893a:	2482      	movs	r4, #130	; 0x82
 800893c:	34ff      	adds	r4, #255	; 0xff
 800893e:	0025      	movs	r5, r4
 8008940:	2400      	movs	r4, #0
 8008942:	9406      	str	r4, [sp, #24]
 8008944:	4c52      	ldr	r4, [pc, #328]	; (8008a90 <main+0xa00>)
 8008946:	9405      	str	r4, [sp, #20]
 8008948:	9004      	str	r0, [sp, #16]
 800894a:	9103      	str	r1, [sp, #12]
 800894c:	9202      	str	r2, [sp, #8]
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	2300      	movs	r3, #0
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	0033      	movs	r3, r6
 8008956:	2241      	movs	r2, #65	; 0x41
 8008958:	216e      	movs	r1, #110	; 0x6e
 800895a:	0028      	movs	r0, r5
 800895c:	f7f9 fe69 	bl	8002632 <FT800_drawClock>
                FT800_drawDecimalNumb(200, 210, 31, OPT_FLAT, dial_value>>6, YELLOW);
 8008960:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <main+0xa10>)
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	099b      	lsrs	r3, r3, #6
 8008966:	b29b      	uxth	r3, r3
 8008968:	0019      	movs	r1, r3
 800896a:	2380      	movs	r3, #128	; 0x80
 800896c:	005a      	lsls	r2, r3, #1
 800896e:	4b43      	ldr	r3, [pc, #268]	; (8008a7c <main+0x9ec>)
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	9100      	str	r1, [sp, #0]
 8008974:	0013      	movs	r3, r2
 8008976:	221f      	movs	r2, #31
 8008978:	21d2      	movs	r1, #210	; 0xd2
 800897a:	20c8      	movs	r0, #200	; 0xc8
 800897c:	f7f9 fd74 	bl	8002468 <FT800_drawDecimalNumb>
                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 dial, gauge & clock");
 8008980:	4a41      	ldr	r2, [pc, #260]	; (8008a88 <main+0x9f8>)
 8008982:	4b4c      	ldr	r3, [pc, #304]	; (8008ab4 <main+0xa24>)
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	2380      	movs	r3, #128	; 0x80
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	0013      	movs	r3, r2
 800898e:	2212      	movs	r2, #18
 8008990:	2105      	movs	r1, #5
 8008992:	2005      	movs	r0, #5
 8008994:	f7f9 fd0a 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8008998:	23be      	movs	r3, #190	; 0xbe
 800899a:	33ff      	adds	r3, #255	; 0xff
 800899c:	0018      	movs	r0, r3
 800899e:	2381      	movs	r3, #129	; 0x81
 80089a0:	9305      	str	r3, [sp, #20]
 80089a2:	4b3b      	ldr	r3, [pc, #236]	; (8008a90 <main+0xa00>)
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	4b3b      	ldr	r3, [pc, #236]	; (8008a94 <main+0xa04>)
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	231c      	movs	r3, #28
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	23ff      	movs	r3, #255	; 0xff
 80089b4:	041b      	lsls	r3, r3, #16
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	231e      	movs	r3, #30
 80089ba:	221e      	movs	r2, #30
 80089bc:	2105      	movs	r1, #5
 80089be:	f7f9 fdac 	bl	800251a <FT800_drawButton>

                FT800_endOfList();
 80089c2:	f7f9 f90f 	bl	8001be4 <FT800_endOfList>
                break;
 80089c6:	f000 ff90 	bl	80098ea <main+0x185a>
            case GRADIENT:
                FT800_finishList();
 80089ca:	f7f9 f929 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 80089ce:	f7f9 f8fb 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(DARKGRAY);
 80089d2:	4b26      	ldr	r3, [pc, #152]	; (8008a6c <main+0x9dc>)
 80089d4:	0018      	movs	r0, r3
 80089d6:	f7f9 f97d 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 80089da:	2007      	movs	r0, #7
 80089dc:	f7f9 f98e 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 80089e0:	2000      	movs	r0, #0
 80089e2:	f7fa fb40 	bl	8003066 <FT800_tagMask>

                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 Gradient and Toggle");
 80089e6:	4a28      	ldr	r2, [pc, #160]	; (8008a88 <main+0x9f8>)
 80089e8:	4b33      	ldr	r3, [pc, #204]	; (8008ab8 <main+0xa28>)
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	0013      	movs	r3, r2
 80089f4:	2212      	movs	r2, #18
 80089f6:	2105      	movs	r1, #5
 80089f8:	2005      	movs	r0, #5
 80089fa:	f7f9 fcd7 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 80089fe:	23be      	movs	r3, #190	; 0xbe
 8008a00:	33ff      	adds	r3, #255	; 0xff
 8008a02:	0018      	movs	r0, r3
 8008a04:	2381      	movs	r3, #129	; 0x81
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	4b21      	ldr	r3, [pc, #132]	; (8008a90 <main+0xa00>)
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	4b21      	ldr	r3, [pc, #132]	; (8008a94 <main+0xa04>)
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	231c      	movs	r3, #28
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	23ff      	movs	r3, #255	; 0xff
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	231e      	movs	r3, #30
 8008a20:	221e      	movs	r2, #30
 8008a22:	2105      	movs	r1, #5
 8008a24:	f7f9 fd79 	bl	800251a <FT800_drawButton>
                uint32_t c1, c2;
                if(toggle_value>32768)
 8008a28:	4b24      	ldr	r3, [pc, #144]	; (8008abc <main+0xa2c>)
 8008a2a:	881a      	ldrh	r2, [r3, #0]
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	021b      	lsls	r3, r3, #8
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d947      	bls.n	8008ac4 <main+0xa34>
                {
                    FT800_drawToggle(50, 90, 50, 28, OPT_3D, 65535, "on", DARKGRAY, ORANGE, BLACK,TOGGLE);
 8008a34:	2305      	movs	r3, #5
 8008a36:	9306      	str	r3, [sp, #24]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9305      	str	r3, [sp, #20]
 8008a3c:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <main+0x9f8>)
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <main+0x9dc>)
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <main+0xa30>)
 8008a46:	9302      	str	r3, [sp, #8]
 8008a48:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <main+0x9f0>)
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	231c      	movs	r3, #28
 8008a52:	2232      	movs	r2, #50	; 0x32
 8008a54:	215a      	movs	r1, #90	; 0x5a
 8008a56:	2032      	movs	r0, #50	; 0x32
 8008a58:	f7fa f823 	bl	8002aa2 <FT800_drawToggle>
                    c1=RED;
 8008a5c:	23ff      	movs	r3, #255	; 0xff
 8008a5e:	041b      	lsls	r3, r3, #16
 8008a60:	637b      	str	r3, [r7, #52]	; 0x34
                    c2=GREEN;
 8008a62:	23ff      	movs	r3, #255	; 0xff
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	633b      	str	r3, [r7, #48]	; 0x30
 8008a68:	e046      	b.n	8008af8 <main+0xa68>
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	00202020 	.word	0x00202020
 8008a70:	0800ae7c 	.word	0x0800ae7c
 8008a74:	0800ae90 	.word	0x0800ae90
 8008a78:	00808080 	.word	0x00808080
 8008a7c:	00ffff00 	.word	0x00ffff00
 8008a80:	0000ffff 	.word	0x0000ffff
 8008a84:	00ff00ff 	.word	0x00ff00ff
 8008a88:	00ff9500 	.word	0x00ff9500
 8008a8c:	0800acd4 	.word	0x0800acd4
 8008a90:	00ffffff 	.word	0x00ffffff
 8008a94:	0800ad00 	.word	0x0800ad00
 8008a98:	2000000a 	.word	0x2000000a
 8008a9c:	0800ad04 	.word	0x0800ad04
 8008aa0:	20000362 	.word	0x20000362
 8008aa4:	20000012 	.word	0x20000012
 8008aa8:	20000010 	.word	0x20000010
 8008aac:	20000368 	.word	0x20000368
 8008ab0:	20000366 	.word	0x20000366
 8008ab4:	0800ad20 	.word	0x0800ad20
 8008ab8:	0800ad3c 	.word	0x0800ad3c
 8008abc:	20000364 	.word	0x20000364
 8008ac0:	0800ad58 	.word	0x0800ad58
                }
                else
                {
                    FT800_drawToggle(50, 90, 50, 28, OPT_3D, 0, "off", DARKGRAY, ORANGE, BLACK,TOGGLE);
 8008ac4:	2305      	movs	r3, #5
 8008ac6:	9306      	str	r3, [sp, #24]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	4bc0      	ldr	r3, [pc, #768]	; (8008dd0 <main+0xd40>)
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	4bc0      	ldr	r3, [pc, #768]	; (8008dd4 <main+0xd44>)
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	4bc0      	ldr	r3, [pc, #768]	; (8008dd8 <main+0xd48>)
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	2300      	movs	r3, #0
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	231c      	movs	r3, #28
 8008ae2:	2232      	movs	r2, #50	; 0x32
 8008ae4:	215a      	movs	r1, #90	; 0x5a
 8008ae6:	2032      	movs	r0, #50	; 0x32
 8008ae8:	f7f9 ffdb 	bl	8002aa2 <FT800_drawToggle>
                    c1=GREEN;
 8008aec:	23ff      	movs	r3, #255	; 0xff
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
                    c2=RED;
 8008af2:	23ff      	movs	r3, #255	; 0xff
 8008af4:	041b      	lsls	r3, r3, #16
 8008af6:	633b      	str	r3, [r7, #48]	; 0x30
                }
                FT800_drawScissorXY(30, 150);
 8008af8:	2196      	movs	r1, #150	; 0x96
 8008afa:	201e      	movs	r0, #30
 8008afc:	f7f9 fe6a 	bl	80027d4 <FT800_drawScissorXY>
                FT800_drawScissorSize(410, 90);
 8008b00:	23cd      	movs	r3, #205	; 0xcd
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	215a      	movs	r1, #90	; 0x5a
 8008b06:	0018      	movs	r0, r3
 8008b08:	f7f9 fe8e 	bl	8002828 <FT800_drawScissorSize>
                FT800_drawGradient(30, 150, c1, 440, 150, c2);
 8008b0c:	23dc      	movs	r3, #220	; 0xdc
 8008b0e:	0059      	lsls	r1, r3, #1
 8008b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	2396      	movs	r3, #150	; 0x96
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	000b      	movs	r3, r1
 8008b1c:	2196      	movs	r1, #150	; 0x96
 8008b1e:	201e      	movs	r0, #30
 8008b20:	f7f9 fe11 	bl	8002746 <FT800_drawGradient>

                FT800_endOfList();
 8008b24:	f7f9 f85e 	bl	8001be4 <FT800_endOfList>
                break;
 8008b28:	f000 fedf 	bl	80098ea <main+0x185a>
            case KEYS:
                FT800_finishList();
 8008b2c:	f7f9 f878 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 8008b30:	f7f9 f84a 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(DARKGRAY);
 8008b34:	4ba7      	ldr	r3, [pc, #668]	; (8008dd4 <main+0xd44>)
 8008b36:	0018      	movs	r0, r3
 8008b38:	f7f9 f8cc 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 8008b3c:	2007      	movs	r0, #7
 8008b3e:	f7f9 f8dd 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 8008b42:	2000      	movs	r0, #0
 8008b44:	f7fa fa8f 	bl	8003066 <FT800_tagMask>

                key_value=FT800_Read8(REG_TOUCH_TAG);
 8008b48:	4ba4      	ldr	r3, [pc, #656]	; (8008ddc <main+0xd4c>)
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7f8 fe52 	bl	80017f4 <FT800_Read8>
 8008b50:	0003      	movs	r3, r0
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	4ba2      	ldr	r3, [pc, #648]	; (8008de0 <main+0xd50>)
 8008b56:	801a      	strh	r2, [r3, #0]
                FT800_drawKeys(30, 150, 400, 50, LIGHTGRAY, 25, key_value, "ABCDEFGH", BLUE, KEYS);
 8008b58:	4ba1      	ldr	r3, [pc, #644]	; (8008de0 <main+0xd50>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	22c8      	movs	r2, #200	; 0xc8
 8008b5e:	0051      	lsls	r1, r2, #1
 8008b60:	2286      	movs	r2, #134	; 0x86
 8008b62:	9205      	str	r2, [sp, #20]
 8008b64:	22ff      	movs	r2, #255	; 0xff
 8008b66:	9204      	str	r2, [sp, #16]
 8008b68:	4a9e      	ldr	r2, [pc, #632]	; (8008de4 <main+0xd54>)
 8008b6a:	9203      	str	r2, [sp, #12]
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	2319      	movs	r3, #25
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	4b9d      	ldr	r3, [pc, #628]	; (8008de8 <main+0xd58>)
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	2332      	movs	r3, #50	; 0x32
 8008b78:	000a      	movs	r2, r1
 8008b7a:	2196      	movs	r1, #150	; 0x96
 8008b7c:	201e      	movs	r0, #30
 8008b7e:	f7f9 fe7d 	bl	800287c <FT800_drawKeys>
                FT800_drawKeys(55, 202, 350, 50, LIGHTGRAY, 25, key_value, "1234567", BLUE, KEYS);
 8008b82:	4b97      	ldr	r3, [pc, #604]	; (8008de0 <main+0xd50>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	22af      	movs	r2, #175	; 0xaf
 8008b88:	0051      	lsls	r1, r2, #1
 8008b8a:	2286      	movs	r2, #134	; 0x86
 8008b8c:	9205      	str	r2, [sp, #20]
 8008b8e:	22ff      	movs	r2, #255	; 0xff
 8008b90:	9204      	str	r2, [sp, #16]
 8008b92:	4a96      	ldr	r2, [pc, #600]	; (8008dec <main+0xd5c>)
 8008b94:	9203      	str	r2, [sp, #12]
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	2319      	movs	r3, #25
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	4b92      	ldr	r3, [pc, #584]	; (8008de8 <main+0xd58>)
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2332      	movs	r3, #50	; 0x32
 8008ba2:	000a      	movs	r2, r1
 8008ba4:	21ca      	movs	r1, #202	; 0xca
 8008ba6:	2037      	movs	r0, #55	; 0x37
 8008ba8:	f7f9 fe68 	bl	800287c <FT800_drawKeys>
                if(key_value)FT800_drawChar(220,50,31,ORANGE,key_value);
 8008bac:	4b8c      	ldr	r3, [pc, #560]	; (8008de0 <main+0xd50>)
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <main+0xb3a>
 8008bb4:	4b8a      	ldr	r3, [pc, #552]	; (8008de0 <main+0xd50>)
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	4a85      	ldr	r2, [pc, #532]	; (8008dd0 <main+0xd40>)
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	0013      	movs	r3, r2
 8008bc0:	221f      	movs	r2, #31
 8008bc2:	2132      	movs	r1, #50	; 0x32
 8008bc4:	20dc      	movs	r0, #220	; 0xdc
 8008bc6:	f7f9 fba5 	bl	8002314 <FT800_drawChar>
                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 keys");
 8008bca:	4a81      	ldr	r2, [pc, #516]	; (8008dd0 <main+0xd40>)
 8008bcc:	4b88      	ldr	r3, [pc, #544]	; (8008df0 <main+0xd60>)
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	0013      	movs	r3, r2
 8008bd8:	2212      	movs	r2, #18
 8008bda:	2105      	movs	r1, #5
 8008bdc:	2005      	movs	r0, #5
 8008bde:	f7f9 fbe5 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8008be2:	23be      	movs	r3, #190	; 0xbe
 8008be4:	33ff      	adds	r3, #255	; 0xff
 8008be6:	0018      	movs	r0, r3
 8008be8:	2381      	movs	r3, #129	; 0x81
 8008bea:	9305      	str	r3, [sp, #20]
 8008bec:	4b81      	ldr	r3, [pc, #516]	; (8008df4 <main+0xd64>)
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	4b81      	ldr	r3, [pc, #516]	; (8008df8 <main+0xd68>)
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9302      	str	r3, [sp, #8]
 8008bf8:	231c      	movs	r3, #28
 8008bfa:	9301      	str	r3, [sp, #4]
 8008bfc:	23ff      	movs	r3, #255	; 0xff
 8008bfe:	041b      	lsls	r3, r3, #16
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	231e      	movs	r3, #30
 8008c04:	221e      	movs	r2, #30
 8008c06:	2105      	movs	r1, #5
 8008c08:	f7f9 fc87 	bl	800251a <FT800_drawButton>

                FT800_endOfList();
 8008c0c:	f7f8 ffea 	bl	8001be4 <FT800_endOfList>
                break;
 8008c10:	f000 fe6b 	bl	80098ea <main+0x185a>
            case SOUND:
                FT800_finishList();
 8008c14:	f7f9 f804 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 8008c18:	f7f8 ffd6 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(DARKGRAY);
 8008c1c:	4b6d      	ldr	r3, [pc, #436]	; (8008dd4 <main+0xd44>)
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7f9 f858 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 8008c24:	2007      	movs	r0, #7
 8008c26:	f7f9 f869 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	f7fa fa1b 	bl	8003066 <FT800_tagMask>
                mute=1;
 8008c30:	4b72      	ldr	r3, [pc, #456]	; (8008dfc <main+0xd6c>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]

                prev_key_value=key_value;
 8008c36:	4b6a      	ldr	r3, [pc, #424]	; (8008de0 <main+0xd50>)
 8008c38:	881a      	ldrh	r2, [r3, #0]
 8008c3a:	4b71      	ldr	r3, [pc, #452]	; (8008e00 <main+0xd70>)
 8008c3c:	801a      	strh	r2, [r3, #0]
                key_value=FT800_Read8(REG_TOUCH_TAG);
 8008c3e:	4b67      	ldr	r3, [pc, #412]	; (8008ddc <main+0xd4c>)
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7f8 fdd7 	bl	80017f4 <FT800_Read8>
 8008c46:	0003      	movs	r3, r0
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	4b65      	ldr	r3, [pc, #404]	; (8008de0 <main+0xd50>)
 8008c4c:	801a      	strh	r2, [r3, #0]

                FT800_drawKeys(30, 170, 410, 100, WHITE, 25, key_value, "CDEFGAB", BLACK, NOTES);
 8008c4e:	4b64      	ldr	r3, [pc, #400]	; (8008de0 <main+0xd50>)
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	22cd      	movs	r2, #205	; 0xcd
 8008c54:	0051      	lsls	r1, r2, #1
 8008c56:	2207      	movs	r2, #7
 8008c58:	9205      	str	r2, [sp, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	9204      	str	r2, [sp, #16]
 8008c5e:	4a69      	ldr	r2, [pc, #420]	; (8008e04 <main+0xd74>)
 8008c60:	9203      	str	r2, [sp, #12]
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	2319      	movs	r3, #25
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	4b62      	ldr	r3, [pc, #392]	; (8008df4 <main+0xd64>)
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2364      	movs	r3, #100	; 0x64
 8008c6e:	000a      	movs	r2, r1
 8008c70:	21aa      	movs	r1, #170	; 0xaa
 8008c72:	201e      	movs	r0, #30
 8008c74:	f7f9 fe02 	bl	800287c <FT800_drawKeys>
                FT800_drawKeys(30+30, 130, 110, 60, BLACK, 25, key_value, "cd", WHITE, NOTES);
 8008c78:	4b59      	ldr	r3, [pc, #356]	; (8008de0 <main+0xd50>)
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	9205      	str	r2, [sp, #20]
 8008c80:	4a5c      	ldr	r2, [pc, #368]	; (8008df4 <main+0xd64>)
 8008c82:	9204      	str	r2, [sp, #16]
 8008c84:	4a60      	ldr	r2, [pc, #384]	; (8008e08 <main+0xd78>)
 8008c86:	9203      	str	r2, [sp, #12]
 8008c88:	9302      	str	r3, [sp, #8]
 8008c8a:	2319      	movs	r3, #25
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	233c      	movs	r3, #60	; 0x3c
 8008c94:	226e      	movs	r2, #110	; 0x6e
 8008c96:	2182      	movs	r1, #130	; 0x82
 8008c98:	203c      	movs	r0, #60	; 0x3c
 8008c9a:	f7f9 fdef 	bl	800287c <FT800_drawKeys>
                FT800_drawKeys(30+180+30, 130, 156, 60, BLACK, 25, key_value, "fga", WHITE, NOTES);
 8008c9e:	4b50      	ldr	r3, [pc, #320]	; (8008de0 <main+0xd50>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	9205      	str	r2, [sp, #20]
 8008ca6:	4a53      	ldr	r2, [pc, #332]	; (8008df4 <main+0xd64>)
 8008ca8:	9204      	str	r2, [sp, #16]
 8008caa:	4a58      	ldr	r2, [pc, #352]	; (8008e0c <main+0xd7c>)
 8008cac:	9203      	str	r2, [sp, #12]
 8008cae:	9302      	str	r3, [sp, #8]
 8008cb0:	2319      	movs	r3, #25
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	233c      	movs	r3, #60	; 0x3c
 8008cba:	229c      	movs	r2, #156	; 0x9c
 8008cbc:	2182      	movs	r1, #130	; 0x82
 8008cbe:	20f0      	movs	r0, #240	; 0xf0
 8008cc0:	f7f9 fddc 	bl	800287c <FT800_drawKeys>
                if(key_value)FT800_drawChar(350,30,31,ORANGE,key_value);
 8008cc4:	4b46      	ldr	r3, [pc, #280]	; (8008de0 <main+0xd50>)
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <main+0xc54>
 8008ccc:	4b44      	ldr	r3, [pc, #272]	; (8008de0 <main+0xd50>)
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	493f      	ldr	r1, [pc, #252]	; (8008dd0 <main+0xd40>)
 8008cd4:	22af      	movs	r2, #175	; 0xaf
 8008cd6:	0050      	lsls	r0, r2, #1
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	000b      	movs	r3, r1
 8008cdc:	221f      	movs	r2, #31
 8008cde:	211e      	movs	r1, #30
 8008ce0:	f7f9 fb18 	bl	8002314 <FT800_drawChar>
                FT800_drawText(40, 60, 18, ORANGE, OPT_FLAT, "Volume");
 8008ce4:	4a3a      	ldr	r2, [pc, #232]	; (8008dd0 <main+0xd40>)
 8008ce6:	4b4a      	ldr	r3, [pc, #296]	; (8008e10 <main+0xd80>)
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	2380      	movs	r3, #128	; 0x80
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	0013      	movs	r3, r2
 8008cf2:	2212      	movs	r2, #18
 8008cf4:	213c      	movs	r1, #60	; 0x3c
 8008cf6:	2028      	movs	r0, #40	; 0x28
 8008cf8:	f7f9 fb58 	bl	80023ac <FT800_drawText>
                FT800_drawSlider(40, 90, 390, 10, OPT_3D, slider_value, 1024, ORANGE, DARKGRAY, WHITE, SLIDER1);
 8008cfc:	4b45      	ldr	r3, [pc, #276]	; (8008e14 <main+0xd84>)
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	22c3      	movs	r2, #195	; 0xc3
 8008d02:	0051      	lsls	r1, r2, #1
 8008d04:	2208      	movs	r2, #8
 8008d06:	9206      	str	r2, [sp, #24]
 8008d08:	4a3a      	ldr	r2, [pc, #232]	; (8008df4 <main+0xd64>)
 8008d0a:	9205      	str	r2, [sp, #20]
 8008d0c:	4a31      	ldr	r2, [pc, #196]	; (8008dd4 <main+0xd44>)
 8008d0e:	9204      	str	r2, [sp, #16]
 8008d10:	4a2f      	ldr	r2, [pc, #188]	; (8008dd0 <main+0xd40>)
 8008d12:	9203      	str	r2, [sp, #12]
 8008d14:	2280      	movs	r2, #128	; 0x80
 8008d16:	00d2      	lsls	r2, r2, #3
 8008d18:	9202      	str	r2, [sp, #8]
 8008d1a:	9301      	str	r3, [sp, #4]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	230a      	movs	r3, #10
 8008d22:	000a      	movs	r2, r1
 8008d24:	215a      	movs	r1, #90	; 0x5a
 8008d26:	2028      	movs	r0, #40	; 0x28
 8008d28:	f7f9 ff48 	bl	8002bbc <FT800_drawSlider>


                FT800_setSoundVolume(slider_value>>2);
 8008d2c:	4b39      	ldr	r3, [pc, #228]	; (8008e14 <main+0xd84>)
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	089b      	lsrs	r3, r3, #2
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7f8 fb84 	bl	8001444 <FT800_setSoundVolume>
                if(key_value!=prev_key_value)
 8008d3c:	4b28      	ldr	r3, [pc, #160]	; (8008de0 <main+0xd50>)
 8008d3e:	881a      	ldrh	r2, [r3, #0]
 8008d40:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <main+0xd70>)
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d01d      	beq.n	8008d84 <main+0xcf4>
                {

                    if(key_value)
 8008d48:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <main+0xd50>)
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <main+0xcd8>
                        FT800_setSoundEffect(getNote(key_value),0x02);
 8008d50:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <main+0xd50>)
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	0018      	movs	r0, r3
 8008d58:	f7ff f928 	bl	8007fac <getNote>
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	2102      	movs	r1, #2
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7f8 fb83 	bl	800146c <FT800_setSoundEffect>
 8008d66:	e00a      	b.n	8008d7e <main+0xcee>
                    else
                        FT800_setSoundEffect(getNote(key_value),0x00);
 8008d68:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <main+0xd50>)
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7ff f91c 	bl	8007fac <getNote>
 8008d74:	0003      	movs	r3, r0
 8008d76:	2100      	movs	r1, #0
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f7f8 fb77 	bl	800146c <FT800_setSoundEffect>
                    FT800_playSound(1);
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f7f8 fb92 	bl	80014a8 <FT800_playSound>

                }
                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 sound synthesizer");
 8008d84:	4a12      	ldr	r2, [pc, #72]	; (8008dd0 <main+0xd40>)
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <main+0xd88>)
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	2380      	movs	r3, #128	; 0x80
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	0013      	movs	r3, r2
 8008d92:	2212      	movs	r2, #18
 8008d94:	2105      	movs	r1, #5
 8008d96:	2005      	movs	r0, #5
 8008d98:	f7f9 fb08 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8008d9c:	23be      	movs	r3, #190	; 0xbe
 8008d9e:	33ff      	adds	r3, #255	; 0xff
 8008da0:	0018      	movs	r0, r3
 8008da2:	2381      	movs	r3, #129	; 0x81
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <main+0xd64>)
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <main+0xd68>)
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	231c      	movs	r3, #28
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	23ff      	movs	r3, #255	; 0xff
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	231e      	movs	r3, #30
 8008dbe:	221e      	movs	r2, #30
 8008dc0:	2105      	movs	r1, #5
 8008dc2:	f7f9 fbaa 	bl	800251a <FT800_drawButton>


                FT800_endOfList();
 8008dc6:	f7f8 ff0d 	bl	8001be4 <FT800_endOfList>
                break;
 8008dca:	f000 fd8e 	bl	80098ea <main+0x185a>
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	00ff9500 	.word	0x00ff9500
 8008dd4:	00202020 	.word	0x00202020
 8008dd8:	0800ad5c 	.word	0x0800ad5c
 8008ddc:	00102518 	.word	0x00102518
 8008de0:	20001290 	.word	0x20001290
 8008de4:	0800ad60 	.word	0x0800ad60
 8008de8:	00808080 	.word	0x00808080
 8008dec:	0800ad6c 	.word	0x0800ad6c
 8008df0:	0800ad74 	.word	0x0800ad74
 8008df4:	00ffffff 	.word	0x00ffffff
 8008df8:	0800ad00 	.word	0x0800ad00
 8008dfc:	2000036a 	.word	0x2000036a
 8008e00:	200012ce 	.word	0x200012ce
 8008e04:	0800ad80 	.word	0x0800ad80
 8008e08:	0800ad88 	.word	0x0800ad88
 8008e0c:	0800ad8c 	.word	0x0800ad8c
 8008e10:	0800ad90 	.word	0x0800ad90
 8008e14:	2000000a 	.word	0x2000000a
 8008e18:	0800ad98 	.word	0x0800ad98
            case BMP:
                if((previous_menu==MAIN_MENU)||new_file)
 8008e1c:	4b64      	ldr	r3, [pc, #400]	; (8008fb0 <main+0xf20>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b81      	cmp	r3, #129	; 0x81
 8008e22:	d003      	beq.n	8008e2c <main+0xd9c>
 8008e24:	4b63      	ldr	r3, [pc, #396]	; (8008fb4 <main+0xf24>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d048      	beq.n	8008ebe <main+0xe2e>
                {
                    new_file=0;
 8008e2c:	4b61      	ldr	r3, [pc, #388]	; (8008fb4 <main+0xf24>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	701a      	strb	r2, [r3, #0]
                    FT800_finishList();
 8008e32:	f7f8 fef5 	bl	8001c20 <FT800_finishList>
                    FT800_startNewList();
 8008e36:	f7f8 fec7 	bl	8001bc8 <FT800_startNewList>
                    FT800_setBackgroundColor(BLACK);
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f7f8 ff4a 	bl	8001cd4 <FT800_setBackgroundColor>
                    FT800_clear(CLEAR_ALL);
 8008e40:	2007      	movs	r0, #7
 8008e42:	f7f8 ff5b 	bl	8001cfc <FT800_clear>
                    FT800_drawText(205, 20, 23, WHITE, OPT_FLAT, "Loading...");
 8008e46:	4a5c      	ldr	r2, [pc, #368]	; (8008fb8 <main+0xf28>)
 8008e48:	4b5c      	ldr	r3, [pc, #368]	; (8008fbc <main+0xf2c>)
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	2380      	movs	r3, #128	; 0x80
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	0013      	movs	r3, r2
 8008e54:	2217      	movs	r2, #23
 8008e56:	2114      	movs	r1, #20
 8008e58:	20cd      	movs	r0, #205	; 0xcd
 8008e5a:	f7f9 faa7 	bl	80023ac <FT800_drawText>
                    FT800_drawAnimSpinner(240,136,0,1);
 8008e5e:	2301      	movs	r3, #1
 8008e60:	2200      	movs	r2, #0
 8008e62:	2188      	movs	r1, #136	; 0x88
 8008e64:	20f0      	movs	r0, #240	; 0xf0
 8008e66:	f7fa f94c 	bl	8003102 <FT800_drawAnimSpinner>
                    FT800_endOfList();
 8008e6a:	f7f8 febb 	bl	8001be4 <FT800_endOfList>
                    sprintf((char*)path, "%s/%s",bmp_folder, bmps[bmp_num]);
 8008e6e:	4b54      	ldr	r3, [pc, #336]	; (8008fc0 <main+0xf30>)
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	4b54      	ldr	r3, [pc, #336]	; (8008fc4 <main+0xf34>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	001a      	movs	r2, r3
 8008e78:	4b53      	ldr	r3, [pc, #332]	; (8008fc8 <main+0xf38>)
 8008e7a:	0092      	lsls	r2, r2, #2
 8008e7c:	58d3      	ldr	r3, [r2, r3]
 8008e7e:	4953      	ldr	r1, [pc, #332]	; (8008fcc <main+0xf3c>)
 8008e80:	4853      	ldr	r0, [pc, #332]	; (8008fd0 <main+0xf40>)
 8008e82:	0022      	movs	r2, r4
 8008e84:	f001 fa06 	bl	800a294 <siprintf>
                    FT800_loadBMPfromSD(0,path , &img_width, &img_height, &img_bytes);
 8008e88:	4852      	ldr	r0, [pc, #328]	; (8008fd4 <main+0xf44>)
 8008e8a:	4a53      	ldr	r2, [pc, #332]	; (8008fd8 <main+0xf48>)
 8008e8c:	4950      	ldr	r1, [pc, #320]	; (8008fd0 <main+0xf40>)
 8008e8e:	4b53      	ldr	r3, [pc, #332]	; (8008fdc <main+0xf4c>)
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	0003      	movs	r3, r0
 8008e94:	2000      	movs	r0, #0
 8008e96:	f7fa fe39 	bl	8003b0c <FT800_loadBMPfromSD>
                    strcpy(wallpaper_folder,bmp_folder);
 8008e9a:	4b49      	ldr	r3, [pc, #292]	; (8008fc0 <main+0xf30>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b50      	ldr	r3, [pc, #320]	; (8008fe0 <main+0xf50>)
 8008ea0:	0011      	movs	r1, r2
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f001 fa16 	bl	800a2d4 <strcpy>
                    strcpy(wallpaper,bmps[bmp_num]);
 8008ea8:	4b46      	ldr	r3, [pc, #280]	; (8008fc4 <main+0xf34>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	001a      	movs	r2, r3
 8008eae:	4b46      	ldr	r3, [pc, #280]	; (8008fc8 <main+0xf38>)
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	58d2      	ldr	r2, [r2, r3]
 8008eb4:	4b4b      	ldr	r3, [pc, #300]	; (8008fe4 <main+0xf54>)
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f001 fa0b 	bl	800a2d4 <strcpy>
                }
                previous_menu=BMP;
 8008ebe:	4b3c      	ldr	r3, [pc, #240]	; (8008fb0 <main+0xf20>)
 8008ec0:	2288      	movs	r2, #136	; 0x88
 8008ec2:	701a      	strb	r2, [r3, #0]

                FT800_finishList();
 8008ec4:	f7f8 feac 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 8008ec8:	f7f8 fe7e 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(BLACK);
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f7f8 ff01 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 8008ed2:	2007      	movs	r0, #7
 8008ed4:	f7f8 ff12 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f7fa f8c4 	bl	8003066 <FT800_tagMask>

                FT800_bitmapSource(0);
 8008ede:	2000      	movs	r0, #0
 8008ee0:	f7fa faa0 	bl	8003424 <FT800_bitmapSource>
                FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 8008ee4:	4b3d      	ldr	r3, [pc, #244]	; (8008fdc <main+0xf4c>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4a3b      	ldr	r2, [pc, #236]	; (8008fd8 <main+0xf48>)
 8008eec:	8812      	ldrh	r2, [r2, #0]
 8008eee:	4353      	muls	r3, r2
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	b219      	sxth	r1, r3
 8008ef4:	4b37      	ldr	r3, [pc, #220]	; (8008fd4 <main+0xf44>)
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b21b      	sxth	r3, r3
 8008efa:	001a      	movs	r2, r3
 8008efc:	2007      	movs	r0, #7
 8008efe:	f7fa fa05 	bl	800330c <FT800_bitmapLayout>
                FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width, img_height);
 8008f02:	4b35      	ldr	r3, [pc, #212]	; (8008fd8 <main+0xf48>)
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	b21a      	sxth	r2, r3
 8008f08:	4b32      	ldr	r3, [pc, #200]	; (8008fd4 <main+0xf44>)
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	b21b      	sxth	r3, r3
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	0013      	movs	r3, r2
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	2000      	movs	r0, #0
 8008f18:	f7fa fa36 	bl	8003388 <FT800_bitmapSize>
                FT800_bitmapBegin();
 8008f1c:	f7fa f9e8 	bl	80032f0 <FT800_bitmapBegin>
                FT800_Vertex2II(0,0,0,0);
 8008f20:	2300      	movs	r3, #0
 8008f22:	2200      	movs	r2, #0
 8008f24:	2100      	movs	r1, #0
 8008f26:	2000      	movs	r0, #0
 8008f28:	f7f8 ff86 	bl	8001e38 <FT800_Vertex2II>

                FT800_setColorA(100);
 8008f2c:	2064      	movs	r0, #100	; 0x64
 8008f2e:	f7f8 fefd 	bl	8001d2c <FT800_setColorA>
                FT800_drawButton(445,5,30,30,LIGHTGRAY,28,OPT_3D,"X",BLACK, MAIN_MENU);
 8008f32:	23be      	movs	r3, #190	; 0xbe
 8008f34:	33ff      	adds	r3, #255	; 0xff
 8008f36:	0018      	movs	r0, r3
 8008f38:	2381      	movs	r3, #129	; 0x81
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	4b29      	ldr	r3, [pc, #164]	; (8008fe8 <main+0xf58>)
 8008f42:	9303      	str	r3, [sp, #12]
 8008f44:	2300      	movs	r3, #0
 8008f46:	9302      	str	r3, [sp, #8]
 8008f48:	231c      	movs	r3, #28
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	4b27      	ldr	r3, [pc, #156]	; (8008fec <main+0xf5c>)
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	231e      	movs	r3, #30
 8008f52:	221e      	movs	r2, #30
 8008f54:	2105      	movs	r1, #5
 8008f56:	f7f9 fae0 	bl	800251a <FT800_drawButton>
                FT800_drawButton(190,230,40,40,LIGHTGRAY,30,OPT_3D,"<",BLACK, BACKWARD);
 8008f5a:	2309      	movs	r3, #9
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	4b23      	ldr	r3, [pc, #140]	; (8008ff0 <main+0xf60>)
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	2300      	movs	r3, #0
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	231e      	movs	r3, #30
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	4b1f      	ldr	r3, [pc, #124]	; (8008fec <main+0xf5c>)
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	2328      	movs	r3, #40	; 0x28
 8008f74:	2228      	movs	r2, #40	; 0x28
 8008f76:	21e6      	movs	r1, #230	; 0xe6
 8008f78:	20be      	movs	r0, #190	; 0xbe
 8008f7a:	f7f9 face 	bl	800251a <FT800_drawButton>
                FT800_drawButton(250,230,40,40,LIGHTGRAY,30,OPT_3D,">",BLACK, FORWARD);
 8008f7e:	230a      	movs	r3, #10
 8008f80:	9305      	str	r3, [sp, #20]
 8008f82:	2300      	movs	r3, #0
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <main+0xf64>)
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9302      	str	r3, [sp, #8]
 8008f8e:	231e      	movs	r3, #30
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	4b16      	ldr	r3, [pc, #88]	; (8008fec <main+0xf5c>)
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	2328      	movs	r3, #40	; 0x28
 8008f98:	2228      	movs	r2, #40	; 0x28
 8008f9a:	21e6      	movs	r1, #230	; 0xe6
 8008f9c:	20fa      	movs	r0, #250	; 0xfa
 8008f9e:	f7f9 fabc 	bl	800251a <FT800_drawButton>
                FT800_setColorA(255);
 8008fa2:	20ff      	movs	r0, #255	; 0xff
 8008fa4:	f7f8 fec2 	bl	8001d2c <FT800_setColorA>

                FT800_endOfList();
 8008fa8:	f7f8 fe1c 	bl	8001be4 <FT800_endOfList>
                break;
 8008fac:	f000 fc9d 	bl	80098ea <main+0x185a>
 8008fb0:	20000009 	.word	0x20000009
 8008fb4:	20000385 	.word	0x20000385
 8008fb8:	00ffffff 	.word	0x00ffffff
 8008fbc:	0800adb0 	.word	0x0800adb0
 8008fc0:	20000014 	.word	0x20000014
 8008fc4:	2000002c 	.word	0x2000002c
 8008fc8:	20000018 	.word	0x20000018
 8008fcc:	0800ac78 	.word	0x0800ac78
 8008fd0:	2000036c 	.word	0x2000036c
 8008fd4:	200012b4 	.word	0x200012b4
 8008fd8:	2000133c 	.word	0x2000133c
 8008fdc:	2000129c 	.word	0x2000129c
 8008fe0:	200012b8 	.word	0x200012b8
 8008fe4:	200012a0 	.word	0x200012a0
 8008fe8:	0800ad00 	.word	0x0800ad00
 8008fec:	00808080 	.word	0x00808080
 8008ff0:	0800adbc 	.word	0x0800adbc
 8008ff4:	0800adc0 	.word	0x0800adc0
            case WAV:
                if(previous_menu==MAIN_MENU)
 8008ff8:	4bad      	ldr	r3, [pc, #692]	; (80092b0 <main+0x1220>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b81      	cmp	r3, #129	; 0x81
 8008ffe:	d12c      	bne.n	800905a <main+0xfca>
                {
                    FT800_finishList();
 8009000:	f7f8 fe0e 	bl	8001c20 <FT800_finishList>
                    FT800_startNewList();
 8009004:	f7f8 fde0 	bl	8001bc8 <FT800_startNewList>
                    FT800_setBackgroundColor(BLACK);
 8009008:	2000      	movs	r0, #0
 800900a:	f7f8 fe63 	bl	8001cd4 <FT800_setBackgroundColor>
                    FT800_clear(CLEAR_ALL);
 800900e:	2007      	movs	r0, #7
 8009010:	f7f8 fe74 	bl	8001cfc <FT800_clear>
                    FT800_endOfList();
 8009014:	f7f8 fde6 	bl	8001be4 <FT800_endOfList>
                    sprintf((char*)path, "%s/%s",wav_folder, wavs[wav_num]);
 8009018:	4ba6      	ldr	r3, [pc, #664]	; (80092b4 <main+0x1224>)
 800901a:	681c      	ldr	r4, [r3, #0]
 800901c:	4ba6      	ldr	r3, [pc, #664]	; (80092b8 <main+0x1228>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	001a      	movs	r2, r3
 8009022:	4ba6      	ldr	r3, [pc, #664]	; (80092bc <main+0x122c>)
 8009024:	0092      	lsls	r2, r2, #2
 8009026:	58d3      	ldr	r3, [r2, r3]
 8009028:	49a5      	ldr	r1, [pc, #660]	; (80092c0 <main+0x1230>)
 800902a:	48a6      	ldr	r0, [pc, #664]	; (80092c4 <main+0x1234>)
 800902c:	0022      	movs	r2, r4
 800902e:	f001 f931 	bl	800a294 <siprintf>
                    FT800_loadWAVfromSD(0, path, &wav_format, &wav_channels, &wav_sample_rate, &wav_bpc, &wav_size);
 8009032:	48a5      	ldr	r0, [pc, #660]	; (80092c8 <main+0x1238>)
 8009034:	4aa5      	ldr	r2, [pc, #660]	; (80092cc <main+0x123c>)
 8009036:	49a3      	ldr	r1, [pc, #652]	; (80092c4 <main+0x1234>)
 8009038:	4ba5      	ldr	r3, [pc, #660]	; (80092d0 <main+0x1240>)
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	4ba5      	ldr	r3, [pc, #660]	; (80092d4 <main+0x1244>)
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	4ba5      	ldr	r3, [pc, #660]	; (80092d8 <main+0x1248>)
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	0003      	movs	r3, r0
 8009046:	2000      	movs	r0, #0
 8009048:	f7fa fb06 	bl	8003658 <FT800_loadWAVfromSD>
                    FT800_setPlaybackVolume(128);
 800904c:	2080      	movs	r0, #128	; 0x80
 800904e:	f7f8 fa41 	bl	80014d4 <FT800_setPlaybackVolume>
                    slider_value=512;
 8009052:	4ba2      	ldr	r3, [pc, #648]	; (80092dc <main+0x124c>)
 8009054:	2280      	movs	r2, #128	; 0x80
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	801a      	strh	r2, [r3, #0]
                }
                previous_menu=WAV;
 800905a:	4b95      	ldr	r3, [pc, #596]	; (80092b0 <main+0x1220>)
 800905c:	2289      	movs	r2, #137	; 0x89
 800905e:	701a      	strb	r2, [r3, #0]

                if(new_file)
 8009060:	4b9f      	ldr	r3, [pc, #636]	; (80092e0 <main+0x1250>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01c      	beq.n	80090a2 <main+0x1012>
                {
                    new_file=0;
 8009068:	4b9d      	ldr	r3, [pc, #628]	; (80092e0 <main+0x1250>)
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
                    sprintf((char*)path, "%s/%s", wav_folder, wavs[wav_num]);
 800906e:	4b91      	ldr	r3, [pc, #580]	; (80092b4 <main+0x1224>)
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	4b91      	ldr	r3, [pc, #580]	; (80092b8 <main+0x1228>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	001a      	movs	r2, r3
 8009078:	4b90      	ldr	r3, [pc, #576]	; (80092bc <main+0x122c>)
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	58d3      	ldr	r3, [r2, r3]
 800907e:	4990      	ldr	r1, [pc, #576]	; (80092c0 <main+0x1230>)
 8009080:	4890      	ldr	r0, [pc, #576]	; (80092c4 <main+0x1234>)
 8009082:	0022      	movs	r2, r4
 8009084:	f001 f906 	bl	800a294 <siprintf>
                    FT800_loadWAVfromSD(0, path, &wav_format, &wav_channels, &wav_sample_rate, &wav_bpc, &wav_size);
 8009088:	488f      	ldr	r0, [pc, #572]	; (80092c8 <main+0x1238>)
 800908a:	4a90      	ldr	r2, [pc, #576]	; (80092cc <main+0x123c>)
 800908c:	498d      	ldr	r1, [pc, #564]	; (80092c4 <main+0x1234>)
 800908e:	4b90      	ldr	r3, [pc, #576]	; (80092d0 <main+0x1240>)
 8009090:	9302      	str	r3, [sp, #8]
 8009092:	4b90      	ldr	r3, [pc, #576]	; (80092d4 <main+0x1244>)
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	4b90      	ldr	r3, [pc, #576]	; (80092d8 <main+0x1248>)
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	0003      	movs	r3, r0
 800909c:	2000      	movs	r0, #0
 800909e:	f7fa fadb 	bl	8003658 <FT800_loadWAVfromSD>
                }

                FT800_finishList();
 80090a2:	f7f8 fdbd 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 80090a6:	f7f8 fd8f 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(ORANGE);
 80090aa:	4b8e      	ldr	r3, [pc, #568]	; (80092e4 <main+0x1254>)
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7f8 fe11 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 80090b2:	2007      	movs	r0, #7
 80090b4:	f7f8 fe22 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7f9 ffd4 	bl	8003066 <FT800_tagMask>
                FT800_drawText(10, 10, 18, BLACK, OPT_FLAT, wavs[wav_num]);
 80090be:	4b7e      	ldr	r3, [pc, #504]	; (80092b8 <main+0x1228>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	001a      	movs	r2, r3
 80090c4:	4b7d      	ldr	r3, [pc, #500]	; (80092bc <main+0x122c>)
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	58d3      	ldr	r3, [r2, r3]
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	2212      	movs	r2, #18
 80090d6:	210a      	movs	r1, #10
 80090d8:	200a      	movs	r0, #10
 80090da:	f7f9 f967 	bl	80023ac <FT800_drawText>
                FT800_drawText(20, 30, 18, DARKGRAY, OPT_FLAT, "FORMAT:  (0-PCM, 1-uLAW, 2-ADPCM)");
 80090de:	4a82      	ldr	r2, [pc, #520]	; (80092e8 <main+0x1258>)
 80090e0:	4b82      	ldr	r3, [pc, #520]	; (80092ec <main+0x125c>)
 80090e2:	9301      	str	r3, [sp, #4]
 80090e4:	2380      	movs	r3, #128	; 0x80
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	0013      	movs	r3, r2
 80090ec:	2212      	movs	r2, #18
 80090ee:	211e      	movs	r1, #30
 80090f0:	2014      	movs	r0, #20
 80090f2:	f7f9 f95b 	bl	80023ac <FT800_drawText>
                FT800_drawText(20, 50, 18, DARKGRAY, OPT_FLAT, "CHANNELS:  (1-MONO, 2-STEREO)");
 80090f6:	4a7c      	ldr	r2, [pc, #496]	; (80092e8 <main+0x1258>)
 80090f8:	4b7d      	ldr	r3, [pc, #500]	; (80092f0 <main+0x1260>)
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	0013      	movs	r3, r2
 8009104:	2212      	movs	r2, #18
 8009106:	2132      	movs	r1, #50	; 0x32
 8009108:	2014      	movs	r0, #20
 800910a:	f7f9 f94f 	bl	80023ac <FT800_drawText>
                FT800_drawText(20, 70, 18, DARKGRAY, OPT_FLAT, "SAMPLE RATE [Hz]:");
 800910e:	4a76      	ldr	r2, [pc, #472]	; (80092e8 <main+0x1258>)
 8009110:	4b78      	ldr	r3, [pc, #480]	; (80092f4 <main+0x1264>)
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	2380      	movs	r3, #128	; 0x80
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	0013      	movs	r3, r2
 800911c:	2212      	movs	r2, #18
 800911e:	2146      	movs	r1, #70	; 0x46
 8009120:	2014      	movs	r0, #20
 8009122:	f7f9 f943 	bl	80023ac <FT800_drawText>
                FT800_drawText(20, 90, 18, DARKGRAY, OPT_FLAT, "BITS:");
 8009126:	4a70      	ldr	r2, [pc, #448]	; (80092e8 <main+0x1258>)
 8009128:	4b73      	ldr	r3, [pc, #460]	; (80092f8 <main+0x1268>)
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	2380      	movs	r3, #128	; 0x80
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	0013      	movs	r3, r2
 8009134:	2212      	movs	r2, #18
 8009136:	215a      	movs	r1, #90	; 0x5a
 8009138:	2014      	movs	r0, #20
 800913a:	f7f9 f937 	bl	80023ac <FT800_drawText>
                FT800_drawText(20, 110, 18, DARKGRAY, OPT_FLAT, "BYTES[KB]:     (MAX 256)");
 800913e:	4a6a      	ldr	r2, [pc, #424]	; (80092e8 <main+0x1258>)
 8009140:	4b6e      	ldr	r3, [pc, #440]	; (80092fc <main+0x126c>)
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	2380      	movs	r3, #128	; 0x80
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	0013      	movs	r3, r2
 800914c:	2212      	movs	r2, #18
 800914e:	216e      	movs	r1, #110	; 0x6e
 8009150:	2014      	movs	r0, #20
 8009152:	f7f9 f92b 	bl	80023ac <FT800_drawText>
                FT800_drawDecimalNumb(80, 30, 18, OPT_FLAT, wav_format, BLACK);
 8009156:	4b5d      	ldr	r3, [pc, #372]	; (80092cc <main+0x123c>)
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	0019      	movs	r1, r3
 800915c:	2380      	movs	r3, #128	; 0x80
 800915e:	005a      	lsls	r2, r3, #1
 8009160:	2300      	movs	r3, #0
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	9100      	str	r1, [sp, #0]
 8009166:	0013      	movs	r3, r2
 8009168:	2212      	movs	r2, #18
 800916a:	211e      	movs	r1, #30
 800916c:	2050      	movs	r0, #80	; 0x50
 800916e:	f7f9 f97b 	bl	8002468 <FT800_drawDecimalNumb>
                FT800_drawDecimalNumb(95, 50, 18, OPT_FLAT, wav_channels, BLACK);
 8009172:	4b55      	ldr	r3, [pc, #340]	; (80092c8 <main+0x1238>)
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	0019      	movs	r1, r3
 8009178:	2380      	movs	r3, #128	; 0x80
 800917a:	005a      	lsls	r2, r3, #1
 800917c:	2300      	movs	r3, #0
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	9100      	str	r1, [sp, #0]
 8009182:	0013      	movs	r3, r2
 8009184:	2212      	movs	r2, #18
 8009186:	2132      	movs	r1, #50	; 0x32
 8009188:	205f      	movs	r0, #95	; 0x5f
 800918a:	f7f9 f96d 	bl	8002468 <FT800_drawDecimalNumb>
                FT800_drawDecimalNumb(160, 70, 18, OPT_FLAT, wav_sample_rate, BLACK);
 800918e:	4b52      	ldr	r3, [pc, #328]	; (80092d8 <main+0x1248>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	0051      	lsls	r1, r2, #1
 8009196:	2200      	movs	r2, #0
 8009198:	9201      	str	r2, [sp, #4]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	000b      	movs	r3, r1
 800919e:	2212      	movs	r2, #18
 80091a0:	2146      	movs	r1, #70	; 0x46
 80091a2:	20a0      	movs	r0, #160	; 0xa0
 80091a4:	f7f9 f960 	bl	8002468 <FT800_drawDecimalNumb>
                FT800_drawDecimalNumb(65, 90, 18, OPT_FLAT, wav_bpc, BLACK);
 80091a8:	4b4a      	ldr	r3, [pc, #296]	; (80092d4 <main+0x1244>)
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	0019      	movs	r1, r3
 80091ae:	2380      	movs	r3, #128	; 0x80
 80091b0:	005a      	lsls	r2, r3, #1
 80091b2:	2300      	movs	r3, #0
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	9100      	str	r1, [sp, #0]
 80091b8:	0013      	movs	r3, r2
 80091ba:	2212      	movs	r2, #18
 80091bc:	215a      	movs	r1, #90	; 0x5a
 80091be:	2041      	movs	r0, #65	; 0x41
 80091c0:	f7f9 f952 	bl	8002468 <FT800_drawDecimalNumb>
                FT800_drawDecimalNumb(95, 110, 18, OPT_FLAT, wav_size>>10, BLACK);
 80091c4:	4b42      	ldr	r3, [pc, #264]	; (80092d0 <main+0x1240>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	0a9b      	lsrs	r3, r3, #10
 80091ca:	2280      	movs	r2, #128	; 0x80
 80091cc:	0051      	lsls	r1, r2, #1
 80091ce:	2200      	movs	r2, #0
 80091d0:	9201      	str	r2, [sp, #4]
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	000b      	movs	r3, r1
 80091d6:	2212      	movs	r2, #18
 80091d8:	216e      	movs	r1, #110	; 0x6e
 80091da:	205f      	movs	r0, #95	; 0x5f
 80091dc:	f7f9 f944 	bl	8002468 <FT800_drawDecimalNumb>

                FT800_drawSlider(40, 160, 390, 10, OPT_3D, slider_value, 1024, DARKGRAY, LIGHTGRAY, WHITE, SLIDER2);
 80091e0:	4b3e      	ldr	r3, [pc, #248]	; (80092dc <main+0x124c>)
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	22c3      	movs	r2, #195	; 0xc3
 80091e6:	0051      	lsls	r1, r2, #1
 80091e8:	220e      	movs	r2, #14
 80091ea:	9206      	str	r2, [sp, #24]
 80091ec:	4a44      	ldr	r2, [pc, #272]	; (8009300 <main+0x1270>)
 80091ee:	9205      	str	r2, [sp, #20]
 80091f0:	4a44      	ldr	r2, [pc, #272]	; (8009304 <main+0x1274>)
 80091f2:	9204      	str	r2, [sp, #16]
 80091f4:	4a3c      	ldr	r2, [pc, #240]	; (80092e8 <main+0x1258>)
 80091f6:	9203      	str	r2, [sp, #12]
 80091f8:	2280      	movs	r2, #128	; 0x80
 80091fa:	00d2      	lsls	r2, r2, #3
 80091fc:	9202      	str	r2, [sp, #8]
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	2300      	movs	r3, #0
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	230a      	movs	r3, #10
 8009206:	000a      	movs	r2, r1
 8009208:	21a0      	movs	r1, #160	; 0xa0
 800920a:	2028      	movs	r0, #40	; 0x28
 800920c:	f7f9 fcd6 	bl	8002bbc <FT800_drawSlider>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8009210:	23be      	movs	r3, #190	; 0xbe
 8009212:	33ff      	adds	r3, #255	; 0xff
 8009214:	0018      	movs	r0, r3
 8009216:	2381      	movs	r3, #129	; 0x81
 8009218:	9305      	str	r3, [sp, #20]
 800921a:	4b39      	ldr	r3, [pc, #228]	; (8009300 <main+0x1270>)
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	4b3a      	ldr	r3, [pc, #232]	; (8009308 <main+0x1278>)
 8009220:	9303      	str	r3, [sp, #12]
 8009222:	2300      	movs	r3, #0
 8009224:	9302      	str	r3, [sp, #8]
 8009226:	231c      	movs	r3, #28
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	23ff      	movs	r3, #255	; 0xff
 800922c:	041b      	lsls	r3, r3, #16
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	231e      	movs	r3, #30
 8009232:	221e      	movs	r2, #30
 8009234:	2105      	movs	r1, #5
 8009236:	f7f9 f970 	bl	800251a <FT800_drawButton>
                FT800_drawButton(170,200,60,60,DARKGRAY,30,OPT_3D,"<",ORANGE, PREVIOUS);
 800923a:	230c      	movs	r3, #12
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <main+0x1254>)
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	4b32      	ldr	r3, [pc, #200]	; (800930c <main+0x127c>)
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	231e      	movs	r3, #30
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <main+0x1258>)
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	233c      	movs	r3, #60	; 0x3c
 8009254:	223c      	movs	r2, #60	; 0x3c
 8009256:	21c8      	movs	r1, #200	; 0xc8
 8009258:	20aa      	movs	r0, #170	; 0xaa
 800925a:	f7f9 f95e 	bl	800251a <FT800_drawButton>
                FT800_drawButton(260,200,60,60,DARKGRAY,30,OPT_3D,">",ORANGE, NEXT);
 800925e:	2382      	movs	r3, #130	; 0x82
 8009260:	0058      	lsls	r0, r3, #1
 8009262:	230b      	movs	r3, #11
 8009264:	9305      	str	r3, [sp, #20]
 8009266:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <main+0x1254>)
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	4b29      	ldr	r3, [pc, #164]	; (8009310 <main+0x1280>)
 800926c:	9303      	str	r3, [sp, #12]
 800926e:	2300      	movs	r3, #0
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	231e      	movs	r3, #30
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	4b1c      	ldr	r3, [pc, #112]	; (80092e8 <main+0x1258>)
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	233c      	movs	r3, #60	; 0x3c
 800927c:	223c      	movs	r2, #60	; 0x3c
 800927e:	21c8      	movs	r1, #200	; 0xc8
 8009280:	f7f9 f94b 	bl	800251a <FT800_drawButton>
                FT800_drawButton(320,70,100,60,DARKGRAY,28,OPT_3D,"PLAY",ORANGE, PLAY);
 8009284:	23a0      	movs	r3, #160	; 0xa0
 8009286:	0058      	lsls	r0, r3, #1
 8009288:	230d      	movs	r3, #13
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	4b15      	ldr	r3, [pc, #84]	; (80092e4 <main+0x1254>)
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	4b20      	ldr	r3, [pc, #128]	; (8009314 <main+0x1284>)
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	2300      	movs	r3, #0
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	231c      	movs	r3, #28
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <main+0x1258>)
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	233c      	movs	r3, #60	; 0x3c
 80092a2:	2264      	movs	r2, #100	; 0x64
 80092a4:	2146      	movs	r1, #70	; 0x46
 80092a6:	f7f9 f938 	bl	800251a <FT800_drawButton>

                FT800_endOfList();
 80092aa:	f7f8 fc9b 	bl	8001be4 <FT800_endOfList>
                break;
 80092ae:	e31c      	b.n	80098ea <main+0x185a>
 80092b0:	20000009 	.word	0x20000009
 80092b4:	2000004c 	.word	0x2000004c
 80092b8:	20000384 	.word	0x20000384
 80092bc:	20000050 	.word	0x20000050
 80092c0:	0800ac78 	.word	0x0800ac78
 80092c4:	2000036c 	.word	0x2000036c
 80092c8:	20001334 	.word	0x20001334
 80092cc:	20001298 	.word	0x20001298
 80092d0:	20001340 	.word	0x20001340
 80092d4:	2000129a 	.word	0x2000129a
 80092d8:	20001338 	.word	0x20001338
 80092dc:	2000000a 	.word	0x2000000a
 80092e0:	20000385 	.word	0x20000385
 80092e4:	00ff9500 	.word	0x00ff9500
 80092e8:	00202020 	.word	0x00202020
 80092ec:	0800adc4 	.word	0x0800adc4
 80092f0:	0800ade8 	.word	0x0800ade8
 80092f4:	0800ae08 	.word	0x0800ae08
 80092f8:	0800ae1c 	.word	0x0800ae1c
 80092fc:	0800ae24 	.word	0x0800ae24
 8009300:	00ffffff 	.word	0x00ffffff
 8009304:	00808080 	.word	0x00808080
 8009308:	0800ad00 	.word	0x0800ad00
 800930c:	0800adbc 	.word	0x0800adbc
 8009310:	0800adc0 	.word	0x0800adc0
 8009314:	0800ae40 	.word	0x0800ae40
            case JPG:
                if((previous_menu==MAIN_MENU)||new_file)
 8009318:	4bef      	ldr	r3, [pc, #956]	; (80096d8 <main+0x1648>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b81      	cmp	r3, #129	; 0x81
 800931e:	d003      	beq.n	8009328 <main+0x1298>
 8009320:	4bee      	ldr	r3, [pc, #952]	; (80096dc <main+0x164c>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d045      	beq.n	80093b4 <main+0x1324>
                {
                    new_file=0;
 8009328:	4bec      	ldr	r3, [pc, #944]	; (80096dc <main+0x164c>)
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
                    FT800_finishList();
 800932e:	f7f8 fc77 	bl	8001c20 <FT800_finishList>
                    FT800_startNewList();
 8009332:	f7f8 fc49 	bl	8001bc8 <FT800_startNewList>
                    FT800_setBackgroundColor(BLACK);
 8009336:	2000      	movs	r0, #0
 8009338:	f7f8 fccc 	bl	8001cd4 <FT800_setBackgroundColor>
                    FT800_clear(CLEAR_ALL);
 800933c:	2007      	movs	r0, #7
 800933e:	f7f8 fcdd 	bl	8001cfc <FT800_clear>
                    FT800_drawText(205, 20, 23, WHITE, OPT_FLAT, "Loading...");
 8009342:	4ae7      	ldr	r2, [pc, #924]	; (80096e0 <main+0x1650>)
 8009344:	4be7      	ldr	r3, [pc, #924]	; (80096e4 <main+0x1654>)
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	2380      	movs	r3, #128	; 0x80
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	0013      	movs	r3, r2
 8009350:	2217      	movs	r2, #23
 8009352:	2114      	movs	r1, #20
 8009354:	20cd      	movs	r0, #205	; 0xcd
 8009356:	f7f9 f829 	bl	80023ac <FT800_drawText>
                    FT800_drawAnimSpinner(240,136,0,1);
 800935a:	2301      	movs	r3, #1
 800935c:	2200      	movs	r2, #0
 800935e:	2188      	movs	r1, #136	; 0x88
 8009360:	20f0      	movs	r0, #240	; 0xf0
 8009362:	f7f9 fece 	bl	8003102 <FT800_drawAnimSpinner>
                    FT800_endOfList();
 8009366:	f7f8 fc3d 	bl	8001be4 <FT800_endOfList>
                    sprintf((char*)path, "%s/%s", jpg_folder, jpgs[jpg_num]);
 800936a:	4bdf      	ldr	r3, [pc, #892]	; (80096e8 <main+0x1658>)
 800936c:	681c      	ldr	r4, [r3, #0]
 800936e:	4bdf      	ldr	r3, [pc, #892]	; (80096ec <main+0x165c>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	001a      	movs	r2, r3
 8009374:	4bde      	ldr	r3, [pc, #888]	; (80096f0 <main+0x1660>)
 8009376:	0092      	lsls	r2, r2, #2
 8009378:	58d3      	ldr	r3, [r2, r3]
 800937a:	49de      	ldr	r1, [pc, #888]	; (80096f4 <main+0x1664>)
 800937c:	48de      	ldr	r0, [pc, #888]	; (80096f8 <main+0x1668>)
 800937e:	0022      	movs	r2, r4
 8009380:	f000 ff88 	bl	800a294 <siprintf>
                    FT800_loadJPGfromSD(0,path,&img_width,&img_height);
 8009384:	4bdd      	ldr	r3, [pc, #884]	; (80096fc <main+0x166c>)
 8009386:	4ade      	ldr	r2, [pc, #888]	; (8009700 <main+0x1670>)
 8009388:	49db      	ldr	r1, [pc, #876]	; (80096f8 <main+0x1668>)
 800938a:	2000      	movs	r0, #0
 800938c:	f7fa fd62 	bl	8003e54 <FT800_loadJPGfromSD>
                    strcpy(wallpaper_folder,jpg_folder);
 8009390:	4bd5      	ldr	r3, [pc, #852]	; (80096e8 <main+0x1658>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4bdb      	ldr	r3, [pc, #876]	; (8009704 <main+0x1674>)
 8009396:	0011      	movs	r1, r2
 8009398:	0018      	movs	r0, r3
 800939a:	f000 ff9b 	bl	800a2d4 <strcpy>
                    strcpy(wallpaper,jpgs[jpg_num]);
 800939e:	4bd3      	ldr	r3, [pc, #844]	; (80096ec <main+0x165c>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	001a      	movs	r2, r3
 80093a4:	4bd2      	ldr	r3, [pc, #840]	; (80096f0 <main+0x1660>)
 80093a6:	0092      	lsls	r2, r2, #2
 80093a8:	58d2      	ldr	r2, [r2, r3]
 80093aa:	4bd7      	ldr	r3, [pc, #860]	; (8009708 <main+0x1678>)
 80093ac:	0011      	movs	r1, r2
 80093ae:	0018      	movs	r0, r3
 80093b0:	f000 ff90 	bl	800a2d4 <strcpy>
                }
                previous_menu=JPG;
 80093b4:	4bc8      	ldr	r3, [pc, #800]	; (80096d8 <main+0x1648>)
 80093b6:	228a      	movs	r2, #138	; 0x8a
 80093b8:	701a      	strb	r2, [r3, #0]

                FT800_finishList();
 80093ba:	f7f8 fc31 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 80093be:	f7f8 fc03 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(BLACK);
 80093c2:	2000      	movs	r0, #0
 80093c4:	f7f8 fc86 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 80093c8:	2007      	movs	r0, #7
 80093ca:	f7f8 fc97 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7f9 fe49 	bl	8003066 <FT800_tagMask>
                FT800_stop();
 80093d4:	f7f9 ff64 	bl	80032a0 <FT800_stop>
                FT800_bitmapSource(0);
 80093d8:	2000      	movs	r0, #0
 80093da:	f7fa f823 	bl	8003424 <FT800_bitmapSource>
                FT800_bitmapLayout(RGB565, img_width*2, img_height);
 80093de:	4bc8      	ldr	r3, [pc, #800]	; (8009700 <main+0x1670>)
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	18db      	adds	r3, r3, r3
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	b219      	sxth	r1, r3
 80093e8:	4bc4      	ldr	r3, [pc, #784]	; (80096fc <main+0x166c>)
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b21b      	sxth	r3, r3
 80093ee:	001a      	movs	r2, r3
 80093f0:	2007      	movs	r0, #7
 80093f2:	f7f9 ff8b 	bl	800330c <FT800_bitmapLayout>
                FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width, img_height);
 80093f6:	4bc2      	ldr	r3, [pc, #776]	; (8009700 <main+0x1670>)
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b21a      	sxth	r2, r3
 80093fc:	4bbf      	ldr	r3, [pc, #764]	; (80096fc <main+0x166c>)
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	b21b      	sxth	r3, r3
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	0013      	movs	r3, r2
 8009406:	2200      	movs	r2, #0
 8009408:	2100      	movs	r1, #0
 800940a:	2000      	movs	r0, #0
 800940c:	f7f9 ffbc 	bl	8003388 <FT800_bitmapSize>
                FT800_bitmapBegin();
 8009410:	f7f9 ff6e 	bl	80032f0 <FT800_bitmapBegin>
                FT800_Vertex2II(0,0,0,0);
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	2000      	movs	r0, #0
 800941c:	f7f8 fd0c 	bl	8001e38 <FT800_Vertex2II>

                FT800_setColorA(100);
 8009420:	2064      	movs	r0, #100	; 0x64
 8009422:	f7f8 fc83 	bl	8001d2c <FT800_setColorA>
                FT800_drawButton(445,5,30,30,LIGHTGRAY,28,OPT_3D,"X",BLACK, MAIN_MENU);
 8009426:	23be      	movs	r3, #190	; 0xbe
 8009428:	33ff      	adds	r3, #255	; 0xff
 800942a:	0018      	movs	r0, r3
 800942c:	2381      	movs	r3, #129	; 0x81
 800942e:	9305      	str	r3, [sp, #20]
 8009430:	2300      	movs	r3, #0
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	4bb5      	ldr	r3, [pc, #724]	; (800970c <main+0x167c>)
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	2300      	movs	r3, #0
 800943a:	9302      	str	r3, [sp, #8]
 800943c:	231c      	movs	r3, #28
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	4bb3      	ldr	r3, [pc, #716]	; (8009710 <main+0x1680>)
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	231e      	movs	r3, #30
 8009446:	221e      	movs	r2, #30
 8009448:	2105      	movs	r1, #5
 800944a:	f7f9 f866 	bl	800251a <FT800_drawButton>
                FT800_drawButton(190,230,40,40,LIGHTGRAY,30,OPT_3D,"<",BLACK, BACKWARD);
 800944e:	2309      	movs	r3, #9
 8009450:	9305      	str	r3, [sp, #20]
 8009452:	2300      	movs	r3, #0
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	4baf      	ldr	r3, [pc, #700]	; (8009714 <main+0x1684>)
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	2300      	movs	r3, #0
 800945c:	9302      	str	r3, [sp, #8]
 800945e:	231e      	movs	r3, #30
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	4bab      	ldr	r3, [pc, #684]	; (8009710 <main+0x1680>)
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	2328      	movs	r3, #40	; 0x28
 8009468:	2228      	movs	r2, #40	; 0x28
 800946a:	21e6      	movs	r1, #230	; 0xe6
 800946c:	20be      	movs	r0, #190	; 0xbe
 800946e:	f7f9 f854 	bl	800251a <FT800_drawButton>
                FT800_drawButton(250,230,40,40,LIGHTGRAY,30,OPT_3D,">",BLACK, FORWARD);
 8009472:	230a      	movs	r3, #10
 8009474:	9305      	str	r3, [sp, #20]
 8009476:	2300      	movs	r3, #0
 8009478:	9304      	str	r3, [sp, #16]
 800947a:	4ba7      	ldr	r3, [pc, #668]	; (8009718 <main+0x1688>)
 800947c:	9303      	str	r3, [sp, #12]
 800947e:	2300      	movs	r3, #0
 8009480:	9302      	str	r3, [sp, #8]
 8009482:	231e      	movs	r3, #30
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	4ba2      	ldr	r3, [pc, #648]	; (8009710 <main+0x1680>)
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	2328      	movs	r3, #40	; 0x28
 800948c:	2228      	movs	r2, #40	; 0x28
 800948e:	21e6      	movs	r1, #230	; 0xe6
 8009490:	20fa      	movs	r0, #250	; 0xfa
 8009492:	f7f9 f842 	bl	800251a <FT800_drawButton>
                FT800_setColorA(255);
 8009496:	20ff      	movs	r0, #255	; 0xff
 8009498:	f7f8 fc48 	bl	8001d2c <FT800_setColorA>

                FT800_endOfList();
 800949c:	f7f8 fba2 	bl	8001be4 <FT800_endOfList>
                break;
 80094a0:	e223      	b.n	80098ea <main+0x185a>
            case TRANSFORM:
                if(previous_menu==MAIN_MENU)
 80094a2:	4b8d      	ldr	r3, [pc, #564]	; (80096d8 <main+0x1648>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b81      	cmp	r3, #129	; 0x81
 80094a8:	d11b      	bne.n	80094e2 <main+0x1452>
                {
                    FT800_finishList();
 80094aa:	f7f8 fbb9 	bl	8001c20 <FT800_finishList>
                    FT800_startNewList();
 80094ae:	f7f8 fb8b 	bl	8001bc8 <FT800_startNewList>
                    FT800_setBackgroundColor(BLACK);
 80094b2:	2000      	movs	r0, #0
 80094b4:	f7f8 fc0e 	bl	8001cd4 <FT800_setBackgroundColor>
                    FT800_clear(CLEAR_ALL);
 80094b8:	2007      	movs	r0, #7
 80094ba:	f7f8 fc1f 	bl	8001cfc <FT800_clear>
                    FT800_endOfList();
 80094be:	f7f8 fb91 	bl	8001be4 <FT800_endOfList>
                    sprintf((char*)path, "%s/%s",bmp_folder, "mario.bmp");
 80094c2:	4b96      	ldr	r3, [pc, #600]	; (800971c <main+0x168c>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b96      	ldr	r3, [pc, #600]	; (8009720 <main+0x1690>)
 80094c8:	498a      	ldr	r1, [pc, #552]	; (80096f4 <main+0x1664>)
 80094ca:	488b      	ldr	r0, [pc, #556]	; (80096f8 <main+0x1668>)
 80094cc:	f000 fee2 	bl	800a294 <siprintf>
                    FT800_loadBMPfromSD(0,path , &img_width, &img_height, &img_bytes);
 80094d0:	488a      	ldr	r0, [pc, #552]	; (80096fc <main+0x166c>)
 80094d2:	4a8b      	ldr	r2, [pc, #556]	; (8009700 <main+0x1670>)
 80094d4:	4988      	ldr	r1, [pc, #544]	; (80096f8 <main+0x1668>)
 80094d6:	4b93      	ldr	r3, [pc, #588]	; (8009724 <main+0x1694>)
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	0003      	movs	r3, r0
 80094dc:	2000      	movs	r0, #0
 80094de:	f7fa fb15 	bl	8003b0c <FT800_loadBMPfromSD>
                }
                previous_menu=TRANSFORM;
 80094e2:	4b7d      	ldr	r3, [pc, #500]	; (80096d8 <main+0x1648>)
 80094e4:	228b      	movs	r2, #139	; 0x8b
 80094e6:	701a      	strb	r2, [r3, #0]

                FT800_finishList();
 80094e8:	f7f8 fb9a 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 80094ec:	f7f8 fb6c 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(BLACK);
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7f8 fbef 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 80094f6:	2007      	movs	r0, #7
 80094f8:	f7f8 fc00 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 80094fc:	2000      	movs	r0, #0
 80094fe:	f7f9 fdb2 	bl	8003066 <FT800_tagMask>

                FT800_drawScrollBar(20, 55, 20, 200, DARKGRAY, ORANGE, OPT_3D, scale_factor, 1, 4, SCROLL_S);
 8009502:	4b89      	ldr	r3, [pc, #548]	; (8009728 <main+0x1698>)
 8009504:	2200      	movs	r2, #0
 8009506:	5e9b      	ldrsh	r3, [r3, r2]
 8009508:	b29b      	uxth	r3, r3
 800950a:	220f      	movs	r2, #15
 800950c:	9206      	str	r2, [sp, #24]
 800950e:	2204      	movs	r2, #4
 8009510:	9205      	str	r2, [sp, #20]
 8009512:	2201      	movs	r2, #1
 8009514:	9204      	str	r2, [sp, #16]
 8009516:	9303      	str	r3, [sp, #12]
 8009518:	2300      	movs	r3, #0
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	4b83      	ldr	r3, [pc, #524]	; (800972c <main+0x169c>)
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	4b83      	ldr	r3, [pc, #524]	; (8009730 <main+0x16a0>)
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	23c8      	movs	r3, #200	; 0xc8
 8009526:	2214      	movs	r2, #20
 8009528:	2137      	movs	r1, #55	; 0x37
 800952a:	2014      	movs	r0, #20
 800952c:	f7f9 fa32 	bl	8002994 <FT800_drawScrollBar>
                FT800_drawScrollBar(450, 55, 20, 200, DARKGRAY, ORANGE, OPT_3D, rotate_factor, 10, 1024, SCROLL_R);
 8009530:	4b80      	ldr	r3, [pc, #512]	; (8009734 <main+0x16a4>)
 8009532:	2200      	movs	r2, #0
 8009534:	5e9b      	ldrsh	r3, [r3, r2]
 8009536:	b29b      	uxth	r3, r3
 8009538:	22e1      	movs	r2, #225	; 0xe1
 800953a:	0050      	lsls	r0, r2, #1
 800953c:	2210      	movs	r2, #16
 800953e:	9206      	str	r2, [sp, #24]
 8009540:	2280      	movs	r2, #128	; 0x80
 8009542:	00d2      	lsls	r2, r2, #3
 8009544:	9205      	str	r2, [sp, #20]
 8009546:	220a      	movs	r2, #10
 8009548:	9204      	str	r2, [sp, #16]
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	2300      	movs	r3, #0
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	4b76      	ldr	r3, [pc, #472]	; (800972c <main+0x169c>)
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	4b76      	ldr	r3, [pc, #472]	; (8009730 <main+0x16a0>)
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	23c8      	movs	r3, #200	; 0xc8
 800955a:	2214      	movs	r2, #20
 800955c:	2137      	movs	r1, #55	; 0x37
 800955e:	f7f9 fa19 	bl	8002994 <FT800_drawScrollBar>
                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 scale and rotate");
 8009562:	4a72      	ldr	r2, [pc, #456]	; (800972c <main+0x169c>)
 8009564:	4b74      	ldr	r3, [pc, #464]	; (8009738 <main+0x16a8>)
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	2380      	movs	r3, #128	; 0x80
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	0013      	movs	r3, r2
 8009570:	2212      	movs	r2, #18
 8009572:	2105      	movs	r1, #5
 8009574:	2005      	movs	r0, #5
 8009576:	f7f8 ff19 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 800957a:	23be      	movs	r3, #190	; 0xbe
 800957c:	33ff      	adds	r3, #255	; 0xff
 800957e:	0018      	movs	r0, r3
 8009580:	2381      	movs	r3, #129	; 0x81
 8009582:	9305      	str	r3, [sp, #20]
 8009584:	4b56      	ldr	r3, [pc, #344]	; (80096e0 <main+0x1650>)
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	4b60      	ldr	r3, [pc, #384]	; (800970c <main+0x167c>)
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	2300      	movs	r3, #0
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	231c      	movs	r3, #28
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	23ff      	movs	r3, #255	; 0xff
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	231e      	movs	r3, #30
 800959c:	221e      	movs	r2, #30
 800959e:	2105      	movs	r1, #5
 80095a0:	f7f8 ffbb 	bl	800251a <FT800_drawButton>


                FT800_loadIdentity();
 80095a4:	f7f9 ff52 	bl	800344c <FT800_loadIdentity>
                FT800_scale(scale_factor+1,scale_factor+1);
 80095a8:	4b5f      	ldr	r3, [pc, #380]	; (8009728 <main+0x1698>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	5e9b      	ldrsh	r3, [r3, r2]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3301      	adds	r3, #1
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	b21a      	sxth	r2, r3
 80095b6:	4b5c      	ldr	r3, [pc, #368]	; (8009728 <main+0x1698>)
 80095b8:	2100      	movs	r1, #0
 80095ba:	5e5b      	ldrsh	r3, [r3, r1]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3301      	adds	r3, #1
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	b21b      	sxth	r3, r3
 80095c4:	0019      	movs	r1, r3
 80095c6:	0010      	movs	r0, r2
 80095c8:	f7f9 ff5a 	bl	8003480 <FT800_scale>
                FT800_translate((img_width>>1),(img_height>>1));
 80095cc:	4b4c      	ldr	r3, [pc, #304]	; (8009700 <main+0x1670>)
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	085b      	lsrs	r3, r3, #1
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	b21a      	sxth	r2, r3
 80095d6:	4b49      	ldr	r3, [pc, #292]	; (80096fc <main+0x166c>)
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	085b      	lsrs	r3, r3, #1
 80095dc:	b29b      	uxth	r3, r3
 80095de:	b21b      	sxth	r3, r3
 80095e0:	0019      	movs	r1, r3
 80095e2:	0010      	movs	r0, r2
 80095e4:	f7f9 ff77 	bl	80034d6 <FT800_translate>
                FT800_rotate((rotate_factor*360)/1023);
 80095e8:	4b52      	ldr	r3, [pc, #328]	; (8009734 <main+0x16a4>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	5e9b      	ldrsh	r3, [r3, r2]
 80095ee:	001a      	movs	r2, r3
 80095f0:	0013      	movs	r3, r2
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	189b      	adds	r3, r3, r2
 80095f6:	011a      	lsls	r2, r3, #4
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	00d3      	lsls	r3, r2, #3
 80095fc:	001a      	movs	r2, r3
 80095fe:	0013      	movs	r3, r2
 8009600:	494e      	ldr	r1, [pc, #312]	; (800973c <main+0x16ac>)
 8009602:	0018      	movs	r0, r3
 8009604:	f7f6 fe1c 	bl	8000240 <__divsi3>
 8009608:	0003      	movs	r3, r0
 800960a:	b21b      	sxth	r3, r3
 800960c:	0018      	movs	r0, r3
 800960e:	f7f9 ff8d 	bl	800352c <FT800_rotate>
                FT800_translate(-(img_width>>1),-(img_height>>1));
 8009612:	4b3b      	ldr	r3, [pc, #236]	; (8009700 <main+0x1670>)
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	b29b      	uxth	r3, r3
 800961a:	425b      	negs	r3, r3
 800961c:	b29b      	uxth	r3, r3
 800961e:	b21a      	sxth	r2, r3
 8009620:	4b36      	ldr	r3, [pc, #216]	; (80096fc <main+0x166c>)
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	b29b      	uxth	r3, r3
 8009628:	425b      	negs	r3, r3
 800962a:	b29b      	uxth	r3, r3
 800962c:	b21b      	sxth	r3, r3
 800962e:	0019      	movs	r1, r3
 8009630:	0010      	movs	r0, r2
 8009632:	f7f9 ff50 	bl	80034d6 <FT800_translate>
                FT800_setMatrix();
 8009636:	f7f9 ff16 	bl	8003466 <FT800_setMatrix>


                FT800_bitmapSource(0);
 800963a:	2000      	movs	r0, #0
 800963c:	f7f9 fef2 	bl	8003424 <FT800_bitmapSource>
                FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 8009640:	4b38      	ldr	r3, [pc, #224]	; (8009724 <main+0x1694>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	4a2e      	ldr	r2, [pc, #184]	; (8009700 <main+0x1670>)
 8009648:	8812      	ldrh	r2, [r2, #0]
 800964a:	4353      	muls	r3, r2
 800964c:	b29b      	uxth	r3, r3
 800964e:	b219      	sxth	r1, r3
 8009650:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <main+0x166c>)
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	b21b      	sxth	r3, r3
 8009656:	001a      	movs	r2, r3
 8009658:	2007      	movs	r0, #7
 800965a:	f7f9 fe57 	bl	800330c <FT800_bitmapLayout>
                FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width*(scale_factor+1), img_height*(scale_factor+1));
 800965e:	4b32      	ldr	r3, [pc, #200]	; (8009728 <main+0x1698>)
 8009660:	2200      	movs	r2, #0
 8009662:	5e9b      	ldrsh	r3, [r3, r2]
 8009664:	3301      	adds	r3, #1
 8009666:	b29b      	uxth	r3, r3
 8009668:	4a25      	ldr	r2, [pc, #148]	; (8009700 <main+0x1670>)
 800966a:	8812      	ldrh	r2, [r2, #0]
 800966c:	4353      	muls	r3, r2
 800966e:	b29b      	uxth	r3, r3
 8009670:	b219      	sxth	r1, r3
 8009672:	4b2d      	ldr	r3, [pc, #180]	; (8009728 <main+0x1698>)
 8009674:	2200      	movs	r2, #0
 8009676:	5e9b      	ldrsh	r3, [r3, r2]
 8009678:	3301      	adds	r3, #1
 800967a:	b29b      	uxth	r3, r3
 800967c:	4a1f      	ldr	r2, [pc, #124]	; (80096fc <main+0x166c>)
 800967e:	8812      	ldrh	r2, [r2, #0]
 8009680:	4353      	muls	r3, r2
 8009682:	b29b      	uxth	r3, r3
 8009684:	b21b      	sxth	r3, r3
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	000b      	movs	r3, r1
 800968a:	2200      	movs	r2, #0
 800968c:	2100      	movs	r1, #0
 800968e:	2000      	movs	r0, #0
 8009690:	f7f9 fe7a 	bl	8003388 <FT800_bitmapSize>
                FT800_bitmapBegin();
 8009694:	f7f9 fe2c 	bl	80032f0 <FT800_bitmapBegin>
                FT800_Vertex2II((DISPLAY_WIDTH>>1)-(((scale_factor+1)*img_width)>>1),(DISPLAY_HEIGHT>>1)-(((scale_factor+1)*img_height)>>1),0,0);
 8009698:	4b23      	ldr	r3, [pc, #140]	; (8009728 <main+0x1698>)
 800969a:	2200      	movs	r2, #0
 800969c:	5e9b      	ldrsh	r3, [r3, r2]
 800969e:	3301      	adds	r3, #1
 80096a0:	4a17      	ldr	r2, [pc, #92]	; (8009700 <main+0x1670>)
 80096a2:	8812      	ldrh	r2, [r2, #0]
 80096a4:	4353      	muls	r3, r2
 80096a6:	105b      	asrs	r3, r3, #1
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	22f0      	movs	r2, #240	; 0xf0
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	b298      	uxth	r0, r3
 80096b0:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <main+0x1698>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	5e9b      	ldrsh	r3, [r3, r2]
 80096b6:	3301      	adds	r3, #1
 80096b8:	4a10      	ldr	r2, [pc, #64]	; (80096fc <main+0x166c>)
 80096ba:	8812      	ldrh	r2, [r2, #0]
 80096bc:	4353      	muls	r3, r2
 80096be:	105b      	asrs	r3, r3, #1
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2288      	movs	r2, #136	; 0x88
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	b299      	uxth	r1, r3
 80096c8:	2300      	movs	r3, #0
 80096ca:	2200      	movs	r2, #0
 80096cc:	f7f8 fbb4 	bl	8001e38 <FT800_Vertex2II>

                FT800_endOfList();
 80096d0:	f7f8 fa88 	bl	8001be4 <FT800_endOfList>
                break;
 80096d4:	e109      	b.n	80098ea <main+0x185a>
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	20000009 	.word	0x20000009
 80096dc:	20000385 	.word	0x20000385
 80096e0:	00ffffff 	.word	0x00ffffff
 80096e4:	0800adb0 	.word	0x0800adb0
 80096e8:	20000030 	.word	0x20000030
 80096ec:	20000048 	.word	0x20000048
 80096f0:	20000034 	.word	0x20000034
 80096f4:	0800ac78 	.word	0x0800ac78
 80096f8:	2000036c 	.word	0x2000036c
 80096fc:	200012b4 	.word	0x200012b4
 8009700:	2000133c 	.word	0x2000133c
 8009704:	200012b8 	.word	0x200012b8
 8009708:	200012a0 	.word	0x200012a0
 800970c:	0800ad00 	.word	0x0800ad00
 8009710:	00808080 	.word	0x00808080
 8009714:	0800adbc 	.word	0x0800adbc
 8009718:	0800adc0 	.word	0x0800adc0
 800971c:	20000014 	.word	0x20000014
 8009720:	0800ae48 	.word	0x0800ae48
 8009724:	2000129c 	.word	0x2000129c
 8009728:	20000380 	.word	0x20000380
 800972c:	00ff9500 	.word	0x00ff9500
 8009730:	00202020 	.word	0x00202020
 8009734:	20000382 	.word	0x20000382
 8009738:	0800ae54 	.word	0x0800ae54
 800973c:	000003ff 	.word	0x000003ff
            case SKETCH:
                FT800_finishList();
 8009740:	f7f8 fa6e 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 8009744:	f7f8 fa40 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(BLACK);
 8009748:	2000      	movs	r0, #0
 800974a:	f7f8 fac3 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 800974e:	2007      	movs	r0, #7
 8009750:	f7f8 fad4 	bl	8001cfc <FT800_clear>
                FT800_tagMask(0);
 8009754:	2000      	movs	r0, #0
 8009756:	f7f9 fc86 	bl	8003066 <FT800_tagMask>
                if(previous_menu==MAIN_MENU)
 800975a:	4be2      	ldr	r3, [pc, #904]	; (8009ae4 <main+0x1a54>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b81      	cmp	r3, #129	; 0x81
 8009760:	d105      	bne.n	800976e <main+0x16de>
                {
                    FT800_writeMemZero(0, 480 * 272 * 2);
 8009762:	23ff      	movs	r3, #255	; 0xff
 8009764:	029b      	lsls	r3, r3, #10
 8009766:	0019      	movs	r1, r3
 8009768:	2000      	movs	r0, #0
 800976a:	f7f8 fbfd 	bl	8001f68 <FT800_writeMemZero>
                }
                previous_menu=SKETCH;
 800976e:	4bdd      	ldr	r3, [pc, #884]	; (8009ae4 <main+0x1a54>)
 8009770:	228c      	movs	r2, #140	; 0x8c
 8009772:	701a      	strb	r2, [r3, #0]
                FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 sketch");
 8009774:	4adc      	ldr	r2, [pc, #880]	; (8009ae8 <main+0x1a58>)
 8009776:	4bdd      	ldr	r3, [pc, #884]	; (8009aec <main+0x1a5c>)
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	2380      	movs	r3, #128	; 0x80
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	0013      	movs	r3, r2
 8009782:	2212      	movs	r2, #18
 8009784:	2105      	movs	r1, #5
 8009786:	2005      	movs	r0, #5
 8009788:	f7f8 fe10 	bl	80023ac <FT800_drawText>
                FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 800978c:	23be      	movs	r3, #190	; 0xbe
 800978e:	33ff      	adds	r3, #255	; 0xff
 8009790:	0018      	movs	r0, r3
 8009792:	2381      	movs	r3, #129	; 0x81
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	4bd6      	ldr	r3, [pc, #856]	; (8009af0 <main+0x1a60>)
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	4bd6      	ldr	r3, [pc, #856]	; (8009af4 <main+0x1a64>)
 800979c:	9303      	str	r3, [sp, #12]
 800979e:	2300      	movs	r3, #0
 80097a0:	9302      	str	r3, [sp, #8]
 80097a2:	231c      	movs	r3, #28
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	23ff      	movs	r3, #255	; 0xff
 80097a8:	041b      	lsls	r3, r3, #16
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	231e      	movs	r3, #30
 80097ae:	221e      	movs	r2, #30
 80097b0:	2105      	movs	r1, #5
 80097b2:	f7f8 feb2 	bl	800251a <FT800_drawButton>


                  FT800_drawSketch(0, 0, 480, 272, 0, L1);
 80097b6:	2388      	movs	r3, #136	; 0x88
 80097b8:	0059      	lsls	r1, r3, #1
 80097ba:	23f0      	movs	r3, #240	; 0xf0
 80097bc:	005a      	lsls	r2, r3, #1
 80097be:	2301      	movs	r3, #1
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	2300      	movs	r3, #0
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	000b      	movs	r3, r1
 80097c8:	2100      	movs	r1, #0
 80097ca:	2000      	movs	r0, #0
 80097cc:	f7f9 fd13 	bl	80031f6 <FT800_drawSketch>



                FT800_bitmapSource(0);
 80097d0:	2000      	movs	r0, #0
 80097d2:	f7f9 fe27 	bl	8003424 <FT800_bitmapSource>
                FT800_bitmapLayout(L1, 480/8, 272);
 80097d6:	2388      	movs	r3, #136	; 0x88
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	001a      	movs	r2, r3
 80097dc:	213c      	movs	r1, #60	; 0x3c
 80097de:	2001      	movs	r0, #1
 80097e0:	f7f9 fd94 	bl	800330c <FT800_bitmapLayout>
                FT800_bitmapSize(NEAREST,BORDER,BORDER, 480, 272); //92 48
 80097e4:	23f0      	movs	r3, #240	; 0xf0
 80097e6:	005a      	lsls	r2, r3, #1
 80097e8:	2388      	movs	r3, #136	; 0x88
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	0013      	movs	r3, r2
 80097f0:	2200      	movs	r2, #0
 80097f2:	2100      	movs	r1, #0
 80097f4:	2000      	movs	r0, #0
 80097f6:	f7f9 fdc7 	bl	8003388 <FT800_bitmapSize>
                FT800_bitmapBegin();
 80097fa:	f7f9 fd79 	bl	80032f0 <FT800_bitmapBegin>
                FT800_Vertex2II(0,0,0,0);
 80097fe:	2300      	movs	r3, #0
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	2000      	movs	r0, #0
 8009806:	f7f8 fb17 	bl	8001e38 <FT800_Vertex2II>

                FT800_endOfList();
 800980a:	f7f8 f9eb 	bl	8001be4 <FT800_endOfList>
                break;
 800980e:	e06c      	b.n	80098ea <main+0x185a>
            case SCRSAVER:
                if(previous_menu==MAIN_MENU)
 8009810:	4bb4      	ldr	r3, [pc, #720]	; (8009ae4 <main+0x1a54>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b81      	cmp	r3, #129	; 0x81
 8009816:	d11b      	bne.n	8009850 <main+0x17c0>
                {
                    FT800_finishList();
 8009818:	f7f8 fa02 	bl	8001c20 <FT800_finishList>
                    FT800_startNewList();
 800981c:	f7f8 f9d4 	bl	8001bc8 <FT800_startNewList>
                    FT800_setBackgroundColor(BLACK);
 8009820:	2000      	movs	r0, #0
 8009822:	f7f8 fa57 	bl	8001cd4 <FT800_setBackgroundColor>
                    FT800_clear(CLEAR_ALL);
 8009826:	2007      	movs	r0, #7
 8009828:	f7f8 fa68 	bl	8001cfc <FT800_clear>
                    FT800_endOfList();
 800982c:	f7f8 f9da 	bl	8001be4 <FT800_endOfList>
                    sprintf((char*)path, "%s/%s",bmp_folder, "mario.bmp");
 8009830:	4bb1      	ldr	r3, [pc, #708]	; (8009af8 <main+0x1a68>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	4bb1      	ldr	r3, [pc, #708]	; (8009afc <main+0x1a6c>)
 8009836:	49b2      	ldr	r1, [pc, #712]	; (8009b00 <main+0x1a70>)
 8009838:	48b2      	ldr	r0, [pc, #712]	; (8009b04 <main+0x1a74>)
 800983a:	f000 fd2b 	bl	800a294 <siprintf>
                    FT800_loadBMPfromSD(0,path , &img_width, &img_height, &img_bytes);
 800983e:	48b2      	ldr	r0, [pc, #712]	; (8009b08 <main+0x1a78>)
 8009840:	4ab2      	ldr	r2, [pc, #712]	; (8009b0c <main+0x1a7c>)
 8009842:	49b0      	ldr	r1, [pc, #704]	; (8009b04 <main+0x1a74>)
 8009844:	4bb2      	ldr	r3, [pc, #712]	; (8009b10 <main+0x1a80>)
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	0003      	movs	r3, r0
 800984a:	2000      	movs	r0, #0
 800984c:	f7fa f95e 	bl	8003b0c <FT800_loadBMPfromSD>
                }
                previous_menu=SCRSAVER;
 8009850:	4ba4      	ldr	r3, [pc, #656]	; (8009ae4 <main+0x1a54>)
 8009852:	228d      	movs	r2, #141	; 0x8d
 8009854:	701a      	strb	r2, [r3, #0]

                FT800_finishList();
 8009856:	f7f8 f9e3 	bl	8001c20 <FT800_finishList>
                FT800_startNewList();
 800985a:	f7f8 f9b5 	bl	8001bc8 <FT800_startNewList>
                FT800_setBackgroundColor(BLACK);
 800985e:	2000      	movs	r0, #0
 8009860:	f7f8 fa38 	bl	8001cd4 <FT800_setBackgroundColor>
                FT800_clear(CLEAR_ALL);
 8009864:	2007      	movs	r0, #7
 8009866:	f7f8 fa49 	bl	8001cfc <FT800_clear>
                FT800_track(0, 0, 480, 272, MAIN_MENU);
 800986a:	2388      	movs	r3, #136	; 0x88
 800986c:	0059      	lsls	r1, r3, #1
 800986e:	23f0      	movs	r3, #240	; 0xf0
 8009870:	005a      	lsls	r2, r3, #1
 8009872:	2381      	movs	r3, #129	; 0x81
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	000b      	movs	r3, r1
 8009878:	2100      	movs	r1, #0
 800987a:	2000      	movs	r0, #0
 800987c:	f7f9 fb9f 	bl	8002fbe <FT800_track>

                FT800_drawScreensaver();
 8009880:	f7f9 fcac 	bl	80031dc <FT800_drawScreensaver>

                FT800_loadIdentity();
 8009884:	f7f9 fde2 	bl	800344c <FT800_loadIdentity>
                FT800_scale(2,2);
 8009888:	2102      	movs	r1, #2
 800988a:	2002      	movs	r0, #2
 800988c:	f7f9 fdf8 	bl	8003480 <FT800_scale>
                FT800_setMatrix();
 8009890:	f7f9 fde9 	bl	8003466 <FT800_setMatrix>

                FT800_bitmapSource(0);
 8009894:	2000      	movs	r0, #0
 8009896:	f7f9 fdc5 	bl	8003424 <FT800_bitmapSource>
                FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 800989a:	4b9d      	ldr	r3, [pc, #628]	; (8009b10 <main+0x1a80>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4a9a      	ldr	r2, [pc, #616]	; (8009b0c <main+0x1a7c>)
 80098a2:	8812      	ldrh	r2, [r2, #0]
 80098a4:	4353      	muls	r3, r2
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	b219      	sxth	r1, r3
 80098aa:	4b97      	ldr	r3, [pc, #604]	; (8009b08 <main+0x1a78>)
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	b21b      	sxth	r3, r3
 80098b0:	001a      	movs	r2, r3
 80098b2:	2007      	movs	r0, #7
 80098b4:	f7f9 fd2a 	bl	800330c <FT800_bitmapLayout>
                FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width*2, img_height*2);
 80098b8:	4b94      	ldr	r3, [pc, #592]	; (8009b0c <main+0x1a7c>)
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	18db      	adds	r3, r3, r3
 80098be:	b29b      	uxth	r3, r3
 80098c0:	b21a      	sxth	r2, r3
 80098c2:	4b91      	ldr	r3, [pc, #580]	; (8009b08 <main+0x1a78>)
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	18db      	adds	r3, r3, r3
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	b21b      	sxth	r3, r3
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	0013      	movs	r3, r2
 80098d0:	2200      	movs	r2, #0
 80098d2:	2100      	movs	r1, #0
 80098d4:	2000      	movs	r0, #0
 80098d6:	f7f9 fd57 	bl	8003388 <FT800_bitmapSize>
                FT800_bitmapBegin();
 80098da:	f7f9 fd09 	bl	80032f0 <FT800_bitmapBegin>

                FT800_macro(0);
 80098de:	2000      	movs	r0, #0
 80098e0:	f7f9 fceb 	bl	80032ba <FT800_macro>
                FT800_endOfList();
 80098e4:	f7f8 f97e 	bl	8001be4 <FT800_endOfList>

                break;
 80098e8:	46c0      	nop			; (mov r8, r8)
        }
        if(touched)
 80098ea:	4b8a      	ldr	r3, [pc, #552]	; (8009b14 <main+0x1a84>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d100      	bne.n	80098f4 <main+0x1864>
 80098f2:	e14a      	b.n	8009b8a <main+0x1afa>
        {
            touched=0;
 80098f4:	4b87      	ldr	r3, [pc, #540]	; (8009b14 <main+0x1a84>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
            FT800_clearIntFlags();
 80098fa:	f7f8 f8d9 	bl	8001ab0 <FT800_clearIntFlags>
            tag = FT800_readTag();
 80098fe:	f7f9 fbcb 	bl	8003098 <FT800_readTag>
 8009902:	0003      	movs	r3, r0
 8009904:	001a      	movs	r2, r3
 8009906:	4b84      	ldr	r3, [pc, #528]	; (8009b18 <main+0x1a88>)
 8009908:	701a      	strb	r2, [r3, #0]

            if(tag)
 800990a:	4b83      	ldr	r3, [pc, #524]	; (8009b18 <main+0x1a88>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d100      	bne.n	8009914 <main+0x1884>
 8009912:	e13a      	b.n	8009b8a <main+0x1afa>
            {
                if(tag&0x80)
 8009914:	4b80      	ldr	r3, [pc, #512]	; (8009b18 <main+0x1a88>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	b25b      	sxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	da07      	bge.n	800992e <main+0x189e>
                {
                    mute=0;
 800991e:	4b7f      	ldr	r3, [pc, #508]	; (8009b1c <main+0x1a8c>)
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
                    menu=tag;
 8009924:	4b7c      	ldr	r3, [pc, #496]	; (8009b18 <main+0x1a88>)
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	4b7d      	ldr	r3, [pc, #500]	; (8009b20 <main+0x1a90>)
 800992a:	701a      	strb	r2, [r3, #0]
 800992c:	e11f      	b.n	8009b6e <main+0x1ade>
                }
                else
                {
                    switch(tag)
 800992e:	4b7a      	ldr	r3, [pc, #488]	; (8009b18 <main+0x1a88>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b10      	cmp	r3, #16
 8009934:	d900      	bls.n	8009938 <main+0x18a8>
 8009936:	e11a      	b.n	8009b6e <main+0x1ade>
 8009938:	009a      	lsls	r2, r3, #2
 800993a:	4b7a      	ldr	r3, [pc, #488]	; (8009b24 <main+0x1a94>)
 800993c:	18d3      	adds	r3, r2, r3
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	469f      	mov	pc, r3
                    {
                        case SLIDER:
                            slider_value=FT800_readValue()>>6;
 8009942:	f7f9 fbbd 	bl	80030c0 <FT800_readValue>
 8009946:	0003      	movs	r3, r0
 8009948:	099b      	lsrs	r3, r3, #6
 800994a:	b29a      	uxth	r2, r3
 800994c:	4b76      	ldr	r3, [pc, #472]	; (8009b28 <main+0x1a98>)
 800994e:	801a      	strh	r2, [r3, #0]
                            break;
 8009950:	e10d      	b.n	8009b6e <main+0x1ade>
                        case SCROLL_V:
                            scroll_v_value=FT800_readValue()>>8;
 8009952:	f7f9 fbb5 	bl	80030c0 <FT800_readValue>
 8009956:	0003      	movs	r3, r0
 8009958:	0a1b      	lsrs	r3, r3, #8
 800995a:	b29a      	uxth	r2, r3
 800995c:	4b73      	ldr	r3, [pc, #460]	; (8009b2c <main+0x1a9c>)
 800995e:	801a      	strh	r2, [r3, #0]
                            break;
 8009960:	e105      	b.n	8009b6e <main+0x1ade>
                        case SCROLL_H:
                            scroll_h_value=FT800_readValue()>>7;
 8009962:	f7f9 fbad 	bl	80030c0 <FT800_readValue>
 8009966:	0003      	movs	r3, r0
 8009968:	09db      	lsrs	r3, r3, #7
 800996a:	b29a      	uxth	r2, r3
 800996c:	4b70      	ldr	r3, [pc, #448]	; (8009b30 <main+0x1aa0>)
 800996e:	801a      	strh	r2, [r3, #0]
                            break;
 8009970:	e0fd      	b.n	8009b6e <main+0x1ade>
                        case DIAL:
                            dial_value=FT800_readValue();
 8009972:	f7f9 fba5 	bl	80030c0 <FT800_readValue>
 8009976:	0003      	movs	r3, r0
 8009978:	001a      	movs	r2, r3
 800997a:	4b6e      	ldr	r3, [pc, #440]	; (8009b34 <main+0x1aa4>)
 800997c:	801a      	strh	r2, [r3, #0]
                            break;
 800997e:	e0f6      	b.n	8009b6e <main+0x1ade>
                        case TOGGLE:
                            toggle_value=FT800_readValue();
 8009980:	f7f9 fb9e 	bl	80030c0 <FT800_readValue>
 8009984:	0003      	movs	r3, r0
 8009986:	001a      	movs	r2, r3
 8009988:	4b6b      	ldr	r3, [pc, #428]	; (8009b38 <main+0x1aa8>)
 800998a:	801a      	strh	r2, [r3, #0]
                            break;
 800998c:	e0ef      	b.n	8009b6e <main+0x1ade>
                        case KEY:
                            break;
                        case NOTES:
                            break;
                        case SLIDER1:
                            mute=0; slider_value=FT800_readValue()>>6;
 800998e:	4b63      	ldr	r3, [pc, #396]	; (8009b1c <main+0x1a8c>)
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	f7f9 fb94 	bl	80030c0 <FT800_readValue>
 8009998:	0003      	movs	r3, r0
 800999a:	099b      	lsrs	r3, r3, #6
 800999c:	b29a      	uxth	r2, r3
 800999e:	4b62      	ldr	r3, [pc, #392]	; (8009b28 <main+0x1a98>)
 80099a0:	801a      	strh	r2, [r3, #0]
                            break;
 80099a2:	e0e4      	b.n	8009b6e <main+0x1ade>
                        case FORWARD:
                            if(menu==BMP)
 80099a4:	4b5e      	ldr	r3, [pc, #376]	; (8009b20 <main+0x1a90>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b88      	cmp	r3, #136	; 0x88
 80099aa:	d10d      	bne.n	80099c8 <main+0x1938>
                            {
                                if(bmp_num==(NUM_OF_BMPS-1))bmp_num=0;
 80099ac:	4b63      	ldr	r3, [pc, #396]	; (8009b3c <main+0x1aac>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d103      	bne.n	80099bc <main+0x192c>
 80099b4:	4b61      	ldr	r3, [pc, #388]	; (8009b3c <main+0x1aac>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	e005      	b.n	80099c8 <main+0x1938>
                                else bmp_num++;
 80099bc:	4b5f      	ldr	r3, [pc, #380]	; (8009b3c <main+0x1aac>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	4b5d      	ldr	r3, [pc, #372]	; (8009b3c <main+0x1aac>)
 80099c6:	701a      	strb	r2, [r3, #0]
                            }
                            if(menu==JPG)
 80099c8:	4b55      	ldr	r3, [pc, #340]	; (8009b20 <main+0x1a90>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b8a      	cmp	r3, #138	; 0x8a
 80099ce:	d10d      	bne.n	80099ec <main+0x195c>
                            {
                                if(jpg_num==(NUM_OF_JPGS-1))jpg_num=0;
 80099d0:	4b5b      	ldr	r3, [pc, #364]	; (8009b40 <main+0x1ab0>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d103      	bne.n	80099e0 <main+0x1950>
 80099d8:	4b59      	ldr	r3, [pc, #356]	; (8009b40 <main+0x1ab0>)
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e005      	b.n	80099ec <main+0x195c>
                                else jpg_num++;
 80099e0:	4b57      	ldr	r3, [pc, #348]	; (8009b40 <main+0x1ab0>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	3301      	adds	r3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	4b55      	ldr	r3, [pc, #340]	; (8009b40 <main+0x1ab0>)
 80099ea:	701a      	strb	r2, [r3, #0]
                            }
                            new_file=1;
 80099ec:	4b55      	ldr	r3, [pc, #340]	; (8009b44 <main+0x1ab4>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	701a      	strb	r2, [r3, #0]
                            break;
 80099f2:	e0bc      	b.n	8009b6e <main+0x1ade>
                          case BACKWARD:
                            if(menu==BMP)
 80099f4:	4b4a      	ldr	r3, [pc, #296]	; (8009b20 <main+0x1a90>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b88      	cmp	r3, #136	; 0x88
 80099fa:	d10d      	bne.n	8009a18 <main+0x1988>
                            {
                                if(bmp_num==0)bmp_num=NUM_OF_BMPS-1;
 80099fc:	4b4f      	ldr	r3, [pc, #316]	; (8009b3c <main+0x1aac>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <main+0x197c>
 8009a04:	4b4d      	ldr	r3, [pc, #308]	; (8009b3c <main+0x1aac>)
 8009a06:	2204      	movs	r2, #4
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e005      	b.n	8009a18 <main+0x1988>
                                else bmp_num--;
 8009a0c:	4b4b      	ldr	r3, [pc, #300]	; (8009b3c <main+0x1aac>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	4b49      	ldr	r3, [pc, #292]	; (8009b3c <main+0x1aac>)
 8009a16:	701a      	strb	r2, [r3, #0]
                            }
                            if(menu==JPG)
 8009a18:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <main+0x1a90>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b8a      	cmp	r3, #138	; 0x8a
 8009a1e:	d10d      	bne.n	8009a3c <main+0x19ac>
                            {
                                if(jpg_num==0)jpg_num=NUM_OF_JPGS-1;
 8009a20:	4b47      	ldr	r3, [pc, #284]	; (8009b40 <main+0x1ab0>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <main+0x19a0>
 8009a28:	4b45      	ldr	r3, [pc, #276]	; (8009b40 <main+0x1ab0>)
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	e005      	b.n	8009a3c <main+0x19ac>
                                else jpg_num--;
 8009a30:	4b43      	ldr	r3, [pc, #268]	; (8009b40 <main+0x1ab0>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	4b41      	ldr	r3, [pc, #260]	; (8009b40 <main+0x1ab0>)
 8009a3a:	701a      	strb	r2, [r3, #0]
                            }
                            new_file=1;
 8009a3c:	4b41      	ldr	r3, [pc, #260]	; (8009b44 <main+0x1ab4>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	701a      	strb	r2, [r3, #0]
                            break;
 8009a42:	e094      	b.n	8009b6e <main+0x1ade>
                        case NEXT:
                            if(wav_num==(NUM_OF_WAVS-1))wav_num=0;
 8009a44:	4b40      	ldr	r3, [pc, #256]	; (8009b48 <main+0x1ab8>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d103      	bne.n	8009a54 <main+0x19c4>
 8009a4c:	4b3e      	ldr	r3, [pc, #248]	; (8009b48 <main+0x1ab8>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	e005      	b.n	8009a60 <main+0x19d0>
                            else wav_num++;
 8009a54:	4b3c      	ldr	r3, [pc, #240]	; (8009b48 <main+0x1ab8>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	4b3a      	ldr	r3, [pc, #232]	; (8009b48 <main+0x1ab8>)
 8009a5e:	701a      	strb	r2, [r3, #0]
                            new_file=1;
 8009a60:	4b38      	ldr	r3, [pc, #224]	; (8009b44 <main+0x1ab4>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
                            break;
 8009a66:	e082      	b.n	8009b6e <main+0x1ade>
                        case PREVIOUS:
                            if(wav_num==0)wav_num=NUM_OF_WAVS-1;
 8009a68:	4b37      	ldr	r3, [pc, #220]	; (8009b48 <main+0x1ab8>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d103      	bne.n	8009a78 <main+0x19e8>
 8009a70:	4b35      	ldr	r3, [pc, #212]	; (8009b48 <main+0x1ab8>)
 8009a72:	2203      	movs	r2, #3
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	e005      	b.n	8009a84 <main+0x19f4>
                            else wav_num--;
 8009a78:	4b33      	ldr	r3, [pc, #204]	; (8009b48 <main+0x1ab8>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <main+0x1ab8>)
 8009a82:	701a      	strb	r2, [r3, #0]
                            new_file=1;
 8009a84:	4b2f      	ldr	r3, [pc, #188]	; (8009b44 <main+0x1ab4>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	701a      	strb	r2, [r3, #0]
                            break;
 8009a8a:	e070      	b.n	8009b6e <main+0x1ade>
                        case PLAY:
                            FT800_configurePlayback(0, wav_size, wav_sample_rate, wav_format, 0);
 8009a8c:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <main+0x1abc>)
 8009a8e:	6819      	ldr	r1, [r3, #0]
 8009a90:	4b2f      	ldr	r3, [pc, #188]	; (8009b50 <main+0x1ac0>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	4b2f      	ldr	r3, [pc, #188]	; (8009b54 <main+0x1ac4>)
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	b2d8      	uxtb	r0, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	0003      	movs	r3, r0
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	f7f7 fd2a 	bl	80014fc <FT800_configurePlayback>
                            FT800_playPlayback(1);
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	f7f7 fd69 	bl	8001580 <FT800_playPlayback>
                            break;
 8009aae:	e05e      	b.n	8009b6e <main+0x1ade>
                        case SLIDER2:
                            slider_value=FT800_readValue()>>6;
 8009ab0:	f7f9 fb06 	bl	80030c0 <FT800_readValue>
 8009ab4:	0003      	movs	r3, r0
 8009ab6:	099b      	lsrs	r3, r3, #6
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <main+0x1a98>)
 8009abc:	801a      	strh	r2, [r3, #0]
                            FT800_setPlaybackVolume(slider_value>>2);
 8009abe:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <main+0x1a98>)
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	089b      	lsrs	r3, r3, #2
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	0018      	movs	r0, r3
 8009aca:	f7f7 fd03 	bl	80014d4 <FT800_setPlaybackVolume>
                            break;
 8009ace:	e04e      	b.n	8009b6e <main+0x1ade>
                        case SCROLL_S:
                            scale_factor=FT800_readValue()>>14;
 8009ad0:	f7f9 faf6 	bl	80030c0 <FT800_readValue>
 8009ad4:	0003      	movs	r3, r0
 8009ad6:	0b9b      	lsrs	r3, r3, #14
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	b21a      	sxth	r2, r3
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <main+0x1ac8>)
 8009ade:	801a      	strh	r2, [r3, #0]
                            break;
 8009ae0:	e045      	b.n	8009b6e <main+0x1ade>
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	20000009 	.word	0x20000009
 8009ae8:	00ff9500 	.word	0x00ff9500
 8009aec:	0800ae6c 	.word	0x0800ae6c
 8009af0:	00ffffff 	.word	0x00ffffff
 8009af4:	0800ad00 	.word	0x0800ad00
 8009af8:	20000014 	.word	0x20000014
 8009afc:	0800ae48 	.word	0x0800ae48
 8009b00:	0800ac78 	.word	0x0800ac78
 8009b04:	2000036c 	.word	0x2000036c
 8009b08:	200012b4 	.word	0x200012b4
 8009b0c:	2000133c 	.word	0x2000133c
 8009b10:	2000129c 	.word	0x2000129c
 8009b14:	20000361 	.word	0x20000361
 8009b18:	20001292 	.word	0x20001292
 8009b1c:	2000036a 	.word	0x2000036a
 8009b20:	20000008 	.word	0x20000008
 8009b24:	0800aed8 	.word	0x0800aed8
 8009b28:	2000000a 	.word	0x2000000a
 8009b2c:	2000000c 	.word	0x2000000c
 8009b30:	2000000e 	.word	0x2000000e
 8009b34:	20000362 	.word	0x20000362
 8009b38:	20000364 	.word	0x20000364
 8009b3c:	2000002c 	.word	0x2000002c
 8009b40:	20000048 	.word	0x20000048
 8009b44:	20000385 	.word	0x20000385
 8009b48:	20000384 	.word	0x20000384
 8009b4c:	20001340 	.word	0x20001340
 8009b50:	20001338 	.word	0x20001338
 8009b54:	20001298 	.word	0x20001298
 8009b58:	20000380 	.word	0x20000380
                        case SCROLL_R:
                            rotate_factor=FT800_readValue()>>6;
 8009b5c:	f7f9 fab0 	bl	80030c0 <FT800_readValue>
 8009b60:	0003      	movs	r3, r0
 8009b62:	099b      	lsrs	r3, r3, #6
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	b21a      	sxth	r2, r3
 8009b68:	4b28      	ldr	r3, [pc, #160]	; (8009c0c <main+0x1b7c>)
 8009b6a:	801a      	strh	r2, [r3, #0]
                            break;
 8009b6c:	46c0      	nop			; (mov r8, r8)
                    }
                }
                if(!mute)
 8009b6e:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <main+0x1b80>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d109      	bne.n	8009b8a <main+0x1afa>
                {
                    FT800_setSoundVolume(255);
 8009b76:	20ff      	movs	r0, #255	; 0xff
 8009b78:	f7f7 fc64 	bl	8001444 <FT800_setSoundVolume>
                    FT800_setSoundEffect(0x6C,0x50);
 8009b7c:	2150      	movs	r1, #80	; 0x50
 8009b7e:	206c      	movs	r0, #108	; 0x6c
 8009b80:	f7f7 fc74 	bl	800146c <FT800_setSoundEffect>
                    FT800_playSound(1);
 8009b84:	2001      	movs	r0, #1
 8009b86:	f7f7 fc8f 	bl	80014a8 <FT800_playSound>
                }

            }
        }
        //for clock testing
        ms+=20;
 8009b8a:	4b22      	ldr	r3, [pc, #136]	; (8009c14 <main+0x1b84>)
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	3314      	adds	r3, #20
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	4b20      	ldr	r3, [pc, #128]	; (8009c14 <main+0x1b84>)
 8009b94:	801a      	strh	r2, [r3, #0]
        if(ms==1000)
 8009b96:	4b1f      	ldr	r3, [pc, #124]	; (8009c14 <main+0x1b84>)
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	23fa      	movs	r3, #250	; 0xfa
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d001      	beq.n	8009ba6 <main+0x1b16>
 8009ba2:	f7fe faf6 	bl	8008192 <main+0x102>
        {
            ms=0;
 8009ba6:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <main+0x1b84>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	801a      	strh	r2, [r3, #0]
            sec++;
 8009bac:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <main+0x1b88>)
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <main+0x1b88>)
 8009bb6:	801a      	strh	r2, [r3, #0]
            if(sec==60)
 8009bb8:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <main+0x1b88>)
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	2b3c      	cmp	r3, #60	; 0x3c
 8009bbe:	d001      	beq.n	8009bc4 <main+0x1b34>
 8009bc0:	f7fe fae7 	bl	8008192 <main+0x102>
            {
                sec=0;
 8009bc4:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <main+0x1b88>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	801a      	strh	r2, [r3, #0]
                min++;
 8009bca:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <main+0x1b8c>)
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <main+0x1b8c>)
 8009bd4:	801a      	strh	r2, [r3, #0]
                if(min==60)
 8009bd6:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <main+0x1b8c>)
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	2b3c      	cmp	r3, #60	; 0x3c
 8009bdc:	d001      	beq.n	8009be2 <main+0x1b52>
 8009bde:	f7fe fad8 	bl	8008192 <main+0x102>
                {
                    min=0;
 8009be2:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <main+0x1b8c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	801a      	strh	r2, [r3, #0]
                    hour++;
 8009be8:	4b0d      	ldr	r3, [pc, #52]	; (8009c20 <main+0x1b90>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	3301      	adds	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <main+0x1b90>)
 8009bf2:	801a      	strh	r2, [r3, #0]
                    if(hour==12)hour=0;
 8009bf4:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <main+0x1b90>)
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	2b0c      	cmp	r3, #12
 8009bfa:	d001      	beq.n	8009c00 <main+0x1b70>
 8009bfc:	f7fe fac9 	bl	8008192 <main+0x102>
 8009c00:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <main+0x1b90>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	801a      	strh	r2, [r3, #0]
        switch(menu)
 8009c06:	f7fe fac4 	bl	8008192 <main+0x102>
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	20000382 	.word	0x20000382
 8009c10:	2000036a 	.word	0x2000036a
 8009c14:	20000366 	.word	0x20000366
 8009c18:	20000368 	.word	0x20000368
 8009c1c:	20000010 	.word	0x20000010
 8009c20:	20000012 	.word	0x20000012

08009c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b091      	sub	sp, #68	; 0x44
 8009c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c2a:	2410      	movs	r4, #16
 8009c2c:	193b      	adds	r3, r7, r4
 8009c2e:	0018      	movs	r0, r3
 8009c30:	2330      	movs	r3, #48	; 0x30
 8009c32:	001a      	movs	r2, r3
 8009c34:	2100      	movs	r1, #0
 8009c36:	f000 fb25 	bl	800a284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c3a:	003b      	movs	r3, r7
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	2310      	movs	r3, #16
 8009c40:	001a      	movs	r2, r3
 8009c42:	2100      	movs	r1, #0
 8009c44:	f000 fb1e 	bl	800a284 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c48:	0021      	movs	r1, r4
 8009c4a:	187b      	adds	r3, r7, r1
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009c50:	187b      	adds	r3, r7, r1
 8009c52:	2201      	movs	r2, #1
 8009c54:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c56:	187b      	adds	r3, r7, r1
 8009c58:	2202      	movs	r2, #2
 8009c5a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c5c:	187b      	adds	r3, r7, r1
 8009c5e:	2280      	movs	r2, #128	; 0x80
 8009c60:	0252      	lsls	r2, r2, #9
 8009c62:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009c64:	187b      	adds	r3, r7, r1
 8009c66:	22e0      	movs	r2, #224	; 0xe0
 8009c68:	0352      	lsls	r2, r2, #13
 8009c6a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV4;
 8009c6c:	187b      	adds	r3, r7, r1
 8009c6e:	2203      	movs	r2, #3
 8009c70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c72:	187b      	adds	r3, r7, r1
 8009c74:	0018      	movs	r0, r3
 8009c76:	f7f6 fedd 	bl	8000a34 <HAL_RCC_OscConfig>
 8009c7a:	1e03      	subs	r3, r0, #0
 8009c7c:	d001      	beq.n	8009c82 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8009c7e:	f000 f965 	bl	8009f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c82:	003b      	movs	r3, r7
 8009c84:	2207      	movs	r2, #7
 8009c86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c88:	003b      	movs	r3, r7
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c8e:	003b      	movs	r3, r7
 8009c90:	2200      	movs	r2, #0
 8009c92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c94:	003b      	movs	r3, r7
 8009c96:	2200      	movs	r2, #0
 8009c98:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009c9a:	003b      	movs	r3, r7
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	f7f7 f9e4 	bl	800106c <HAL_RCC_ClockConfig>
 8009ca4:	1e03      	subs	r3, r0, #0
 8009ca6:	d001      	beq.n	8009cac <SystemClock_Config+0x88>
  {
    Error_Handler();
 8009ca8:	f000 f950 	bl	8009f4c <Error_Handler>
  }
}
 8009cac:	46c0      	nop			; (mov r8, r8)
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	b011      	add	sp, #68	; 0x44
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009cb8:	4b1b      	ldr	r3, [pc, #108]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cba:	4a1c      	ldr	r2, [pc, #112]	; (8009d2c <MX_SPI1_Init+0x78>)
 8009cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cc0:	2282      	movs	r2, #130	; 0x82
 8009cc2:	0052      	lsls	r2, r2, #1
 8009cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009cc6:	4b18      	ldr	r3, [pc, #96]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009ccc:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cce:	22e0      	movs	r2, #224	; 0xe0
 8009cd0:	00d2      	lsls	r2, r2, #3
 8009cd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009ce2:	2280      	movs	r2, #128	; 0x80
 8009ce4:	0092      	lsls	r2, r2, #2
 8009ce6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009cee:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009d02:	2207      	movs	r2, #7
 8009d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009d0c:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <MX_SPI1_Init+0x74>)
 8009d14:	0018      	movs	r0, r3
 8009d16:	f7f7 fadd 	bl	80012d4 <HAL_SPI_Init>
 8009d1a:	1e03      	subs	r3, r0, #0
 8009d1c:	d001      	beq.n	8009d22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009d1e:	f000 f915 	bl	8009f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200012d0 	.word	0x200012d0
 8009d2c:	40013000 	.word	0x40013000

08009d30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009d34:	4b1b      	ldr	r3, [pc, #108]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d36:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <MX_SPI2_Init+0x78>)
 8009d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009d3a:	4b1a      	ldr	r3, [pc, #104]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d3c:	2282      	movs	r2, #130	; 0x82
 8009d3e:	0052      	lsls	r2, r2, #1
 8009d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009d42:	4b18      	ldr	r3, [pc, #96]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009d48:	4b16      	ldr	r3, [pc, #88]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d4a:	22e0      	movs	r2, #224	; 0xe0
 8009d4c:	00d2      	lsls	r2, r2, #3
 8009d4e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d50:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009d56:	4b13      	ldr	r3, [pc, #76]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009d5c:	4b11      	ldr	r3, [pc, #68]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d5e:	2280      	movs	r2, #128	; 0x80
 8009d60:	0092      	lsls	r2, r2, #2
 8009d62:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d64:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009d6a:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009d70:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009d7c:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d7e:	2207      	movs	r2, #7
 8009d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009d88:	4b06      	ldr	r3, [pc, #24]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <MX_SPI2_Init+0x74>)
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7f7 fa9f 	bl	80012d4 <HAL_SPI_Init>
 8009d96:	1e03      	subs	r3, r0, #0
 8009d98:	d001      	beq.n	8009d9e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009d9a:	f000 f8d7 	bl	8009f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20001000 	.word	0x20001000
 8009da8:	40003800 	.word	0x40003800

08009dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009dac:	b590      	push	{r4, r7, lr}
 8009dae:	b08b      	sub	sp, #44	; 0x2c
 8009db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009db2:	2414      	movs	r4, #20
 8009db4:	193b      	adds	r3, r7, r4
 8009db6:	0018      	movs	r0, r3
 8009db8:	2314      	movs	r3, #20
 8009dba:	001a      	movs	r2, r3
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	f000 fa61 	bl	800a284 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009dc2:	4b52      	ldr	r3, [pc, #328]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009dc4:	695a      	ldr	r2, [r3, #20]
 8009dc6:	4b51      	ldr	r3, [pc, #324]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009dc8:	2180      	movs	r1, #128	; 0x80
 8009dca:	0309      	lsls	r1, r1, #12
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	615a      	str	r2, [r3, #20]
 8009dd0:	4b4e      	ldr	r3, [pc, #312]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009dd2:	695a      	ldr	r2, [r3, #20]
 8009dd4:	2380      	movs	r3, #128	; 0x80
 8009dd6:	031b      	lsls	r3, r3, #12
 8009dd8:	4013      	ands	r3, r2
 8009dda:	613b      	str	r3, [r7, #16]
 8009ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009dde:	4b4b      	ldr	r3, [pc, #300]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009de0:	695a      	ldr	r2, [r3, #20]
 8009de2:	4b4a      	ldr	r3, [pc, #296]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009de4:	2180      	movs	r1, #128	; 0x80
 8009de6:	03c9      	lsls	r1, r1, #15
 8009de8:	430a      	orrs	r2, r1
 8009dea:	615a      	str	r2, [r3, #20]
 8009dec:	4b47      	ldr	r3, [pc, #284]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009dee:	695a      	ldr	r2, [r3, #20]
 8009df0:	2380      	movs	r3, #128	; 0x80
 8009df2:	03db      	lsls	r3, r3, #15
 8009df4:	4013      	ands	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dfa:	4b44      	ldr	r3, [pc, #272]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009dfc:	695a      	ldr	r2, [r3, #20]
 8009dfe:	4b43      	ldr	r3, [pc, #268]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009e00:	2180      	movs	r1, #128	; 0x80
 8009e02:	0289      	lsls	r1, r1, #10
 8009e04:	430a      	orrs	r2, r1
 8009e06:	615a      	str	r2, [r3, #20]
 8009e08:	4b40      	ldr	r3, [pc, #256]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009e0a:	695a      	ldr	r2, [r3, #20]
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	029b      	lsls	r3, r3, #10
 8009e10:	4013      	ands	r3, r2
 8009e12:	60bb      	str	r3, [r7, #8]
 8009e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e16:	4b3d      	ldr	r3, [pc, #244]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009e18:	695a      	ldr	r2, [r3, #20]
 8009e1a:	4b3c      	ldr	r3, [pc, #240]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009e1c:	2180      	movs	r1, #128	; 0x80
 8009e1e:	02c9      	lsls	r1, r1, #11
 8009e20:	430a      	orrs	r2, r1
 8009e22:	615a      	str	r2, [r3, #20]
 8009e24:	4b39      	ldr	r3, [pc, #228]	; (8009f0c <MX_GPIO_Init+0x160>)
 8009e26:	695a      	ldr	r2, [r3, #20]
 8009e28:	2380      	movs	r3, #128	; 0x80
 8009e2a:	02db      	lsls	r3, r3, #11
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	607b      	str	r3, [r7, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8009e32:	23c0      	movs	r3, #192	; 0xc0
 8009e34:	019b      	lsls	r3, r3, #6
 8009e36:	4836      	ldr	r0, [pc, #216]	; (8009f10 <MX_GPIO_Init+0x164>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	0019      	movs	r1, r3
 8009e3c:	f7f6 fdc0 	bl	80009c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8009e40:	2390      	movs	r3, #144	; 0x90
 8009e42:	05db      	lsls	r3, r3, #23
 8009e44:	2200      	movs	r2, #0
 8009e46:	2110      	movs	r1, #16
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f7f6 fdb9 	bl	80009c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8009e4e:	4931      	ldr	r1, [pc, #196]	; (8009f14 <MX_GPIO_Init+0x168>)
 8009e50:	4b31      	ldr	r3, [pc, #196]	; (8009f18 <MX_GPIO_Init+0x16c>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	0018      	movs	r0, r3
 8009e56:	f7f6 fdb3 	bl	80009c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8009e5a:	193b      	adds	r3, r7, r4
 8009e5c:	22c0      	movs	r2, #192	; 0xc0
 8009e5e:	0192      	lsls	r2, r2, #6
 8009e60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e62:	193b      	adds	r3, r7, r4
 8009e64:	2201      	movs	r2, #1
 8009e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e68:	193b      	adds	r3, r7, r4
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e6e:	193b      	adds	r3, r7, r4
 8009e70:	2200      	movs	r2, #0
 8009e72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e74:	193b      	adds	r3, r7, r4
 8009e76:	4a26      	ldr	r2, [pc, #152]	; (8009f10 <MX_GPIO_Init+0x164>)
 8009e78:	0019      	movs	r1, r3
 8009e7a:	0010      	movs	r0, r2
 8009e7c:	f7f6 fc30 	bl	80006e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009e80:	193b      	adds	r3, r7, r4
 8009e82:	2210      	movs	r2, #16
 8009e84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e86:	193b      	adds	r3, r7, r4
 8009e88:	2201      	movs	r2, #1
 8009e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e8c:	193b      	adds	r3, r7, r4
 8009e8e:	2200      	movs	r2, #0
 8009e90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009e92:	193b      	adds	r3, r7, r4
 8009e94:	2203      	movs	r2, #3
 8009e96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e98:	193a      	adds	r2, r7, r4
 8009e9a:	2390      	movs	r3, #144	; 0x90
 8009e9c:	05db      	lsls	r3, r3, #23
 8009e9e:	0011      	movs	r1, r2
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f7f6 fc1d 	bl	80006e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9;
 8009ea6:	0021      	movs	r1, r4
 8009ea8:	187b      	adds	r3, r7, r1
 8009eaa:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <MX_GPIO_Init+0x168>)
 8009eac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009eae:	187b      	adds	r3, r7, r1
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eb4:	187b      	adds	r3, r7, r1
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009eba:	187b      	adds	r3, r7, r1
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ec0:	000c      	movs	r4, r1
 8009ec2:	187b      	adds	r3, r7, r1
 8009ec4:	4a14      	ldr	r2, [pc, #80]	; (8009f18 <MX_GPIO_Init+0x16c>)
 8009ec6:	0019      	movs	r1, r3
 8009ec8:	0010      	movs	r0, r2
 8009eca:	f7f6 fc09 	bl	80006e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009ece:	0021      	movs	r1, r4
 8009ed0:	187b      	adds	r3, r7, r1
 8009ed2:	2280      	movs	r2, #128	; 0x80
 8009ed4:	0092      	lsls	r2, r2, #2
 8009ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009ed8:	187b      	adds	r3, r7, r1
 8009eda:	2284      	movs	r2, #132	; 0x84
 8009edc:	0392      	lsls	r2, r2, #14
 8009ede:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ee6:	187b      	adds	r3, r7, r1
 8009ee8:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <MX_GPIO_Init+0x164>)
 8009eea:	0019      	movs	r1, r3
 8009eec:	0010      	movs	r0, r2
 8009eee:	f7f6 fbf7 	bl	80006e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	2007      	movs	r0, #7
 8009ef8:	f7f6 fbc0 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009efc:	2007      	movs	r0, #7
 8009efe:	f7f6 fbd2 	bl	80006a6 <HAL_NVIC_EnableIRQ>

}
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b00b      	add	sp, #44	; 0x2c
 8009f08:	bd90      	pop	{r4, r7, pc}
 8009f0a:	46c0      	nop			; (mov r8, r8)
 8009f0c:	40021000 	.word	0x40021000
 8009f10:	48000800 	.word	0x48000800
 8009f14:	00001203 	.word	0x00001203
 8009f18:	48000400 	.word	0x48000400

08009f1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	0002      	movs	r2, r0
 8009f24:	1dbb      	adds	r3, r7, #6
 8009f26:	801a      	strh	r2, [r3, #0]
	if(GPIO_PIN == GPIO_PIN_9){
 8009f28:	1dbb      	adds	r3, r7, #6
 8009f2a:	881a      	ldrh	r2, [r3, #0]
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d103      	bne.n	8009f3c <HAL_GPIO_EXTI_Callback+0x20>
		touched = 1;
 8009f34:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <HAL_GPIO_EXTI_Callback+0x2c>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	701a      	strb	r2, [r3, #0]
	}
	else{
		__NOP();
	}
}
 8009f3a:	e000      	b.n	8009f3e <HAL_GPIO_EXTI_Callback+0x22>
		__NOP();
 8009f3c:	46c0      	nop			; (mov r8, r8)
}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	46bd      	mov	sp, r7
 8009f42:	b002      	add	sp, #8
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	46c0      	nop			; (mov r8, r8)
 8009f48:	20000361 	.word	0x20000361

08009f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009f50:	46c0      	nop			; (mov r8, r8)
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <delay_ms>:
#include "my_delays.h"


void delay_ms(uint32_t delay)
 {
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
     HAL_Delay(delay);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	0018      	movs	r0, r3
 8009f62:	f7f6 fabd 	bl	80004e0 <HAL_Delay>
 }
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b002      	add	sp, #8
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f76:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <HAL_MspInit+0x44>)
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <HAL_MspInit+0x44>)
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	619a      	str	r2, [r3, #24]
 8009f82:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <HAL_MspInit+0x44>)
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	2201      	movs	r2, #1
 8009f88:	4013      	ands	r3, r2
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <HAL_MspInit+0x44>)
 8009f90:	69da      	ldr	r2, [r3, #28]
 8009f92:	4b08      	ldr	r3, [pc, #32]	; (8009fb4 <HAL_MspInit+0x44>)
 8009f94:	2180      	movs	r1, #128	; 0x80
 8009f96:	0549      	lsls	r1, r1, #21
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	61da      	str	r2, [r3, #28]
 8009f9c:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <HAL_MspInit+0x44>)
 8009f9e:	69da      	ldr	r2, [r3, #28]
 8009fa0:	2380      	movs	r3, #128	; 0x80
 8009fa2:	055b      	lsls	r3, r3, #21
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b002      	add	sp, #8
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	40021000 	.word	0x40021000

08009fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08c      	sub	sp, #48	; 0x30
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fc0:	231c      	movs	r3, #28
 8009fc2:	18fb      	adds	r3, r7, r3
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	2314      	movs	r3, #20
 8009fc8:	001a      	movs	r2, r3
 8009fca:	2100      	movs	r1, #0
 8009fcc:	f000 f95a 	bl	800a284 <memset>
  if(hspi->Instance==SPI1)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a39      	ldr	r2, [pc, #228]	; (800a0bc <HAL_SPI_MspInit+0x104>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d133      	bne.n	800a042 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009fda:	4b39      	ldr	r3, [pc, #228]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	4b38      	ldr	r3, [pc, #224]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 8009fe0:	2180      	movs	r1, #128	; 0x80
 8009fe2:	0149      	lsls	r1, r1, #5
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	619a      	str	r2, [r3, #24]
 8009fe8:	4b35      	ldr	r3, [pc, #212]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	2380      	movs	r3, #128	; 0x80
 8009fee:	015b      	lsls	r3, r3, #5
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	61bb      	str	r3, [r7, #24]
 8009ff4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ff6:	4b32      	ldr	r3, [pc, #200]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 8009ff8:	695a      	ldr	r2, [r3, #20]
 8009ffa:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 8009ffc:	2180      	movs	r1, #128	; 0x80
 8009ffe:	0289      	lsls	r1, r1, #10
 800a000:	430a      	orrs	r2, r1
 800a002:	615a      	str	r2, [r3, #20]
 800a004:	4b2e      	ldr	r3, [pc, #184]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a006:	695a      	ldr	r2, [r3, #20]
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	029b      	lsls	r3, r3, #10
 800a00c:	4013      	ands	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a012:	211c      	movs	r1, #28
 800a014:	187b      	adds	r3, r7, r1
 800a016:	22e0      	movs	r2, #224	; 0xe0
 800a018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a01a:	187b      	adds	r3, r7, r1
 800a01c:	2202      	movs	r2, #2
 800a01e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a020:	187b      	adds	r3, r7, r1
 800a022:	2200      	movs	r2, #0
 800a024:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a026:	187b      	adds	r3, r7, r1
 800a028:	2203      	movs	r2, #3
 800a02a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a02c:	187b      	adds	r3, r7, r1
 800a02e:	2200      	movs	r2, #0
 800a030:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a032:	187a      	adds	r2, r7, r1
 800a034:	2390      	movs	r3, #144	; 0x90
 800a036:	05db      	lsls	r3, r3, #23
 800a038:	0011      	movs	r1, r2
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7f6 fb50 	bl	80006e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a040:	e037      	b.n	800a0b2 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1f      	ldr	r2, [pc, #124]	; (800a0c4 <HAL_SPI_MspInit+0x10c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d132      	bne.n	800a0b2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a04e:	69da      	ldr	r2, [r3, #28]
 800a050:	4b1b      	ldr	r3, [pc, #108]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a052:	2180      	movs	r1, #128	; 0x80
 800a054:	01c9      	lsls	r1, r1, #7
 800a056:	430a      	orrs	r2, r1
 800a058:	61da      	str	r2, [r3, #28]
 800a05a:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a05c:	69da      	ldr	r2, [r3, #28]
 800a05e:	2380      	movs	r3, #128	; 0x80
 800a060:	01db      	lsls	r3, r3, #7
 800a062:	4013      	ands	r3, r2
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a068:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a06a:	695a      	ldr	r2, [r3, #20]
 800a06c:	4b14      	ldr	r3, [pc, #80]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a06e:	2180      	movs	r1, #128	; 0x80
 800a070:	02c9      	lsls	r1, r1, #11
 800a072:	430a      	orrs	r2, r1
 800a074:	615a      	str	r2, [r3, #20]
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
 800a078:	695a      	ldr	r2, [r3, #20]
 800a07a:	2380      	movs	r3, #128	; 0x80
 800a07c:	02db      	lsls	r3, r3, #11
 800a07e:	4013      	ands	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800a084:	211c      	movs	r1, #28
 800a086:	187b      	adds	r3, r7, r1
 800a088:	22e0      	movs	r2, #224	; 0xe0
 800a08a:	0212      	lsls	r2, r2, #8
 800a08c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a08e:	187b      	adds	r3, r7, r1
 800a090:	2202      	movs	r2, #2
 800a092:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a094:	187b      	adds	r3, r7, r1
 800a096:	2200      	movs	r2, #0
 800a098:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a09a:	187b      	adds	r3, r7, r1
 800a09c:	2203      	movs	r2, #3
 800a09e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800a0a0:	187b      	adds	r3, r7, r1
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0a6:	187b      	adds	r3, r7, r1
 800a0a8:	4a07      	ldr	r2, [pc, #28]	; (800a0c8 <HAL_SPI_MspInit+0x110>)
 800a0aa:	0019      	movs	r1, r3
 800a0ac:	0010      	movs	r0, r2
 800a0ae:	f7f6 fb17 	bl	80006e0 <HAL_GPIO_Init>
}
 800a0b2:	46c0      	nop			; (mov r8, r8)
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	b00c      	add	sp, #48	; 0x30
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	46c0      	nop			; (mov r8, r8)
 800a0bc:	40013000 	.word	0x40013000
 800a0c0:	40021000 	.word	0x40021000
 800a0c4:	40003800 	.word	0x40003800
 800a0c8:	48000400 	.word	0x48000400

0800a0cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a0d0:	46c0      	nop			; (mov r8, r8)
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a0da:	e7fe      	b.n	800a0da <HardFault_Handler+0x4>

0800a0dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a0e0:	46c0      	nop			; (mov r8, r8)
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a0f4:	f7f6 f9d8 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a0f8:	46c0      	nop			; (mov r8, r8)
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800a102:	2380      	movs	r3, #128	; 0x80
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	0018      	movs	r0, r3
 800a108:	f7f6 fc78 	bl	80009fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800a10c:	46c0      	nop			; (mov r8, r8)
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	0002      	movs	r2, r0
 800a124:	1dfb      	adds	r3, r7, #7
 800a126:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a128:	1dfb      	adds	r3, r7, #7
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	0018      	movs	r0, r3
 800a12e:	f7fd fbb9 	bl	80078a4 <SD_disk_initialize>
 800a132:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800a134:	0018      	movs	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	b002      	add	sp, #8
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	0002      	movs	r2, r0
 800a144:	1dfb      	adds	r3, r7, #7
 800a146:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a148:	1dfb      	adds	r3, r7, #7
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	0018      	movs	r0, r3
 800a14e:	f7fd fcc9 	bl	8007ae4 <SD_disk_status>
 800a152:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	b002      	add	sp, #8
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60b9      	str	r1, [r7, #8]
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	250f      	movs	r5, #15
 800a16a:	197b      	adds	r3, r7, r5
 800a16c:	1c02      	adds	r2, r0, #0
 800a16e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a170:	683c      	ldr	r4, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	197b      	adds	r3, r7, r5
 800a178:	7818      	ldrb	r0, [r3, #0]
 800a17a:	0023      	movs	r3, r4
 800a17c:	f7fd fcc8 	bl	8007b10 <SD_disk_read>
 800a180:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800a182:	0018      	movs	r0, r3
 800a184:	46bd      	mov	sp, r7
 800a186:	b004      	add	sp, #16
 800a188:	bdb0      	pop	{r4, r5, r7, pc}

0800a18a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800a18a:	b5b0      	push	{r4, r5, r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	250f      	movs	r5, #15
 800a198:	197b      	adds	r3, r7, r5
 800a19a:	1c02      	adds	r2, r0, #0
 800a19c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a19e:	683c      	ldr	r4, [r7, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	197b      	adds	r3, r7, r5
 800a1a6:	7818      	ldrb	r0, [r3, #0]
 800a1a8:	0023      	movs	r3, r4
 800a1aa:	f7fd fd21 	bl	8007bf0 <SD_disk_write>
 800a1ae:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	b004      	add	sp, #16
 800a1b6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	603a      	str	r2, [r7, #0]
 800a1c0:	1dfb      	adds	r3, r7, #7
 800a1c2:	1c02      	adds	r2, r0, #0
 800a1c4:	701a      	strb	r2, [r3, #0]
 800a1c6:	1dbb      	adds	r3, r7, #6
 800a1c8:	1c0a      	adds	r2, r1, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	1dbb      	adds	r3, r7, #6
 800a1d0:	7819      	ldrb	r1, [r3, #0]
 800a1d2:	1dfb      	adds	r3, r7, #7
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7fd fd92 	bl	8007d00 <SD_disk_ioctl>
 800a1dc:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800a1de:	0018      	movs	r0, r3
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	b002      	add	sp, #8
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a1e8:	480d      	ldr	r0, [pc, #52]	; (800a220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a1ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a1ec:	480d      	ldr	r0, [pc, #52]	; (800a224 <LoopForever+0x6>)
  ldr r1, =_edata
 800a1ee:	490e      	ldr	r1, [pc, #56]	; (800a228 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a1f0:	4a0e      	ldr	r2, [pc, #56]	; (800a22c <LoopForever+0xe>)
  movs r3, #0
 800a1f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a1f4:	e002      	b.n	800a1fc <LoopCopyDataInit>

0800a1f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a1f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a1f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a1fa:	3304      	adds	r3, #4

0800a1fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a1fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a1fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a200:	d3f9      	bcc.n	800a1f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a202:	4a0b      	ldr	r2, [pc, #44]	; (800a230 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a204:	4c0b      	ldr	r4, [pc, #44]	; (800a234 <LoopForever+0x16>)
  movs r3, #0
 800a206:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a208:	e001      	b.n	800a20e <LoopFillZerobss>

0800a20a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a20a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a20c:	3204      	adds	r2, #4

0800a20e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a20e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a210:	d3fb      	bcc.n	800a20a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800a212:	f7ff ff7e 	bl	800a112 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800a216:	f000 f811 	bl	800a23c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a21a:	f7fd ff39 	bl	8008090 <main>

0800a21e <LoopForever>:

LoopForever:
    b LoopForever
 800a21e:	e7fe      	b.n	800a21e <LoopForever>
  ldr   r0, =_estack
 800a220:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800a224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a228:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 800a22c:	0800af70 	.word	0x0800af70
  ldr r2, =_sbss
 800a230:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800a234:	20001348 	.word	0x20001348

0800a238 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a238:	e7fe      	b.n	800a238 <ADC1_COMP_IRQHandler>
	...

0800a23c <__libc_init_array>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	2600      	movs	r6, #0
 800a240:	4d0c      	ldr	r5, [pc, #48]	; (800a274 <__libc_init_array+0x38>)
 800a242:	4c0d      	ldr	r4, [pc, #52]	; (800a278 <__libc_init_array+0x3c>)
 800a244:	1b64      	subs	r4, r4, r5
 800a246:	10a4      	asrs	r4, r4, #2
 800a248:	42a6      	cmp	r6, r4
 800a24a:	d109      	bne.n	800a260 <__libc_init_array+0x24>
 800a24c:	2600      	movs	r6, #0
 800a24e:	f000 fc41 	bl	800aad4 <_init>
 800a252:	4d0a      	ldr	r5, [pc, #40]	; (800a27c <__libc_init_array+0x40>)
 800a254:	4c0a      	ldr	r4, [pc, #40]	; (800a280 <__libc_init_array+0x44>)
 800a256:	1b64      	subs	r4, r4, r5
 800a258:	10a4      	asrs	r4, r4, #2
 800a25a:	42a6      	cmp	r6, r4
 800a25c:	d105      	bne.n	800a26a <__libc_init_array+0x2e>
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	00b3      	lsls	r3, r6, #2
 800a262:	58eb      	ldr	r3, [r5, r3]
 800a264:	4798      	blx	r3
 800a266:	3601      	adds	r6, #1
 800a268:	e7ee      	b.n	800a248 <__libc_init_array+0xc>
 800a26a:	00b3      	lsls	r3, r6, #2
 800a26c:	58eb      	ldr	r3, [r5, r3]
 800a26e:	4798      	blx	r3
 800a270:	3601      	adds	r6, #1
 800a272:	e7f2      	b.n	800a25a <__libc_init_array+0x1e>
 800a274:	0800af68 	.word	0x0800af68
 800a278:	0800af68 	.word	0x0800af68
 800a27c:	0800af68 	.word	0x0800af68
 800a280:	0800af6c 	.word	0x0800af6c

0800a284 <memset>:
 800a284:	0003      	movs	r3, r0
 800a286:	1812      	adds	r2, r2, r0
 800a288:	4293      	cmp	r3, r2
 800a28a:	d100      	bne.n	800a28e <memset+0xa>
 800a28c:	4770      	bx	lr
 800a28e:	7019      	strb	r1, [r3, #0]
 800a290:	3301      	adds	r3, #1
 800a292:	e7f9      	b.n	800a288 <memset+0x4>

0800a294 <siprintf>:
 800a294:	b40e      	push	{r1, r2, r3}
 800a296:	b500      	push	{lr}
 800a298:	490b      	ldr	r1, [pc, #44]	; (800a2c8 <siprintf+0x34>)
 800a29a:	b09c      	sub	sp, #112	; 0x70
 800a29c:	ab1d      	add	r3, sp, #116	; 0x74
 800a29e:	9002      	str	r0, [sp, #8]
 800a2a0:	9006      	str	r0, [sp, #24]
 800a2a2:	9107      	str	r1, [sp, #28]
 800a2a4:	9104      	str	r1, [sp, #16]
 800a2a6:	4809      	ldr	r0, [pc, #36]	; (800a2cc <siprintf+0x38>)
 800a2a8:	4909      	ldr	r1, [pc, #36]	; (800a2d0 <siprintf+0x3c>)
 800a2aa:	cb04      	ldmia	r3!, {r2}
 800a2ac:	9105      	str	r1, [sp, #20]
 800a2ae:	6800      	ldr	r0, [r0, #0]
 800a2b0:	a902      	add	r1, sp, #8
 800a2b2:	9301      	str	r3, [sp, #4]
 800a2b4:	f000 f878 	bl	800a3a8 <_svfiprintf_r>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9a02      	ldr	r2, [sp, #8]
 800a2bc:	7013      	strb	r3, [r2, #0]
 800a2be:	b01c      	add	sp, #112	; 0x70
 800a2c0:	bc08      	pop	{r3}
 800a2c2:	b003      	add	sp, #12
 800a2c4:	4718      	bx	r3
 800a2c6:	46c0      	nop			; (mov r8, r8)
 800a2c8:	7fffffff 	.word	0x7fffffff
 800a2cc:	2000007c 	.word	0x2000007c
 800a2d0:	ffff0208 	.word	0xffff0208

0800a2d4 <strcpy>:
 800a2d4:	0003      	movs	r3, r0
 800a2d6:	780a      	ldrb	r2, [r1, #0]
 800a2d8:	3101      	adds	r1, #1
 800a2da:	701a      	strb	r2, [r3, #0]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	d1f9      	bne.n	800a2d6 <strcpy+0x2>
 800a2e2:	4770      	bx	lr

0800a2e4 <__ssputs_r>:
 800a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e6:	688e      	ldr	r6, [r1, #8]
 800a2e8:	b085      	sub	sp, #20
 800a2ea:	0007      	movs	r7, r0
 800a2ec:	000c      	movs	r4, r1
 800a2ee:	9203      	str	r2, [sp, #12]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	429e      	cmp	r6, r3
 800a2f4:	d83c      	bhi.n	800a370 <__ssputs_r+0x8c>
 800a2f6:	2390      	movs	r3, #144	; 0x90
 800a2f8:	898a      	ldrh	r2, [r1, #12]
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	421a      	tst	r2, r3
 800a2fe:	d034      	beq.n	800a36a <__ssputs_r+0x86>
 800a300:	2503      	movs	r5, #3
 800a302:	6909      	ldr	r1, [r1, #16]
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	1a5b      	subs	r3, r3, r1
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	6963      	ldr	r3, [r4, #20]
 800a30c:	9802      	ldr	r0, [sp, #8]
 800a30e:	435d      	muls	r5, r3
 800a310:	0feb      	lsrs	r3, r5, #31
 800a312:	195d      	adds	r5, r3, r5
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	106d      	asrs	r5, r5, #1
 800a318:	3301      	adds	r3, #1
 800a31a:	181b      	adds	r3, r3, r0
 800a31c:	42ab      	cmp	r3, r5
 800a31e:	d900      	bls.n	800a322 <__ssputs_r+0x3e>
 800a320:	001d      	movs	r5, r3
 800a322:	0553      	lsls	r3, r2, #21
 800a324:	d532      	bpl.n	800a38c <__ssputs_r+0xa8>
 800a326:	0029      	movs	r1, r5
 800a328:	0038      	movs	r0, r7
 800a32a:	f000 fb23 	bl	800a974 <_malloc_r>
 800a32e:	1e06      	subs	r6, r0, #0
 800a330:	d109      	bne.n	800a346 <__ssputs_r+0x62>
 800a332:	230c      	movs	r3, #12
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	2340      	movs	r3, #64	; 0x40
 800a338:	2001      	movs	r0, #1
 800a33a:	89a2      	ldrh	r2, [r4, #12]
 800a33c:	4240      	negs	r0, r0
 800a33e:	4313      	orrs	r3, r2
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	b005      	add	sp, #20
 800a344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a346:	9a02      	ldr	r2, [sp, #8]
 800a348:	6921      	ldr	r1, [r4, #16]
 800a34a:	f000 faac 	bl	800a8a6 <memcpy>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	4a14      	ldr	r2, [pc, #80]	; (800a3a4 <__ssputs_r+0xc0>)
 800a352:	401a      	ands	r2, r3
 800a354:	2380      	movs	r3, #128	; 0x80
 800a356:	4313      	orrs	r3, r2
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	6126      	str	r6, [r4, #16]
 800a35e:	18f6      	adds	r6, r6, r3
 800a360:	6026      	str	r6, [r4, #0]
 800a362:	6165      	str	r5, [r4, #20]
 800a364:	9e01      	ldr	r6, [sp, #4]
 800a366:	1aed      	subs	r5, r5, r3
 800a368:	60a5      	str	r5, [r4, #8]
 800a36a:	9b01      	ldr	r3, [sp, #4]
 800a36c:	429e      	cmp	r6, r3
 800a36e:	d900      	bls.n	800a372 <__ssputs_r+0x8e>
 800a370:	9e01      	ldr	r6, [sp, #4]
 800a372:	0032      	movs	r2, r6
 800a374:	9903      	ldr	r1, [sp, #12]
 800a376:	6820      	ldr	r0, [r4, #0]
 800a378:	f000 fa9e 	bl	800a8b8 <memmove>
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	2000      	movs	r0, #0
 800a380:	1b9b      	subs	r3, r3, r6
 800a382:	60a3      	str	r3, [r4, #8]
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	199e      	adds	r6, r3, r6
 800a388:	6026      	str	r6, [r4, #0]
 800a38a:	e7da      	b.n	800a342 <__ssputs_r+0x5e>
 800a38c:	002a      	movs	r2, r5
 800a38e:	0038      	movs	r0, r7
 800a390:	f000 fb4e 	bl	800aa30 <_realloc_r>
 800a394:	1e06      	subs	r6, r0, #0
 800a396:	d1e0      	bne.n	800a35a <__ssputs_r+0x76>
 800a398:	6921      	ldr	r1, [r4, #16]
 800a39a:	0038      	movs	r0, r7
 800a39c:	f000 faa0 	bl	800a8e0 <_free_r>
 800a3a0:	e7c7      	b.n	800a332 <__ssputs_r+0x4e>
 800a3a2:	46c0      	nop			; (mov r8, r8)
 800a3a4:	fffffb7f 	.word	0xfffffb7f

0800a3a8 <_svfiprintf_r>:
 800a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3aa:	b0a1      	sub	sp, #132	; 0x84
 800a3ac:	9003      	str	r0, [sp, #12]
 800a3ae:	001d      	movs	r5, r3
 800a3b0:	898b      	ldrh	r3, [r1, #12]
 800a3b2:	000f      	movs	r7, r1
 800a3b4:	0016      	movs	r6, r2
 800a3b6:	061b      	lsls	r3, r3, #24
 800a3b8:	d511      	bpl.n	800a3de <_svfiprintf_r+0x36>
 800a3ba:	690b      	ldr	r3, [r1, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10e      	bne.n	800a3de <_svfiprintf_r+0x36>
 800a3c0:	2140      	movs	r1, #64	; 0x40
 800a3c2:	f000 fad7 	bl	800a974 <_malloc_r>
 800a3c6:	6038      	str	r0, [r7, #0]
 800a3c8:	6138      	str	r0, [r7, #16]
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d105      	bne.n	800a3da <_svfiprintf_r+0x32>
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	9a03      	ldr	r2, [sp, #12]
 800a3d2:	3801      	subs	r0, #1
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	b021      	add	sp, #132	; 0x84
 800a3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3da:	2340      	movs	r3, #64	; 0x40
 800a3dc:	617b      	str	r3, [r7, #20]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	ac08      	add	r4, sp, #32
 800a3e2:	6163      	str	r3, [r4, #20]
 800a3e4:	3320      	adds	r3, #32
 800a3e6:	7663      	strb	r3, [r4, #25]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	76a3      	strb	r3, [r4, #26]
 800a3ec:	9507      	str	r5, [sp, #28]
 800a3ee:	0035      	movs	r5, r6
 800a3f0:	782b      	ldrb	r3, [r5, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <_svfiprintf_r+0x52>
 800a3f6:	2b25      	cmp	r3, #37	; 0x25
 800a3f8:	d146      	bne.n	800a488 <_svfiprintf_r+0xe0>
 800a3fa:	1bab      	subs	r3, r5, r6
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	d00c      	beq.n	800a41a <_svfiprintf_r+0x72>
 800a400:	0032      	movs	r2, r6
 800a402:	0039      	movs	r1, r7
 800a404:	9803      	ldr	r0, [sp, #12]
 800a406:	f7ff ff6d 	bl	800a2e4 <__ssputs_r>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	d100      	bne.n	800a410 <_svfiprintf_r+0x68>
 800a40e:	e0ae      	b.n	800a56e <_svfiprintf_r+0x1c6>
 800a410:	6962      	ldr	r2, [r4, #20]
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	4694      	mov	ip, r2
 800a416:	4463      	add	r3, ip
 800a418:	6163      	str	r3, [r4, #20]
 800a41a:	782b      	ldrb	r3, [r5, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d100      	bne.n	800a422 <_svfiprintf_r+0x7a>
 800a420:	e0a5      	b.n	800a56e <_svfiprintf_r+0x1c6>
 800a422:	2201      	movs	r2, #1
 800a424:	2300      	movs	r3, #0
 800a426:	4252      	negs	r2, r2
 800a428:	6062      	str	r2, [r4, #4]
 800a42a:	a904      	add	r1, sp, #16
 800a42c:	3254      	adds	r2, #84	; 0x54
 800a42e:	1852      	adds	r2, r2, r1
 800a430:	1c6e      	adds	r6, r5, #1
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	60e3      	str	r3, [r4, #12]
 800a436:	60a3      	str	r3, [r4, #8]
 800a438:	7013      	strb	r3, [r2, #0]
 800a43a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a43c:	7831      	ldrb	r1, [r6, #0]
 800a43e:	2205      	movs	r2, #5
 800a440:	4853      	ldr	r0, [pc, #332]	; (800a590 <_svfiprintf_r+0x1e8>)
 800a442:	f000 fa25 	bl	800a890 <memchr>
 800a446:	1c75      	adds	r5, r6, #1
 800a448:	2800      	cmp	r0, #0
 800a44a:	d11f      	bne.n	800a48c <_svfiprintf_r+0xe4>
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	06d3      	lsls	r3, r2, #27
 800a450:	d504      	bpl.n	800a45c <_svfiprintf_r+0xb4>
 800a452:	2353      	movs	r3, #83	; 0x53
 800a454:	a904      	add	r1, sp, #16
 800a456:	185b      	adds	r3, r3, r1
 800a458:	2120      	movs	r1, #32
 800a45a:	7019      	strb	r1, [r3, #0]
 800a45c:	0713      	lsls	r3, r2, #28
 800a45e:	d504      	bpl.n	800a46a <_svfiprintf_r+0xc2>
 800a460:	2353      	movs	r3, #83	; 0x53
 800a462:	a904      	add	r1, sp, #16
 800a464:	185b      	adds	r3, r3, r1
 800a466:	212b      	movs	r1, #43	; 0x2b
 800a468:	7019      	strb	r1, [r3, #0]
 800a46a:	7833      	ldrb	r3, [r6, #0]
 800a46c:	2b2a      	cmp	r3, #42	; 0x2a
 800a46e:	d016      	beq.n	800a49e <_svfiprintf_r+0xf6>
 800a470:	0035      	movs	r5, r6
 800a472:	2100      	movs	r1, #0
 800a474:	200a      	movs	r0, #10
 800a476:	68e3      	ldr	r3, [r4, #12]
 800a478:	782a      	ldrb	r2, [r5, #0]
 800a47a:	1c6e      	adds	r6, r5, #1
 800a47c:	3a30      	subs	r2, #48	; 0x30
 800a47e:	2a09      	cmp	r2, #9
 800a480:	d94e      	bls.n	800a520 <_svfiprintf_r+0x178>
 800a482:	2900      	cmp	r1, #0
 800a484:	d018      	beq.n	800a4b8 <_svfiprintf_r+0x110>
 800a486:	e010      	b.n	800a4aa <_svfiprintf_r+0x102>
 800a488:	3501      	adds	r5, #1
 800a48a:	e7b1      	b.n	800a3f0 <_svfiprintf_r+0x48>
 800a48c:	4b40      	ldr	r3, [pc, #256]	; (800a590 <_svfiprintf_r+0x1e8>)
 800a48e:	6822      	ldr	r2, [r4, #0]
 800a490:	1ac0      	subs	r0, r0, r3
 800a492:	2301      	movs	r3, #1
 800a494:	4083      	lsls	r3, r0
 800a496:	4313      	orrs	r3, r2
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	002e      	movs	r6, r5
 800a49c:	e7ce      	b.n	800a43c <_svfiprintf_r+0x94>
 800a49e:	9b07      	ldr	r3, [sp, #28]
 800a4a0:	1d19      	adds	r1, r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	9107      	str	r1, [sp, #28]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	db01      	blt.n	800a4ae <_svfiprintf_r+0x106>
 800a4aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4ac:	e004      	b.n	800a4b8 <_svfiprintf_r+0x110>
 800a4ae:	425b      	negs	r3, r3
 800a4b0:	60e3      	str	r3, [r4, #12]
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	782b      	ldrb	r3, [r5, #0]
 800a4ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a4bc:	d10a      	bne.n	800a4d4 <_svfiprintf_r+0x12c>
 800a4be:	786b      	ldrb	r3, [r5, #1]
 800a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c2:	d135      	bne.n	800a530 <_svfiprintf_r+0x188>
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	3502      	adds	r5, #2
 800a4c8:	1d1a      	adds	r2, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	9207      	str	r2, [sp, #28]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	db2b      	blt.n	800a52a <_svfiprintf_r+0x182>
 800a4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d4:	4e2f      	ldr	r6, [pc, #188]	; (800a594 <_svfiprintf_r+0x1ec>)
 800a4d6:	7829      	ldrb	r1, [r5, #0]
 800a4d8:	2203      	movs	r2, #3
 800a4da:	0030      	movs	r0, r6
 800a4dc:	f000 f9d8 	bl	800a890 <memchr>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d006      	beq.n	800a4f2 <_svfiprintf_r+0x14a>
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	1b80      	subs	r0, r0, r6
 800a4e8:	4083      	lsls	r3, r0
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	3501      	adds	r5, #1
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	7829      	ldrb	r1, [r5, #0]
 800a4f4:	2206      	movs	r2, #6
 800a4f6:	4828      	ldr	r0, [pc, #160]	; (800a598 <_svfiprintf_r+0x1f0>)
 800a4f8:	1c6e      	adds	r6, r5, #1
 800a4fa:	7621      	strb	r1, [r4, #24]
 800a4fc:	f000 f9c8 	bl	800a890 <memchr>
 800a500:	2800      	cmp	r0, #0
 800a502:	d03c      	beq.n	800a57e <_svfiprintf_r+0x1d6>
 800a504:	4b25      	ldr	r3, [pc, #148]	; (800a59c <_svfiprintf_r+0x1f4>)
 800a506:	2b00      	cmp	r3, #0
 800a508:	d125      	bne.n	800a556 <_svfiprintf_r+0x1ae>
 800a50a:	2207      	movs	r2, #7
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	3307      	adds	r3, #7
 800a510:	4393      	bics	r3, r2
 800a512:	3308      	adds	r3, #8
 800a514:	9307      	str	r3, [sp, #28]
 800a516:	6963      	ldr	r3, [r4, #20]
 800a518:	9a04      	ldr	r2, [sp, #16]
 800a51a:	189b      	adds	r3, r3, r2
 800a51c:	6163      	str	r3, [r4, #20]
 800a51e:	e766      	b.n	800a3ee <_svfiprintf_r+0x46>
 800a520:	4343      	muls	r3, r0
 800a522:	2101      	movs	r1, #1
 800a524:	189b      	adds	r3, r3, r2
 800a526:	0035      	movs	r5, r6
 800a528:	e7a6      	b.n	800a478 <_svfiprintf_r+0xd0>
 800a52a:	2301      	movs	r3, #1
 800a52c:	425b      	negs	r3, r3
 800a52e:	e7d0      	b.n	800a4d2 <_svfiprintf_r+0x12a>
 800a530:	2300      	movs	r3, #0
 800a532:	200a      	movs	r0, #10
 800a534:	001a      	movs	r2, r3
 800a536:	3501      	adds	r5, #1
 800a538:	6063      	str	r3, [r4, #4]
 800a53a:	7829      	ldrb	r1, [r5, #0]
 800a53c:	1c6e      	adds	r6, r5, #1
 800a53e:	3930      	subs	r1, #48	; 0x30
 800a540:	2909      	cmp	r1, #9
 800a542:	d903      	bls.n	800a54c <_svfiprintf_r+0x1a4>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0c5      	beq.n	800a4d4 <_svfiprintf_r+0x12c>
 800a548:	9209      	str	r2, [sp, #36]	; 0x24
 800a54a:	e7c3      	b.n	800a4d4 <_svfiprintf_r+0x12c>
 800a54c:	4342      	muls	r2, r0
 800a54e:	2301      	movs	r3, #1
 800a550:	1852      	adds	r2, r2, r1
 800a552:	0035      	movs	r5, r6
 800a554:	e7f1      	b.n	800a53a <_svfiprintf_r+0x192>
 800a556:	ab07      	add	r3, sp, #28
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	003a      	movs	r2, r7
 800a55c:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <_svfiprintf_r+0x1f8>)
 800a55e:	0021      	movs	r1, r4
 800a560:	9803      	ldr	r0, [sp, #12]
 800a562:	e000      	b.n	800a566 <_svfiprintf_r+0x1be>
 800a564:	bf00      	nop
 800a566:	9004      	str	r0, [sp, #16]
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	3301      	adds	r3, #1
 800a56c:	d1d3      	bne.n	800a516 <_svfiprintf_r+0x16e>
 800a56e:	89bb      	ldrh	r3, [r7, #12]
 800a570:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a572:	065b      	lsls	r3, r3, #25
 800a574:	d400      	bmi.n	800a578 <_svfiprintf_r+0x1d0>
 800a576:	e72e      	b.n	800a3d6 <_svfiprintf_r+0x2e>
 800a578:	2001      	movs	r0, #1
 800a57a:	4240      	negs	r0, r0
 800a57c:	e72b      	b.n	800a3d6 <_svfiprintf_r+0x2e>
 800a57e:	ab07      	add	r3, sp, #28
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	003a      	movs	r2, r7
 800a584:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <_svfiprintf_r+0x1f8>)
 800a586:	0021      	movs	r1, r4
 800a588:	9803      	ldr	r0, [sp, #12]
 800a58a:	f000 f879 	bl	800a680 <_printf_i>
 800a58e:	e7ea      	b.n	800a566 <_svfiprintf_r+0x1be>
 800a590:	0800af34 	.word	0x0800af34
 800a594:	0800af3a 	.word	0x0800af3a
 800a598:	0800af3e 	.word	0x0800af3e
 800a59c:	00000000 	.word	0x00000000
 800a5a0:	0800a2e5 	.word	0x0800a2e5

0800a5a4 <_printf_common>:
 800a5a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5a6:	0015      	movs	r5, r2
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	688a      	ldr	r2, [r1, #8]
 800a5ac:	690b      	ldr	r3, [r1, #16]
 800a5ae:	9000      	str	r0, [sp, #0]
 800a5b0:	000c      	movs	r4, r1
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	da00      	bge.n	800a5b8 <_printf_common+0x14>
 800a5b6:	0013      	movs	r3, r2
 800a5b8:	0022      	movs	r2, r4
 800a5ba:	602b      	str	r3, [r5, #0]
 800a5bc:	3243      	adds	r2, #67	; 0x43
 800a5be:	7812      	ldrb	r2, [r2, #0]
 800a5c0:	2a00      	cmp	r2, #0
 800a5c2:	d001      	beq.n	800a5c8 <_printf_common+0x24>
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	602b      	str	r3, [r5, #0]
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	069b      	lsls	r3, r3, #26
 800a5cc:	d502      	bpl.n	800a5d4 <_printf_common+0x30>
 800a5ce:	682b      	ldr	r3, [r5, #0]
 800a5d0:	3302      	adds	r3, #2
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	2706      	movs	r7, #6
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	401f      	ands	r7, r3
 800a5da:	d027      	beq.n	800a62c <_printf_common+0x88>
 800a5dc:	0023      	movs	r3, r4
 800a5de:	3343      	adds	r3, #67	; 0x43
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	4193      	sbcs	r3, r2
 800a5e6:	6822      	ldr	r2, [r4, #0]
 800a5e8:	0692      	lsls	r2, r2, #26
 800a5ea:	d430      	bmi.n	800a64e <_printf_common+0xaa>
 800a5ec:	0022      	movs	r2, r4
 800a5ee:	9901      	ldr	r1, [sp, #4]
 800a5f0:	3243      	adds	r2, #67	; 0x43
 800a5f2:	9800      	ldr	r0, [sp, #0]
 800a5f4:	9e08      	ldr	r6, [sp, #32]
 800a5f6:	47b0      	blx	r6
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d025      	beq.n	800a648 <_printf_common+0xa4>
 800a5fc:	2306      	movs	r3, #6
 800a5fe:	6820      	ldr	r0, [r4, #0]
 800a600:	682a      	ldr	r2, [r5, #0]
 800a602:	68e1      	ldr	r1, [r4, #12]
 800a604:	4003      	ands	r3, r0
 800a606:	2500      	movs	r5, #0
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d103      	bne.n	800a614 <_printf_common+0x70>
 800a60c:	1a8d      	subs	r5, r1, r2
 800a60e:	43eb      	mvns	r3, r5
 800a610:	17db      	asrs	r3, r3, #31
 800a612:	401d      	ands	r5, r3
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	6922      	ldr	r2, [r4, #16]
 800a618:	4293      	cmp	r3, r2
 800a61a:	dd01      	ble.n	800a620 <_printf_common+0x7c>
 800a61c:	1a9b      	subs	r3, r3, r2
 800a61e:	18ed      	adds	r5, r5, r3
 800a620:	2700      	movs	r7, #0
 800a622:	42bd      	cmp	r5, r7
 800a624:	d120      	bne.n	800a668 <_printf_common+0xc4>
 800a626:	2000      	movs	r0, #0
 800a628:	e010      	b.n	800a64c <_printf_common+0xa8>
 800a62a:	3701      	adds	r7, #1
 800a62c:	68e3      	ldr	r3, [r4, #12]
 800a62e:	682a      	ldr	r2, [r5, #0]
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	42bb      	cmp	r3, r7
 800a634:	ddd2      	ble.n	800a5dc <_printf_common+0x38>
 800a636:	0022      	movs	r2, r4
 800a638:	2301      	movs	r3, #1
 800a63a:	3219      	adds	r2, #25
 800a63c:	9901      	ldr	r1, [sp, #4]
 800a63e:	9800      	ldr	r0, [sp, #0]
 800a640:	9e08      	ldr	r6, [sp, #32]
 800a642:	47b0      	blx	r6
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d1f0      	bne.n	800a62a <_printf_common+0x86>
 800a648:	2001      	movs	r0, #1
 800a64a:	4240      	negs	r0, r0
 800a64c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a64e:	2030      	movs	r0, #48	; 0x30
 800a650:	18e1      	adds	r1, r4, r3
 800a652:	3143      	adds	r1, #67	; 0x43
 800a654:	7008      	strb	r0, [r1, #0]
 800a656:	0021      	movs	r1, r4
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	3145      	adds	r1, #69	; 0x45
 800a65c:	7809      	ldrb	r1, [r1, #0]
 800a65e:	18a2      	adds	r2, r4, r2
 800a660:	3243      	adds	r2, #67	; 0x43
 800a662:	3302      	adds	r3, #2
 800a664:	7011      	strb	r1, [r2, #0]
 800a666:	e7c1      	b.n	800a5ec <_printf_common+0x48>
 800a668:	0022      	movs	r2, r4
 800a66a:	2301      	movs	r3, #1
 800a66c:	321a      	adds	r2, #26
 800a66e:	9901      	ldr	r1, [sp, #4]
 800a670:	9800      	ldr	r0, [sp, #0]
 800a672:	9e08      	ldr	r6, [sp, #32]
 800a674:	47b0      	blx	r6
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d0e6      	beq.n	800a648 <_printf_common+0xa4>
 800a67a:	3701      	adds	r7, #1
 800a67c:	e7d1      	b.n	800a622 <_printf_common+0x7e>
	...

0800a680 <_printf_i>:
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	b089      	sub	sp, #36	; 0x24
 800a684:	9204      	str	r2, [sp, #16]
 800a686:	000a      	movs	r2, r1
 800a688:	3243      	adds	r2, #67	; 0x43
 800a68a:	9305      	str	r3, [sp, #20]
 800a68c:	9003      	str	r0, [sp, #12]
 800a68e:	9202      	str	r2, [sp, #8]
 800a690:	7e0a      	ldrb	r2, [r1, #24]
 800a692:	000c      	movs	r4, r1
 800a694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a696:	2a6e      	cmp	r2, #110	; 0x6e
 800a698:	d100      	bne.n	800a69c <_printf_i+0x1c>
 800a69a:	e086      	b.n	800a7aa <_printf_i+0x12a>
 800a69c:	d81f      	bhi.n	800a6de <_printf_i+0x5e>
 800a69e:	2a63      	cmp	r2, #99	; 0x63
 800a6a0:	d033      	beq.n	800a70a <_printf_i+0x8a>
 800a6a2:	d808      	bhi.n	800a6b6 <_printf_i+0x36>
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	d100      	bne.n	800a6aa <_printf_i+0x2a>
 800a6a8:	e08c      	b.n	800a7c4 <_printf_i+0x144>
 800a6aa:	2a58      	cmp	r2, #88	; 0x58
 800a6ac:	d04d      	beq.n	800a74a <_printf_i+0xca>
 800a6ae:	0025      	movs	r5, r4
 800a6b0:	3542      	adds	r5, #66	; 0x42
 800a6b2:	702a      	strb	r2, [r5, #0]
 800a6b4:	e030      	b.n	800a718 <_printf_i+0x98>
 800a6b6:	2a64      	cmp	r2, #100	; 0x64
 800a6b8:	d001      	beq.n	800a6be <_printf_i+0x3e>
 800a6ba:	2a69      	cmp	r2, #105	; 0x69
 800a6bc:	d1f7      	bne.n	800a6ae <_printf_i+0x2e>
 800a6be:	6819      	ldr	r1, [r3, #0]
 800a6c0:	6825      	ldr	r5, [r4, #0]
 800a6c2:	1d0a      	adds	r2, r1, #4
 800a6c4:	0628      	lsls	r0, r5, #24
 800a6c6:	d529      	bpl.n	800a71c <_printf_i+0x9c>
 800a6c8:	6808      	ldr	r0, [r1, #0]
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	da03      	bge.n	800a6d8 <_printf_i+0x58>
 800a6d0:	232d      	movs	r3, #45	; 0x2d
 800a6d2:	9a02      	ldr	r2, [sp, #8]
 800a6d4:	4240      	negs	r0, r0
 800a6d6:	7013      	strb	r3, [r2, #0]
 800a6d8:	4e6b      	ldr	r6, [pc, #428]	; (800a888 <_printf_i+0x208>)
 800a6da:	270a      	movs	r7, #10
 800a6dc:	e04f      	b.n	800a77e <_printf_i+0xfe>
 800a6de:	2a73      	cmp	r2, #115	; 0x73
 800a6e0:	d074      	beq.n	800a7cc <_printf_i+0x14c>
 800a6e2:	d808      	bhi.n	800a6f6 <_printf_i+0x76>
 800a6e4:	2a6f      	cmp	r2, #111	; 0x6f
 800a6e6:	d01f      	beq.n	800a728 <_printf_i+0xa8>
 800a6e8:	2a70      	cmp	r2, #112	; 0x70
 800a6ea:	d1e0      	bne.n	800a6ae <_printf_i+0x2e>
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	6809      	ldr	r1, [r1, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	6022      	str	r2, [r4, #0]
 800a6f4:	e003      	b.n	800a6fe <_printf_i+0x7e>
 800a6f6:	2a75      	cmp	r2, #117	; 0x75
 800a6f8:	d016      	beq.n	800a728 <_printf_i+0xa8>
 800a6fa:	2a78      	cmp	r2, #120	; 0x78
 800a6fc:	d1d7      	bne.n	800a6ae <_printf_i+0x2e>
 800a6fe:	0022      	movs	r2, r4
 800a700:	2178      	movs	r1, #120	; 0x78
 800a702:	3245      	adds	r2, #69	; 0x45
 800a704:	7011      	strb	r1, [r2, #0]
 800a706:	4e61      	ldr	r6, [pc, #388]	; (800a88c <_printf_i+0x20c>)
 800a708:	e022      	b.n	800a750 <_printf_i+0xd0>
 800a70a:	0025      	movs	r5, r4
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	3542      	adds	r5, #66	; 0x42
 800a710:	1d11      	adds	r1, r2, #4
 800a712:	6019      	str	r1, [r3, #0]
 800a714:	6813      	ldr	r3, [r2, #0]
 800a716:	702b      	strb	r3, [r5, #0]
 800a718:	2301      	movs	r3, #1
 800a71a:	e065      	b.n	800a7e8 <_printf_i+0x168>
 800a71c:	6808      	ldr	r0, [r1, #0]
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	0669      	lsls	r1, r5, #25
 800a722:	d5d3      	bpl.n	800a6cc <_printf_i+0x4c>
 800a724:	b200      	sxth	r0, r0
 800a726:	e7d1      	b.n	800a6cc <_printf_i+0x4c>
 800a728:	6819      	ldr	r1, [r3, #0]
 800a72a:	6825      	ldr	r5, [r4, #0]
 800a72c:	1d08      	adds	r0, r1, #4
 800a72e:	6018      	str	r0, [r3, #0]
 800a730:	6808      	ldr	r0, [r1, #0]
 800a732:	062e      	lsls	r6, r5, #24
 800a734:	d505      	bpl.n	800a742 <_printf_i+0xc2>
 800a736:	4e54      	ldr	r6, [pc, #336]	; (800a888 <_printf_i+0x208>)
 800a738:	2708      	movs	r7, #8
 800a73a:	2a6f      	cmp	r2, #111	; 0x6f
 800a73c:	d01b      	beq.n	800a776 <_printf_i+0xf6>
 800a73e:	270a      	movs	r7, #10
 800a740:	e019      	b.n	800a776 <_printf_i+0xf6>
 800a742:	066d      	lsls	r5, r5, #25
 800a744:	d5f7      	bpl.n	800a736 <_printf_i+0xb6>
 800a746:	b280      	uxth	r0, r0
 800a748:	e7f5      	b.n	800a736 <_printf_i+0xb6>
 800a74a:	3145      	adds	r1, #69	; 0x45
 800a74c:	4e4e      	ldr	r6, [pc, #312]	; (800a888 <_printf_i+0x208>)
 800a74e:	700a      	strb	r2, [r1, #0]
 800a750:	6818      	ldr	r0, [r3, #0]
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	1d01      	adds	r1, r0, #4
 800a756:	6800      	ldr	r0, [r0, #0]
 800a758:	6019      	str	r1, [r3, #0]
 800a75a:	0615      	lsls	r5, r2, #24
 800a75c:	d521      	bpl.n	800a7a2 <_printf_i+0x122>
 800a75e:	07d3      	lsls	r3, r2, #31
 800a760:	d502      	bpl.n	800a768 <_printf_i+0xe8>
 800a762:	2320      	movs	r3, #32
 800a764:	431a      	orrs	r2, r3
 800a766:	6022      	str	r2, [r4, #0]
 800a768:	2710      	movs	r7, #16
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d103      	bne.n	800a776 <_printf_i+0xf6>
 800a76e:	2320      	movs	r3, #32
 800a770:	6822      	ldr	r2, [r4, #0]
 800a772:	439a      	bics	r2, r3
 800a774:	6022      	str	r2, [r4, #0]
 800a776:	0023      	movs	r3, r4
 800a778:	2200      	movs	r2, #0
 800a77a:	3343      	adds	r3, #67	; 0x43
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	db58      	blt.n	800a838 <_printf_i+0x1b8>
 800a786:	2204      	movs	r2, #4
 800a788:	6821      	ldr	r1, [r4, #0]
 800a78a:	4391      	bics	r1, r2
 800a78c:	6021      	str	r1, [r4, #0]
 800a78e:	2800      	cmp	r0, #0
 800a790:	d154      	bne.n	800a83c <_printf_i+0x1bc>
 800a792:	9d02      	ldr	r5, [sp, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d05a      	beq.n	800a84e <_printf_i+0x1ce>
 800a798:	0025      	movs	r5, r4
 800a79a:	7833      	ldrb	r3, [r6, #0]
 800a79c:	3542      	adds	r5, #66	; 0x42
 800a79e:	702b      	strb	r3, [r5, #0]
 800a7a0:	e055      	b.n	800a84e <_printf_i+0x1ce>
 800a7a2:	0655      	lsls	r5, r2, #25
 800a7a4:	d5db      	bpl.n	800a75e <_printf_i+0xde>
 800a7a6:	b280      	uxth	r0, r0
 800a7a8:	e7d9      	b.n	800a75e <_printf_i+0xde>
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	680d      	ldr	r5, [r1, #0]
 800a7ae:	1d10      	adds	r0, r2, #4
 800a7b0:	6949      	ldr	r1, [r1, #20]
 800a7b2:	6018      	str	r0, [r3, #0]
 800a7b4:	6813      	ldr	r3, [r2, #0]
 800a7b6:	062e      	lsls	r6, r5, #24
 800a7b8:	d501      	bpl.n	800a7be <_printf_i+0x13e>
 800a7ba:	6019      	str	r1, [r3, #0]
 800a7bc:	e002      	b.n	800a7c4 <_printf_i+0x144>
 800a7be:	066d      	lsls	r5, r5, #25
 800a7c0:	d5fb      	bpl.n	800a7ba <_printf_i+0x13a>
 800a7c2:	8019      	strh	r1, [r3, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	9d02      	ldr	r5, [sp, #8]
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	e04f      	b.n	800a86c <_printf_i+0x1ec>
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	1d11      	adds	r1, r2, #4
 800a7d0:	6019      	str	r1, [r3, #0]
 800a7d2:	6815      	ldr	r5, [r2, #0]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6862      	ldr	r2, [r4, #4]
 800a7d8:	0028      	movs	r0, r5
 800a7da:	f000 f859 	bl	800a890 <memchr>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d001      	beq.n	800a7e6 <_printf_i+0x166>
 800a7e2:	1b40      	subs	r0, r0, r5
 800a7e4:	6060      	str	r0, [r4, #4]
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9a02      	ldr	r2, [sp, #8]
 800a7ee:	7013      	strb	r3, [r2, #0]
 800a7f0:	e03c      	b.n	800a86c <_printf_i+0x1ec>
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	002a      	movs	r2, r5
 800a7f6:	9904      	ldr	r1, [sp, #16]
 800a7f8:	9803      	ldr	r0, [sp, #12]
 800a7fa:	9d05      	ldr	r5, [sp, #20]
 800a7fc:	47a8      	blx	r5
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d03e      	beq.n	800a880 <_printf_i+0x200>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	079b      	lsls	r3, r3, #30
 800a806:	d415      	bmi.n	800a834 <_printf_i+0x1b4>
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	68e0      	ldr	r0, [r4, #12]
 800a80c:	4298      	cmp	r0, r3
 800a80e:	da39      	bge.n	800a884 <_printf_i+0x204>
 800a810:	0018      	movs	r0, r3
 800a812:	e037      	b.n	800a884 <_printf_i+0x204>
 800a814:	0022      	movs	r2, r4
 800a816:	2301      	movs	r3, #1
 800a818:	3219      	adds	r2, #25
 800a81a:	9904      	ldr	r1, [sp, #16]
 800a81c:	9803      	ldr	r0, [sp, #12]
 800a81e:	9e05      	ldr	r6, [sp, #20]
 800a820:	47b0      	blx	r6
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	d02c      	beq.n	800a880 <_printf_i+0x200>
 800a826:	3501      	adds	r5, #1
 800a828:	68e3      	ldr	r3, [r4, #12]
 800a82a:	9a07      	ldr	r2, [sp, #28]
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	42ab      	cmp	r3, r5
 800a830:	dcf0      	bgt.n	800a814 <_printf_i+0x194>
 800a832:	e7e9      	b.n	800a808 <_printf_i+0x188>
 800a834:	2500      	movs	r5, #0
 800a836:	e7f7      	b.n	800a828 <_printf_i+0x1a8>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d0ad      	beq.n	800a798 <_printf_i+0x118>
 800a83c:	9d02      	ldr	r5, [sp, #8]
 800a83e:	0039      	movs	r1, r7
 800a840:	f7f5 fcfa 	bl	8000238 <__aeabi_uidivmod>
 800a844:	5c73      	ldrb	r3, [r6, r1]
 800a846:	3d01      	subs	r5, #1
 800a848:	702b      	strb	r3, [r5, #0]
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d1f7      	bne.n	800a83e <_printf_i+0x1be>
 800a84e:	2f08      	cmp	r7, #8
 800a850:	d109      	bne.n	800a866 <_printf_i+0x1e6>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	07db      	lsls	r3, r3, #31
 800a856:	d506      	bpl.n	800a866 <_printf_i+0x1e6>
 800a858:	6863      	ldr	r3, [r4, #4]
 800a85a:	6922      	ldr	r2, [r4, #16]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	dc02      	bgt.n	800a866 <_printf_i+0x1e6>
 800a860:	2330      	movs	r3, #48	; 0x30
 800a862:	3d01      	subs	r5, #1
 800a864:	702b      	strb	r3, [r5, #0]
 800a866:	9b02      	ldr	r3, [sp, #8]
 800a868:	1b5b      	subs	r3, r3, r5
 800a86a:	6123      	str	r3, [r4, #16]
 800a86c:	9b05      	ldr	r3, [sp, #20]
 800a86e:	aa07      	add	r2, sp, #28
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	0021      	movs	r1, r4
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	9803      	ldr	r0, [sp, #12]
 800a878:	f7ff fe94 	bl	800a5a4 <_printf_common>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d1b8      	bne.n	800a7f2 <_printf_i+0x172>
 800a880:	2001      	movs	r0, #1
 800a882:	4240      	negs	r0, r0
 800a884:	b009      	add	sp, #36	; 0x24
 800a886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a888:	0800af45 	.word	0x0800af45
 800a88c:	0800af56 	.word	0x0800af56

0800a890 <memchr>:
 800a890:	b2c9      	uxtb	r1, r1
 800a892:	1882      	adds	r2, r0, r2
 800a894:	4290      	cmp	r0, r2
 800a896:	d101      	bne.n	800a89c <memchr+0xc>
 800a898:	2000      	movs	r0, #0
 800a89a:	4770      	bx	lr
 800a89c:	7803      	ldrb	r3, [r0, #0]
 800a89e:	428b      	cmp	r3, r1
 800a8a0:	d0fb      	beq.n	800a89a <memchr+0xa>
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	e7f6      	b.n	800a894 <memchr+0x4>

0800a8a6 <memcpy>:
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d100      	bne.n	800a8b0 <memcpy+0xa>
 800a8ae:	bd10      	pop	{r4, pc}
 800a8b0:	5ccc      	ldrb	r4, [r1, r3]
 800a8b2:	54c4      	strb	r4, [r0, r3]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	e7f8      	b.n	800a8aa <memcpy+0x4>

0800a8b8 <memmove>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	4288      	cmp	r0, r1
 800a8bc:	d902      	bls.n	800a8c4 <memmove+0xc>
 800a8be:	188b      	adds	r3, r1, r2
 800a8c0:	4298      	cmp	r0, r3
 800a8c2:	d303      	bcc.n	800a8cc <memmove+0x14>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e007      	b.n	800a8d8 <memmove+0x20>
 800a8c8:	5c8b      	ldrb	r3, [r1, r2]
 800a8ca:	5483      	strb	r3, [r0, r2]
 800a8cc:	3a01      	subs	r2, #1
 800a8ce:	d2fb      	bcs.n	800a8c8 <memmove+0x10>
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	5ccc      	ldrb	r4, [r1, r3]
 800a8d4:	54c4      	strb	r4, [r0, r3]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d1fa      	bne.n	800a8d2 <memmove+0x1a>
 800a8dc:	e7f8      	b.n	800a8d0 <memmove+0x18>
	...

0800a8e0 <_free_r>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	0005      	movs	r5, r0
 800a8e4:	2900      	cmp	r1, #0
 800a8e6:	d010      	beq.n	800a90a <_free_r+0x2a>
 800a8e8:	1f0c      	subs	r4, r1, #4
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	da00      	bge.n	800a8f2 <_free_r+0x12>
 800a8f0:	18e4      	adds	r4, r4, r3
 800a8f2:	0028      	movs	r0, r5
 800a8f4:	f000 f8d4 	bl	800aaa0 <__malloc_lock>
 800a8f8:	4a1d      	ldr	r2, [pc, #116]	; (800a970 <_free_r+0x90>)
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d105      	bne.n	800a90c <_free_r+0x2c>
 800a900:	6063      	str	r3, [r4, #4]
 800a902:	6014      	str	r4, [r2, #0]
 800a904:	0028      	movs	r0, r5
 800a906:	f000 f8cc 	bl	800aaa2 <__malloc_unlock>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d909      	bls.n	800a924 <_free_r+0x44>
 800a910:	6821      	ldr	r1, [r4, #0]
 800a912:	1860      	adds	r0, r4, r1
 800a914:	4283      	cmp	r3, r0
 800a916:	d1f3      	bne.n	800a900 <_free_r+0x20>
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	1841      	adds	r1, r0, r1
 800a91e:	6021      	str	r1, [r4, #0]
 800a920:	e7ee      	b.n	800a900 <_free_r+0x20>
 800a922:	0013      	movs	r3, r2
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	2a00      	cmp	r2, #0
 800a928:	d001      	beq.n	800a92e <_free_r+0x4e>
 800a92a:	42a2      	cmp	r2, r4
 800a92c:	d9f9      	bls.n	800a922 <_free_r+0x42>
 800a92e:	6819      	ldr	r1, [r3, #0]
 800a930:	1858      	adds	r0, r3, r1
 800a932:	42a0      	cmp	r0, r4
 800a934:	d10b      	bne.n	800a94e <_free_r+0x6e>
 800a936:	6820      	ldr	r0, [r4, #0]
 800a938:	1809      	adds	r1, r1, r0
 800a93a:	1858      	adds	r0, r3, r1
 800a93c:	6019      	str	r1, [r3, #0]
 800a93e:	4282      	cmp	r2, r0
 800a940:	d1e0      	bne.n	800a904 <_free_r+0x24>
 800a942:	6810      	ldr	r0, [r2, #0]
 800a944:	6852      	ldr	r2, [r2, #4]
 800a946:	1841      	adds	r1, r0, r1
 800a948:	6019      	str	r1, [r3, #0]
 800a94a:	605a      	str	r2, [r3, #4]
 800a94c:	e7da      	b.n	800a904 <_free_r+0x24>
 800a94e:	42a0      	cmp	r0, r4
 800a950:	d902      	bls.n	800a958 <_free_r+0x78>
 800a952:	230c      	movs	r3, #12
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	e7d5      	b.n	800a904 <_free_r+0x24>
 800a958:	6821      	ldr	r1, [r4, #0]
 800a95a:	1860      	adds	r0, r4, r1
 800a95c:	4282      	cmp	r2, r0
 800a95e:	d103      	bne.n	800a968 <_free_r+0x88>
 800a960:	6810      	ldr	r0, [r2, #0]
 800a962:	6852      	ldr	r2, [r2, #4]
 800a964:	1841      	adds	r1, r0, r1
 800a966:	6021      	str	r1, [r4, #0]
 800a968:	6062      	str	r2, [r4, #4]
 800a96a:	605c      	str	r4, [r3, #4]
 800a96c:	e7ca      	b.n	800a904 <_free_r+0x24>
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	20000388 	.word	0x20000388

0800a974 <_malloc_r>:
 800a974:	2303      	movs	r3, #3
 800a976:	b570      	push	{r4, r5, r6, lr}
 800a978:	1ccd      	adds	r5, r1, #3
 800a97a:	439d      	bics	r5, r3
 800a97c:	3508      	adds	r5, #8
 800a97e:	0006      	movs	r6, r0
 800a980:	2d0c      	cmp	r5, #12
 800a982:	d21e      	bcs.n	800a9c2 <_malloc_r+0x4e>
 800a984:	250c      	movs	r5, #12
 800a986:	42a9      	cmp	r1, r5
 800a988:	d81d      	bhi.n	800a9c6 <_malloc_r+0x52>
 800a98a:	0030      	movs	r0, r6
 800a98c:	f000 f888 	bl	800aaa0 <__malloc_lock>
 800a990:	4a25      	ldr	r2, [pc, #148]	; (800aa28 <_malloc_r+0xb4>)
 800a992:	6814      	ldr	r4, [r2, #0]
 800a994:	0021      	movs	r1, r4
 800a996:	2900      	cmp	r1, #0
 800a998:	d119      	bne.n	800a9ce <_malloc_r+0x5a>
 800a99a:	4c24      	ldr	r4, [pc, #144]	; (800aa2c <_malloc_r+0xb8>)
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d103      	bne.n	800a9aa <_malloc_r+0x36>
 800a9a2:	0030      	movs	r0, r6
 800a9a4:	f000 f86a 	bl	800aa7c <_sbrk_r>
 800a9a8:	6020      	str	r0, [r4, #0]
 800a9aa:	0029      	movs	r1, r5
 800a9ac:	0030      	movs	r0, r6
 800a9ae:	f000 f865 	bl	800aa7c <_sbrk_r>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d12b      	bne.n	800aa0e <_malloc_r+0x9a>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	0030      	movs	r0, r6
 800a9ba:	6033      	str	r3, [r6, #0]
 800a9bc:	f000 f871 	bl	800aaa2 <__malloc_unlock>
 800a9c0:	e003      	b.n	800a9ca <_malloc_r+0x56>
 800a9c2:	2d00      	cmp	r5, #0
 800a9c4:	dadf      	bge.n	800a986 <_malloc_r+0x12>
 800a9c6:	230c      	movs	r3, #12
 800a9c8:	6033      	str	r3, [r6, #0]
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	680b      	ldr	r3, [r1, #0]
 800a9d0:	1b5b      	subs	r3, r3, r5
 800a9d2:	d419      	bmi.n	800aa08 <_malloc_r+0x94>
 800a9d4:	2b0b      	cmp	r3, #11
 800a9d6:	d903      	bls.n	800a9e0 <_malloc_r+0x6c>
 800a9d8:	600b      	str	r3, [r1, #0]
 800a9da:	18cc      	adds	r4, r1, r3
 800a9dc:	6025      	str	r5, [r4, #0]
 800a9de:	e003      	b.n	800a9e8 <_malloc_r+0x74>
 800a9e0:	684b      	ldr	r3, [r1, #4]
 800a9e2:	428c      	cmp	r4, r1
 800a9e4:	d10d      	bne.n	800aa02 <_malloc_r+0x8e>
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	0030      	movs	r0, r6
 800a9ea:	f000 f85a 	bl	800aaa2 <__malloc_unlock>
 800a9ee:	0020      	movs	r0, r4
 800a9f0:	2207      	movs	r2, #7
 800a9f2:	300b      	adds	r0, #11
 800a9f4:	1d23      	adds	r3, r4, #4
 800a9f6:	4390      	bics	r0, r2
 800a9f8:	1ac3      	subs	r3, r0, r3
 800a9fa:	d0e7      	beq.n	800a9cc <_malloc_r+0x58>
 800a9fc:	425a      	negs	r2, r3
 800a9fe:	50e2      	str	r2, [r4, r3]
 800aa00:	e7e4      	b.n	800a9cc <_malloc_r+0x58>
 800aa02:	6063      	str	r3, [r4, #4]
 800aa04:	000c      	movs	r4, r1
 800aa06:	e7ef      	b.n	800a9e8 <_malloc_r+0x74>
 800aa08:	000c      	movs	r4, r1
 800aa0a:	6849      	ldr	r1, [r1, #4]
 800aa0c:	e7c3      	b.n	800a996 <_malloc_r+0x22>
 800aa0e:	2303      	movs	r3, #3
 800aa10:	1cc4      	adds	r4, r0, #3
 800aa12:	439c      	bics	r4, r3
 800aa14:	42a0      	cmp	r0, r4
 800aa16:	d0e1      	beq.n	800a9dc <_malloc_r+0x68>
 800aa18:	1a21      	subs	r1, r4, r0
 800aa1a:	0030      	movs	r0, r6
 800aa1c:	f000 f82e 	bl	800aa7c <_sbrk_r>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d1db      	bne.n	800a9dc <_malloc_r+0x68>
 800aa24:	e7c7      	b.n	800a9b6 <_malloc_r+0x42>
 800aa26:	46c0      	nop			; (mov r8, r8)
 800aa28:	20000388 	.word	0x20000388
 800aa2c:	2000038c 	.word	0x2000038c

0800aa30 <_realloc_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	0007      	movs	r7, r0
 800aa34:	000d      	movs	r5, r1
 800aa36:	0016      	movs	r6, r2
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d105      	bne.n	800aa48 <_realloc_r+0x18>
 800aa3c:	0011      	movs	r1, r2
 800aa3e:	f7ff ff99 	bl	800a974 <_malloc_r>
 800aa42:	0004      	movs	r4, r0
 800aa44:	0020      	movs	r0, r4
 800aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	d103      	bne.n	800aa54 <_realloc_r+0x24>
 800aa4c:	f7ff ff48 	bl	800a8e0 <_free_r>
 800aa50:	0034      	movs	r4, r6
 800aa52:	e7f7      	b.n	800aa44 <_realloc_r+0x14>
 800aa54:	f000 f826 	bl	800aaa4 <_malloc_usable_size_r>
 800aa58:	002c      	movs	r4, r5
 800aa5a:	42b0      	cmp	r0, r6
 800aa5c:	d2f2      	bcs.n	800aa44 <_realloc_r+0x14>
 800aa5e:	0031      	movs	r1, r6
 800aa60:	0038      	movs	r0, r7
 800aa62:	f7ff ff87 	bl	800a974 <_malloc_r>
 800aa66:	1e04      	subs	r4, r0, #0
 800aa68:	d0ec      	beq.n	800aa44 <_realloc_r+0x14>
 800aa6a:	0029      	movs	r1, r5
 800aa6c:	0032      	movs	r2, r6
 800aa6e:	f7ff ff1a 	bl	800a8a6 <memcpy>
 800aa72:	0029      	movs	r1, r5
 800aa74:	0038      	movs	r0, r7
 800aa76:	f7ff ff33 	bl	800a8e0 <_free_r>
 800aa7a:	e7e3      	b.n	800aa44 <_realloc_r+0x14>

0800aa7c <_sbrk_r>:
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	b570      	push	{r4, r5, r6, lr}
 800aa80:	4c06      	ldr	r4, [pc, #24]	; (800aa9c <_sbrk_r+0x20>)
 800aa82:	0005      	movs	r5, r0
 800aa84:	0008      	movs	r0, r1
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	f000 f814 	bl	800aab4 <_sbrk>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d103      	bne.n	800aa98 <_sbrk_r+0x1c>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d000      	beq.n	800aa98 <_sbrk_r+0x1c>
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	20001344 	.word	0x20001344

0800aaa0 <__malloc_lock>:
 800aaa0:	4770      	bx	lr

0800aaa2 <__malloc_unlock>:
 800aaa2:	4770      	bx	lr

0800aaa4 <_malloc_usable_size_r>:
 800aaa4:	1f0b      	subs	r3, r1, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	1f18      	subs	r0, r3, #4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	da01      	bge.n	800aab2 <_malloc_usable_size_r+0xe>
 800aaae:	580b      	ldr	r3, [r1, r0]
 800aab0:	18c0      	adds	r0, r0, r3
 800aab2:	4770      	bx	lr

0800aab4 <_sbrk>:
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <_sbrk+0x18>)
 800aab6:	0002      	movs	r2, r0
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	2900      	cmp	r1, #0
 800aabc:	d101      	bne.n	800aac2 <_sbrk+0xe>
 800aabe:	4904      	ldr	r1, [pc, #16]	; (800aad0 <_sbrk+0x1c>)
 800aac0:	6019      	str	r1, [r3, #0]
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	1882      	adds	r2, r0, r2
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	4770      	bx	lr
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	20000390 	.word	0x20000390
 800aad0:	20001348 	.word	0x20001348

0800aad4 <_init>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr

0800aae0 <_fini>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr
