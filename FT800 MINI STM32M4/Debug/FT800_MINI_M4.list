
FT800_MINI_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e0  20000000  08007a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
  8 .bss          00004c74  200000e0  200000e0  000200e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20004d54  20004d54  000200e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020a37  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000034ad  00000000  00000000  00040b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bcee  00000000  00000000  00043ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0004fce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00050a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c5c  00000000  00000000  00051680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6ae  00000000  00000000  000742dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8284  00000000  00000000  0008398a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bc0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  0013bc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007210 	.word	0x08007210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08007210 	.word	0x08007210

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b510      	push	{r4, lr}
 80005a2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
 80005a6:	7818      	ldrb	r0, [r3, #0]
 80005a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <HAL_InitTick+0x44>)
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f8a8 	bl	800070c <HAL_SYSTICK_Config>
 80005bc:	b968      	cbnz	r0, 80005da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	2c0f      	cmp	r4, #15
 80005c0:	d901      	bls.n	80005c6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005c2:	2001      	movs	r0, #1
 80005c4:	e00a      	b.n	80005dc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c6:	2200      	movs	r2, #0
 80005c8:	4621      	mov	r1, r4
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295
 80005ce:	f000 f85d 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <HAL_InitTick+0x40>)
 80005d4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80005d6:	2000      	movs	r0, #0
 80005d8:	e000      	b.n	80005dc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005da:	2001      	movs	r0, #1
}
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000064 	.word	0x20000064

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f006 f8b0 	bl	8006774 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	6811      	ldr	r1, [r2, #0]
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_IncTick+0x14>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200013a8 	.word	0x200013a8
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200013a8 	.word	0x200013a8

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
 8000648:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800064e:	d002      	beq.n	8000656 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_Delay+0x24>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	42a0      	cmp	r0, r4
 800065e:	d3fa      	bcc.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000674:	0200      	lsls	r0, r0, #8
 8000676:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800067c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000680:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000684:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c3 0407 	rsb	r4, r3, #7
 800069a:	2c04      	cmp	r4, #4
 800069c:	bf28      	it	cs
 800069e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	1d1d      	adds	r5, r3, #4
 80006a2:	2d06      	cmp	r5, #6
 80006a4:	d918      	bls.n	80006d8 <HAL_NVIC_SetPriority+0x4c>
 80006a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	f04f 35ff 	mov.w	r5, #4294967295
 80006ac:	fa05 f404 	lsl.w	r4, r5, r4
 80006b0:	ea21 0104 	bic.w	r1, r1, r4
 80006b4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b6:	fa05 f303 	lsl.w	r3, r5, r3
 80006ba:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006be:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80006c0:	2800      	cmp	r0, #0
 80006c2:	db0b      	blt.n	80006dc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	0109      	lsls	r1, r1, #4
 80006c6:	b2c9      	uxtb	r1, r1
 80006c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006d4:	bc30      	pop	{r4, r5}
 80006d6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	2300      	movs	r3, #0
 80006da:	e7e5      	b.n	80006a8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	f000 000f 	and.w	r0, r0, #15
 80006e0:	0109      	lsls	r1, r1, #4
 80006e2:	b2c9      	uxtb	r1, r1
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
 80006e6:	5419      	strb	r1, [r3, r0]
 80006e8:	e7f4      	b.n	80006d4 <HAL_NVIC_SetPriority+0x48>
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f4:	f000 021f 	and.w	r2, r0, #31
 80006f8:	0940      	lsrs	r0, r0, #5
 80006fa:	2301      	movs	r3, #1
 80006fc:	4093      	lsls	r3, r2
 80006fe:	4a02      	ldr	r2, [pc, #8]	; (8000708 <HAL_NVIC_EnableIRQ+0x14>)
 8000700:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	3801      	subs	r0, #1
 800070e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000712:	d20a      	bcs.n	800072a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_SYSTICK_Config+0x24>)
 8000716:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_SYSTICK_Config+0x28>)
 800071a:	21f0      	movs	r1, #240	; 0xf0
 800071c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	2000      	movs	r0, #0
 8000722:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000738:	2804      	cmp	r0, #4
 800073a:	d005      	beq.n	8000748 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800073e:	6813      	ldr	r3, [r2, #0]
 8000740:	f023 0304 	bic.w	r3, r3, #4
 8000744:	6013      	str	r3, [r2, #0]
  }
}
 8000746:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000748:	4a02      	ldr	r2, [pc, #8]	; (8000754 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800074a:	6813      	ldr	r3, [r2, #0]
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	4770      	bx	lr
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000758:	4770      	bx	lr

0800075a <HAL_SYSTICK_IRQHandler>:
{
 800075a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800075c:	f7ff fffc 	bl	8000758 <HAL_SYSTICK_Callback>
}
 8000760:	bd08      	pop	{r3, pc}
	...

08000764 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000764:	2300      	movs	r3, #0
 8000766:	2b0f      	cmp	r3, #15
 8000768:	f200 80d7 	bhi.w	800091a <HAL_GPIO_Init+0x1b6>
{
 800076c:	b4f0      	push	{r4, r5, r6, r7}
 800076e:	b082      	sub	sp, #8
 8000770:	e039      	b.n	80007e6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	2207      	movs	r2, #7
 8000774:	e000      	b.n	8000778 <HAL_GPIO_Init+0x14>
 8000776:	2200      	movs	r2, #0
 8000778:	40b2      	lsls	r2, r6
 800077a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800077c:	3402      	adds	r4, #2
 800077e:	4e67      	ldr	r6, [pc, #412]	; (800091c <HAL_GPIO_Init+0x1b8>)
 8000780:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000784:	4a66      	ldr	r2, [pc, #408]	; (8000920 <HAL_GPIO_Init+0x1bc>)
 8000786:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000788:	43ea      	mvns	r2, r5
 800078a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800078e:	684f      	ldr	r7, [r1, #4]
 8000790:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000794:	d001      	beq.n	800079a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000796:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800079a:	4c61      	ldr	r4, [pc, #388]	; (8000920 <HAL_GPIO_Init+0x1bc>)
 800079c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800079e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80007a0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a4:	684f      	ldr	r7, [r1, #4]
 80007a6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80007aa:	d001      	beq.n	80007b0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80007ac:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80007b0:	4c5b      	ldr	r4, [pc, #364]	; (8000920 <HAL_GPIO_Init+0x1bc>)
 80007b2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80007b6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ba:	684f      	ldr	r7, [r1, #4]
 80007bc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80007c0:	d001      	beq.n	80007c6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80007c2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80007c6:	4c56      	ldr	r4, [pc, #344]	; (8000920 <HAL_GPIO_Init+0x1bc>)
 80007c8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80007ca:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80007cc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ce:	684e      	ldr	r6, [r1, #4]
 80007d0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80007d4:	d001      	beq.n	80007da <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80007d6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80007da:	4c51      	ldr	r4, [pc, #324]	; (8000920 <HAL_GPIO_Init+0x1bc>)
 80007dc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007de:	3301      	adds	r3, #1
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	f200 8097 	bhi.w	8000914 <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 80007e6:	2201      	movs	r2, #1
 80007e8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	680c      	ldr	r4, [r1, #0]
 80007ec:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80007f0:	42aa      	cmp	r2, r5
 80007f2:	d1f4      	bne.n	80007de <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f4:	684c      	ldr	r4, [r1, #4]
 80007f6:	2c02      	cmp	r4, #2
 80007f8:	d001      	beq.n	80007fe <HAL_GPIO_Init+0x9a>
 80007fa:	2c12      	cmp	r4, #18
 80007fc:	d110      	bne.n	8000820 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80007fe:	08de      	lsrs	r6, r3, #3
 8000800:	3608      	adds	r6, #8
 8000802:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000806:	f003 0407 	and.w	r4, r3, #7
 800080a:	00a7      	lsls	r7, r4, #2
 800080c:	240f      	movs	r4, #15
 800080e:	40bc      	lsls	r4, r7
 8000810:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000814:	690c      	ldr	r4, [r1, #16]
 8000816:	40bc      	lsls	r4, r7
 8000818:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 800081c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000820:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000822:	005f      	lsls	r7, r3, #1
 8000824:	2603      	movs	r6, #3
 8000826:	40be      	lsls	r6, r7
 8000828:	43f6      	mvns	r6, r6
 800082a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800082e:	684c      	ldr	r4, [r1, #4]
 8000830:	f004 0403 	and.w	r4, r4, #3
 8000834:	40bc      	lsls	r4, r7
 8000836:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800083a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083c:	684c      	ldr	r4, [r1, #4]
 800083e:	f104 3cff 	add.w	ip, r4, #4294967295
 8000842:	f1bc 0f01 	cmp.w	ip, #1
 8000846:	d903      	bls.n	8000850 <HAL_GPIO_Init+0xec>
 8000848:	2c11      	cmp	r4, #17
 800084a:	d001      	beq.n	8000850 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084c:	2c12      	cmp	r4, #18
 800084e:	d110      	bne.n	8000872 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000850:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000852:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000856:	68cc      	ldr	r4, [r1, #12]
 8000858:	40bc      	lsls	r4, r7
 800085a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800085e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000860:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000862:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000866:	684c      	ldr	r4, [r1, #4]
 8000868:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800086c:	409c      	lsls	r4, r3
 800086e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000870:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000872:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000874:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000876:	688a      	ldr	r2, [r1, #8]
 8000878:	40ba      	lsls	r2, r7
 800087a:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800087c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800087e:	684a      	ldr	r2, [r1, #4]
 8000880:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000884:	d0ab      	beq.n	80007de <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2200      	movs	r2, #0
 8000888:	9201      	str	r2, [sp, #4]
 800088a:	4a26      	ldr	r2, [pc, #152]	; (8000924 <HAL_GPIO_Init+0x1c0>)
 800088c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800088e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000892:	6454      	str	r4, [r2, #68]	; 0x44
 8000894:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000896:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800089a:	9201      	str	r2, [sp, #4]
 800089c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800089e:	089c      	lsrs	r4, r3, #2
 80008a0:	1ca6      	adds	r6, r4, #2
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <HAL_GPIO_Init+0x1b8>)
 80008a4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008a8:	f003 0203 	and.w	r2, r3, #3
 80008ac:	0096      	lsls	r6, r2, #2
 80008ae:	220f      	movs	r2, #15
 80008b0:	40b2      	lsls	r2, r6
 80008b2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <HAL_GPIO_Init+0x1c4>)
 80008b8:	4290      	cmp	r0, r2
 80008ba:	f43f af5c 	beq.w	8000776 <HAL_GPIO_Init+0x12>
 80008be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008c2:	4290      	cmp	r0, r2
 80008c4:	d01a      	beq.n	80008fc <HAL_GPIO_Init+0x198>
 80008c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008ca:	4290      	cmp	r0, r2
 80008cc:	d018      	beq.n	8000900 <HAL_GPIO_Init+0x19c>
 80008ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008d2:	4290      	cmp	r0, r2
 80008d4:	d016      	beq.n	8000904 <HAL_GPIO_Init+0x1a0>
 80008d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008da:	4290      	cmp	r0, r2
 80008dc:	d014      	beq.n	8000908 <HAL_GPIO_Init+0x1a4>
 80008de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008e2:	4290      	cmp	r0, r2
 80008e4:	d012      	beq.n	800090c <HAL_GPIO_Init+0x1a8>
 80008e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008ea:	4290      	cmp	r0, r2
 80008ec:	d010      	beq.n	8000910 <HAL_GPIO_Init+0x1ac>
 80008ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f43f af3d 	beq.w	8000772 <HAL_GPIO_Init+0xe>
 80008f8:	2208      	movs	r2, #8
 80008fa:	e73d      	b.n	8000778 <HAL_GPIO_Init+0x14>
 80008fc:	2201      	movs	r2, #1
 80008fe:	e73b      	b.n	8000778 <HAL_GPIO_Init+0x14>
 8000900:	2202      	movs	r2, #2
 8000902:	e739      	b.n	8000778 <HAL_GPIO_Init+0x14>
 8000904:	2203      	movs	r2, #3
 8000906:	e737      	b.n	8000778 <HAL_GPIO_Init+0x14>
 8000908:	2204      	movs	r2, #4
 800090a:	e735      	b.n	8000778 <HAL_GPIO_Init+0x14>
 800090c:	2205      	movs	r2, #5
 800090e:	e733      	b.n	8000778 <HAL_GPIO_Init+0x14>
 8000910:	2206      	movs	r2, #6
 8000912:	e731      	b.n	8000778 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000914:	b002      	add	sp, #8
 8000916:	bcf0      	pop	{r4, r5, r6, r7}
 8000918:	4770      	bx	lr
 800091a:	4770      	bx	lr
 800091c:	40013800 	.word	0x40013800
 8000920:	40013c00 	.word	0x40013c00
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800092c:	b912      	cbnz	r2, 8000934 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800092e:	0409      	lsls	r1, r1, #16
 8000930:	6181      	str	r1, [r0, #24]
  }
}
 8000932:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000934:	6181      	str	r1, [r0, #24]
 8000936:	4770      	bx	lr

08000938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000938:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4203      	tst	r3, r0
 8000940:	d100      	bne.n	8000944 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000942:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000946:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000948:	f004 fa8c 	bl	8004e64 <HAL_GPIO_EXTI_Callback>
}
 800094c:	e7f9      	b.n	8000942 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800094e:	bf00      	nop
 8000950:	40013c00 	.word	0x40013c00

08000954 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000954:	2800      	cmp	r0, #0
 8000956:	f000 81bb 	beq.w	8000cd0 <HAL_RCC_OscConfig+0x37c>
{
 800095a:	b570      	push	{r4, r5, r6, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	f013 0f01 	tst.w	r3, #1
 8000966:	d03b      	beq.n	80009e0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000968:	4ba7      	ldr	r3, [pc, #668]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f003 030c 	and.w	r3, r3, #12
 8000970:	2b04      	cmp	r3, #4
 8000972:	d02c      	beq.n	80009ce <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000974:	4ba4      	ldr	r3, [pc, #656]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800097c:	2b08      	cmp	r3, #8
 800097e:	d021      	beq.n	80009c4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000986:	d04f      	beq.n	8000a28 <HAL_RCC_OscConfig+0xd4>
 8000988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800098c:	d052      	beq.n	8000a34 <HAL_RCC_OscConfig+0xe0>
 800098e:	4b9e      	ldr	r3, [pc, #632]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800099e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d050      	beq.n	8000a48 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a6:	f7ff fe45 	bl	8000634 <HAL_GetTick>
 80009aa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ac:	4b96      	ldr	r3, [pc, #600]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009b4:	d114      	bne.n	80009e0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b6:	f7ff fe3d 	bl	8000634 <HAL_GetTick>
 80009ba:	1b40      	subs	r0, r0, r5
 80009bc:	2864      	cmp	r0, #100	; 0x64
 80009be:	d9f5      	bls.n	80009ac <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80009c0:	2003      	movs	r0, #3
 80009c2:	e18a      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009c4:	4b90      	ldr	r3, [pc, #576]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80009cc:	d0d8      	beq.n	8000980 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ce:	4b8e      	ldr	r3, [pc, #568]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009d6:	d003      	beq.n	80009e0 <HAL_RCC_OscConfig+0x8c>
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 817a 	beq.w	8000cd4 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	f013 0f02 	tst.w	r3, #2
 80009e6:	d055      	beq.n	8000a94 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009e8:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f013 0f0c 	tst.w	r3, #12
 80009f0:	d03e      	beq.n	8000a70 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009f2:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d033      	beq.n	8000a66 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009fe:	68e3      	ldr	r3, [r4, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d068      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a04:	4b81      	ldr	r3, [pc, #516]	; (8000c0c <HAL_RCC_OscConfig+0x2b8>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fe13 	bl	8000634 <HAL_GetTick>
 8000a0e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a10:	4b7d      	ldr	r3, [pc, #500]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f013 0f02 	tst.w	r3, #2
 8000a18:	d154      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1a:	f7ff fe0b 	bl	8000634 <HAL_GetTick>
 8000a1e:	1b40      	subs	r0, r0, r5
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d9f5      	bls.n	8000a10 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000a24:	2003      	movs	r0, #3
 8000a26:	e158      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a28:	4a77      	ldr	r2, [pc, #476]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e7b5      	b.n	80009a0 <HAL_RCC_OscConfig+0x4c>
 8000a34:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e7ab      	b.n	80009a0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000a48:	f7ff fdf4 	bl	8000634 <HAL_GetTick>
 8000a4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a4e:	4b6e      	ldr	r3, [pc, #440]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a56:	d0c3      	beq.n	80009e0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a58:	f7ff fdec 	bl	8000634 <HAL_GetTick>
 8000a5c:	1b40      	subs	r0, r0, r5
 8000a5e:	2864      	cmp	r0, #100	; 0x64
 8000a60:	d9f5      	bls.n	8000a4e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000a62:	2003      	movs	r0, #3
 8000a64:	e139      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a66:	4b68      	ldr	r3, [pc, #416]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000a6e:	d1c6      	bne.n	80009fe <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a70:	4b65      	ldr	r3, [pc, #404]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f013 0f02 	tst.w	r3, #2
 8000a78:	d004      	beq.n	8000a84 <HAL_RCC_OscConfig+0x130>
 8000a7a:	68e3      	ldr	r3, [r4, #12]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d001      	beq.n	8000a84 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000a80:	2001      	movs	r0, #1
 8000a82:	e12a      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a84:	4a60      	ldr	r2, [pc, #384]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a8c:	6921      	ldr	r1, [r4, #16]
 8000a8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a92:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	f013 0f08 	tst.w	r3, #8
 8000a9a:	d040      	beq.n	8000b1e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a9c:	6963      	ldr	r3, [r4, #20]
 8000a9e:	b363      	cbz	r3, 8000afa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	; (8000c10 <HAL_RCC_OscConfig+0x2bc>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fdc5 	bl	8000634 <HAL_GetTick>
 8000aaa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aac:	4b56      	ldr	r3, [pc, #344]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ab0:	f013 0f02 	tst.w	r3, #2
 8000ab4:	d133      	bne.n	8000b1e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fdbd 	bl	8000634 <HAL_GetTick>
 8000aba:	1b40      	subs	r0, r0, r5
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9f5      	bls.n	8000aac <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	e10a      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac4:	4a50      	ldr	r2, [pc, #320]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000acc:	6921      	ldr	r1, [r4, #16]
 8000ace:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	e7de      	b.n	8000a94 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <HAL_RCC_OscConfig+0x2b8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000adc:	f7ff fdaa 	bl	8000634 <HAL_GetTick>
 8000ae0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f013 0f02 	tst.w	r3, #2
 8000aea:	d0d3      	beq.n	8000a94 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aec:	f7ff fda2 	bl	8000634 <HAL_GetTick>
 8000af0:	1b40      	subs	r0, r0, r5
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9f5      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000af6:	2003      	movs	r0, #3
 8000af8:	e0ef      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000afa:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <HAL_RCC_OscConfig+0x2bc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b00:	f7ff fd98 	bl	8000634 <HAL_GetTick>
 8000b04:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b06:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b0a:	f013 0f02 	tst.w	r3, #2
 8000b0e:	d006      	beq.n	8000b1e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b10:	f7ff fd90 	bl	8000634 <HAL_GetTick>
 8000b14:	1b40      	subs	r0, r0, r5
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f5      	bls.n	8000b06 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	e0dd      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	f013 0f04 	tst.w	r3, #4
 8000b24:	d079      	beq.n	8000c1a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b2e:	d133      	bne.n	8000b98 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b48:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <HAL_RCC_OscConfig+0x2c0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b52:	d023      	beq.n	8000b9c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b54:	68a3      	ldr	r3, [r4, #8]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d034      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x270>
 8000b5a:	2b05      	cmp	r3, #5
 8000b5c:	d038      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x27c>
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000b60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b62:	f022 0201 	bic.w	r2, r2, #1
 8000b66:	671a      	str	r2, [r3, #112]	; 0x70
 8000b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b6a:	f022 0204 	bic.w	r2, r2, #4
 8000b6e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b70:	68a3      	ldr	r3, [r4, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d036      	beq.n	8000be4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b76:	f7ff fd5d 	bl	8000634 <HAL_GetTick>
 8000b7a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b80:	f013 0f02 	tst.w	r3, #2
 8000b84:	d148      	bne.n	8000c18 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b86:	f7ff fd55 	bl	8000634 <HAL_GetTick>
 8000b8a:	1b80      	subs	r0, r0, r6
 8000b8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b90:	4298      	cmp	r0, r3
 8000b92:	d9f3      	bls.n	8000b7c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000b94:	2003      	movs	r0, #3
 8000b96:	e0a0      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8000b98:	2500      	movs	r5, #0
 8000b9a:	e7d6      	b.n	8000b4a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_RCC_OscConfig+0x2c0>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ba6:	f7ff fd45 	bl	8000634 <HAL_GetTick>
 8000baa:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_RCC_OscConfig+0x2c0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000bb4:	d1ce      	bne.n	8000b54 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bb6:	f7ff fd3d 	bl	8000634 <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	2802      	cmp	r0, #2
 8000bbe:	d9f5      	bls.n	8000bac <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	e08a      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000bc6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8000bce:	e7cf      	b.n	8000b70 <HAL_RCC_OscConfig+0x21c>
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bd4:	f042 0204 	orr.w	r2, r2, #4
 8000bd8:	671a      	str	r2, [r3, #112]	; 0x70
 8000bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bdc:	f042 0201 	orr.w	r2, r2, #1
 8000be0:	671a      	str	r2, [r3, #112]	; 0x70
 8000be2:	e7c5      	b.n	8000b70 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be4:	f7ff fd26 	bl	8000634 <HAL_GetTick>
 8000be8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_RCC_OscConfig+0x2b4>)
 8000bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bee:	f013 0f02 	tst.w	r3, #2
 8000bf2:	d011      	beq.n	8000c18 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf4:	f7ff fd1e 	bl	8000634 <HAL_GetTick>
 8000bf8:	1b80      	subs	r0, r0, r6
 8000bfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bfe:	4298      	cmp	r0, r3
 8000c00:	d9f3      	bls.n	8000bea <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000c02:	2003      	movs	r0, #3
 8000c04:	e069      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	42470000 	.word	0x42470000
 8000c10:	42470e80 	.word	0x42470e80
 8000c14:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c18:	b9e5      	cbnz	r5, 8000c54 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1a:	69a3      	ldr	r3, [r4, #24]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d05b      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c20:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_RCC_OscConfig+0x390>)
 8000c22:	6892      	ldr	r2, [r2, #8]
 8000c24:	f002 020c 	and.w	r2, r2, #12
 8000c28:	2a08      	cmp	r2, #8
 8000c2a:	d058      	beq.n	8000cde <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d017      	beq.n	8000c60 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_RCC_OscConfig+0x394>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c36:	f7ff fcfd 	bl	8000634 <HAL_GetTick>
 8000c3a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_RCC_OscConfig+0x390>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c44:	d042      	beq.n	8000ccc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c46:	f7ff fcf5 	bl	8000634 <HAL_GetTick>
 8000c4a:	1b00      	subs	r0, r0, r4
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d9f5      	bls.n	8000c3c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000c50:	2003      	movs	r0, #3
 8000c52:	e042      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c54:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <HAL_RCC_OscConfig+0x390>)
 8000c56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	e7dc      	b.n	8000c1a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <HAL_RCC_OscConfig+0x394>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c66:	f7ff fce5 	bl	8000634 <HAL_GetTick>
 8000c6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_RCC_OscConfig+0x390>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c74:	d006      	beq.n	8000c84 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c76:	f7ff fcdd 	bl	8000634 <HAL_GetTick>
 8000c7a:	1b40      	subs	r0, r0, r5
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d9f5      	bls.n	8000c6c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000c80:	2003      	movs	r0, #3
 8000c82:	e02a      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c84:	69e3      	ldr	r3, [r4, #28]
 8000c86:	6a22      	ldr	r2, [r4, #32]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c8c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c92:	0852      	lsrs	r2, r2, #1
 8000c94:	3a01      	subs	r2, #1
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_RCC_OscConfig+0x390>)
 8000ca2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_RCC_OscConfig+0x394>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000caa:	f7ff fcc3 	bl	8000634 <HAL_GetTick>
 8000cae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_RCC_OscConfig+0x390>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cb8:	d106      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cba:	f7ff fcbb 	bl	8000634 <HAL_GetTick>
 8000cbe:	1b00      	subs	r0, r0, r4
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d9f5      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000cc8:	2000      	movs	r0, #0
 8000cca:	e006      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e004      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8000cd0:	2001      	movs	r0, #1
}
 8000cd2:	4770      	bx	lr
        return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8000cd8:	2000      	movs	r0, #0
}
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
 8000ce0:	e7fb      	b.n	8000cda <HAL_RCC_OscConfig+0x386>
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	42470060 	.word	0x42470060

08000cec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d158      	bne.n	8000daa <HAL_RCC_GetSysClockFreq+0xbe>
{
 8000cf8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d0a:	d02b      	beq.n	8000d64 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d14:	461e      	mov	r6, r3
 8000d16:	2700      	movs	r7, #0
 8000d18:	015c      	lsls	r4, r3, #5
 8000d1a:	2500      	movs	r5, #0
 8000d1c:	1ae4      	subs	r4, r4, r3
 8000d1e:	eb65 0507 	sbc.w	r5, r5, r7
 8000d22:	01a9      	lsls	r1, r5, #6
 8000d24:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d28:	01a0      	lsls	r0, r4, #6
 8000d2a:	1b00      	subs	r0, r0, r4
 8000d2c:	eb61 0105 	sbc.w	r1, r1, r5
 8000d30:	00cb      	lsls	r3, r1, #3
 8000d32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d36:	00c4      	lsls	r4, r0, #3
 8000d38:	19a0      	adds	r0, r4, r6
 8000d3a:	eb43 0107 	adc.w	r1, r3, r7
 8000d3e:	028b      	lsls	r3, r1, #10
 8000d40:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000d44:	0284      	lsls	r4, r0, #10
 8000d46:	4620      	mov	r0, r4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f7ff faa8 	bl	80002a0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d58:	3301      	adds	r3, #1
 8000d5a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d5c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d60:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d6c:	461e      	mov	r6, r3
 8000d6e:	2700      	movs	r7, #0
 8000d70:	015c      	lsls	r4, r3, #5
 8000d72:	2500      	movs	r5, #0
 8000d74:	1ae4      	subs	r4, r4, r3
 8000d76:	eb65 0507 	sbc.w	r5, r5, r7
 8000d7a:	01a9      	lsls	r1, r5, #6
 8000d7c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d80:	01a0      	lsls	r0, r4, #6
 8000d82:	1b00      	subs	r0, r0, r4
 8000d84:	eb61 0105 	sbc.w	r1, r1, r5
 8000d88:	00cb      	lsls	r3, r1, #3
 8000d8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d8e:	00c4      	lsls	r4, r0, #3
 8000d90:	19a0      	adds	r0, r4, r6
 8000d92:	eb43 0107 	adc.w	r1, r3, r7
 8000d96:	028b      	lsls	r3, r1, #10
 8000d98:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000d9c:	0284      	lsls	r4, r0, #10
 8000d9e:	4620      	mov	r0, r4
 8000da0:	4619      	mov	r1, r3
 8000da2:	2300      	movs	r3, #0
 8000da4:	f7ff fa7c 	bl	80002a0 <__aeabi_uldivmod>
 8000da8:	e7d2      	b.n	8000d50 <HAL_RCC_GetSysClockFreq+0x64>
      sysclockfreq = HSI_VALUE;
 8000daa:	4802      	ldr	r0, [pc, #8]	; (8000db4 <HAL_RCC_GetSysClockFreq+0xc8>)
}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	00f42400 	.word	0x00f42400

08000db8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 809d 	beq.w	8000ef8 <HAL_RCC_ClockConfig+0x140>
{
 8000dbe:	b570      	push	{r4, r5, r6, lr}
 8000dc0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <HAL_RCC_ClockConfig+0x148>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d209      	bcs.n	8000de2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dce:	b2cb      	uxtb	r3, r1
 8000dd0:	4a4b      	ldr	r2, [pc, #300]	; (8000f00 <HAL_RCC_ClockConfig+0x148>)
 8000dd2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dd4:	6813      	ldr	r3, [r2, #0]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d001      	beq.n	8000de2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000dde:	2001      	movs	r0, #1
}
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	f013 0f02 	tst.w	r3, #2
 8000de8:	d017      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dea:	f013 0f04 	tst.w	r3, #4
 8000dee:	d004      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000df0:	4a44      	ldr	r2, [pc, #272]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000df2:	6893      	ldr	r3, [r2, #8]
 8000df4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000df8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f013 0f08 	tst.w	r3, #8
 8000e00:	d004      	beq.n	8000e0c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e02:	4a40      	ldr	r2, [pc, #256]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e04:	6893      	ldr	r3, [r2, #8]
 8000e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e0a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e0c:	4a3d      	ldr	r2, [pc, #244]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e0e:	6893      	ldr	r3, [r2, #8]
 8000e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e14:	68a0      	ldr	r0, [r4, #8]
 8000e16:	4303      	orrs	r3, r0
 8000e18:	6093      	str	r3, [r2, #8]
 8000e1a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	f013 0f01 	tst.w	r3, #1
 8000e22:	d032      	beq.n	8000e8a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d021      	beq.n	8000e6e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e2a:	1e9a      	subs	r2, r3, #2
 8000e2c:	2a01      	cmp	r2, #1
 8000e2e:	d925      	bls.n	8000e7c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	f012 0f02 	tst.w	r2, #2
 8000e38:	d060      	beq.n	8000efc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e3a:	4932      	ldr	r1, [pc, #200]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e3c:	688a      	ldr	r2, [r1, #8]
 8000e3e:	f022 0203 	bic.w	r2, r2, #3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000e46:	f7ff fbf5 	bl	8000634 <HAL_GetTick>
 8000e4a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	6862      	ldr	r2, [r4, #4]
 8000e56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e5a:	d016      	beq.n	8000e8a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e5c:	f7ff fbea 	bl	8000634 <HAL_GetTick>
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e66:	4298      	cmp	r0, r3
 8000e68:	d9f0      	bls.n	8000e4c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e7b8      	b.n	8000de0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000e76:	d1e0      	bne.n	8000e3a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000e78:	2001      	movs	r0, #1
 8000e7a:	e7b1      	b.n	8000de0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e84:	d1d9      	bne.n	8000e3a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
 8000e88:	e7aa      	b.n	8000de0 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_RCC_ClockConfig+0x148>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d909      	bls.n	8000eaa <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e96:	b2ea      	uxtb	r2, r5
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_RCC_ClockConfig+0x148>)
 8000e9a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d001      	beq.n	8000eaa <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	e79a      	b.n	8000de0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	f013 0f04 	tst.w	r3, #4
 8000eb0:	d006      	beq.n	8000ec0 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000eb4:	6893      	ldr	r3, [r2, #8]
 8000eb6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000eba:	68e1      	ldr	r1, [r4, #12]
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	f013 0f08 	tst.w	r3, #8
 8000ec6:	d007      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000eca:	6893      	ldr	r3, [r2, #8]
 8000ecc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ed0:	6921      	ldr	r1, [r4, #16]
 8000ed2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ed6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ed8:	f7ff ff08 	bl	8000cec <HAL_RCC_GetSysClockFreq>
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_RCC_ClockConfig+0x14c>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_RCC_ClockConfig+0x150>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	40d8      	lsrs	r0, r3
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_RCC_ClockConfig+0x154>)
 8000eec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fb56 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	e773      	b.n	8000de0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
}
 8000efa:	4770      	bx	lr
        return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
 8000efe:	e76f      	b.n	8000de0 <HAL_RCC_ClockConfig+0x28>
 8000f00:	40023c00 	.word	0x40023c00
 8000f04:	40023800 	.word	0x40023800
 8000f08:	080076b0 	.word	0x080076b0
 8000f0c:	20000064 	.word	0x20000064

08000f10 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f10:	4b01      	ldr	r3, [pc, #4]	; (8000f18 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000064 	.word	0x20000064

08000f1c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d03b      	beq.n	8000f98 <HAL_SPI_Init+0x7c>
{
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000f28:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d02e      	beq.n	8000f8e <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f3e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f40:	6863      	ldr	r3, [r4, #4]
 8000f42:	68a2      	ldr	r2, [r4, #8]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	68e2      	ldr	r2, [r4, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	6922      	ldr	r2, [r4, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6962      	ldr	r2, [r4, #20]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	69a2      	ldr	r2, [r4, #24]
 8000f54:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	69e2      	ldr	r2, [r4, #28]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	6a22      	ldr	r2, [r4, #32]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	430b      	orrs	r3, r1
 8000f68:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f6a:	8b63      	ldrh	r3, [r4, #26]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f72:	6822      	ldr	r2, [r4, #0]
 8000f74:	430b      	orrs	r3, r1
 8000f76:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	69d3      	ldr	r3, [r2, #28]
 8000f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f80:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f82:	2000      	movs	r0, #0
 8000f84:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8000f8c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8000f8e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000f92:	f005 fc39 	bl	8006808 <HAL_SPI_MspInit>
 8000f96:	e7cb      	b.n	8000f30 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
}
 8000f9a:	4770      	bx	lr

08000f9c <FT800_setSoundVolume>:
/* ************************************************************************************ */
// FT800 set volume for Sound Synthesizer 
/* ************************************************************************************ */

void FT800_setSoundVolume(uint8_t volume)
{
 8000f9c:	b508      	push	{r3, lr}
    FT800_Write8(REG_VOL_SOUND,volume);
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <FT800_setSoundVolume+0xc>)
 8000fa2:	f000 f881 	bl	80010a8 <FT800_Write8>
}
 8000fa6:	bd08      	pop	{r3, pc}
 8000fa8:	00102480 	.word	0x00102480

08000fac <FT800_setSoundEffect>:
// FT800 set sound effect
// note: MIDI note (pitch control), effect: Sound effects pre-loaded in a ROM wave library
/* ************************************************************************************ */

void FT800_setSoundEffect(uint8_t note, uint8_t effect)
{
 8000fac:	b508      	push	{r3, lr}
    FT800_Write16(REG_SOUND,((uint16_t)note<<8)|effect);
 8000fae:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8000fb2:	4802      	ldr	r0, [pc, #8]	; (8000fbc <FT800_setSoundEffect+0x10>)
 8000fb4:	f000 f898 	bl	80010e8 <FT800_Write16>
}
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop
 8000fbc:	00102484 	.word	0x00102484

08000fc0 <FT800_playSound>:
/* ************************************************************************************ */
// FT800 play sound
/* ************************************************************************************ */

void FT800_playSound(uint8_t play)
{
 8000fc0:	b508      	push	{r3, lr}
    FT800_Write8(REG_PLAY,play&0x01);
 8000fc2:	f000 0101 	and.w	r1, r0, #1
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <FT800_playSound+0x10>)
 8000fc8:	f000 f86e 	bl	80010a8 <FT800_Write8>
}
 8000fcc:	bd08      	pop	{r3, pc}
 8000fce:	bf00      	nop
 8000fd0:	00102488 	.word	0x00102488

08000fd4 <FT800_setPlaybackVolume>:
/* ************************************************************************************ */
// FT800 set volume for Audio Playback
/* ************************************************************************************ */

void FT800_setPlaybackVolume(uint8_t volume)
{
 8000fd4:	b508      	push	{r3, lr}
    FT800_Write8(REG_VOL_PB,volume);
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <FT800_setPlaybackVolume+0xc>)
 8000fda:	f000 f865 	bl	80010a8 <FT800_Write8>
}
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	0010247c 	.word	0x0010247c

08000fe4 <FT800_configurePlayback>:
/* ************************************************************************************ */
// FT800 configure Audio Playback - format: PCM, ULAW, ADPCM or UNDEFINDED
/* ************************************************************************************ */

void FT800_configurePlayback(uint32_t start_addr, uint32_t length, uint16_t freq, uint8_t format, uint8_t loop)
{
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	460e      	mov	r6, r1
 8000fe8:	4615      	mov	r5, r2
 8000fea:	461c      	mov	r4, r3
    FT800_Write32(REG_PLAYBACK_START,start_addr);
 8000fec:	4601      	mov	r1, r0
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <FT800_configurePlayback+0x3c>)
 8000ff0:	f000 f89e 	bl	8001130 <FT800_Write32>
    FT800_Write32(REG_PLAYBACK_LENGTH,length);
 8000ff4:	4631      	mov	r1, r6
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <FT800_configurePlayback+0x40>)
 8000ff8:	f000 f89a 	bl	8001130 <FT800_Write32>
    FT800_Write16(REG_PLAYBACK_FREQ,freq);
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <FT800_configurePlayback+0x44>)
 8001000:	f000 f872 	bl	80010e8 <FT800_Write16>
    FT800_Write8(REG_PLAYBACK_FORMAT,format&0x03);
 8001004:	f004 0103 	and.w	r1, r4, #3
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <FT800_configurePlayback+0x48>)
 800100a:	f000 f84d 	bl	80010a8 <FT800_Write8>
    FT800_Write8(REG_PLAYBACK_LOOP,loop&0x01);
 800100e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8001012:	f001 0101 	and.w	r1, r1, #1
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <FT800_configurePlayback+0x4c>)
 8001018:	f000 f846 	bl	80010a8 <FT800_Write8>
}
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	bf00      	nop
 8001020:	001024a4 	.word	0x001024a4
 8001024:	001024a8 	.word	0x001024a8
 8001028:	001024b0 	.word	0x001024b0
 800102c:	001024b4 	.word	0x001024b4
 8001030:	001024b8 	.word	0x001024b8

08001034 <FT800_playPlayback>:
/* ************************************************************************************ */
// FT800 play audio playback
/* ************************************************************************************ */

void FT800_playPlayback(uint8_t play)
{
 8001034:	b508      	push	{r3, lr}
    FT800_Write8(REG_PLAYBACK_PLAY,play&0x01);
 8001036:	f000 0101 	and.w	r1, r0, #1
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <FT800_playPlayback+0x10>)
 800103c:	f000 f834 	bl	80010a8 <FT800_Write8>
}
 8001040:	bd08      	pop	{r3, pc}
 8001042:	bf00      	nop
 8001044:	001024bc 	.word	0x001024bc

08001048 <CMD_Offset_Inc>:
// Increment FIFO address offset
/* ************************************************************************************ */

void CMD_Offset_Inc(uint8_t command_size)
{
    CMD_Offset+=command_size; 
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <CMD_Offset_Inc+0x10>)
 800104a:	8813      	ldrh	r3, [r2, #0]
 800104c:	4418      	add	r0, r3
    CMD_Offset%=4096;
 800104e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001052:	8010      	strh	r0, [r2, #0]
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200000fc 	.word	0x200000fc

0800105c <set_CMD_Offset>:
// Set FIFO address offset
/* ************************************************************************************ */

void set_CMD_Offset(uint16_t offset)
{
    CMD_Offset=offset;
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <set_CMD_Offset+0x8>)
 800105e:	8018      	strh	r0, [r3, #0]
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200000fc 	.word	0x200000fc

08001068 <get_CMD_Offset>:
/* ************************************************************************************ */

uint16_t get_CMD_Offset(void)
{
    return CMD_Offset;
}
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <get_CMD_Offset+0x8>)
 800106a:	8818      	ldrh	r0, [r3, #0]
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200000fc 	.word	0x200000fc

08001074 <FT800_WriteAddress>:
// Write address. Most significant byte is sent first.
// mode: writing to FT800(WRITE), reading from FT800(READ), configure GPU(CONFIG)  
/* ************************************************************************************ */

void FT800_WriteAddress(uint32_t address, uint8_t mode)
{
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
    uint8_t byte = 0;
    
    if(mode==CONFIG) address<<=16;
 800107a:	2940      	cmp	r1, #64	; 0x40
 800107c:	d00d      	beq.n	800109a <FT800_WriteAddress+0x26>
    
    byte = ((address & 0x00FF0000) >> 16);  // Mask the first byte to send
    byte = ((byte & 0x3F) | mode);            // the MSBs are forced to 10 for WRITE, 00 for READ, 01 for CONFIG
 800107e:	f3c4 4005 	ubfx	r0, r4, #16, #6
    FT800_WriteSPI(byte);                         // Call the low-level SPI transmit routine                                                 //
 8001082:	4328      	orrs	r0, r5
 8001084:	f001 f902 	bl	800228c <FT800_WriteSPI>
    
    byte = ((address & 0x0000FF00) >> 8);   // Mask the next byte to be sent
    FT800_WriteSPI(byte);                         // Call the low-level SPI transmit routine 
 8001088:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800108c:	f001 f8fe 	bl	800228c <FT800_WriteSPI>

    byte = (address & 0x000000FF);          // Mask the next byte to be sent
    FT800_WriteSPI(byte);                         // Call the low-level SPI transmit routine 
 8001090:	b2e0      	uxtb	r0, r4
 8001092:	f001 f8fb 	bl	800228c <FT800_WriteSPI>
    
    if(mode==READ)FT800_WriteSPI(0x00); 
 8001096:	b115      	cbz	r5, 800109e <FT800_WriteAddress+0x2a>
}
 8001098:	bd38      	pop	{r3, r4, r5, pc}
    if(mode==CONFIG) address<<=16;
 800109a:	0404      	lsls	r4, r0, #16
 800109c:	e7ef      	b.n	800107e <FT800_WriteAddress+0xa>
    if(mode==READ)FT800_WriteSPI(0x00); 
 800109e:	2000      	movs	r0, #0
 80010a0:	f001 f8f4 	bl	800228c <FT800_WriteSPI>
}
 80010a4:	e7f8      	b.n	8001098 <FT800_WriteAddress+0x24>
	...

080010a8 <FT800_Write8>:
/* ************************************************************************************ */
// FT800 Write BYTE data at address 
/* ************************************************************************************ */

void FT800_Write8(uint32_t address, uint8_t data)
{
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	4604      	mov	r4, r0
 80010ac:	460e      	mov	r6, r1
    if(address==RAM_CMD) // if writing to FIFO
 80010ae:	f5b0 1f84 	cmp.w	r0, #1081344	; 0x108000
 80010b2:	d00e      	beq.n	80010d2 <FT800_Write8+0x2a>
    {
        address+=CMD_Offset;
        CMD_Offset_Inc(1);// Move the CMD Offset 
    }
    FT800_CS_LO();                          
 80010b4:	4d0a      	ldr	r5, [pc, #40]	; (80010e0 <FT800_Write8+0x38>)
 80010b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010ba:	61ab      	str	r3, [r5, #24]
    FT800_WriteAddress(address,WRITE);                 
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff ffd8 	bl	8001074 <FT800_WriteAddress>
    FT800_WriteSPI(data);        
 80010c4:	4630      	mov	r0, r6
 80010c6:	f001 f8e1 	bl	800228c <FT800_WriteSPI>
    FT800_CS_HI(); 
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	61ab      	str	r3, [r5, #24]
}
 80010d0:	bd70      	pop	{r4, r5, r6, pc}
        address+=CMD_Offset;
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <FT800_Write8+0x3c>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	441c      	add	r4, r3
        CMD_Offset_Inc(1);// Move the CMD Offset 
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ffb5 	bl	8001048 <CMD_Offset_Inc>
 80010de:	e7e9      	b.n	80010b4 <FT800_Write8+0xc>
 80010e0:	40020400 	.word	0x40020400
 80010e4:	200000fc 	.word	0x200000fc

080010e8 <FT800_Write16>:
/* ************************************************************************************ */
// FT800 Write WORD data at address 
/* ************************************************************************************ */

void FT800_Write16(uint32_t address, uint16_t data)
{
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4604      	mov	r4, r0
 80010ec:	460e      	mov	r6, r1
    if(address==RAM_CMD )// if writing to FIFO
 80010ee:	f5b0 1f84 	cmp.w	r0, #1081344	; 0x108000
 80010f2:	d011      	beq.n	8001118 <FT800_Write16+0x30>
    {
        address+=CMD_Offset;
        CMD_Offset_Inc(2);// Move the CMD Offset
    }
    FT800_CS_LO();                               
 80010f4:	4d0c      	ldr	r5, [pc, #48]	; (8001128 <FT800_Write16+0x40>)
 80010f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010fa:	61ab      	str	r3, [r5, #24]
    FT800_WriteAddress(address,WRITE);                    
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff ffb8 	bl	8001074 <FT800_WriteAddress>
    FT800_WriteSPI((data&0x00FF));  
 8001104:	b2f0      	uxtb	r0, r6
 8001106:	f001 f8c1 	bl	800228c <FT800_WriteSPI>
    FT800_WriteSPI((data&0xFF00)>>8);   
 800110a:	0a30      	lsrs	r0, r6, #8
 800110c:	f001 f8be 	bl	800228c <FT800_WriteSPI>
    FT800_CS_HI(); 
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	61ab      	str	r3, [r5, #24]
}
 8001116:	bd70      	pop	{r4, r5, r6, pc}
        address+=CMD_Offset;
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <FT800_Write16+0x44>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	441c      	add	r4, r3
        CMD_Offset_Inc(2);// Move the CMD Offset
 800111e:	2002      	movs	r0, #2
 8001120:	f7ff ff92 	bl	8001048 <CMD_Offset_Inc>
 8001124:	e7e6      	b.n	80010f4 <FT800_Write16+0xc>
 8001126:	bf00      	nop
 8001128:	40020400 	.word	0x40020400
 800112c:	200000fc 	.word	0x200000fc

08001130 <FT800_Write32>:
/* ************************************************************************************ */
// FT800 Write DWORD data at address in FIFO
/* ************************************************************************************ */

void FT800_Write32(uint32_t address, uint32_t data)
{
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	4605      	mov	r5, r0
 8001134:	460c      	mov	r4, r1
    if(address==RAM_CMD) // if writing to FIFO 
 8001136:	f5b0 1f84 	cmp.w	r0, #1081344	; 0x108000
 800113a:	d019      	beq.n	8001170 <FT800_Write32+0x40>
    {
        address+=CMD_Offset;
        CMD_Offset_Inc(4);// Move the CMD Offset
    }
    FT800_CS_LO();                                
 800113c:	4e10      	ldr	r6, [pc, #64]	; (8001180 <FT800_Write32+0x50>)
 800113e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001142:	61b3      	str	r3, [r6, #24]
    FT800_WriteAddress(address,WRITE);   
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4628      	mov	r0, r5
 8001148:	f7ff ff94 	bl	8001074 <FT800_WriteAddress>
    FT800_WriteSPI((data&0x000000FF));  
 800114c:	b2e0      	uxtb	r0, r4
 800114e:	f001 f89d 	bl	800228c <FT800_WriteSPI>
    FT800_WriteSPI((data&0x0000FF00)>>8);    
 8001152:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001156:	f001 f899 	bl	800228c <FT800_WriteSPI>
    FT800_WriteSPI((data&0x00FF0000)>>16);  
 800115a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800115e:	f001 f895 	bl	800228c <FT800_WriteSPI>
    FT800_WriteSPI((data&0xFF000000)>>24);  
 8001162:	0e20      	lsrs	r0, r4, #24
 8001164:	f001 f892 	bl	800228c <FT800_WriteSPI>
    FT800_CS_HI(); 
 8001168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116c:	61b3      	str	r3, [r6, #24]
}
 800116e:	bd70      	pop	{r4, r5, r6, pc}
        address+=CMD_Offset;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <FT800_Write32+0x54>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	441d      	add	r5, r3
        CMD_Offset_Inc(4);// Move the CMD Offset
 8001176:	2004      	movs	r0, #4
 8001178:	f7ff ff66 	bl	8001048 <CMD_Offset_Inc>
 800117c:	e7de      	b.n	800113c <FT800_Write32+0xc>
 800117e:	bf00      	nop
 8001180:	40020400 	.word	0x40020400
 8001184:	200000fc 	.word	0x200000fc

08001188 <FT800_Read8>:
/* ************************************************************************************ */
// FT800 Read BYTE from address 
/* ************************************************************************************ */

uint8_t FT800_Read8(uint32_t address)
{
 8001188:	b510      	push	{r4, lr}
    uint8_t byte = 0;
    FT800_CS_LO();                          
 800118a:	4c06      	ldr	r4, [pc, #24]	; (80011a4 <FT800_Read8+0x1c>)
 800118c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001190:	61a3      	str	r3, [r4, #24]
    FT800_WriteAddress(address,READ);                 
 8001192:	2100      	movs	r1, #0
 8001194:	f7ff ff6e 	bl	8001074 <FT800_WriteAddress>
    byte=FT800_ReadSPI();        
 8001198:	f001 f87c 	bl	8002294 <FT800_ReadSPI>
    FT800_CS_HI(); 
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	61a3      	str	r3, [r4, #24]
    return byte;
}
 80011a2:	bd10      	pop	{r4, pc}
 80011a4:	40020400 	.word	0x40020400

080011a8 <FT800_Read16>:
/* ************************************************************************************ */
// FT800 Read WORD from address 
/* ************************************************************************************ */

uint16_t FT800_Read16(uint32_t address)
{
 80011a8:	b538      	push	{r3, r4, r5, lr}
    uint16_t byte=0;
    uint16_t word=0;
 
    FT800_CS_LO();                          
 80011aa:	4d09      	ldr	r5, [pc, #36]	; (80011d0 <FT800_Read16+0x28>)
 80011ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011b0:	61ab      	str	r3, [r5, #24]
    FT800_WriteAddress(address,READ);      
 80011b2:	2100      	movs	r1, #0
 80011b4:	f7ff ff5e 	bl	8001074 <FT800_WriteAddress>
    byte=FT800_ReadSPI(); 
 80011b8:	f001 f86c 	bl	8002294 <FT800_ReadSPI>
 80011bc:	4604      	mov	r4, r0
    word|=byte;
    byte=FT800_ReadSPI(); 
 80011be:	f001 f869 	bl	8002294 <FT800_ReadSPI>
    word|=(byte<<8);
 80011c2:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    FT800_CS_HI(); 
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	61ab      	str	r3, [r5, #24]
    
    return word;
}
 80011cc:	b280      	uxth	r0, r0
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
 80011d0:	40020400 	.word	0x40020400

080011d4 <FT800_Read32>:
/* ************************************************************************************ */
// FT800 Read DWORD from address 
/* ************************************************************************************ */

uint32_t FT800_Read32(uint32_t address)
{
 80011d4:	b538      	push	{r3, r4, r5, lr}
    uint32_t byte=0;
    uint32_t dword=0;
 
    FT800_CS_LO();                          
 80011d6:	4d0d      	ldr	r5, [pc, #52]	; (800120c <FT800_Read32+0x38>)
 80011d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011dc:	61ab      	str	r3, [r5, #24]
    FT800_WriteAddress(address,READ);      
 80011de:	2100      	movs	r1, #0
 80011e0:	f7ff ff48 	bl	8001074 <FT800_WriteAddress>
    byte=FT800_ReadSPI(); 
 80011e4:	f001 f856 	bl	8002294 <FT800_ReadSPI>
 80011e8:	4604      	mov	r4, r0
    dword|=byte;
    byte=FT800_ReadSPI(); 
 80011ea:	f001 f853 	bl	8002294 <FT800_ReadSPI>
    dword|=(byte<<8);
 80011ee:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    byte=FT800_ReadSPI(); 
 80011f2:	f001 f84f 	bl	8002294 <FT800_ReadSPI>
    dword|=(byte<<16);
 80011f6:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
    byte=FT800_ReadSPI(); 
 80011fa:	f001 f84b 	bl	8002294 <FT800_ReadSPI>
    dword|=(byte<<24);
    FT800_CS_HI(); 
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	61ab      	str	r3, [r5, #24]
    
    return dword;
}
 8001204:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 8001208:	bd38      	pop	{r3, r4, r5, pc}
 800120a:	bf00      	nop
 800120c:	40020400 	.word	0x40020400

08001210 <FT800_configGPU>:
/* ************************************************************************************ */
// FT800 configure GPU  
/* ************************************************************************************ */
 
void FT800_configGPU(void)
{
 8001210:	b510      	push	{r4, lr}
    FT800_CS_LO();
 8001212:	4c0c      	ldr	r4, [pc, #48]	; (8001244 <FT800_configGPU+0x34>)
 8001214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001218:	61a3      	str	r3, [r4, #24]
    FT800_WriteAddress(FT_GPU_EXTERNAL_OSC, CONFIG); // Change the PLL to external clock - optional
 800121a:	2140      	movs	r1, #64	; 0x40
 800121c:	2044      	movs	r0, #68	; 0x44
 800121e:	f7ff ff29 	bl	8001074 <FT800_WriteAddress>
    FT800_WriteAddress(FT_GPU_PLL_48M, CONFIG);      // Ensure configured to 48 MHz 
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	2062      	movs	r0, #98	; 0x62
 8001226:	f7ff ff25 	bl	8001074 <FT800_WriteAddress>
    FT800_WriteAddress(FT_GPU_CORE_RESET, CONFIG);   // Reset the core
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	2068      	movs	r0, #104	; 0x68
 800122e:	f7ff ff21 	bl	8001074 <FT800_WriteAddress>
    FT800_WriteAddress(FT_GPU_ACTIVE_M, CONFIG);     // Read address 0 to ensure FT800 is active
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff1d 	bl	8001074 <FT800_WriteAddress>
    FT800_CS_HI();
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	61a3      	str	r3, [r4, #24]

}
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	40020400 	.word	0x40020400

08001248 <FT800_configDisplay>:
/* ************************************************************************************ */
// FT800 configure display 
/* ************************************************************************************ */
 
void FT800_configDisplay(void)
{
 8001248:	b508      	push	{r3, lr}
    FT800_Write16(REG_HCYCLE, DISPLAY_HSYNC_PERIOD);
 800124a:	f44f 7109 	mov.w	r1, #548	; 0x224
 800124e:	481b      	ldr	r0, [pc, #108]	; (80012bc <FT800_configDisplay+0x74>)
 8001250:	f7ff ff4a 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_HOFFSET, DISPLAY_HBP + DISPLAY_HSLEN);
 8001254:	212b      	movs	r1, #43	; 0x2b
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <FT800_configDisplay+0x78>)
 8001258:	f7ff ff46 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_HSYNC0, 0);           
 800125c:	2100      	movs	r1, #0
 800125e:	4819      	ldr	r0, [pc, #100]	; (80012c4 <FT800_configDisplay+0x7c>)
 8001260:	f7ff ff42 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_HSYNC1, DISPLAY_HBP);      
 8001264:	2129      	movs	r1, #41	; 0x29
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <FT800_configDisplay+0x80>)
 8001268:	f7ff ff3e 	bl	80010e8 <FT800_Write16>
    
    FT800_Write16(REG_VCYCLE, DISPLAY_VSYNC_PERIOD);
 800126c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <FT800_configDisplay+0x84>)
 8001272:	f7ff ff39 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_VOFFSET, DISPLAY_VBP+DISPLAY_VSLEN);
 8001276:	210c      	movs	r1, #12
 8001278:	4815      	ldr	r0, [pc, #84]	; (80012d0 <FT800_configDisplay+0x88>)
 800127a:	f7ff ff35 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_VSYNC0, 0);           
 800127e:	2100      	movs	r1, #0
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <FT800_configDisplay+0x8c>)
 8001282:	f7ff ff31 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_VSYNC1, DISPLAY_VBP);      
 8001286:	210a      	movs	r1, #10
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <FT800_configDisplay+0x90>)
 800128a:	f7ff ff2d 	bl	80010e8 <FT800_Write16>
    
    FT800_Write8(REG_SWIZZLE, DISPLAY_SWIZZLE);
 800128e:	2100      	movs	r1, #0
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <FT800_configDisplay+0x94>)
 8001292:	f7ff ff09 	bl	80010a8 <FT800_Write8>
    FT800_Write8(REG_PCLK_POL, DISPLAY_PCLK_POL);  
 8001296:	2101      	movs	r1, #1
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <FT800_configDisplay+0x98>)
 800129a:	f7ff ff05 	bl	80010a8 <FT800_Write8>
    FT800_Write16(REG_HSIZE, DISPLAY_WIDTH);           
 800129e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80012a2:	4810      	ldr	r0, [pc, #64]	; (80012e4 <FT800_configDisplay+0x9c>)
 80012a4:	f7ff ff20 	bl	80010e8 <FT800_Write16>
    FT800_Write16(REG_VSIZE, DISPLAY_HEIGHT);  
 80012a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <FT800_configDisplay+0xa0>)
 80012ae:	f7ff ff1b 	bl	80010e8 <FT800_Write16>
    FT800_Write8(REG_PCLK, DISPLAY_PCLK);
 80012b2:	2105      	movs	r1, #5
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <FT800_configDisplay+0xa4>)
 80012b6:	f7ff fef7 	bl	80010a8 <FT800_Write8>
}
 80012ba:	bd08      	pop	{r3, pc}
 80012bc:	00102428 	.word	0x00102428
 80012c0:	0010242c 	.word	0x0010242c
 80012c4:	00102434 	.word	0x00102434
 80012c8:	00102438 	.word	0x00102438
 80012cc:	0010243c 	.word	0x0010243c
 80012d0:	00102440 	.word	0x00102440
 80012d4:	00102448 	.word	0x00102448
 80012d8:	0010244c 	.word	0x0010244c
 80012dc:	00102460 	.word	0x00102460
 80012e0:	00102468 	.word	0x00102468
 80012e4:	00102430 	.word	0x00102430
 80012e8:	00102444 	.word	0x00102444
 80012ec:	0010246c 	.word	0x0010246c

080012f0 <FT800_configTouchScreen>:
/* ************************************************************************************ */
// FT800 configure touch screen 
/* ************************************************************************************ */
 
void FT800_configTouchScreen(void)
{
 80012f0:	b508      	push	{r3, lr}
    FT800_Write16(REG_TOUCH_RZTHRESH, TOUCH_SENSITIVITY); 
 80012f2:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80012f6:	480c      	ldr	r0, [pc, #48]	; (8001328 <FT800_configTouchScreen+0x38>)
 80012f8:	f7ff fef6 	bl	80010e8 <FT800_Write16>
    FT800_Write8(REG_TOUCH_MODE, TOUCH_MODE);   
 80012fc:	2103      	movs	r1, #3
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <FT800_configTouchScreen+0x3c>)
 8001300:	f7ff fed2 	bl	80010a8 <FT800_Write8>
    FT800_Write8(REG_TOUCH_ADC_MODE, TOUCH_ADC_MODE);   
 8001304:	2101      	movs	r1, #1
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <FT800_configTouchScreen+0x40>)
 8001308:	f7ff fece 	bl	80010a8 <FT800_Write8>
    FT800_Write16(REG_TOUCH_CHARGE, TOUCH_CHARGE);  
 800130c:	f241 7170 	movw	r1, #6000	; 0x1770
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <FT800_configTouchScreen+0x44>)
 8001312:	f7ff fee9 	bl	80010e8 <FT800_Write16>
    FT800_Write8(REG_TOUCH_SETTLE, TOUCH_SETTLE);  
 8001316:	2103      	movs	r1, #3
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <FT800_configTouchScreen+0x48>)
 800131a:	f7ff fec5 	bl	80010a8 <FT800_Write8>
    FT800_Write8(REG_TOUCH_OVERSAMPLE, TOUCH_OVERSAMPLE);   
 800131e:	2107      	movs	r1, #7
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <FT800_configTouchScreen+0x4c>)
 8001322:	f7ff fec1 	bl	80010a8 <FT800_Write8>
}
 8001326:	bd08      	pop	{r3, pc}
 8001328:	00102504 	.word	0x00102504
 800132c:	001024f0 	.word	0x001024f0
 8001330:	001024f4 	.word	0x001024f4
 8001334:	001024f8 	.word	0x001024f8
 8001338:	001024fc 	.word	0x001024fc
 800133c:	00102500 	.word	0x00102500

08001340 <FT800_clearIntFlags>:
/* ************************************************************************************ */
// FT800 clear interrupt flags
/* ************************************************************************************ */
 
void FT800_clearIntFlags(void)
{
 8001340:	b508      	push	{r3, lr}
    FT800_Read8(REG_INT_FLAGS);                 // Reading clears interrupt flags
 8001342:	4802      	ldr	r0, [pc, #8]	; (800134c <FT800_clearIntFlags+0xc>)
 8001344:	f7ff ff20 	bl	8001188 <FT800_Read8>
}
 8001348:	bd08      	pop	{r3, pc}
 800134a:	bf00      	nop
 800134c:	00102498 	.word	0x00102498

08001350 <FT800_configTouchScreenInt>:
/* ************************************************************************************ */
// FT800 configure touch screen interrupt
/* ************************************************************************************ */

void FT800_configTouchScreenInt(void)
{
 8001350:	b508      	push	{r3, lr}
    FT800_Write8(REG_INT_EN, 0x01);                 // enable interrupt
 8001352:	2101      	movs	r1, #1
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <FT800_configTouchScreenInt+0x24>)
 8001356:	f7ff fea7 	bl	80010a8 <FT800_Write8>
    DELAY(20);
 800135a:	2014      	movs	r0, #20
 800135c:	f005 fa06 	bl	800676c <delay_ms>
    FT800_Write8(REG_INT_MASK,0b00000110);                 // mask interrupt
 8001360:	2106      	movs	r1, #6
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <FT800_configTouchScreenInt+0x28>)
 8001364:	f7ff fea0 	bl	80010a8 <FT800_Write8>
    DELAY(20);
 8001368:	2014      	movs	r0, #20
 800136a:	f005 f9ff 	bl	800676c <delay_ms>

    FT800_clearIntFlags();             
 800136e:	f7ff ffe7 	bl	8001340 <FT800_clearIntFlags>
}
 8001372:	bd08      	pop	{r3, pc}
 8001374:	0010249c 	.word	0x0010249c
 8001378:	001024a0 	.word	0x001024a0

0800137c <FT800_configGPIO>:
/* ************************************************************************************ */
// FT800 configure GPIOs
/* ************************************************************************************ */

void FT800_configGPIO(void)
{
 800137c:	b508      	push	{r3, lr}
    FT800_Write8(REG_GPIO_DIR, GPIO_DIR); 
 800137e:	2183      	movs	r1, #131	; 0x83
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <FT800_configGPIO+0x14>)
 8001382:	f7ff fe91 	bl	80010a8 <FT800_Write8>
    FT800_Write8(REG_GPIO, GPIO_SET);  
 8001386:	2181      	movs	r1, #129	; 0x81
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <FT800_configGPIO+0x18>)
 800138a:	f7ff fe8d 	bl	80010a8 <FT800_Write8>
}
 800138e:	bd08      	pop	{r3, pc}
 8001390:	0010248c 	.word	0x0010248c
 8001394:	00102490 	.word	0x00102490

08001398 <FT800_init>:
/* ************************************************************************************ */
// FT800 initialize
/* ************************************************************************************ */
 
void FT800_init(void)
{
 8001398:	b510      	push	{r4, lr}
    FT800_InitPins();
 800139a:	f000 ff57 	bl	800224c <FT800_InitPins>
    F800_InitSPI();
 800139e:	f000 ff57 	bl	8002250 <F800_InitSPI>
    F800_InitInterrupt();
 80013a2:	f000 ff5f 	bl	8002264 <F800_InitInterrupt>
    DELAY(50);
 80013a6:	2032      	movs	r0, #50	; 0x32
 80013a8:	f005 f9e0 	bl	800676c <delay_ms>
    
    FT800_PD_HI();
 80013ac:	4c17      	ldr	r4, [pc, #92]	; (800140c <FT800_init+0x74>)
 80013ae:	2308      	movs	r3, #8
 80013b0:	61a3      	str	r3, [r4, #24]
    DELAY(20);                          // Delay for power up of regulator
 80013b2:	2014      	movs	r0, #20
 80013b4:	f005 f9da 	bl	800676c <delay_ms>
    
    FT800_CS_LO();
 80013b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013bc:	61a3      	str	r3, [r4, #24]
    FT800_WriteAddress(0x00000000,READ); //wake up
 80013be:	2100      	movs	r1, #0
 80013c0:	4608      	mov	r0, r1
 80013c2:	f7ff fe57 	bl	8001074 <FT800_WriteAddress>
    FT800_CS_HI();
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	61a3      	str	r3, [r4, #24]
    
    FT800_configGPU();
 80013cc:	f7ff ff20 	bl	8001210 <FT800_configGPU>
    DELAY(50);
 80013d0:	2032      	movs	r0, #50	; 0x32
 80013d2:	f005 f9cb 	bl	800676c <delay_ms>
    FT800_configGPIO();
 80013d6:	f7ff ffd1 	bl	800137c <FT800_configGPIO>
    FT800_configDisplay();                   
 80013da:	f7ff ff35 	bl	8001248 <FT800_configDisplay>
    FT800_configTouchScreen();
 80013de:	f7ff ff87 	bl	80012f0 <FT800_configTouchScreen>
    FT800_configTouchScreenInt();
 80013e2:	f7ff ffb5 	bl	8001350 <FT800_configTouchScreenInt>

    FT800_Write32(RAM_DL,0x02000000);       // Set the colour which is used when the colour buffer is cleared   
 80013e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80013ee:	f7ff fe9f 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_DL+4,0x26000007);     // Clear the Colour, Stencil and Tag buffers. This will set the screen to the 'clear' colour set above.(C/S/T define which parameters to clear)
 80013f2:	4907      	ldr	r1, [pc, #28]	; (8001410 <FT800_init+0x78>)
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <FT800_init+0x7c>)
 80013f6:	f7ff fe9b 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_DL+8,0x00000000);     // Display command ends the display list
 80013fa:	2100      	movs	r1, #0
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <FT800_init+0x80>)
 80013fe:	f7ff fe97 	bl	8001130 <FT800_Write32>
    FT800_Write32(REG_DLSWAP,0x00000002);   // Writing to the DL_SWAP register...value 10 means render after last frame complete     
 8001402:	2102      	movs	r1, #2
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <FT800_init+0x84>)
 8001406:	f7ff fe93 	bl	8001130 <FT800_Write32>

}
 800140a:	bd10      	pop	{r4, pc}
 800140c:	40020400 	.word	0x40020400
 8001410:	26000007 	.word	0x26000007
 8001414:	00100004 	.word	0x00100004
 8001418:	00100008 	.word	0x00100008
 800141c:	00102450 	.word	0x00102450

08001420 <FT800_startNewList>:
/* ************************************************************************************ */
// FT800 Start new display list
/* ************************************************************************************ */

void FT800_startNewList(void)
{          
 8001420:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, CMD_DLSTART);
 8001422:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8001426:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800142a:	f7ff fe81 	bl	8001130 <FT800_Write32>
}
 800142e:	bd08      	pop	{r3, pc}

08001430 <FT800_endOfList>:
/* ************************************************************************************ */
// FT800 End of display list
/* ************************************************************************************ */

void FT800_endOfList(void)
{    
 8001430:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, 0x00000000);    
 8001432:	2100      	movs	r1, #0
 8001434:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001438:	f7ff fe7a 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, CMD_SWAP);  
 800143c:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 8001440:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001444:	f7ff fe74 	bl	8001130 <FT800_Write32>
    FT800_Write16(REG_CMD_WRITE,get_CMD_Offset());  
 8001448:	f7ff fe0e 	bl	8001068 <get_CMD_Offset>
 800144c:	4601      	mov	r1, r0
 800144e:	4802      	ldr	r0, [pc, #8]	; (8001458 <FT800_endOfList+0x28>)
 8001450:	f7ff fe4a 	bl	80010e8 <FT800_Write16>
}
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	001024e8 	.word	0x001024e8

0800145c <FT800_finishList>:
/* ************************************************************************************ */
// FT800 Finish display list
/* ************************************************************************************ */

void FT800_finishList(void)
{
 800145c:	b510      	push	{r4, lr}
    uint32_t cmdBufferWr, cmdBufferRd;
    do
    {
        cmdBufferWr = FT800_Read16(REG_CMD_WRITE);          // Read the vaulue of the REG_CMD_WRITE register
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <FT800_finishList+0x20>)
 8001460:	f7ff fea2 	bl	80011a8 <FT800_Read16>
 8001464:	4604      	mov	r4, r0
        cmdBufferRd = FT800_Read16(REG_CMD_READ);           // Read the vaulue of the REG_CMD_READ register
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <FT800_finishList+0x24>)
 8001468:	f7ff fe9e 	bl	80011a8 <FT800_Read16>
    } while(cmdBufferWr != cmdBufferRd);
 800146c:	4284      	cmp	r4, r0
 800146e:	d1f6      	bne.n	800145e <FT800_finishList+0x2>
    set_CMD_Offset(FT800_Read16(REG_CMD_WRITE)); 
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <FT800_finishList+0x20>)
 8001472:	f7ff fe99 	bl	80011a8 <FT800_Read16>
 8001476:	f7ff fdf1 	bl	800105c <set_CMD_Offset>
}
 800147a:	bd10      	pop	{r4, pc}
 800147c:	001024e8 	.word	0x001024e8
 8001480:	001024e4 	.word	0x001024e4

08001484 <FT800_executeCommands>:
/* ************************************************************************************ */
// FT800 Execute all the commands written in RAM_CMD
/* ************************************************************************************ */

void FT800_executeCommands(void)
{
 8001484:	b508      	push	{r3, lr}
    FT800_Write16(REG_CMD_WRITE, get_CMD_Offset());
 8001486:	f7ff fdef 	bl	8001068 <get_CMD_Offset>
 800148a:	4601      	mov	r1, r0
 800148c:	4801      	ldr	r0, [pc, #4]	; (8001494 <FT800_executeCommands+0x10>)
 800148e:	f7ff fe2b 	bl	80010e8 <FT800_Write16>
}
 8001492:	bd08      	pop	{r3, pc}
 8001494:	001024e8 	.word	0x001024e8

08001498 <FT800_getFreeSpace>:
/* ************************************************************************************ */
// FT800 get free space in command buffer
/* ************************************************************************************ */

uint16_t FT800_getFreeSpace(void)
{
 8001498:	b510      	push	{r4, lr}
    uint32_t fullness;
    uint16_t freespace;

    fullness = (FT800_Read16(REG_CMD_WRITE) - FT800_Read16(REG_CMD_READ)) & 0xFFF;
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <FT800_getFreeSpace+0x20>)
 800149c:	f7ff fe84 	bl	80011a8 <FT800_Read16>
 80014a0:	4604      	mov	r4, r0
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <FT800_getFreeSpace+0x24>)
 80014a4:	f7ff fe80 	bl	80011a8 <FT800_Read16>
 80014a8:	1a20      	subs	r0, r4, r0
    freespace = (4096 - 4) - fullness;
 80014aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80014ae:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 80014b2:	300c      	adds	r0, #12
    
    return freespace;
}
 80014b4:	b280      	uxth	r0, r0
 80014b6:	bd10      	pop	{r4, pc}
 80014b8:	001024e8 	.word	0x001024e8
 80014bc:	001024e4 	.word	0x001024e4

080014c0 <FT800_setBackgroundColor>:
/* ************************************************************************************ */
// FT800 Set Background color - 0x02BBGGRR, color=BBGGRRAA
/* ************************************************************************************ */

void FT800_setBackgroundColor(uint32_t color)
{         
 80014c0:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, 0x02000000|(color&0x00FFFFFF));
 80014c2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
 80014c6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80014ca:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80014ce:	f7ff fe2f 	bl	8001130 <FT800_Write32>
}
 80014d2:	bd08      	pop	{r3, pc}

080014d4 <FT800_clear>:
// FT800 Clear display - 0x2600000X  
//clr=X, X=1 clear tag, X=2 clear stencil, X=4 clear color, X=7 clear all
/* ************************************************************************************ */

void FT800_clear(uint8_t clr)
{       
 80014d4:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, 0x26000000|(clr&0x07));  
 80014d6:	f000 0107 	and.w	r1, r0, #7
 80014da:	f041 5118 	orr.w	r1, r1, #637534208	; 0x26000000
 80014de:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80014e2:	f7ff fe25 	bl	8001130 <FT800_Write32>
}
 80014e6:	bd08      	pop	{r3, pc}

080014e8 <FT800_setColorA>:
/* ************************************************************************************ */
// FT800 color transparency alpha=[0-255]
/* ************************************************************************************ */

void FT800_setColorA(uint8_t alpha)
{
 80014e8:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, 0x10000000|alpha);
 80014ea:	f040 5180 	orr.w	r1, r0, #268435456	; 0x10000000
 80014ee:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80014f2:	f7ff fe1d 	bl	8001130 <FT800_Write32>
}
 80014f6:	bd08      	pop	{r3, pc}

080014f8 <FT800_setColorRGB>:
/* ************************************************************************************ */
// FT800 Object color (BGR)
/* ************************************************************************************ */

void FT800_setColorRGB(uint32_t color)
{
 80014f8:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, 0x04000000|(color&0x00FFFFFF));
 80014fa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
 80014fe:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001502:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001506:	f7ff fe13 	bl	8001130 <FT800_Write32>
}
 800150a:	bd08      	pop	{r3, pc}

0800150c <FT800_setBgColor>:
/* ************************************************************************************ */
// FT800 Object background color
/* ************************************************************************************ */

void FT800_setBgColor(uint32_t color)
{
 800150c:	b510      	push	{r4, lr}
 800150e:	4604      	mov	r4, r0
    FT800_Write32(RAM_CMD, CMD_BGCOLOR);
 8001510:	f06f 01f6 	mvn.w	r1, #246	; 0xf6
 8001514:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001518:	f7ff fe0a 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, (color&0x00FFFFFF));
 800151c:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
 8001520:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001524:	f7ff fe04 	bl	8001130 <FT800_Write32>
}
 8001528:	bd10      	pop	{r4, pc}

0800152a <FT800_setFgColor>:
/* ************************************************************************************ */
// FT800 Object foreground color
/* ************************************************************************************ */

void FT800_setFgColor(uint32_t color)
{
 800152a:	b510      	push	{r4, lr}
 800152c:	4604      	mov	r4, r0
    FT800_Write32(RAM_CMD, CMD_FGCOLOR);   
 800152e:	f06f 01f5 	mvn.w	r1, #245	; 0xf5
 8001532:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001536:	f7ff fdfb 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, (color&0x00FFFFFF));
 800153a:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
 800153e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001542:	f7ff fdf5 	bl	8001130 <FT800_Write32>
}
 8001546:	bd10      	pop	{r4, pc}

08001548 <FT800_Vertex2F>:
/* ************************************************************************************ */
// FT800 Vertex2II  - x[-16384,16383], y[-16384,16383], in 1/16 of the pixel 
/* ************************************************************************************ */

void FT800_Vertex2F(int16_t x, int16_t y)
{
 8001548:	b508      	push	{r3, lr}
    uint32_t xy=0x40000000;
    
    xy|=((x&0x7FFF)<<15); //11 bits for +-x coordinate and 4 bits for x fraction (1/16 of pixel)
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <FT800_Vertex2F+0x1c>)
 800154c:	ea03 30c0 	and.w	r0, r3, r0, lsl #15
 8001550:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    xy|=(y&0x7FFF);       //11 bits for +-y coordinate and 4 bits for y fraction (1/16 of pixel)
 8001554:	f3c1 010e 	ubfx	r1, r1, #0, #15
   
    FT800_Write32(RAM_CMD, xy); 
 8001558:	4301      	orrs	r1, r0
 800155a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800155e:	f7ff fde7 	bl	8001130 <FT800_Write32>
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	3fff8000 	.word	0x3fff8000

08001568 <FT800_Vertex2II>:
/* ************************************************************************************ */
// FT800 Vertex2II  - x[0,511], y[0,511], handle [0-31], cell [0-127]  
/* ************************************************************************************ */

void FT800_Vertex2II(uint16_t x, uint16_t y, uint8_t handle, uint8_t cell)
{
 8001568:	b510      	push	{r4, lr}
    uint32_t xyhc=0x80000000;
    xyhc|=((x&0x01FF)<<21);
 800156a:	4c0a      	ldr	r4, [pc, #40]	; (8001594 <FT800_Vertex2II+0x2c>)
 800156c:	ea04 5040 	and.w	r0, r4, r0, lsl #21
 8001570:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    xyhc|=((y&0x01FF)<<12);
 8001574:	4c08      	ldr	r4, [pc, #32]	; (8001598 <FT800_Vertex2II+0x30>)
 8001576:	ea04 3101 	and.w	r1, r4, r1, lsl #12
 800157a:	4301      	orrs	r1, r0
    xyhc|=((handle&0x1F)<<7);
 800157c:	01d2      	lsls	r2, r2, #7
 800157e:	f402 6278 	and.w	r2, r2, #3968	; 0xf80
 8001582:	4311      	orrs	r1, r2
    xyhc|=(cell&0x7F);
 8001584:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    FT800_Write32(RAM_CMD, xyhc); 
 8001588:	4319      	orrs	r1, r3
 800158a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800158e:	f7ff fdcf 	bl	8001130 <FT800_Write32>
} 
 8001592:	bd10      	pop	{r4, pc}
 8001594:	3fe00000 	.word	0x3fe00000
 8001598:	001ff000 	.word	0x001ff000

0800159c <FT800_align>:
/* ************************************************************************************ */
// FT800 align - used filling up to 32 bit (4 bytes)
/* ************************************************************************************ */

void FT800_align(uint8_t n)
{
 800159c:	b510      	push	{r4, lr}
    while((n++) & 3)
 800159e:	e005      	b.n	80015ac <FT800_align+0x10>
    FT800_Write8(RAM_CMD, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80015a6:	f7ff fd7f 	bl	80010a8 <FT800_Write8>
    while((n++) & 3)
 80015aa:	4620      	mov	r0, r4
 80015ac:	1c43      	adds	r3, r0, #1
 80015ae:	b2dc      	uxtb	r4, r3
 80015b0:	f010 0f03 	tst.w	r0, #3
 80015b4:	d1f4      	bne.n	80015a0 <FT800_align+0x4>
}
 80015b6:	bd10      	pop	{r4, pc}

080015b8 <FT800_WriteString>:
/* ************************************************************************************ */
// FT800 write string - used text draw and object naming
/* ************************************************************************************ */

void FT800_WriteString(const char*s)
{
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	4604      	mov	r4, r0
    uint16_t string_length = 0;
    string_length = strlen(s)+1;
 80015bc:	f7fe fe12 	bl	80001e4 <strlen>
 80015c0:	b285      	uxth	r5, r0
 80015c2:	3501      	adds	r5, #1
 80015c4:	b2ad      	uxth	r5, r5
    while(*s)
 80015c6:	e004      	b.n	80015d2 <FT800_WriteString+0x1a>
    {
        char c=*s++;
 80015c8:	3401      	adds	r4, #1
        FT800_Write8(RAM_CMD, c);
 80015ca:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80015ce:	f7ff fd6b 	bl	80010a8 <FT800_Write8>
    while(*s)
 80015d2:	7821      	ldrb	r1, [r4, #0]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d1f7      	bne.n	80015c8 <FT800_WriteString+0x10>
    }
    FT800_Write8(RAM_CMD, 0);
 80015d8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80015dc:	f7ff fd64 	bl	80010a8 <FT800_Write8>
    FT800_align(string_length);  
 80015e0:	b2e8      	uxtb	r0, r5
 80015e2:	f7ff ffdb 	bl	800159c <FT800_align>
}
 80015e6:	bd38      	pop	{r3, r4, r5, pc}

080015e8 <FT800_writeMemZero>:
/************************************************************************************* */
// FT800 write zero to a block of memory
/* ************************************************************************************ */
 
void FT800_writeMemZero(uint32_t pointer, uint32_t number)
{
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4605      	mov	r5, r0
 80015ec:	460c      	mov	r4, r1
    FT800_Write32(RAM_CMD, CMD_MEMZERO); 
 80015ee:	f06f 01e3 	mvn.w	r1, #227	; 0xe3
 80015f2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80015f6:	f7ff fd9b 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, pointer);   
 80015fa:	4629      	mov	r1, r5
 80015fc:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001600:	f7ff fd96 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, number); 
 8001604:	4621      	mov	r1, r4
 8001606:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800160a:	f7ff fd91 	bl	8001130 <FT800_Write32>
}
 800160e:	bd38      	pop	{r3, r4, r5, pc}

08001610 <FT800_drawPoint>:
/* ************************************************************************************ */
// FT800 draw point  - x[-1024,1023], y[-1024,1023], color, size (in 1/16 of pixel) 
/* ************************************************************************************ */

void FT800_drawPoint(int16_t x, int16_t y, uint32_t color, uint16_t size)
{
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	461e      	mov	r6, r3
    FT800_setColorRGB(color);              //point color
 8001618:	4610      	mov	r0, r2
 800161a:	f7ff ff6d 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0D000000|size); //point size                
 800161e:	f046 6150 	orr.w	r1, r6, #218103808	; 0xd000000
 8001622:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001626:	f7ff fd83 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|POINT);   //begin drawing point
 800162a:	4909      	ldr	r1, [pc, #36]	; (8001650 <FT800_drawPoint+0x40>)
 800162c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001630:	f7ff fd7e 	bl	8001130 <FT800_Write32>
    FT800_Vertex2F(x<<4,y<<4);             //set coordinates    
 8001634:	0120      	lsls	r0, r4, #4
 8001636:	0129      	lsls	r1, r5, #4
 8001638:	b209      	sxth	r1, r1
 800163a:	b200      	sxth	r0, r0
 800163c:	f7ff ff84 	bl	8001548 <FT800_Vertex2F>
    FT800_Write32(RAM_CMD, END);           //end of drawing
 8001640:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 8001644:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001648:	f7ff fd72 	bl	8001130 <FT800_Write32>
}
 800164c:	bd70      	pop	{r4, r5, r6, pc}
 800164e:	bf00      	nop
 8001650:	1f000002 	.word	0x1f000002

08001654 <FT800_drawLine>:
/* ************************************************************************************ */
// FT800 draw line from (x1,y1) to (x2,y2) of color color and linewidth width
/* ************************************************************************************ */

void FT800_drawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color, uint16_t width)
{  
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	4606      	mov	r6, r0
 8001658:	460f      	mov	r7, r1
 800165a:	4614      	mov	r4, r2
 800165c:	461d      	mov	r5, r3
    
    FT800_setColorRGB(color);
 800165e:	9806      	ldr	r0, [sp, #24]
 8001660:	f7ff ff4a 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0E000000|(width&0x0FFF));         
 8001664:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8001668:	f3c1 010b 	ubfx	r1, r1, #0, #12
 800166c:	f041 6160 	orr.w	r1, r1, #234881024	; 0xe000000
 8001670:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001674:	f7ff fd5c 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|LINE);
 8001678:	490b      	ldr	r1, [pc, #44]	; (80016a8 <FT800_drawLine+0x54>)
 800167a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800167e:	f7ff fd57 	bl	8001130 <FT800_Write32>
    FT800_Vertex2F(x1<<4,y1<<4);
 8001682:	0130      	lsls	r0, r6, #4
 8001684:	0139      	lsls	r1, r7, #4
 8001686:	b209      	sxth	r1, r1
 8001688:	b200      	sxth	r0, r0
 800168a:	f7ff ff5d 	bl	8001548 <FT800_Vertex2F>
    FT800_Vertex2F(x2<<4,y2<<4);
 800168e:	0120      	lsls	r0, r4, #4
 8001690:	0129      	lsls	r1, r5, #4
 8001692:	b209      	sxth	r1, r1
 8001694:	b200      	sxth	r0, r0
 8001696:	f7ff ff57 	bl	8001548 <FT800_Vertex2F>
    FT800_Write32(RAM_CMD, END); 
 800169a:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800169e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80016a2:	f7ff fd45 	bl	8001130 <FT800_Write32>
}
 80016a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a8:	1f000003 	.word	0x1f000003

080016ac <FT800_drawRectangle>:
/* ************************************************************************************ */
// FT800 draw rectangle starting from (x1,y1) and ending at (x2,y2) of color color and linewidth width
/* ************************************************************************************ */

void FT800_drawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color, uint16_t width)
{  
 80016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ae:	4606      	mov	r6, r0
 80016b0:	460f      	mov	r7, r1
 80016b2:	4614      	mov	r4, r2
 80016b4:	461d      	mov	r5, r3
    FT800_setColorRGB(color);
 80016b6:	9806      	ldr	r0, [sp, #24]
 80016b8:	f7ff ff1e 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0E000000|(width&0x0FFF));  
 80016bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80016c0:	f3c1 010b 	ubfx	r1, r1, #0, #12
 80016c4:	f041 6160 	orr.w	r1, r1, #234881024	; 0xe000000
 80016c8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80016cc:	f7ff fd30 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|RECT);
 80016d0:	490b      	ldr	r1, [pc, #44]	; (8001700 <FT800_drawRectangle+0x54>)
 80016d2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80016d6:	f7ff fd2b 	bl	8001130 <FT800_Write32>
    FT800_Vertex2F(x1<<4,y1<<4);
 80016da:	0130      	lsls	r0, r6, #4
 80016dc:	0139      	lsls	r1, r7, #4
 80016de:	b209      	sxth	r1, r1
 80016e0:	b200      	sxth	r0, r0
 80016e2:	f7ff ff31 	bl	8001548 <FT800_Vertex2F>
    FT800_Vertex2F(x2<<4,y2<<4);
 80016e6:	0120      	lsls	r0, r4, #4
 80016e8:	0129      	lsls	r1, r5, #4
 80016ea:	b209      	sxth	r1, r1
 80016ec:	b200      	sxth	r0, r0
 80016ee:	f7ff ff2b 	bl	8001548 <FT800_Vertex2F>
    FT800_Write32(RAM_CMD, END); 
 80016f2:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 80016f6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80016fa:	f7ff fd19 	bl	8001130 <FT800_Write32>
}  
 80016fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001700:	1f000009 	.word	0x1f000009

08001704 <FT800_drawLineStrip>:
/* ************************************************************************************ */
// FT800 draw line strip in number of points num_of_points
/* ************************************************************************************ */

void FT800_drawLineStrip(int16_t x[], int16_t y[],uint16_t num_of_points, uint32_t color, uint16_t width)
{
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	4607      	mov	r7, r0
 8001708:	460e      	mov	r6, r1
 800170a:	4615      	mov	r5, r2
    uint16_t i;
    FT800_setColorRGB(color);
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fef3 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, 0x0E000000|(width&0x0FFF));  
 8001712:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001716:	f3c1 010b 	ubfx	r1, r1, #0, #12
 800171a:	f041 6160 	orr.w	r1, r1, #234881024	; 0xe000000
 800171e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001722:	f7ff fd05 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, BEGIN|LINE_STRIP);
 8001726:	490e      	ldr	r1, [pc, #56]	; (8001760 <FT800_drawLineStrip+0x5c>)
 8001728:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800172c:	f7ff fd00 	bl	8001130 <FT800_Write32>
    for(i=0;i<num_of_points;i++) FT800_Vertex2F(x[i]<<4,y[i]<<4);
 8001730:	2400      	movs	r4, #0
 8001732:	e00b      	b.n	800174c <FT800_drawLineStrip+0x48>
 8001734:	f937 0014 	ldrsh.w	r0, [r7, r4, lsl #1]
 8001738:	0100      	lsls	r0, r0, #4
 800173a:	f936 1014 	ldrsh.w	r1, [r6, r4, lsl #1]
 800173e:	0109      	lsls	r1, r1, #4
 8001740:	b209      	sxth	r1, r1
 8001742:	b200      	sxth	r0, r0
 8001744:	f7ff ff00 	bl	8001548 <FT800_Vertex2F>
 8001748:	3401      	adds	r4, #1
 800174a:	b2a4      	uxth	r4, r4
 800174c:	42ac      	cmp	r4, r5
 800174e:	d3f1      	bcc.n	8001734 <FT800_drawLineStrip+0x30>
    FT800_Write32(RAM_CMD, END);
 8001750:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 8001754:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001758:	f7ff fcea 	bl	8001130 <FT800_Write32>
} 
 800175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800175e:	bf00      	nop
 8001760:	1f000004 	.word	0x1f000004

08001764 <FT800_drawEdgeLineStrip>:
/* ************************************************************************************ */
// FT800 draw edge line strip (color filling) in number of points num_of_points
/* ************************************************************************************ */

void FT800_drawEdgeLineStrip(int16_t x[], int16_t y[], uint16_t num_of_points, uint8_t choice, uint32_t color)
{
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	4606      	mov	r6, r0
 8001768:	460f      	mov	r7, r1
 800176a:	4615      	mov	r5, r2
    uint32_t c=0; uint16_t i;
    
       
    switch(choice) //choose edge side 
 800176c:	3b41      	subs	r3, #65	; 0x41
 800176e:	2b11      	cmp	r3, #17
 8001770:	d80a      	bhi.n	8001788 <FT800_drawEdgeLineStrip+0x24>
 8001772:	e8df f003 	tbb	[pc, r3]
 8001776:	0f0d      	.short	0x0f0d
 8001778:	09090909 	.word	0x09090909
 800177c:	09090909 	.word	0x09090909
 8001780:	09090b09 	.word	0x09090b09
 8001784:	11090909 	.word	0x11090909
    uint32_t c=0; uint16_t i;
 8001788:	2400      	movs	r4, #0
 800178a:	e006      	b.n	800179a <FT800_drawEdgeLineStrip+0x36>
    {
        case'R': c = EDGE_STRIP_R; //right
                    break;
        case'L': c = EDGE_STRIP_L; //left
 800178c:	2406      	movs	r4, #6
                    break;
 800178e:	e004      	b.n	800179a <FT800_drawEdgeLineStrip+0x36>
        case'A': c = EDGE_STRIP_A; //above
 8001790:	2407      	movs	r4, #7
                    break;
 8001792:	e002      	b.n	800179a <FT800_drawEdgeLineStrip+0x36>
        case'B': c = EDGE_STRIP_B; //below
 8001794:	2408      	movs	r4, #8
                    break;
 8001796:	e000      	b.n	800179a <FT800_drawEdgeLineStrip+0x36>
        case'R': c = EDGE_STRIP_R; //right
 8001798:	2405      	movs	r4, #5
    }
    FT800_setColorRGB(color);
 800179a:	9806      	ldr	r0, [sp, #24]
 800179c:	f7ff feac 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, BEGIN|c);
 80017a0:	f044 51f8 	orr.w	r1, r4, #520093696	; 0x1f000000
 80017a4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80017a8:	f7ff fcc2 	bl	8001130 <FT800_Write32>
    for(i=0;i<num_of_points;i++) FT800_Vertex2F(x[i]<<4,y[i]<<4);
 80017ac:	2400      	movs	r4, #0
 80017ae:	e00b      	b.n	80017c8 <FT800_drawEdgeLineStrip+0x64>
 80017b0:	f936 0014 	ldrsh.w	r0, [r6, r4, lsl #1]
 80017b4:	0100      	lsls	r0, r0, #4
 80017b6:	f937 1014 	ldrsh.w	r1, [r7, r4, lsl #1]
 80017ba:	0109      	lsls	r1, r1, #4
 80017bc:	b209      	sxth	r1, r1
 80017be:	b200      	sxth	r0, r0
 80017c0:	f7ff fec2 	bl	8001548 <FT800_Vertex2F>
 80017c4:	3401      	adds	r4, #1
 80017c6:	b2a4      	uxth	r4, r4
 80017c8:	42ac      	cmp	r4, r5
 80017ca:	d3f1      	bcc.n	80017b0 <FT800_drawEdgeLineStrip+0x4c>
    FT800_Write32(RAM_CMD, END);
 80017cc:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 80017d0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80017d4:	f7ff fcac 	bl	8001130 <FT800_Write32>
}   
 80017d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017dc <FT800_drawChar>:
/* ************************************************************************************ */
// FT800 draw char at position (x,y), font [16-31], color, char
/* ************************************************************************************ */

void FT800_drawChar(uint16_t x, uint16_t y, uint8_t font, uint32_t color, char c)
{
 80017dc:	b570      	push	{r4, r5, r6, lr}
 80017de:	4605      	mov	r5, r0
 80017e0:	460e      	mov	r6, r1
 80017e2:	4614      	mov	r4, r2
    FT800_setColorRGB(color);
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe87 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, BEGIN|BITMAP); 
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <FT800_drawChar+0x44>)
 80017ec:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80017f0:	f7ff fc9e 	bl	8001130 <FT800_Write32>
    if(font>31)font=31;
 80017f4:	2c1f      	cmp	r4, #31
 80017f6:	d803      	bhi.n	8001800 <FT800_drawChar+0x24>
    if(font<16)font=16;
 80017f8:	2c0f      	cmp	r4, #15
 80017fa:	d802      	bhi.n	8001802 <FT800_drawChar+0x26>
 80017fc:	2410      	movs	r4, #16
 80017fe:	e000      	b.n	8001802 <FT800_drawChar+0x26>
    if(font>31)font=31;
 8001800:	241f      	movs	r4, #31
    FT800_Vertex2II(x, y, font, c);
 8001802:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001806:	4622      	mov	r2, r4
 8001808:	4631      	mov	r1, r6
 800180a:	4628      	mov	r0, r5
 800180c:	f7ff feac 	bl	8001568 <FT800_Vertex2II>
    FT800_Write32(RAM_CMD, END);
 8001810:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 8001814:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001818:	f7ff fc8a 	bl	8001130 <FT800_Write32>
}
 800181c:	bd70      	pop	{r4, r5, r6, pc}
 800181e:	bf00      	nop
 8001820:	1f000001 	.word	0x1f000001

08001824 <FT800_drawText>:
/* ************************************************************************************ */
// FT800 draw text at position (x,y), font [16-31], color, options [ie. OPT_RIGHTX], text s
/* ************************************************************************************ */

void FT800_drawText(int16_t x, int16_t y, uint8_t font, uint32_t color, uint16_t options, const char *s)   
{ 
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	4606      	mov	r6, r0
 8001828:	460d      	mov	r5, r1
 800182a:	4614      	mov	r4, r2
    FT800_setColorRGB(color);
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe63 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_TEXT);
 8001832:	f06f 01f3 	mvn.w	r1, #243	; 0xf3
 8001836:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800183a:	f7ff fc79 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 800183e:	b2b1      	uxth	r1, r6
 8001840:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001844:	f7ff fc50 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001848:	b2a9      	uxth	r1, r5
 800184a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800184e:	f7ff fc4b 	bl	80010e8 <FT800_Write16>
    if(font>31)font=31;
 8001852:	2c1f      	cmp	r4, #31
 8001854:	d803      	bhi.n	800185e <FT800_drawText+0x3a>
    if(font<16)font=16;
 8001856:	2c0f      	cmp	r4, #15
 8001858:	d802      	bhi.n	8001860 <FT800_drawText+0x3c>
 800185a:	2410      	movs	r4, #16
 800185c:	e000      	b.n	8001860 <FT800_drawText+0x3c>
    if(font>31)font=31;
 800185e:	241f      	movs	r4, #31
    FT800_Write16(RAM_CMD, font);
 8001860:	4621      	mov	r1, r4
 8001862:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001866:	f7ff fc3f 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 800186a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800186e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001872:	f7ff fc39 	bl	80010e8 <FT800_Write16>
    FT800_WriteString(s);
 8001876:	9805      	ldr	r0, [sp, #20]
 8001878:	f7ff fe9e 	bl	80015b8 <FT800_WriteString>
}
 800187c:	bd70      	pop	{r4, r5, r6, pc}

0800187e <FT800_drawDecimalNumb>:
/************************************************************************************* */
// FT800 decimal number
/* ************************************************************************************ */

void FT800_drawDecimalNumb(int16_t x, int16_t y, uint8_t font, uint16_t options, uint32_t n, uint32_t color)
{
 800187e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001880:	4607      	mov	r7, r0
 8001882:	460e      	mov	r6, r1
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
    FT800_setColorRGB(color);
 8001888:	9807      	ldr	r0, [sp, #28]
 800188a:	f7ff fe35 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_NUMBER);
 800188e:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 8001892:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001896:	f7ff fc4b 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 800189a:	b2b9      	uxth	r1, r7
 800189c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018a0:	f7ff fc22 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 80018a4:	b2b1      	uxth	r1, r6
 80018a6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018aa:	f7ff fc1d 	bl	80010e8 <FT800_Write16>
    if(font>31)font=31;
 80018ae:	2c1f      	cmp	r4, #31
 80018b0:	d803      	bhi.n	80018ba <FT800_drawDecimalNumb+0x3c>
    if(font<16)font=16;
 80018b2:	2c0f      	cmp	r4, #15
 80018b4:	d802      	bhi.n	80018bc <FT800_drawDecimalNumb+0x3e>
 80018b6:	2410      	movs	r4, #16
 80018b8:	e000      	b.n	80018bc <FT800_drawDecimalNumb+0x3e>
    if(font>31)font=31;
 80018ba:	241f      	movs	r4, #31
    FT800_Write16(RAM_CMD, font);
 80018bc:	4621      	mov	r1, r4
 80018be:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018c2:	f7ff fc11 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 80018c6:	4629      	mov	r1, r5
 80018c8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018cc:	f7ff fc0c 	bl	80010e8 <FT800_Write16>
    FT800_Write32(RAM_CMD, n);
 80018d0:	9906      	ldr	r1, [sp, #24]
 80018d2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018d6:	f7ff fc2b 	bl	8001130 <FT800_Write32>
}
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018dc <FT800_drawGradient>:
/* ************************************************************************************ */
// FT800 draw gradient from color0 to color1 (use in combination with scissors)
/* ************************************************************************************ */

void FT800_drawGradient(int16_t x0, int16_t y0, uint32_t color0, int16_t x1, int16_t y1, uint32_t color1)
{
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4607      	mov	r7, r0
 80018e0:	460e      	mov	r6, r1
 80018e2:	4615      	mov	r5, r2
 80018e4:	461c      	mov	r4, r3
    FT800_Write32(RAM_CMD, CMD_GRADIENT);
 80018e6:	f06f 01f4 	mvn.w	r1, #244	; 0xf4
 80018ea:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018ee:	f7ff fc1f 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x0);
 80018f2:	b2b9      	uxth	r1, r7
 80018f4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80018f8:	f7ff fbf6 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y0);
 80018fc:	b2b1      	uxth	r1, r6
 80018fe:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001902:	f7ff fbf1 	bl	80010e8 <FT800_Write16>
    FT800_setColorRGB(color0);
 8001906:	4628      	mov	r0, r5
 8001908:	f7ff fdf6 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write16(RAM_CMD, x1);
 800190c:	b2a1      	uxth	r1, r4
 800190e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001912:	f7ff fbe9 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y1);
 8001916:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800191a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800191e:	f7ff fbe3 	bl	80010e8 <FT800_Write16>
    FT800_setColorRGB(color1);
 8001922:	9807      	ldr	r0, [sp, #28]
 8001924:	f7ff fde8 	bl	80014f8 <FT800_setColorRGB>
}
 8001928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800192c <FT800_drawScissorXY>:
/* ************************************************************************************ */
// FT800 scissor start point
/* ************************************************************************************ */

void FT800_drawScissorXY(int16_t x, int16_t y)
{
 800192c:	b508      	push	{r3, lr}
    uint32_t scissorXY = 0x1B000000;
    
    scissorXY |= (x&0x01FF)<<9;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <FT800_drawScissorXY+0x1c>)
 8001930:	ea03 2040 	and.w	r0, r3, r0, lsl #9
 8001934:	f040 50d8 	orr.w	r0, r0, #452984832	; 0x1b000000
    scissorXY |= (y&0x01FF); 
 8001938:	f3c1 0108 	ubfx	r1, r1, #0, #9

    FT800_Write32(RAM_CMD, scissorXY);
 800193c:	4301      	orrs	r1, r0
 800193e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001942:	f7ff fbf5 	bl	8001130 <FT800_Write32>
}
 8001946:	bd08      	pop	{r3, pc}
 8001948:	0003fe00 	.word	0x0003fe00

0800194c <FT800_drawScissorSize>:
/************************************************************************************* */
// FT800 scissor width and height
/* ************************************************************************************ */

void FT800_drawScissorSize(uint16_t w, uint16_t h)
{
 800194c:	b508      	push	{r3, lr}
    uint32_t scissorSize = 0x1C000000;
    
    scissorSize |= (w&0x03FF)<<10;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <FT800_drawScissorSize+0x1c>)
 8001950:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8001954:	f040 50e0 	orr.w	r0, r0, #469762048	; 0x1c000000
    scissorSize |= (h&0x03FF); 
 8001958:	f3c1 0109 	ubfx	r1, r1, #0, #10

    FT800_Write32(RAM_CMD, scissorSize);
 800195c:	4301      	orrs	r1, r0
 800195e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001962:	f7ff fbe5 	bl	8001130 <FT800_Write32>
}
 8001966:	bd08      	pop	{r3, pc}
 8001968:	000ffc00 	.word	0x000ffc00

0800196c <FT800_track>:
// FT800 assign tag and track given area for touch 
// all object in the given area will have the same tag - to prevent use tag mask
/* ************************************************************************************ */

void FT800_track(int16_t x, int16_t y, uint16_t w, uint16_t h, uint8_t tag)
{
 800196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001970:	4680      	mov	r8, r0
 8001972:	460f      	mov	r7, r1
 8001974:	4616      	mov	r6, r2
 8001976:	461d      	mov	r5, r3
 8001978:	f89d 4018 	ldrb.w	r4, [sp, #24]
    FT800_Write32(RAM_CMD, CMD_TRACK);
 800197c:	f06f 01d3 	mvn.w	r1, #211	; 0xd3
 8001980:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001984:	f7ff fbd4 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001988:	fa1f f188 	uxth.w	r1, r8
 800198c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001990:	f7ff fbaa 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001994:	b2b9      	uxth	r1, r7
 8001996:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800199a:	f7ff fba5 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 800199e:	4631      	mov	r1, r6
 80019a0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80019a4:	f7ff fba0 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 80019a8:	4629      	mov	r1, r5
 80019aa:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80019ae:	f7ff fb9b 	bl	80010e8 <FT800_Write16>
    FT800_Write32(RAM_CMD, tag);
 80019b2:	4621      	mov	r1, r4
 80019b4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80019b8:	f7ff fbba 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD,0x03000000|(tag&0xFF)); 
 80019bc:	f044 7140 	orr.w	r1, r4, #50331648	; 0x3000000
 80019c0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80019c4:	f7ff fbb4 	bl	8001130 <FT800_Write32>
}
 80019c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019cc <FT800_tagMask>:
/************************************************************************************* */
// FT800 tag mask - disable(0) or enable(1) object tag
/* ************************************************************************************ */

void FT800_tagMask(uint8_t mask)
{
 80019cc:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD,0x14000000|(mask&0x01));
 80019ce:	f000 0101 	and.w	r1, r0, #1
 80019d2:	f041 51a0 	orr.w	r1, r1, #335544320	; 0x14000000
 80019d6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80019da:	f7ff fba9 	bl	8001130 <FT800_Write32>
}
 80019de:	bd08      	pop	{r3, pc}

080019e0 <FT800_drawButton>:
{
 80019e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019e4:	b083      	sub	sp, #12
 80019e6:	4680      	mov	r8, r0
 80019e8:	460f      	mov	r7, r1
 80019ea:	4616      	mov	r6, r2
 80019ec:	4699      	mov	r9, r3
 80019ee:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80019f2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
    if(tag)
 80019f6:	bb35      	cbnz	r5, 8001a46 <FT800_drawButton+0x66>
    FT800_setFgColor(colorBG); //button color
 80019f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80019fa:	f7ff fd96 	bl	800152a <FT800_setFgColor>
    FT800_setColorRGB(colorTXT); //text color
 80019fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001a00:	f7ff fd7a 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_BUTTON);
 8001a04:	f06f 01f2 	mvn.w	r1, #242	; 0xf2
 8001a08:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a0c:	f7ff fb90 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001a10:	fa1f f188 	uxth.w	r1, r8
 8001a14:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a18:	f7ff fb66 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001a1c:	b2b9      	uxth	r1, r7
 8001a1e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a22:	f7ff fb61 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8001a26:	4631      	mov	r1, r6
 8001a28:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a2c:	f7ff fb5c 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8001a30:	4649      	mov	r1, r9
 8001a32:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a36:	f7ff fb57 	bl	80010e8 <FT800_Write16>
    if(font>31)font=31;
 8001a3a:	2c1f      	cmp	r4, #31
 8001a3c:	d80e      	bhi.n	8001a5c <FT800_drawButton+0x7c>
    if(font<16)font=16;
 8001a3e:	2c0f      	cmp	r4, #15
 8001a40:	d80d      	bhi.n	8001a5e <FT800_drawButton+0x7e>
 8001a42:	2410      	movs	r4, #16
 8001a44:	e00b      	b.n	8001a5e <FT800_drawButton+0x7e>
        FT800_tagMask(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff ffc0 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8001a4c:	9500      	str	r5, [sp, #0]
 8001a4e:	464b      	mov	r3, r9
 8001a50:	4632      	mov	r2, r6
 8001a52:	4639      	mov	r1, r7
 8001a54:	4640      	mov	r0, r8
 8001a56:	f7ff ff89 	bl	800196c <FT800_track>
 8001a5a:	e7cd      	b.n	80019f8 <FT800_drawButton+0x18>
    if(font>31)font=31;
 8001a5c:	241f      	movs	r4, #31
    FT800_Write16(RAM_CMD, font);
 8001a5e:	4621      	mov	r1, r4
 8001a60:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a64:	f7ff fb40 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001a68:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8001a6c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001a70:	f7ff fb3a 	bl	80010e8 <FT800_Write16>
    FT800_WriteString(s);
 8001a74:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001a76:	f7ff fd9f 	bl	80015b8 <FT800_WriteString>
    FT800_tagMask(0);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff ffa6 	bl	80019cc <FT800_tagMask>
}
 8001a80:	b003      	add	sp, #12
 8001a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a86 <FT800_drawClock>:
{
 8001a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	4617      	mov	r7, r2
 8001a92:	4698      	mov	r8, r3
 8001a94:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    if(tag)
 8001a98:	2e00      	cmp	r6, #0
 8001a9a:	d13e      	bne.n	8001b1a <FT800_drawClock+0x94>
    FT800_setBgColor(colorBG);
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	f7ff fd35 	bl	800150c <FT800_setBgColor>
    FT800_setColorRGB(colorNeedle);
 8001aa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001aa4:	f7ff fd28 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_CLOCK);
 8001aa8:	f06f 01eb 	mvn.w	r1, #235	; 0xeb
 8001aac:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ab0:	f7ff fb3e 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001ab4:	b2a9      	uxth	r1, r5
 8001ab6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001aba:	f7ff fb15 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001abe:	b2a1      	uxth	r1, r4
 8001ac0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ac4:	f7ff fb10 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, r);
 8001ac8:	4639      	mov	r1, r7
 8001aca:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ace:	f7ff fb0b 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001ad2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001ad6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ada:	f7ff fb05 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8001ade:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001ae2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ae6:	f7ff faff 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, m);
 8001aea:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8001aee:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001af2:	f7ff faf9 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, s);
 8001af6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8001afa:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001afe:	f7ff faf3 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, ms);
 8001b02:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8001b06:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001b0a:	f7ff faed 	bl	80010e8 <FT800_Write16>
    FT800_tagMask(0);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff ff5c 	bl	80019cc <FT800_tagMask>
}
 8001b14:	b002      	add	sp, #8
 8001b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FT800_tagMask(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff ff56 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,1,1,tag);
 8001b20:	9600      	str	r6, [sp, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	461a      	mov	r2, r3
 8001b26:	4621      	mov	r1, r4
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f7ff ff1f 	bl	800196c <FT800_track>
 8001b2e:	e7b5      	b.n	8001a9c <FT800_drawClock+0x16>

08001b30 <FT800_drawKeys>:
{
 8001b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b34:	b083      	sub	sp, #12
 8001b36:	4680      	mov	r8, r0
 8001b38:	460f      	mov	r7, r1
 8001b3a:	4616      	mov	r6, r2
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 8001b42:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
    if(tag)
 8001b46:	bb35      	cbnz	r5, 8001b96 <FT800_drawKeys+0x66>
    FT800_setFgColor(colorBG);
 8001b48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001b4a:	f7ff fcee 	bl	800152a <FT800_setFgColor>
    FT800_setColorRGB(colorTXT);
 8001b4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001b50:	f7ff fcd2 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_KEYS);
 8001b54:	f06f 01f1 	mvn.w	r1, #241	; 0xf1
 8001b58:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001b5c:	f7ff fae8 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001b60:	fa1f f188 	uxth.w	r1, r8
 8001b64:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001b68:	f7ff fabe 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001b6c:	b2b9      	uxth	r1, r7
 8001b6e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001b72:	f7ff fab9 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8001b76:	4631      	mov	r1, r6
 8001b78:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001b7c:	f7ff fab4 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8001b80:	4649      	mov	r1, r9
 8001b82:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001b86:	f7ff faaf 	bl	80010e8 <FT800_Write16>
    if(font>31)font=31;
 8001b8a:	2c1f      	cmp	r4, #31
 8001b8c:	d80e      	bhi.n	8001bac <FT800_drawKeys+0x7c>
    if(font<16)font=16;
 8001b8e:	2c0f      	cmp	r4, #15
 8001b90:	d80d      	bhi.n	8001bae <FT800_drawKeys+0x7e>
 8001b92:	2410      	movs	r4, #16
 8001b94:	e00b      	b.n	8001bae <FT800_drawKeys+0x7e>
        FT800_tagMask(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff ff18 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8001b9c:	9500      	str	r5, [sp, #0]
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	4632      	mov	r2, r6
 8001ba2:	4639      	mov	r1, r7
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	f7ff fee1 	bl	800196c <FT800_track>
 8001baa:	e7cd      	b.n	8001b48 <FT800_drawKeys+0x18>
    if(font>31)font=31;
 8001bac:	241f      	movs	r4, #31
    FT800_Write16(RAM_CMD, font);
 8001bae:	4621      	mov	r1, r4
 8001bb0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001bb4:	f7ff fa98 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001bb8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8001bbc:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001bc0:	f7ff fa92 	bl	80010e8 <FT800_Write16>
    FT800_WriteString(s);
 8001bc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001bc6:	f7ff fcf7 	bl	80015b8 <FT800_WriteString>
    FT800_tagMask(0);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fefe 	bl	80019cc <FT800_tagMask>
}
 8001bd0:	b003      	add	sp, #12
 8001bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001bd6 <FT800_drawScrollBar>:
{
 8001bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	4607      	mov	r7, r0
 8001bde:	460e      	mov	r6, r1
 8001be0:	4615      	mov	r5, r2
 8001be2:	4698      	mov	r8, r3
 8001be4:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    if(tag)
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d13d      	bne.n	8001c68 <FT800_drawScrollBar+0x92>
    FT800_setFgColor(colorBG);
 8001bec:	9808      	ldr	r0, [sp, #32]
 8001bee:	f7ff fc9c 	bl	800152a <FT800_setFgColor>
    FT800_setBgColor(colorSCR);
 8001bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bf4:	f7ff fc8a 	bl	800150c <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_SCROLLBAR);
 8001bf8:	f06f 01ee 	mvn.w	r1, #238	; 0xee
 8001bfc:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c00:	f7ff fa96 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001c04:	b2b9      	uxth	r1, r7
 8001c06:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c0a:	f7ff fa6d 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001c0e:	b2b1      	uxth	r1, r6
 8001c10:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c14:	f7ff fa68 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c1e:	f7ff fa63 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8001c22:	4641      	mov	r1, r8
 8001c24:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c28:	f7ff fa5e 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001c2c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8001c30:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c34:	f7ff fa58 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8001c38:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8001c3c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c40:	f7ff fa52 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, size);
 8001c44:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8001c48:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c4c:	f7ff fa4c 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8001c50:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8001c54:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001c58:	f7ff fa46 	bl	80010e8 <FT800_Write16>
    FT800_tagMask(0);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff feb5 	bl	80019cc <FT800_tagMask>
}
 8001c62:	b002      	add	sp, #8
 8001c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FT800_tagMask(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7ff feaf 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8001c6e:	9400      	str	r4, [sp, #0]
 8001c70:	4643      	mov	r3, r8
 8001c72:	462a      	mov	r2, r5
 8001c74:	4631      	mov	r1, r6
 8001c76:	4638      	mov	r0, r7
 8001c78:	f7ff fe78 	bl	800196c <FT800_track>
 8001c7c:	e7b6      	b.n	8001bec <FT800_drawScrollBar+0x16>

08001c7e <FT800_drawToggle>:
{
 8001c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	4607      	mov	r7, r0
 8001c86:	460e      	mov	r6, r1
 8001c88:	4690      	mov	r8, r2
 8001c8a:	461c      	mov	r4, r3
 8001c8c:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
    if(tag)
 8001c90:	bb1d      	cbnz	r5, 8001cda <FT800_drawToggle+0x5c>
    FT800_setFgColor(colorKnob);
 8001c92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001c94:	f7ff fc49 	bl	800152a <FT800_setFgColor>
    FT800_setBgColor(colorBCG);
 8001c98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001c9a:	f7ff fc37 	bl	800150c <FT800_setBgColor>
    FT800_setColorRGB(colorTXT);
 8001c9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001ca0:	f7ff fc2a 	bl	80014f8 <FT800_setColorRGB>
    FT800_Write32(RAM_CMD, CMD_TOGGLE);
 8001ca4:	f06f 01ed 	mvn.w	r1, #237	; 0xed
 8001ca8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001cac:	f7ff fa40 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001cb0:	b2b9      	uxth	r1, r7
 8001cb2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001cb6:	f7ff fa17 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001cba:	b2b1      	uxth	r1, r6
 8001cbc:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001cc0:	f7ff fa12 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001cca:	f7ff fa0d 	bl	80010e8 <FT800_Write16>
    if(font>31)font=31;
 8001cce:	2c1f      	cmp	r4, #31
 8001cd0:	d80e      	bhi.n	8001cf0 <FT800_drawToggle+0x72>
    if(font<16)font=16;
 8001cd2:	2c0f      	cmp	r4, #15
 8001cd4:	d80d      	bhi.n	8001cf2 <FT800_drawToggle+0x74>
 8001cd6:	2410      	movs	r4, #16
 8001cd8:	e00b      	b.n	8001cf2 <FT800_drawToggle+0x74>
        FT800_tagMask(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff fe76 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,w,font,tag);
 8001ce0:	9500      	str	r5, [sp, #0]
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	4642      	mov	r2, r8
 8001ce6:	4631      	mov	r1, r6
 8001ce8:	4638      	mov	r0, r7
 8001cea:	f7ff fe3f 	bl	800196c <FT800_track>
 8001cee:	e7d0      	b.n	8001c92 <FT800_drawToggle+0x14>
    if(font>31)font=31;
 8001cf0:	241f      	movs	r4, #31
    FT800_Write16(RAM_CMD, font);
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001cf8:	f7ff f9f6 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001cfc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001d00:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d04:	f7ff f9f0 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, state);
 8001d08:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001d0c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d10:	f7ff f9ea 	bl	80010e8 <FT800_Write16>
    FT800_WriteString(s);
 8001d14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001d16:	f7ff fc4f 	bl	80015b8 <FT800_WriteString>
    FT800_tagMask(0);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fe56 	bl	80019cc <FT800_tagMask>
}
 8001d20:	b002      	add	sp, #8
 8001d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d26 <FT800_drawSlider>:
{
 8001d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	4607      	mov	r7, r0
 8001d2e:	460e      	mov	r6, r1
 8001d30:	4615      	mov	r5, r2
 8001d32:	4698      	mov	r8, r3
 8001d34:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    if(tag)
 8001d38:	2c00      	cmp	r4, #0
 8001d3a:	d13f      	bne.n	8001dbc <FT800_drawSlider+0x96>
    FT800_setFgColor(colorKnob);
 8001d3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001d3e:	f7ff fbf4 	bl	800152a <FT800_setFgColor>
    FT800_setColorRGB(colorR);
 8001d42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d44:	f7ff fbd8 	bl	80014f8 <FT800_setColorRGB>
    FT800_setBgColor(colorL);
 8001d48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001d4a:	f7ff fbdf 	bl	800150c <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_SLIDER);
 8001d4e:	f06f 01ef 	mvn.w	r1, #239	; 0xef
 8001d52:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d56:	f7ff f9eb 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001d5a:	b2b9      	uxth	r1, r7
 8001d5c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d60:	f7ff f9c2 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001d64:	b2b1      	uxth	r1, r6
 8001d66:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d6a:	f7ff f9bd 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d74:	f7ff f9b8 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8001d78:	4641      	mov	r1, r8
 8001d7a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d7e:	f7ff f9b3 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001d82:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001d86:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d8a:	f7ff f9ad 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8001d8e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001d92:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001d96:	f7ff f9a7 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8001d9a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8001d9e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001da2:	f7ff f9a1 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0);
 8001da6:	2100      	movs	r1, #0
 8001da8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001dac:	f7ff f99c 	bl	80010e8 <FT800_Write16>
    FT800_tagMask(0);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fe0b 	bl	80019cc <FT800_tagMask>
}
 8001db6:	b002      	add	sp, #8
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FT800_tagMask(1);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fe05 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8001dc2:	9400      	str	r4, [sp, #0]
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	462a      	mov	r2, r5
 8001dc8:	4631      	mov	r1, r6
 8001dca:	4638      	mov	r0, r7
 8001dcc:	f7ff fdce 	bl	800196c <FT800_track>
 8001dd0:	e7b4      	b.n	8001d3c <FT800_drawSlider+0x16>

08001dd2 <FT800_drawProgressBar>:
{
 8001dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	4607      	mov	r7, r0
 8001dda:	460e      	mov	r6, r1
 8001ddc:	4615      	mov	r5, r2
 8001dde:	4698      	mov	r8, r3
 8001de0:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    if(tag)
 8001de4:	2c00      	cmp	r4, #0
 8001de6:	d13c      	bne.n	8001e62 <FT800_drawProgressBar+0x90>
    FT800_setColorRGB(colorBCG);
 8001de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001dea:	f7ff fb85 	bl	80014f8 <FT800_setColorRGB>
    FT800_setBgColor(colorPRO);
 8001dee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001df0:	f7ff fb8c 	bl	800150c <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_PROGRESS);
 8001df4:	f06f 01f0 	mvn.w	r1, #240	; 0xf0
 8001df8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001dfc:	f7ff f998 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001e00:	b2b9      	uxth	r1, r7
 8001e02:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e06:	f7ff f96f 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001e0a:	b2b1      	uxth	r1, r6
 8001e0c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e10:	f7ff f96a 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8001e14:	4629      	mov	r1, r5
 8001e16:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e1a:	f7ff f965 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 8001e1e:	4641      	mov	r1, r8
 8001e20:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e24:	f7ff f960 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001e28:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001e2c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e30:	f7ff f95a 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8001e34:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001e38:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e3c:	f7ff f954 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8001e40:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8001e44:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e48:	f7ff f94e 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0); // align to 32
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001e52:	f7ff f949 	bl	80010e8 <FT800_Write16>
    FT800_tagMask(0);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fdb8 	bl	80019cc <FT800_tagMask>
}
 8001e5c:	b002      	add	sp, #8
 8001e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FT800_tagMask(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7ff fdb2 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,w,h,tag);
 8001e68:	9400      	str	r4, [sp, #0]
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	462a      	mov	r2, r5
 8001e6e:	4631      	mov	r1, r6
 8001e70:	4638      	mov	r0, r7
 8001e72:	f7ff fd7b 	bl	800196c <FT800_track>
 8001e76:	e7b7      	b.n	8001de8 <FT800_drawProgressBar+0x16>

08001e78 <FT800_drawDial>:
{
 8001e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	4605      	mov	r5, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	4690      	mov	r8, r2
 8001e84:	461f      	mov	r7, r3
 8001e86:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
    if(tag)
 8001e8a:	bb86      	cbnz	r6, 8001eee <FT800_drawDial+0x76>
    FT800_setColorRGB(colorKnob);
 8001e8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e8e:	f7ff fb33 	bl	80014f8 <FT800_setColorRGB>
    FT800_setFgColor(colorMarker);
 8001e92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e94:	f7ff fb49 	bl	800152a <FT800_setFgColor>
    FT800_Write32(RAM_CMD, CMD_DIAL);
 8001e98:	f06f 01d2 	mvn.w	r1, #210	; 0xd2
 8001e9c:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ea0:	f7ff f946 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001ea4:	b2a9      	uxth	r1, r5
 8001ea6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001eaa:	f7ff f91d 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001eae:	b2a1      	uxth	r1, r4
 8001eb0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001eb4:	f7ff f918 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, r);
 8001eb8:	4641      	mov	r1, r8
 8001eba:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ebe:	f7ff f913 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);    
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ec8:	f7ff f90e 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8001ecc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001ed0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ed4:	f7ff f908 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0); // align to 32
 8001ed8:	2100      	movs	r1, #0
 8001eda:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ede:	f7ff f903 	bl	80010e8 <FT800_Write16>
    FT800_tagMask(0);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fd72 	bl	80019cc <FT800_tagMask>
}
 8001ee8:	b002      	add	sp, #8
 8001eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FT800_tagMask(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff fd6c 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,1,1,tag);//rotary tracker
 8001ef4:	9600      	str	r6, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4621      	mov	r1, r4
 8001efc:	4628      	mov	r0, r5
 8001efe:	f7ff fd35 	bl	800196c <FT800_track>
 8001f02:	e7c3      	b.n	8001e8c <FT800_drawDial+0x14>

08001f04 <FT800_drawGauge>:
{
 8001f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	4605      	mov	r5, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	4690      	mov	r8, r2
 8001f10:	461f      	mov	r7, r3
 8001f12:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    if(tag)
 8001f16:	2e00      	cmp	r6, #0
 8001f18:	d13d      	bne.n	8001f96 <FT800_drawGauge+0x92>
    FT800_setColorRGB(colorNeedle);
 8001f1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001f1c:	f7ff faec 	bl	80014f8 <FT800_setColorRGB>
    FT800_setBgColor(colorBCG);
 8001f20:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001f22:	f7ff faf3 	bl	800150c <FT800_setBgColor>
    FT800_Write32(RAM_CMD, CMD_GAUGE);
 8001f26:	f06f 01ec 	mvn.w	r1, #236	; 0xec
 8001f2a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f2e:	f7ff f8ff 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001f32:	b2a9      	uxth	r1, r5
 8001f34:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f38:	f7ff f8d6 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001f3c:	b2a1      	uxth	r1, r4
 8001f3e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f42:	f7ff f8d1 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, r);
 8001f46:	4641      	mov	r1, r8
 8001f48:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f4c:	f7ff f8cc 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, options);
 8001f50:	4639      	mov	r1, r7
 8001f52:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f56:	f7ff f8c7 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, major);
 8001f5a:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8001f5e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f62:	f7ff f8c1 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, minor);
 8001f66:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8001f6a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f6e:	f7ff f8bb 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, value);
 8001f72:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8001f76:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f7a:	f7ff f8b5 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, range);
 8001f7e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8001f82:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001f86:	f7ff f8af 	bl	80010e8 <FT800_Write16>
    FT800_tagMask(0);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fd1e 	bl	80019cc <FT800_tagMask>
}
 8001f90:	b002      	add	sp, #8
 8001f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FT800_tagMask(1);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff fd18 	bl	80019cc <FT800_tagMask>
        FT800_track(x,y,1,1,tag);
 8001f9c:	9600      	str	r6, [sp, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7ff fce1 	bl	800196c <FT800_track>
 8001faa:	e7b6      	b.n	8001f1a <FT800_drawGauge+0x16>

08001fac <FT800_readTag>:
/************************************************************************************* */
// FT800 read tag value
/* ************************************************************************************ */

uint8_t FT800_readTag(void)
{
 8001fac:	b508      	push	{r3, lr}
    uint32_t tag;

    tag=FT800_Read32(REG_TRACKER)&0x000000FF;
 8001fae:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <FT800_readTag+0xc>)
 8001fb0:	f7ff f910 	bl	80011d4 <FT800_Read32>
    
    return (uint8_t)tag;
}
 8001fb4:	b2c0      	uxtb	r0, r0
 8001fb6:	bd08      	pop	{r3, pc}
 8001fb8:	00109000 	.word	0x00109000

08001fbc <FT800_readValue>:
/************************************************************************************* */
// FT800 read value tagged object
/* ************************************************************************************ */

uint16_t FT800_readValue(void)
{
 8001fbc:	b508      	push	{r3, lr}
    uint32_t value;

    value = FT800_Read32(REG_TRACKER)&(0xFFFF0000);
 8001fbe:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <FT800_readValue+0xc>)
 8001fc0:	f7ff f908 	bl	80011d4 <FT800_Read32>

    return (uint16_t)(value>>16);
}
 8001fc4:	0c00      	lsrs	r0, r0, #16
 8001fc6:	bd08      	pop	{r3, pc}
 8001fc8:	00109000 	.word	0x00109000

08001fcc <FT800_runTouchCalibration>:
/************************************************************************************* */
// FT800 run touch screen animation
/* ************************************************************************************ */

void FT800_runTouchCalibration(void)
{
 8001fcc:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, CMD_CALIBRATE);
 8001fce:	f06f 01ea 	mvn.w	r1, #234	; 0xea
 8001fd2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001fd6:	f7ff f8ab 	bl	8001130 <FT800_Write32>
}
 8001fda:	bd08      	pop	{r3, pc}

08001fdc <FT800_drawAnimSpinner>:
/************************************************************************************* */
// FT800 animated spinner
/* ************************************************************************************ */

void FT800_drawAnimSpinner(int16_t x, int16_t y, uint8_t style, uint8_t scale)
{
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	4607      	mov	r7, r0
 8001fe0:	460e      	mov	r6, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
    FT800_Write32(RAM_CMD, CMD_SPINNER);      
 8001fe6:	f06f 01e9 	mvn.w	r1, #233	; 0xe9
 8001fea:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001fee:	f7ff f89f 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8001ff2:	b2b9      	uxth	r1, r7
 8001ff4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8001ff8:	f7ff f876 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);
 8001ffc:	b2b1      	uxth	r1, r6
 8001ffe:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002002:	f7ff f871 	bl	80010e8 <FT800_Write16>
    if(style>3) style=0;
 8002006:	2c03      	cmp	r4, #3
 8002008:	d900      	bls.n	800200c <FT800_drawAnimSpinner+0x30>
 800200a:	2400      	movs	r4, #0
    FT800_Write16(RAM_CMD, style);    
 800200c:	4621      	mov	r1, r4
 800200e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002012:	f7ff f869 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, scale);
 8002016:	4629      	mov	r1, r5
 8002018:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800201c:	f7ff f864 	bl	80010e8 <FT800_Write16>
}
 8002020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002022 <FT800_drawLogo>:
/************************************************************************************* */
// FT800 draw FTDI animated logo
/* ************************************************************************************ */

void FT800_drawLogo(void)
{
 8002022:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, CMD_LOGO);
 8002024:	f06f 01ce 	mvn.w	r1, #206	; 0xce
 8002028:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800202c:	f7ff f880 	bl	8001130 <FT800_Write32>
}
 8002030:	bd08      	pop	{r3, pc}
	...

08002034 <FT800_waitLogo>:
/* ************************************************************************************ */
// FT800 wait Logo to finish 
/* ************************************************************************************ */

void FT800_waitLogo(void)
{
 8002034:	b508      	push	{r3, lr}
    FT800_executeCommands();
 8002036:	f7ff fa25 	bl	8001484 <FT800_executeCommands>
    DELAY(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f004 fb96 	bl	800676c <delay_ms>
    while((FT800_Read16(REG_CMD_WRITE) != 0));
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <FT800_waitLogo+0x24>)
 8002042:	f7ff f8b1 	bl	80011a8 <FT800_Read16>
 8002046:	2800      	cmp	r0, #0
 8002048:	d1fa      	bne.n	8002040 <FT800_waitLogo+0xc>
    DELAY(1); 
 800204a:	2001      	movs	r0, #1
 800204c:	f004 fb8e 	bl	800676c <delay_ms>
    FT800_finishList();
 8002050:	f7ff fa04 	bl	800145c <FT800_finishList>
}
 8002054:	bd08      	pop	{r3, pc}
 8002056:	bf00      	nop
 8002058:	001024e8 	.word	0x001024e8

0800205c <FT800_drawScreensaver>:
/************************************************************************************* */
// FT800 screensaver command
/* ************************************************************************************ */

void FT800_drawScreensaver(void)
{
 800205c:	b508      	push	{r3, lr}
   FT800_Write32(RAM_CMD, CMD_SCREENSAVER); 
 800205e:	f06f 01d0 	mvn.w	r1, #208	; 0xd0
 8002062:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002066:	f7ff f863 	bl	8001130 <FT800_Write32>
}
 800206a:	bd08      	pop	{r3, pc}

0800206c <FT800_drawSketch>:
/************************************************************************************* */
// FT800 draw sketch
/* ************************************************************************************ */

void FT800_drawSketch(int16_t x, int16_t y, uint16_t w, uint16_t h, uint32_t pointer, uint16_t format)
{
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	4607      	mov	r7, r0
 8002070:	460e      	mov	r6, r1
 8002072:	4615      	mov	r5, r2
 8002074:	461c      	mov	r4, r3
    FT800_Write32(RAM_CMD, CMD_SKETCH); 
 8002076:	f06f 01cf 	mvn.w	r1, #207	; 0xcf
 800207a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800207e:	f7ff f857 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, x);
 8002082:	b2b9      	uxth	r1, r7
 8002084:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002088:	f7ff f82e 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, y);    
 800208c:	b2b1      	uxth	r1, r6
 800208e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002092:	f7ff f829 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, w);
 8002096:	4629      	mov	r1, r5
 8002098:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800209c:	f7ff f824 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, h);
 80020a0:	4621      	mov	r1, r4
 80020a2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020a6:	f7ff f81f 	bl	80010e8 <FT800_Write16>
    FT800_Write32(RAM_CMD, pointer); 
 80020aa:	9906      	ldr	r1, [sp, #24]
 80020ac:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020b0:	f7ff f83e 	bl	8001130 <FT800_Write32>
    FT800_Write16(RAM_CMD, format); 
 80020b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80020b8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020bc:	f7ff f814 	bl	80010e8 <FT800_Write16>
    FT800_Write16(RAM_CMD, 0x0000);  //align      
 80020c0:	2100      	movs	r1, #0
 80020c2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020c6:	f7ff f80f 	bl	80010e8 <FT800_Write16>
}
 80020ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020cc <FT800_stop>:
/************************************************************************************* */
// FT800 stop spinner, screensaver or sketch
/* ************************************************************************************ */

void FT800_stop(void)
{
 80020cc:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, CMD_STOP);      
 80020ce:	f06f 01e8 	mvn.w	r1, #232	; 0xe8
 80020d2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020d6:	f7ff f82b 	bl	8001130 <FT800_Write32>
}
 80020da:	bd08      	pop	{r3, pc}

080020dc <FT800_macro>:
/************************************************************************************* */
// FT800 macro
/* ************************************************************************************ */

void FT800_macro(uint8_t m)
{
 80020dc:	b508      	push	{r3, lr}
    uint32_t macro = 0x25000000;

    macro |= (m&0x01);
 80020de:	f000 0101 	and.w	r1, r0, #1
    FT800_Write32(RAM_CMD, macro); 
 80020e2:	f041 5114 	orr.w	r1, r1, #620756992	; 0x25000000
 80020e6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020ea:	f7ff f821 	bl	8001130 <FT800_Write32>
}
 80020ee:	bd08      	pop	{r3, pc}

080020f0 <FT800_bitmapBegin>:
/************************************************************************************* */
// FT800 bitmap begin
/* ************************************************************************************ */

void FT800_bitmapBegin(void)
{ 
 80020f0:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, BEGIN|BITMAP);
 80020f2:	4903      	ldr	r1, [pc, #12]	; (8002100 <FT800_bitmapBegin+0x10>)
 80020f4:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80020f8:	f7ff f81a 	bl	8001130 <FT800_Write32>
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop
 8002100:	1f000001 	.word	0x1f000001

08002104 <FT800_bitmapLayout>:
/************************************************************************************* */
// FT800 bitmap layout
/* ************************************************************************************ */

void FT800_bitmapLayout(uint8_t format, int16_t linestride, int16_t heigth)
{
 8002104:	b508      	push	{r3, lr}
    uint32_t bitmap_layout=0x07000000;
   
    if(format>11) format = 11; //The valid range is from  0 to 11
 8002106:	280b      	cmp	r0, #11
 8002108:	d900      	bls.n	800210c <FT800_bitmapLayout+0x8>
 800210a:	200b      	movs	r0, #11
    bitmap_layout |= (uint32_t)(format&0x1F)<<19;
 800210c:	04c0      	lsls	r0, r0, #19
 800210e:	f400 0078 	and.w	r0, r0, #16252928	; 0xf80000
 8002112:	f040 60e0 	orr.w	r0, r0, #117440512	; 0x7000000
    bitmap_layout |= (uint32_t)(linestride&0x03FF)<<9;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <FT800_bitmapLayout+0x2c>)
 8002118:	ea03 2141 	and.w	r1, r3, r1, lsl #9
 800211c:	4308      	orrs	r0, r1
    bitmap_layout |= (heigth&0x01FF);  
 800211e:	f3c2 0108 	ubfx	r1, r2, #0, #9
    
    FT800_Write32(RAM_CMD, bitmap_layout);
 8002122:	4301      	orrs	r1, r0
 8002124:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002128:	f7ff f802 	bl	8001130 <FT800_Write32>
}
 800212c:	bd08      	pop	{r3, pc}
 800212e:	bf00      	nop
 8002130:	0007fe00 	.word	0x0007fe00

08002134 <FT800_bitmapSize>:
/************************************************************************************* */
// FT800 bitmap size
/* ************************************************************************************ */

void FT800_bitmapSize(uint8_t filter, uint8_t wrapx, uint8_t wrapy, int16_t width, int16_t heigth)
{
 8002134:	b508      	push	{r3, lr}
    uint32_t bitmap_size=0x08000000;
    
    bitmap_size |= (uint32_t)(filter&0x01)<<20;
 8002136:	0500      	lsls	r0, r0, #20
 8002138:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
 800213c:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
    bitmap_size |= (uint32_t)(wrapx&0x01)<<19;
 8002140:	04c9      	lsls	r1, r1, #19
 8002142:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8002146:	4308      	orrs	r0, r1
    bitmap_size |= (uint32_t)(wrapy&0x01)<<18;
 8002148:	0491      	lsls	r1, r2, #18
 800214a:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 800214e:	4301      	orrs	r1, r0
    bitmap_size |= (uint32_t)(width&0x01FF)<<9;
 8002150:	4806      	ldr	r0, [pc, #24]	; (800216c <FT800_bitmapSize+0x38>)
 8002152:	ea00 2343 	and.w	r3, r0, r3, lsl #9
 8002156:	430b      	orrs	r3, r1
    bitmap_size |= (uint32_t)(heigth&0x01FF);
 8002158:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800215c:	f3c1 0108 	ubfx	r1, r1, #0, #9
    
    FT800_Write32(RAM_CMD, bitmap_size);
 8002160:	4319      	orrs	r1, r3
 8002162:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002166:	f7fe ffe3 	bl	8001130 <FT800_Write32>
}
 800216a:	bd08      	pop	{r3, pc}
 800216c:	0003fe00 	.word	0x0003fe00

08002170 <FT800_bitmapSource>:
/************************************************************************************* */
// FT800 bitmap source
/* ************************************************************************************ */

void FT800_bitmapSource(uint32_t add)
{  
 8002170:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, 0x01000000|(add&0x000FFFFF));
 8002172:	f3c0 0113 	ubfx	r1, r0, #0, #20
 8002176:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800217a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800217e:	f7fe ffd7 	bl	8001130 <FT800_Write32>
}
 8002182:	bd08      	pop	{r3, pc}

08002184 <FT800_loadIdentity>:
/************************************************************************************* */
// FT800 load matrix
/* ************************************************************************************ */

void FT800_loadIdentity(void)
{
 8002184:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, CMD_LOADIDENTITY);
 8002186:	f06f 01d9 	mvn.w	r1, #217	; 0xd9
 800218a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800218e:	f7fe ffcf 	bl	8001130 <FT800_Write32>
}
 8002192:	bd08      	pop	{r3, pc}

08002194 <FT800_setMatrix>:
/************************************************************************************* */
// FT800 set matrix
/* ************************************************************************************ */

void FT800_setMatrix(void)
{
 8002194:	b508      	push	{r3, lr}
    FT800_Write32(RAM_CMD, CMD_SETMATRIX);
 8002196:	f06f 01d5 	mvn.w	r1, #213	; 0xd5
 800219a:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800219e:	f7fe ffc7 	bl	8001130 <FT800_Write32>
}
 80021a2:	bd08      	pop	{r3, pc}

080021a4 <FT800_scale>:
/************************************************************************************* */
// FT800 scale command
/* ************************************************************************************ */

void FT800_scale(int16_t sx,int16_t sy)
{
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	4605      	mov	r5, r0
 80021a8:	460c      	mov	r4, r1
    FT800_Write32(RAM_CMD, CMD_SCALE);
 80021aa:	f06f 01d7 	mvn.w	r1, #215	; 0xd7
 80021ae:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80021b2:	f7fe ffbd 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)sx<<16);
 80021b6:	0429      	lsls	r1, r5, #16
 80021b8:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80021bc:	f7fe ffb8 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)sy<<16);    
 80021c0:	0421      	lsls	r1, r4, #16
 80021c2:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80021c6:	f7fe ffb3 	bl	8001130 <FT800_Write32>
}
 80021ca:	bd38      	pop	{r3, r4, r5, pc}

080021cc <FT800_translate>:
/************************************************************************************* */
// FT800 translate command
/* ************************************************************************************ */

void FT800_translate(int16_t tx,int16_t ty)
{
 80021cc:	b538      	push	{r3, r4, r5, lr}
 80021ce:	4605      	mov	r5, r0
 80021d0:	460c      	mov	r4, r1
    FT800_Write32(RAM_CMD, CMD_TRANSLATE);
 80021d2:	f06f 01d8 	mvn.w	r1, #216	; 0xd8
 80021d6:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80021da:	f7fe ffa9 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)tx<<16);
 80021de:	0429      	lsls	r1, r5, #16
 80021e0:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80021e4:	f7fe ffa4 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, (int32_t)ty<<16);    
 80021e8:	0421      	lsls	r1, r4, #16
 80021ea:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 80021ee:	f7fe ff9f 	bl	8001130 <FT800_Write32>
}
 80021f2:	bd38      	pop	{r3, r4, r5, pc}

080021f4 <FT800_rotate>:
/************************************************************************************* */
// FT800 rotate command
/* ************************************************************************************ */

void FT800_rotate(int16_t a)
{
 80021f4:	b510      	push	{r4, lr}
 80021f6:	4604      	mov	r4, r0
    FT800_Write32(RAM_CMD, CMD_ROTATE);
 80021f8:	f06f 01d6 	mvn.w	r1, #214	; 0xd6
 80021fc:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002200:	f7fe ff96 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, ((int32_t)a<<16)/360);   
 8002204:	0420      	lsls	r0, r4, #16
 8002206:	4906      	ldr	r1, [pc, #24]	; (8002220 <FT800_rotate+0x2c>)
 8002208:	fb81 3100 	smull	r3, r1, r1, r0
 800220c:	4401      	add	r1, r0
 800220e:	17c0      	asrs	r0, r0, #31
 8002210:	ebc0 2121 	rsb	r1, r0, r1, asr #8
 8002214:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002218:	f7fe ff8a 	bl	8001130 <FT800_Write32>
}
 800221c:	bd10      	pop	{r4, pc}
 800221e:	bf00      	nop
 8002220:	b60b60b7 	.word	0xb60b60b7

08002224 <FT800_loadJpgCMD>:
/************************************************************************************* */
// FT800 load jpg command
/* ************************************************************************************ */

void FT800_loadJpgCMD(uint32_t ptr, uint32_t opt)
{
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4605      	mov	r5, r0
 8002228:	460c      	mov	r4, r1
    FT800_Write32(RAM_CMD, CMD_LOADIMAGE);
 800222a:	f06f 01db 	mvn.w	r1, #219	; 0xdb
 800222e:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002232:	f7fe ff7d 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, ptr);
 8002236:	4629      	mov	r1, r5
 8002238:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 800223c:	f7fe ff78 	bl	8001130 <FT800_Write32>
    FT800_Write32(RAM_CMD, opt);
 8002240:	4621      	mov	r1, r4
 8002242:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002246:	f7fe ff73 	bl	8001130 <FT800_Write32>
}
 800224a:	bd38      	pop	{r3, r4, r5, pc}

0800224c <FT800_InitPins>:
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800224c:	bf00      	nop
/* ************************************************************************************ */

void FT800_InitPins(void)
{
	__NOP();// Nothing to add since Cube MX generates this in main
}
 800224e:	4770      	bx	lr

08002250 <F800_InitSPI>:
 8002250:	bf00      	nop

void F800_InitSPI(void)
{

	__NOP();// Nothing to add since Cube MX generates this in main
	SET_BIT(FT800_SPI->CR1, SPI_CR1_SPE); //Just enable
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <F800_InitSPI+0x10>)
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40003800 	.word	0x40003800

08002264 <F800_InitInterrupt>:
 8002264:	bf00      	nop
/* ************************************************************************************ */

void F800_InitInterrupt(void)
{
    __NOP();// Nothing to add since Cube MX generates this in main
}
 8002266:	4770      	bx	lr

08002268 <SPI_xchg>:
// Exchange byte over SPI
/* ************************************************************************************ */

uint8_t SPI_xchg (uint8_t data)
{
	while (!(FT800_SPI->SR&SPI_FLAG_TXE));
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <SPI_xchg+0x20>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f013 0f02 	tst.w	r3, #2
 8002270:	d0fa      	beq.n	8002268 <SPI_xchg>
	FT800_SPI->DR=data;
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SPI_xchg+0x20>)
 8002274:	60d8      	str	r0, [r3, #12]
	while (!(FT800_SPI->SR&SPI_FLAG_RXNE));
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SPI_xchg+0x20>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f013 0f01 	tst.w	r3, #1
 800227e:	d0fa      	beq.n	8002276 <SPI_xchg+0xe>
	return (FT800_SPI->DR);
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <SPI_xchg+0x20>)
 8002282:	68d8      	ldr	r0, [r3, #12]
}
 8002284:	b2c0      	uxtb	r0, r0
 8002286:	4770      	bx	lr
 8002288:	40003800 	.word	0x40003800

0800228c <FT800_WriteSPI>:
/* ************************************************************************************ */
// Write data (transmit single byte over SPI)
/* ************************************************************************************ */

void FT800_WriteSPI(uint8_t data)
{
 800228c:	b508      	push	{r3, lr}
	SPI_xchg(data);
 800228e:	f7ff ffeb 	bl	8002268 <SPI_xchg>
}
 8002292:	bd08      	pop	{r3, pc}

08002294 <FT800_ReadSPI>:
/* ************************************************************************************ */
// Read data (receive single byte over SPI)
/* ************************************************************************************ */

uint8_t FT800_ReadSPI(void)
{
 8002294:	b508      	push	{r3, lr}
	return SPI_xchg(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff ffe6 	bl	8002268 <SPI_xchg>
}
 800229c:	bd08      	pop	{r3, pc}
	...

080022a0 <FT800_loadWAVfromSD>:
#define BUFF_SIZE 2048

uint8_t buff[BUFF_SIZE];

uint8_t FT800_loadWAVfromSD(uint32_t ram_offset, TCHAR *file_path, uint16_t *frmt, uint16_t *chn, uint32_t *sample, uint16_t *bpc, uint32_t *size)
{
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a4:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80022a8:	b083      	sub	sp, #12
 80022aa:	4607      	mov	r7, r0
 80022ac:	9202      	str	r2, [sp, #8]
 80022ae:	9303      	str	r3, [sp, #12]
    uint16_t wav_format=0, wav_channels=0, wav_bits_per_channel=0;
    uint32_t wav_sample_rate=0, bytes=0, offset=0,i,s;
    uint64_t wav_size=0;
   
    //open
    f_open(&myFile, file_path, FA_READ);
 80022b0:	2201      	movs	r2, #1
 80022b2:	a806      	add	r0, sp, #24
 80022b4:	f001 fd0c 	bl	8003cd0 <f_open>
    //get format
    f_lseek(&myFile, WAV_FORMAT); 
 80022b8:	2114      	movs	r1, #20
 80022ba:	a806      	add	r0, sp, #24
 80022bc:	f001 ff66 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 80022c0:	ab05      	add	r3, sp, #20
 80022c2:	2202      	movs	r2, #2
 80022c4:	a904      	add	r1, sp, #16
 80022c6:	a806      	add	r0, sp, #24
 80022c8:	f001 fe1d 	bl	8003f06 <f_read>
    wav_format=(data[1]<<8)|(data[0]);
 80022cc:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80022d0:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80022d4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    //get channels - mono, stereo
    f_lseek(&myFile, WAV_CHANNELS); 
 80022d8:	2116      	movs	r1, #22
 80022da:	a806      	add	r0, sp, #24
 80022dc:	f001 ff56 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 80022e0:	ab05      	add	r3, sp, #20
 80022e2:	2202      	movs	r2, #2
 80022e4:	a904      	add	r1, sp, #16
 80022e6:	a806      	add	r0, sp, #24
 80022e8:	f001 fe0d 	bl	8003f06 <f_read>
    wav_channels=(data[1]<<8)|(data[0]);
 80022ec:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80022f0:	f89d a010 	ldrb.w	sl, [sp, #16]
 80022f4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    //get sample sample rate
    f_lseek(&myFile, WAV_SAMPLE_RATE);
 80022f8:	2118      	movs	r1, #24
 80022fa:	eb0d 0001 	add.w	r0, sp, r1
 80022fe:	f001 ff45 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8002302:	ab05      	add	r3, sp, #20
 8002304:	2204      	movs	r2, #4
 8002306:	a904      	add	r1, sp, #16
 8002308:	a806      	add	r0, sp, #24
 800230a:	f001 fdfc 	bl	8003f06 <f_read>
    wav_sample_rate=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 800230e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002312:	f89d 8012 	ldrb.w	r8, [sp, #18]
 8002316:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800231a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800231e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002322:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8002326:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800232a:	ea48 0803 	orr.w	r8, r8, r3
    //get bits per channel 
    f_lseek(&myFile, WAV_BITS_PER_SAMPLE);
 800232e:	2122      	movs	r1, #34	; 0x22
 8002330:	a806      	add	r0, sp, #24
 8002332:	f001 ff2b 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8002336:	ab05      	add	r3, sp, #20
 8002338:	2204      	movs	r2, #4
 800233a:	a904      	add	r1, sp, #16
 800233c:	a806      	add	r0, sp, #24
 800233e:	f001 fde2 	bl	8003f06 <f_read>
    wav_bits_per_channel=(data[1]<<8)|(data[0]);
 8002342:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002346:	f89d 9010 	ldrb.w	r9, [sp, #16]
 800234a:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    //get wav data size
    f_lseek(&myFile, WAV_SIZE);
 800234e:	2128      	movs	r1, #40	; 0x28
 8002350:	a806      	add	r0, sp, #24
 8002352:	f001 ff1b 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8002356:	ab05      	add	r3, sp, #20
 8002358:	2204      	movs	r2, #4
 800235a:	a904      	add	r1, sp, #16
 800235c:	a806      	add	r0, sp, #24
 800235e:	f001 fdd2 	bl	8003f06 <f_read>
    wav_size=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 8002362:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002366:	f89d 4012 	ldrb.w	r4, [sp, #18]
 800236a:	0424      	lsls	r4, r4, #16
 800236c:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8002370:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002374:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002378:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800237c:	431c      	orrs	r4, r3
 800237e:	17e5      	asrs	r5, r4, #31
    
    if(wav_format==PCM_FRMT)
 8002380:	2e01      	cmp	r6, #1
 8002382:	d015      	beq.n	80023b0 <FT800_loadWAVfromSD+0x110>
    {
        if(wav_bits_per_channel==8)wav_format=PCM;
        else wav_format=UNDEFINED;
    }
    else if(wav_format==ULAW_FRMT)wav_format=ULAW;
 8002384:	2e07      	cmp	r6, #7
 8002386:	d01a      	beq.n	80023be <FT800_loadWAVfromSD+0x11e>
    else if(wav_format==ADPCM_FRMT)wav_format=ADPCM;
 8002388:	2e11      	cmp	r6, #17
 800238a:	d01a      	beq.n	80023c2 <FT800_loadWAVfromSD+0x122>
    else wav_format=UNDEFINED;
 800238c:	2603      	movs	r6, #3
    
    if(wav_format<=UNDEFINED)
    {
        if(wav_size>RAM_G_SIZE)wav_size=RAM_G_SIZE;
 800238e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002392:	2300      	movs	r3, #0
 8002394:	42ab      	cmp	r3, r5
 8002396:	bf08      	it	eq
 8002398:	42a2      	cmpeq	r2, r4
 800239a:	d200      	bcs.n	800239e <FT800_loadWAVfromSD+0xfe>
 800239c:	4614      	mov	r4, r2
        s=wav_size;
 800239e:	9401      	str	r4, [sp, #4]

        offset=ram_offset;
        f_lseek(&myFile, WAV_DATA);
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	a806      	add	r0, sp, #24
 80023a4:	f001 fef2 	bl	800418c <f_lseek>
 80023a8:	463b      	mov	r3, r7
 80023aa:	4627      	mov	r7, r4
 80023ac:	469b      	mov	fp, r3
        while(s)
 80023ae:	e022      	b.n	80023f6 <FT800_loadWAVfromSD+0x156>
        if(wav_bits_per_channel==8)wav_format=PCM;
 80023b0:	f1b9 0f08 	cmp.w	r9, #8
 80023b4:	d001      	beq.n	80023ba <FT800_loadWAVfromSD+0x11a>
        else wav_format=UNDEFINED;
 80023b6:	2603      	movs	r6, #3
 80023b8:	e7e9      	b.n	800238e <FT800_loadWAVfromSD+0xee>
        if(wav_bits_per_channel==8)wav_format=PCM;
 80023ba:	2600      	movs	r6, #0
 80023bc:	e7e7      	b.n	800238e <FT800_loadWAVfromSD+0xee>
    else if(wav_format==ULAW_FRMT)wav_format=ULAW;
 80023be:	2601      	movs	r6, #1
 80023c0:	e7e5      	b.n	800238e <FT800_loadWAVfromSD+0xee>
    else if(wav_format==ADPCM_FRMT)wav_format=ADPCM;
 80023c2:	2602      	movs	r6, #2
 80023c4:	e7e3      	b.n	800238e <FT800_loadWAVfromSD+0xee>
        {
            if(s>BUFF_SIZE)bytes=BUFF_SIZE;
            else bytes=s;
 80023c6:	463d      	mov	r5, r7
 80023c8:	e01b      	b.n	8002402 <FT800_loadWAVfromSD+0x162>
            FT800_CS_LO();                      // CS low 
            FT800_WriteAddress(RAM_G+offset,WRITE);// Send the address                                  
            for(i=0;i<bytes;i++)
            {
                if(wav_format==PCM)FT800_WriteSPI((int8_t)buff[i]-128);
                else FT800_WriteSPI(buff[i]);
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <FT800_loadWAVfromSD+0x1c4>)
 80023cc:	5d18      	ldrb	r0, [r3, r4]
 80023ce:	f7ff ff5d 	bl	800228c <FT800_WriteSPI>
            for(i=0;i<bytes;i++)
 80023d2:	3401      	adds	r4, #1
 80023d4:	42a5      	cmp	r5, r4
 80023d6:	d908      	bls.n	80023ea <FT800_loadWAVfromSD+0x14a>
                if(wav_format==PCM)FT800_WriteSPI((int8_t)buff[i]-128);
 80023d8:	2e00      	cmp	r6, #0
 80023da:	d1f6      	bne.n	80023ca <FT800_loadWAVfromSD+0x12a>
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <FT800_loadWAVfromSD+0x1c4>)
 80023de:	5d18      	ldrb	r0, [r3, r4]
 80023e0:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 80023e4:	f7ff ff52 	bl	800228c <FT800_WriteSPI>
 80023e8:	e7f3      	b.n	80023d2 <FT800_loadWAVfromSD+0x132>
            }
            FT800_CS_HI();    
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <FT800_loadWAVfromSD+0x1c8>)
 80023ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f0:	619a      	str	r2, [r3, #24]
            offset+=bytes;
 80023f2:	44ab      	add	fp, r5
            s=s-bytes;
 80023f4:	1b7f      	subs	r7, r7, r5
        while(s)
 80023f6:	b1a7      	cbz	r7, 8002422 <FT800_loadWAVfromSD+0x182>
            if(s>BUFF_SIZE)bytes=BUFF_SIZE;
 80023f8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 80023fc:	d9e3      	bls.n	80023c6 <FT800_loadWAVfromSD+0x126>
 80023fe:	f44f 6500 	mov.w	r5, #2048	; 0x800
            f_read(&myFile, &buff, bytes, &byteCount);
 8002402:	ab05      	add	r3, sp, #20
 8002404:	462a      	mov	r2, r5
 8002406:	4917      	ldr	r1, [pc, #92]	; (8002464 <FT800_loadWAVfromSD+0x1c4>)
 8002408:	a806      	add	r0, sp, #24
 800240a:	f001 fd7c 	bl	8003f06 <f_read>
            FT800_CS_LO();                      // CS low 
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <FT800_loadWAVfromSD+0x1c8>)
 8002410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002414:	619a      	str	r2, [r3, #24]
            FT800_WriteAddress(RAM_G+offset,WRITE);// Send the address                                  
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	4658      	mov	r0, fp
 800241a:	f7fe fe2b 	bl	8001074 <FT800_WriteAddress>
            for(i=0;i<bytes;i++)
 800241e:	2400      	movs	r4, #0
 8002420:	e7d8      	b.n	80023d4 <FT800_loadWAVfromSD+0x134>
        }
        *frmt=wav_format;
 8002422:	9b02      	ldr	r3, [sp, #8]
 8002424:	801e      	strh	r6, [r3, #0]
        *chn=wav_channels;
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	f8a3 a000 	strh.w	sl, [r3]
        *sample=wav_sample_rate;
 800242c:	f50d 5383 	add.w	r3, sp, #4192	; 0x1060
 8002430:	3310      	adds	r3, #16
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c3 8000 	str.w	r8, [r3]
        *bpc=wav_bits_per_channel;
 8002438:	f50d 5383 	add.w	r3, sp, #4192	; 0x1060
 800243c:	3314      	adds	r3, #20
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8a3 9000 	strh.w	r9, [r3]
        *size=wav_size;
 8002444:	f50d 5383 	add.w	r3, sp, #4192	; 0x1060
 8002448:	3318      	adds	r3, #24
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	9a01      	ldr	r2, [sp, #4]
 800244e:	601a      	str	r2, [r3, #0]
        *sample=0;
        *bpc=0;
        *size=0;        
    }
    //close file
    f_close(&myFile);
 8002450:	a806      	add	r0, sp, #24
 8002452:	f001 fe81 	bl	8004158 <f_close>


    if(wav_format<=UNDEFINED) return 1; 
    else return 0;
}
 8002456:	2001      	movs	r0, #1
 8002458:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 800245c:	b003      	add	sp, #12
 800245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002462:	bf00      	nop
 8002464:	200013ac 	.word	0x200013ac
 8002468:	40020400 	.word	0x40020400

0800246c <FT800_loadBMPfromSD>:
uint8_t FT800_loadBMPfromSD(uint32_t ram_offset, TCHAR *file_path, uint16_t *width, uint16_t *height, uint8_t *bpc)
{
 800246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002470:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8002474:	b081      	sub	sp, #4
 8002476:	4604      	mov	r4, r0
 8002478:	9200      	str	r2, [sp, #0]
 800247a:	9301      	str	r3, [sp, #4]
    uint8_t  data[4];
    uint32_t y, x, bmp_offset=0, img_width, img_height, img_bpp, offset=0;
    uint8_t bytes;
    
    //open
    f_open(&myFile, file_path, FA_READ);
 800247c:	2201      	movs	r2, #1
 800247e:	a804      	add	r0, sp, #16
 8002480:	f001 fc26 	bl	8003cd0 <f_open>
    //offset
    f_lseek(&myFile, BMP_DIB); 
 8002484:	210e      	movs	r1, #14
 8002486:	a804      	add	r0, sp, #16
 8002488:	f001 fe80 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 800248c:	ab03      	add	r3, sp, #12
 800248e:	2204      	movs	r2, #4
 8002490:	a902      	add	r1, sp, #8
 8002492:	a804      	add	r0, sp, #16
 8002494:	f001 fd37 	bl	8003f06 <f_read>
    bmp_offset=((data[3]<<24)|(data[2]<<16) |(data[1]<<8)|(data[0]))+BMP_DIB;
 8002498:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800249c:	f89d 800a 	ldrb.w	r8, [sp, #10]
 80024a0:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80024a4:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80024a8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80024ac:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 80024b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80024b4:	ea48 0803 	orr.w	r8, r8, r3
 80024b8:	f108 080e 	add.w	r8, r8, #14
    //get image width
    f_lseek(&myFile, BMP_WIDTH);
 80024bc:	2112      	movs	r1, #18
 80024be:	a804      	add	r0, sp, #16
 80024c0:	f001 fe64 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 80024c4:	ab03      	add	r3, sp, #12
 80024c6:	2204      	movs	r2, #4
 80024c8:	a902      	add	r1, sp, #8
 80024ca:	a804      	add	r0, sp, #16
 80024cc:	f001 fd1b 	bl	8003f06 <f_read>
    img_width=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 80024d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80024d4:	f89d 700a 	ldrb.w	r7, [sp, #10]
 80024d8:	043f      	lsls	r7, r7, #16
 80024da:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 80024de:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80024e2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 80024e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80024ea:	431f      	orrs	r7, r3
    //get image height
    f_lseek(&myFile, BMP_HEIGHT);
 80024ec:	2116      	movs	r1, #22
 80024ee:	a804      	add	r0, sp, #16
 80024f0:	f001 fe4c 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 80024f4:	ab03      	add	r3, sp, #12
 80024f6:	2204      	movs	r2, #4
 80024f8:	a902      	add	r1, sp, #8
 80024fa:	a804      	add	r0, sp, #16
 80024fc:	f001 fd03 	bl	8003f06 <f_read>
    img_height=(data[3]<<24)|(data[2]<<16)|(data[1]<<8)|(data[0]);
 8002500:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002504:	f89d 600a 	ldrb.w	r6, [sp, #10]
 8002508:	0436      	lsls	r6, r6, #16
 800250a:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 800250e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002512:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8002516:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800251a:	431e      	orrs	r6, r3
    //get image Bits Per Pixel
    f_lseek(&myFile, BMP_BPP);
 800251c:	211c      	movs	r1, #28
 800251e:	a804      	add	r0, sp, #16
 8002520:	f001 fe34 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 8002524:	ab03      	add	r3, sp, #12
 8002526:	2204      	movs	r2, #4
 8002528:	a902      	add	r1, sp, #8
 800252a:	a804      	add	r0, sp, #16
 800252c:	f001 fceb 	bl	8003f06 <f_read>
    img_bpp=(data[1]<<8)|(data[0]);
 8002530:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002534:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8002538:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    //go to image data
    f_lseek(&myFile, bmp_offset); 
 800253c:	4641      	mov	r1, r8
 800253e:	a804      	add	r0, sp, #16
 8002540:	f001 fe24 	bl	800418c <f_lseek>
    
    //get bytes per color
    bytes=img_bpp>>3;
 8002544:	08ed      	lsrs	r5, r5, #3
 8002546:	fa5f fa85 	uxtb.w	sl, r5

    if(bytes==2) //only RGB565 is supported 2 bytes per pixel
 800254a:	f1ba 0f02 	cmp.w	sl, #2
 800254e:	d015      	beq.n	800257c <FT800_loadBMPfromSD+0x110>
        *height=img_height;
        *bpc=bytes;
    }
    else
    {
        *width=0;
 8002550:	2300      	movs	r3, #0
 8002552:	9a00      	ldr	r2, [sp, #0]
 8002554:	8013      	strh	r3, [r2, #0]
        *height=0;
 8002556:	9a01      	ldr	r2, [sp, #4]
 8002558:	8013      	strh	r3, [r2, #0]
        *bpc=0;        
 800255a:	f50d 5283 	add.w	r2, sp, #4192	; 0x1060
 800255e:	3208      	adds	r2, #8
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	7013      	strb	r3, [r2, #0]
    }
    //close
    f_close(&myFile);
 8002564:	a804      	add	r0, sp, #16
 8002566:	f001 fdf7 	bl	8004158 <f_close>
    
    if(bytes==2)return 1;
 800256a:	f1ba 0f02 	cmp.w	sl, #2
 800256e:	d03c      	beq.n	80025ea <FT800_loadBMPfromSD+0x17e>
    else return 0;
 8002570:	2000      	movs	r0, #0
    
}
 8002572:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 8002576:	b001      	add	sp, #4
 8002578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257c:	46b3      	mov	fp, r6
        offset=(img_width*bytes)*(img_height-1)+ram_offset;
 800257e:	4655      	mov	r5, sl
 8002580:	fb07 f505 	mul.w	r5, r7, r5
 8002584:	f106 38ff 	add.w	r8, r6, #4294967295
 8002588:	fb08 4805 	mla	r8, r8, r5, r4
        for(y=0;y<img_height;y++)
 800258c:	f04f 0900 	mov.w	r9, #0
 8002590:	e00e      	b.n	80025b0 <FT800_loadBMPfromSD+0x144>
            for(x=0;x<(img_width*bytes);x++)FT800_WriteSPI(buff[x]);
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <FT800_loadBMPfromSD+0x184>)
 8002594:	5d18      	ldrb	r0, [r3, r4]
 8002596:	f7ff fe79 	bl	800228c <FT800_WriteSPI>
 800259a:	3401      	adds	r4, #1
 800259c:	42a5      	cmp	r5, r4
 800259e:	d8f8      	bhi.n	8002592 <FT800_loadBMPfromSD+0x126>
            FT800_CS_HI();    
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <FT800_loadBMPfromSD+0x188>)
 80025a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025a6:	619a      	str	r2, [r3, #24]
            offset-=((img_width)*bytes);
 80025a8:	eba8 0805 	sub.w	r8, r8, r5
        for(y=0;y<img_height;y++)
 80025ac:	f109 0901 	add.w	r9, r9, #1
 80025b0:	45d9      	cmp	r9, fp
 80025b2:	d20f      	bcs.n	80025d4 <FT800_loadBMPfromSD+0x168>
            f_read(&myFile, &buff, img_width*bytes, &byteCount);
 80025b4:	ab03      	add	r3, sp, #12
 80025b6:	462a      	mov	r2, r5
 80025b8:	490d      	ldr	r1, [pc, #52]	; (80025f0 <FT800_loadBMPfromSD+0x184>)
 80025ba:	a804      	add	r0, sp, #16
 80025bc:	f001 fca3 	bl	8003f06 <f_read>
            FT800_CS_LO();                      // CS low 
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <FT800_loadBMPfromSD+0x188>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c6:	619a      	str	r2, [r3, #24]
            FT800_WriteAddress(RAM_G+offset,WRITE);// Send the address                                  
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	4640      	mov	r0, r8
 80025cc:	f7fe fd52 	bl	8001074 <FT800_WriteAddress>
            for(x=0;x<(img_width*bytes);x++)FT800_WriteSPI(buff[x]);
 80025d0:	2400      	movs	r4, #0
 80025d2:	e7e3      	b.n	800259c <FT800_loadBMPfromSD+0x130>
        *width=img_width;
 80025d4:	9b00      	ldr	r3, [sp, #0]
 80025d6:	801f      	strh	r7, [r3, #0]
        *height=img_height;
 80025d8:	9b01      	ldr	r3, [sp, #4]
 80025da:	801e      	strh	r6, [r3, #0]
        *bpc=bytes;
 80025dc:	f50d 5383 	add.w	r3, sp, #4192	; 0x1060
 80025e0:	3308      	adds	r3, #8
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f883 a000 	strb.w	sl, [r3]
 80025e8:	e7bc      	b.n	8002564 <FT800_loadBMPfromSD+0xf8>
    if(bytes==2)return 1;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e7c1      	b.n	8002572 <FT800_loadBMPfromSD+0x106>
 80025ee:	bf00      	nop
 80025f0:	200013ac 	.word	0x200013ac
 80025f4:	40020400 	.word	0x40020400

080025f8 <FT800_loadJPGfromSD>:


uint8_t FT800_loadJPGfromSD(uint32_t ram_offset, TCHAR *file_path, uint16_t *width, uint16_t *height)
{
 80025f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025fc:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8002600:	b081      	sub	sp, #4
 8002602:	4607      	mov	r7, r0
 8002604:	4690      	mov	r8, r2
 8002606:	4699      	mov	r9, r3
    uint32_t bytes, size=0;
    uint16_t len, marker=0, i;
    //uint16_t soi,app0,length;

    //open
    f_open(&myFile, file_path, FA_READ);
 8002608:	2201      	movs	r2, #1
 800260a:	a804      	add	r0, sp, #16
 800260c:	f001 fb60 	bl	8003cd0 <f_open>
    //offset
    f_lseek(&myFile, JPG_SOI); 
 8002610:	2100      	movs	r1, #0
 8002612:	a804      	add	r0, sp, #16
 8002614:	f001 fdba 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 8002618:	ab03      	add	r3, sp, #12
 800261a:	2202      	movs	r2, #2
 800261c:	a901      	add	r1, sp, #4
 800261e:	a804      	add	r0, sp, #16
 8002620:	f001 fc71 	bl	8003f06 <f_read>
    //soi=(data[0]<<8)|(data[1]);
    //get image width
    f_lseek(&myFile, JPG_APP0);
 8002624:	2102      	movs	r1, #2
 8002626:	a804      	add	r0, sp, #16
 8002628:	f001 fdb0 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 800262c:	ab03      	add	r3, sp, #12
 800262e:	2202      	movs	r2, #2
 8002630:	a901      	add	r1, sp, #4
 8002632:	a804      	add	r0, sp, #16
 8002634:	f001 fc67 	bl	8003f06 <f_read>
    //app0=(data[0]<<8)|(data[1]);
    //get image height
    f_lseek(&myFile, JPG_LEN);
 8002638:	2104      	movs	r1, #4
 800263a:	a804      	add	r0, sp, #16
 800263c:	f001 fda6 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 2, &byteCount);
 8002640:	ab03      	add	r3, sp, #12
 8002642:	2202      	movs	r2, #2
 8002644:	a901      	add	r1, sp, #4
 8002646:	a804      	add	r0, sp, #16
 8002648:	f001 fc5d 	bl	8003f06 <f_read>
    len=(data[0]<<8)|(data[1]);
 800264c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002650:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002654:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
    uint16_t len, marker=0, i;
 8002658:	2300      	movs	r3, #0
    uint32_t bytes, size=0;
 800265a:	461c      	mov	r4, r3


    //go to image data

      while(1) {
        if(marker == 0xFFC0) break;
 800265c:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8002660:	4293      	cmp	r3, r2
 8002662:	d017      	beq.n	8002694 <FT800_loadJPGfromSD+0x9c>
        if(marker == 0xFF00) break;
 8002664:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8002668:	d014      	beq.n	8002694 <FT800_loadJPGfromSD+0x9c>
        if (f_lseek(&myFile, len+2+size) != 0) break;
 800266a:	1931      	adds	r1, r6, r4
 800266c:	3102      	adds	r1, #2
 800266e:	a804      	add	r0, sp, #16
 8002670:	f001 fd8c 	bl	800418c <f_lseek>
 8002674:	b970      	cbnz	r0, 8002694 <FT800_loadJPGfromSD+0x9c>
        f_read(&myFile, &data, 4, &byteCount);
 8002676:	ab03      	add	r3, sp, #12
 8002678:	2204      	movs	r2, #4
 800267a:	eb0d 0102 	add.w	r1, sp, r2
 800267e:	a804      	add	r0, sp, #16
 8002680:	f001 fc41 	bl	8003f06 <f_read>
        marker = data[0] << 8 | data[1];
 8002684:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002688:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800268c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
       //length = data[2] << 8 | data[3];
        size+=4;
 8002690:	3404      	adds	r4, #4
        if(marker == 0xFFC0) break;
 8002692:	e7e3      	b.n	800265c <FT800_loadJPGfromSD+0x64>
    }
    f_lseek(&myFile, len+2+size+1);
 8002694:	1931      	adds	r1, r6, r4
 8002696:	3103      	adds	r1, #3
 8002698:	a804      	add	r0, sp, #16
 800269a:	f001 fd77 	bl	800418c <f_lseek>
    f_read(&myFile, &data, 4, &byteCount);
 800269e:	ab03      	add	r3, sp, #12
 80026a0:	2204      	movs	r2, #4
 80026a2:	eb0d 0102 	add.w	r1, sp, r2
 80026a6:	a804      	add	r0, sp, #16
 80026a8:	f001 fc2d 	bl	8003f06 <f_read>
    *height=(data[0]<< 8)|data[1];
 80026ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80026b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80026b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026b8:	f8a9 3000 	strh.w	r3, [r9]
    *width=(data[2]<< 8)|data[3];
 80026bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80026c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80026c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026c8:	f8a8 3000 	strh.w	r3, [r8]

   
    f_lseek(&myFile, 0); 
 80026cc:	2100      	movs	r1, #0
 80026ce:	a804      	add	r0, sp, #16
 80026d0:	f001 fd5c 	bl	800418c <f_lseek>
    FT800_finishList();
 80026d4:	f7fe fec2 	bl	800145c <FT800_finishList>

    FT800_loadJpgCMD(ram_offset,OPT_NODL);
 80026d8:	2102      	movs	r1, #2
 80026da:	4638      	mov	r0, r7
 80026dc:	f7ff fda2 	bl	8002224 <FT800_loadJpgCMD>
    uint8_t  data[8], read=1;
 80026e0:	2601      	movs	r6, #1
    while(read)
 80026e2:	e018      	b.n	8002716 <FT800_loadJPGfromSD+0x11e>
        bytes=byteCount;
        read=0;
      }
      else bytes=2048;
      while(FT800_getFreeSpace()<bytes)
      set_CMD_Offset(FT800_Read16(REG_CMD_WRITE));
 80026e4:	481a      	ldr	r0, [pc, #104]	; (8002750 <FT800_loadJPGfromSD+0x158>)
 80026e6:	f7fe fd5f 	bl	80011a8 <FT800_Read16>
 80026ea:	f7fe fcb7 	bl	800105c <set_CMD_Offset>
      while(FT800_getFreeSpace()<bytes)
 80026ee:	f7fe fed3 	bl	8001498 <FT800_getFreeSpace>
 80026f2:	42a8      	cmp	r0, r5
 80026f4:	d3f6      	bcc.n	80026e4 <FT800_loadJPGfromSD+0xec>
      for(i=0;i<bytes;i++) FT800_Write8(RAM_CMD,buff[i]);    
 80026f6:	2400      	movs	r4, #0
 80026f8:	e009      	b.n	800270e <FT800_loadJPGfromSD+0x116>
        read=0;
 80026fa:	2600      	movs	r6, #0
 80026fc:	e7f7      	b.n	80026ee <FT800_loadJPGfromSD+0xf6>
      for(i=0;i<bytes;i++) FT800_Write8(RAM_CMD,buff[i]);    
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <FT800_loadJPGfromSD+0x15c>)
 8002700:	5d19      	ldrb	r1, [r3, r4]
 8002702:	f44f 1084 	mov.w	r0, #1081344	; 0x108000
 8002706:	f7fe fccf 	bl	80010a8 <FT800_Write8>
 800270a:	3401      	adds	r4, #1
 800270c:	b2a4      	uxth	r4, r4
 800270e:	42ac      	cmp	r4, r5
 8002710:	d3f5      	bcc.n	80026fe <FT800_loadJPGfromSD+0x106>
      FT800_executeCommands();
 8002712:	f7fe feb7 	bl	8001484 <FT800_executeCommands>
    while(read)
 8002716:	b16e      	cbz	r6, 8002734 <FT800_loadJPGfromSD+0x13c>
      f_read(&myFile, &buff, 2048, &byteCount);
 8002718:	ab03      	add	r3, sp, #12
 800271a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800271e:	490d      	ldr	r1, [pc, #52]	; (8002754 <FT800_loadJPGfromSD+0x15c>)
 8002720:	a804      	add	r0, sp, #16
 8002722:	f001 fbf0 	bl	8003f06 <f_read>
      if(byteCount<2048)
 8002726:	9d03      	ldr	r5, [sp, #12]
 8002728:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800272c:	d3e5      	bcc.n	80026fa <FT800_loadJPGfromSD+0x102>
      else bytes=2048;
 800272e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002732:	e7dc      	b.n	80026ee <FT800_loadJPGfromSD+0xf6>
   }
       
   FT800_align(bytes);
 8002734:	b2e8      	uxtb	r0, r5
 8002736:	f7fe ff31 	bl	800159c <FT800_align>
   FT800_endOfList(); 
 800273a:	f7fe fe79 	bl	8001430 <FT800_endOfList>
       
   f_close(&myFile);
 800273e:	a804      	add	r0, sp, #16
 8002740:	f001 fd0a 	bl	8004158 <f_close>
   
   return 1;
}
 8002744:	2001      	movs	r0, #1
 8002746:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 800274a:	b001      	add	sp, #4
 800274c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002750:	001024e8 	.word	0x001024e8
 8002754:	200013ac 	.word	0x200013ac

08002758 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002758:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <disk_status+0x14>)
 800275c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002760:	6852      	ldr	r2, [r2, #4]
 8002762:	6852      	ldr	r2, [r2, #4]
 8002764:	4403      	add	r3, r0
 8002766:	7a18      	ldrb	r0, [r3, #8]
 8002768:	4790      	blx	r2
  return stat;
}
 800276a:	bd08      	pop	{r3, pc}
 800276c:	20000328 	.word	0x20000328

08002770 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002770:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <disk_initialize+0x24>)
 8002774:	5c1b      	ldrb	r3, [r3, r0]
 8002776:	b953      	cbnz	r3, 800278e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <disk_initialize+0x24>)
 800277a:	2201      	movs	r2, #1
 800277c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800277e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002782:	6852      	ldr	r2, [r2, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	4418      	add	r0, r3
 8002788:	7a00      	ldrb	r0, [r0, #8]
 800278a:	4790      	blx	r2
  }
  return stat;
}
 800278c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800278e:	2000      	movs	r0, #0
 8002790:	e7fc      	b.n	800278c <disk_initialize+0x1c>
 8002792:	bf00      	nop
 8002794:	20000328 	.word	0x20000328

08002798 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002798:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800279a:	4c04      	ldr	r4, [pc, #16]	; (80027ac <disk_read+0x14>)
 800279c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80027a0:	686d      	ldr	r5, [r5, #4]
 80027a2:	68ad      	ldr	r5, [r5, #8]
 80027a4:	4404      	add	r4, r0
 80027a6:	7a20      	ldrb	r0, [r4, #8]
 80027a8:	47a8      	blx	r5
  return res;
}
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
 80027ac:	20000328 	.word	0x20000328

080027b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80027b0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80027b2:	4c04      	ldr	r4, [pc, #16]	; (80027c4 <disk_write+0x14>)
 80027b4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80027b8:	686d      	ldr	r5, [r5, #4]
 80027ba:	68ed      	ldr	r5, [r5, #12]
 80027bc:	4404      	add	r4, r0
 80027be:	7a20      	ldrb	r0, [r4, #8]
 80027c0:	47a8      	blx	r5
  return res;
}
 80027c2:	bd38      	pop	{r3, r4, r5, pc}
 80027c4:	20000328 	.word	0x20000328

080027c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80027c8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <disk_ioctl+0x14>)
 80027cc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80027d0:	6864      	ldr	r4, [r4, #4]
 80027d2:	6924      	ldr	r4, [r4, #16]
 80027d4:	4403      	add	r3, r0
 80027d6:	7a18      	ldrb	r0, [r3, #8]
 80027d8:	47a0      	blx	r4
  return res;
}
 80027da:	bd10      	pop	{r4, pc}
 80027dc:	20000328 	.word	0x20000328

080027e0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80027e0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80027e2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80027e4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80027e8:	4770      	bx	lr

080027ea <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80027ea:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80027ec:	7883      	ldrb	r3, [r0, #2]
 80027ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80027f2:	7843      	ldrb	r3, [r0, #1]
 80027f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80027f8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80027fa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80027fe:	4770      	bx	lr

08002800 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002800:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8002802:	0a09      	lsrs	r1, r1, #8
 8002804:	7041      	strb	r1, [r0, #1]
}
 8002806:	4770      	bx	lr

08002808 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002808:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800280a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800280e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8002810:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8002814:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002816:	0e09      	lsrs	r1, r1, #24
 8002818:	70c1      	strb	r1, [r0, #3]
}
 800281a:	4770      	bx	lr

0800281c <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800281c:	4613      	mov	r3, r2
 800281e:	b12a      	cbz	r2, 800282c <mem_cpy+0x10>
		do {
			*d++ = *s++;
 8002820:	780a      	ldrb	r2, [r1, #0]
 8002822:	7002      	strb	r2, [r0, #0]
 8002824:	3001      	adds	r0, #1
 8002826:	3101      	adds	r1, #1
		} while (--cnt);
 8002828:	3b01      	subs	r3, #1
 800282a:	d1f9      	bne.n	8002820 <mem_cpy+0x4>
	}
}
 800282c:	4770      	bx	lr

0800282e <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800282e:	7001      	strb	r1, [r0, #0]
 8002830:	3001      	adds	r0, #1
	} while (--cnt);
 8002832:	3a01      	subs	r2, #1
 8002834:	d1fb      	bne.n	800282e <mem_set>
}
 8002836:	4770      	bx	lr

08002838 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002838:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800283a:	1c45      	adds	r5, r0, #1
 800283c:	7803      	ldrb	r3, [r0, #0]
 800283e:	7808      	ldrb	r0, [r1, #0]
 8002840:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 8002842:	3a01      	subs	r2, #1
 8002844:	d004      	beq.n	8002850 <mem_cmp+0x18>
 8002846:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8002848:	4628      	mov	r0, r5
 800284a:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f4      	beq.n	800283a <mem_cmp+0x2>

	return r;
}
 8002850:	4618      	mov	r0, r3
 8002852:	bc30      	pop	{r4, r5}
 8002854:	4770      	bx	lr

08002856 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 8002856:	e000      	b.n	800285a <chk_chr+0x4>
 8002858:	3001      	adds	r0, #1
 800285a:	7803      	ldrb	r3, [r0, #0]
 800285c:	b10b      	cbz	r3, 8002862 <chk_chr+0xc>
 800285e:	428b      	cmp	r3, r1
 8002860:	d1fa      	bne.n	8002858 <chk_chr+0x2>
	return *str;
}
 8002862:	4618      	mov	r0, r3
 8002864:	4770      	bx	lr
	...

08002868 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002868:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800286a:	2500      	movs	r5, #0
 800286c:	462b      	mov	r3, r5
 800286e:	e001      	b.n	8002874 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8002870:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002872:	3301      	adds	r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d815      	bhi.n	80028a4 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8002878:	011a      	lsls	r2, r3, #4
 800287a:	4c17      	ldr	r4, [pc, #92]	; (80028d8 <chk_lock+0x70>)
 800287c:	58a2      	ldr	r2, [r4, r2]
 800287e:	2a00      	cmp	r2, #0
 8002880:	d0f6      	beq.n	8002870 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002882:	6804      	ldr	r4, [r0, #0]
 8002884:	42a2      	cmp	r2, r4
 8002886:	d1f4      	bne.n	8002872 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <chk_lock+0x70>)
 800288a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800288e:	6854      	ldr	r4, [r2, #4]
 8002890:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002892:	4294      	cmp	r4, r2
 8002894:	d1ed      	bne.n	8002872 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <chk_lock+0x70>)
 8002898:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800289c:	6894      	ldr	r4, [r2, #8]
 800289e:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 80028a0:	4294      	cmp	r4, r2
 80028a2:	d1e6      	bne.n	8002872 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d00a      	beq.n	80028be <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80028a8:	b9a1      	cbnz	r1, 80028d4 <chk_lock+0x6c>
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <chk_lock+0x70>)
 80028ac:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80028b0:	899b      	ldrh	r3, [r3, #12]
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b6:	d007      	beq.n	80028c8 <chk_lock+0x60>
 80028b8:	2000      	movs	r0, #0
}
 80028ba:	bc30      	pop	{r4, r5}
 80028bc:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80028be:	b92d      	cbnz	r5, 80028cc <chk_lock+0x64>
 80028c0:	2902      	cmp	r1, #2
 80028c2:	d105      	bne.n	80028d0 <chk_lock+0x68>
 80028c4:	2000      	movs	r0, #0
 80028c6:	e7f8      	b.n	80028ba <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80028c8:	2010      	movs	r0, #16
 80028ca:	e7f6      	b.n	80028ba <chk_lock+0x52>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80028cc:	2000      	movs	r0, #0
 80028ce:	e7f4      	b.n	80028ba <chk_lock+0x52>
 80028d0:	2012      	movs	r0, #18
 80028d2:	e7f2      	b.n	80028ba <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80028d4:	2010      	movs	r0, #16
 80028d6:	e7f0      	b.n	80028ba <chk_lock+0x52>
 80028d8:	20000100 	.word	0x20000100

080028dc <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80028dc:	2000      	movs	r0, #0
 80028de:	e000      	b.n	80028e2 <enq_lock+0x6>
 80028e0:	3001      	adds	r0, #1
 80028e2:	2801      	cmp	r0, #1
 80028e4:	d804      	bhi.n	80028f0 <enq_lock+0x14>
 80028e6:	0103      	lsls	r3, r0, #4
 80028e8:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <enq_lock+0x1c>)
 80028ea:	58d3      	ldr	r3, [r2, r3]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f7      	bne.n	80028e0 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80028f0:	3802      	subs	r0, #2
 80028f2:	bf18      	it	ne
 80028f4:	2001      	movne	r0, #1
 80028f6:	4770      	bx	lr
 80028f8:	20000100 	.word	0x20000100

080028fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80028fc:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <inc_lock+0x8>
 8002902:	3301      	adds	r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d813      	bhi.n	8002930 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8002908:	011a      	lsls	r2, r3, #4
 800290a:	4c24      	ldr	r4, [pc, #144]	; (800299c <inc_lock+0xa0>)
 800290c:	58a4      	ldr	r4, [r4, r2]
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	4294      	cmp	r4, r2
 8002912:	d1f6      	bne.n	8002902 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8002914:	4a21      	ldr	r2, [pc, #132]	; (800299c <inc_lock+0xa0>)
 8002916:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800291a:	6854      	ldr	r4, [r2, #4]
 800291c:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800291e:	4294      	cmp	r4, r2
 8002920:	d1ef      	bne.n	8002902 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <inc_lock+0xa0>)
 8002924:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002928:	6894      	ldr	r4, [r2, #8]
 800292a:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 800292c:	4294      	cmp	r4, r2
 800292e:	d1e8      	bne.n	8002902 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002930:	2b02      	cmp	r3, #2
 8002932:	d029      	beq.n	8002988 <inc_lock+0x8c>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002934:	b121      	cbz	r1, 8002940 <inc_lock+0x44>
 8002936:	4a19      	ldr	r2, [pc, #100]	; (800299c <inc_lock+0xa0>)
 8002938:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800293c:	8992      	ldrh	r2, [r2, #12]
 800293e:	bb52      	cbnz	r2, 8002996 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002940:	bb21      	cbnz	r1, 800298c <inc_lock+0x90>
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <inc_lock+0xa0>)
 8002944:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002948:	8991      	ldrh	r1, [r2, #12]
 800294a:	3101      	adds	r1, #1
 800294c:	b289      	uxth	r1, r1
 800294e:	4a13      	ldr	r2, [pc, #76]	; (800299c <inc_lock+0xa0>)
 8002950:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002954:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8002956:	1c58      	adds	r0, r3, #1
}
 8002958:	bc70      	pop	{r4, r5, r6}
 800295a:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800295c:	3301      	adds	r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d804      	bhi.n	800296c <inc_lock+0x70>
 8002962:	011a      	lsls	r2, r3, #4
 8002964:	4c0d      	ldr	r4, [pc, #52]	; (800299c <inc_lock+0xa0>)
 8002966:	58a2      	ldr	r2, [r4, r2]
 8002968:	2a00      	cmp	r2, #0
 800296a:	d1f7      	bne.n	800295c <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800296c:	2b02      	cmp	r3, #2
 800296e:	d010      	beq.n	8002992 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8002970:	6806      	ldr	r6, [r0, #0]
 8002972:	4d0a      	ldr	r5, [pc, #40]	; (800299c <inc_lock+0xa0>)
 8002974:	011c      	lsls	r4, r3, #4
 8002976:	192a      	adds	r2, r5, r4
 8002978:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800297a:	6884      	ldr	r4, [r0, #8]
 800297c:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800297e:	6940      	ldr	r0, [r0, #20]
 8002980:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8002982:	2000      	movs	r0, #0
 8002984:	8190      	strh	r0, [r2, #12]
 8002986:	e7d5      	b.n	8002934 <inc_lock+0x38>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002988:	2300      	movs	r3, #0
 800298a:	e7e8      	b.n	800295e <inc_lock+0x62>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800298c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002990:	e7dd      	b.n	800294e <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002992:	2000      	movs	r0, #0
 8002994:	e7e0      	b.n	8002958 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002996:	2000      	movs	r0, #0
 8002998:	e7de      	b.n	8002958 <inc_lock+0x5c>
 800299a:	bf00      	nop
 800299c:	20000100 	.word	0x20000100

080029a0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80029a0:	3801      	subs	r0, #1
 80029a2:	2801      	cmp	r0, #1
 80029a4:	d815      	bhi.n	80029d2 <dec_lock+0x32>
		n = Files[i].ctr;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <dec_lock+0x3c>)
 80029a8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80029ac:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80029ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b2:	d003      	beq.n	80029bc <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 80029b4:	b11b      	cbz	r3, 80029be <dec_lock+0x1e>
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	e000      	b.n	80029be <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80029bc:	2300      	movs	r3, #0
		Files[i].ctr = n;
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <dec_lock+0x3c>)
 80029c0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80029c4:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80029c6:	b933      	cbnz	r3, 80029d6 <dec_lock+0x36>
 80029c8:	0103      	lsls	r3, r0, #4
 80029ca:	2000      	movs	r0, #0
 80029cc:	4a03      	ldr	r2, [pc, #12]	; (80029dc <dec_lock+0x3c>)
 80029ce:	50d0      	str	r0, [r2, r3]
 80029d0:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80029d2:	2002      	movs	r0, #2
 80029d4:	4770      	bx	lr
		res = FR_OK;
 80029d6:	2000      	movs	r0, #0
	}
	return res;
}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000100 	.word	0x20000100

080029e0 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	e003      	b.n	80029ec <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80029e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029e8:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80029ea:	3301      	adds	r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d811      	bhi.n	8002a14 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80029f0:	011a      	lsls	r2, r3, #4
 80029f2:	4909      	ldr	r1, [pc, #36]	; (8002a18 <clear_lock+0x38>)
 80029f4:	588a      	ldr	r2, [r1, r2]
 80029f6:	4282      	cmp	r2, r0
 80029f8:	d1f7      	bne.n	80029ea <clear_lock+0xa>
{
 80029fa:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80029fc:	011a      	lsls	r2, r3, #4
 80029fe:	2400      	movs	r4, #0
 8002a00:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8002a02:	3301      	adds	r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d8ed      	bhi.n	80029e4 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a08:	011a      	lsls	r2, r3, #4
 8002a0a:	4903      	ldr	r1, [pc, #12]	; (8002a18 <clear_lock+0x38>)
 8002a0c:	588a      	ldr	r2, [r1, r2]
 8002a0e:	4282      	cmp	r2, r0
 8002a10:	d1f7      	bne.n	8002a02 <clear_lock+0x22>
 8002a12:	e7f3      	b.n	80029fc <clear_lock+0x1c>
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000100 	.word	0x20000100

08002a1c <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8002a1c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002a1e:	69c3      	ldr	r3, [r0, #28]
 8002a20:	3b02      	subs	r3, #2
 8002a22:	428b      	cmp	r3, r1
 8002a24:	d904      	bls.n	8002a30 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8002a26:	8943      	ldrh	r3, [r0, #10]
 8002a28:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002a2a:	fb01 0003 	mla	r0, r1, r3, r0
 8002a2e:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002a30:	2000      	movs	r0, #0
}
 8002a32:	4770      	bx	lr

08002a34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002a34:	b410      	push	{r4}
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002a36:	6804      	ldr	r4, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002a38:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002a3a:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	fbb1 f1f3 	udiv	r1, r1, r3
 8002a42:	8963      	ldrh	r3, [r4, #10]
 8002a44:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002a48:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002a4a:	b130      	cbz	r0, 8002a5a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8002a4c:	4281      	cmp	r1, r0
 8002a4e:	d302      	bcc.n	8002a56 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8002a50:	1a09      	subs	r1, r1, r0
 8002a52:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002a54:	e7f8      	b.n	8002a48 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002a56:	6850      	ldr	r0, [r2, #4]
 8002a58:	4408      	add	r0, r1
}
 8002a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4606      	mov	r6, r0
 8002a64:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002a66:	f101 001a 	add.w	r0, r1, #26
 8002a6a:	f7ff feb9 	bl	80027e0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8002a6e:	7833      	ldrb	r3, [r6, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d000      	beq.n	8002a76 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
 8002a76:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002a78:	f105 0014 	add.w	r0, r5, #20
 8002a7c:	f7ff feb0 	bl	80027e0 <ld_word>
 8002a80:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8002a84:	e7f6      	b.n	8002a74 <ld_clust+0x14>

08002a86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002a86:	b570      	push	{r4, r5, r6, lr}
 8002a88:	4606      	mov	r6, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002a8e:	b291      	uxth	r1, r2
 8002a90:	f104 001a 	add.w	r0, r4, #26
 8002a94:	f7ff feb4 	bl	8002800 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002a98:	7833      	ldrb	r3, [r6, #0]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d000      	beq.n	8002aa0 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002aa0:	0c29      	lsrs	r1, r5, #16
 8002aa2:	f104 0014 	add.w	r0, r4, #20
 8002aa6:	f7ff feab 	bl	8002800 <st_word>
}
 8002aaa:	e7f8      	b.n	8002a9e <st_clust+0x18>

08002aac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8002aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ab0:	4680      	mov	r8, r0
 8002ab2:	460f      	mov	r7, r1
 8002ab4:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8002ab6:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002ab8:	230f      	movs	r3, #15
 8002aba:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8002abc:	2400      	movs	r4, #0
 8002abe:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	f107 001a 	add.w	r0, r7, #26
 8002ac6:	f7ff fe9b 	bl	8002800 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8002aca:	f109 36ff 	add.w	r6, r9, #4294967295
 8002ace:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002ad2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8002ad6:	4625      	mov	r5, r4
 8002ad8:	e002      	b.n	8002ae0 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8002ada:	3401      	adds	r4, #1
 8002adc:	2c0c      	cmp	r4, #12
 8002ade:	d811      	bhi.n	8002b04 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8002ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae4:	429d      	cmp	r5, r3
 8002ae6:	d002      	beq.n	8002aee <put_lfn+0x42>
 8002ae8:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8002aec:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <put_lfn+0x74>)
 8002af0:	5d18      	ldrb	r0, [r3, r4]
 8002af2:	4629      	mov	r1, r5
 8002af4:	4438      	add	r0, r7
 8002af6:	f7ff fe83 	bl	8002800 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	d1ed      	bne.n	8002ada <put_lfn+0x2e>
 8002afe:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002b02:	e7ea      	b.n	8002ada <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8002b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b08:	429d      	cmp	r5, r3
 8002b0a:	d002      	beq.n	8002b12 <put_lfn+0x66>
 8002b0c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8002b10:	b90b      	cbnz	r3, 8002b16 <put_lfn+0x6a>
 8002b12:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002b16:	f887 9000 	strb.w	r9, [r7]
}
 8002b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b1e:	bf00      	nop
 8002b20:	08007228 	.word	0x08007228

08002b24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	4605      	mov	r5, r0
 8002b2a:	4616      	mov	r6, r2
 8002b2c:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002b2e:	220b      	movs	r2, #11
 8002b30:	f7ff fe74 	bl	800281c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002b34:	2c05      	cmp	r4, #5
 8002b36:	d811      	bhi.n	8002b5c <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8002b38:	2207      	movs	r2, #7
 8002b3a:	e01d      	b.n	8002b78 <gen_numname+0x54>
 8002b3c:	3201      	adds	r2, #1
 8002b3e:	2a0f      	cmp	r2, #15
 8002b40:	d80c      	bhi.n	8002b5c <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8002b42:	f003 0101 	and.w	r1, r3, #1
 8002b46:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 8002b4a:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8002b4c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8002b50:	d0f4      	beq.n	8002b3c <gen_numname+0x18>
 8002b52:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 8002b56:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 8002b5a:	e7ef      	b.n	8002b3c <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8002b5c:	8833      	ldrh	r3, [r6, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ea      	beq.n	8002b38 <gen_numname+0x14>
			wc = *lfn++;
 8002b62:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8002b64:	2200      	movs	r2, #0
 8002b66:	e7ea      	b.n	8002b3e <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8002b68:	1e53      	subs	r3, r2, #1
 8002b6a:	a802      	add	r0, sp, #8
 8002b6c:	4402      	add	r2, r0
 8002b6e:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 8002b72:	0924      	lsrs	r4, r4, #4
 8002b74:	d009      	beq.n	8002b8a <gen_numname+0x66>
		ns[i--] = c;
 8002b76:	461a      	mov	r2, r3
		c = (BYTE)((seq % 16) + '0');
 8002b78:	f004 030f 	and.w	r3, r4, #15
 8002b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8002b80:	2939      	cmp	r1, #57	; 0x39
 8002b82:	d9f1      	bls.n	8002b68 <gen_numname+0x44>
 8002b84:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8002b88:	e7ee      	b.n	8002b68 <gen_numname+0x44>
	ns[i] = '~';
 8002b8a:	217e      	movs	r1, #126	; 0x7e
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	441a      	add	r2, r3
 8002b90:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b94:	e000      	b.n	8002b98 <gen_numname+0x74>
 8002b96:	3401      	adds	r4, #1
 8002b98:	429c      	cmp	r4, r3
 8002b9a:	d209      	bcs.n	8002bb0 <gen_numname+0x8c>
 8002b9c:	5d2a      	ldrb	r2, [r5, r4]
 8002b9e:	2a20      	cmp	r2, #32
 8002ba0:	d1f9      	bne.n	8002b96 <gen_numname+0x72>
 8002ba2:	e005      	b.n	8002bb0 <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	1c62      	adds	r2, r4, #1
 8002ba8:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 8002baa:	2a07      	cmp	r2, #7
 8002bac:	d808      	bhi.n	8002bc0 <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002bae:	4614      	mov	r4, r2
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d8f7      	bhi.n	8002ba4 <gen_numname+0x80>
 8002bb4:	aa02      	add	r2, sp, #8
 8002bb6:	441a      	add	r2, r3
 8002bb8:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	e7f2      	b.n	8002ba6 <gen_numname+0x82>
}
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}

08002bc4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002bc4:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8002bc6:	220b      	movs	r2, #11
	BYTE sum = 0;
 8002bc8:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002bca:	01c3      	lsls	r3, r0, #7
 8002bcc:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8002bd0:	7808      	ldrb	r0, [r1, #0]
 8002bd2:	fa50 f383 	uxtab	r3, r0, r3
 8002bd6:	b2d8      	uxtb	r0, r3
 8002bd8:	3101      	adds	r1, #1
	} while (--n);
 8002bda:	3a01      	subs	r2, #1
 8002bdc:	d1f5      	bne.n	8002bca <sum_sfn+0x6>
	return sum;
}
 8002bde:	4770      	bx	lr

08002be0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002be0:	6801      	ldr	r1, [r0, #0]
 8002be2:	b109      	cbz	r1, 8002be8 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002be4:	460a      	mov	r2, r1
 8002be6:	e003      	b.n	8002bf0 <get_ldnumber+0x10>
	int vol = -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	e008      	b.n	8002c00 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002bee:	3201      	adds	r2, #1
 8002bf0:	7813      	ldrb	r3, [r2, #0]
 8002bf2:	2b1f      	cmp	r3, #31
 8002bf4:	d901      	bls.n	8002bfa <get_ldnumber+0x1a>
 8002bf6:	2b3a      	cmp	r3, #58	; 0x3a
 8002bf8:	d1f9      	bne.n	8002bee <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002bfa:	2b3a      	cmp	r3, #58	; 0x3a
 8002bfc:	d002      	beq.n	8002c04 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002bfe:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	4770      	bx	lr
{
 8002c04:	b410      	push	{r4}
			i = *tp++ - '0';
 8002c06:	1c4c      	adds	r4, r1, #1
 8002c08:	780b      	ldrb	r3, [r1, #0]
 8002c0a:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002c0c:	2b09      	cmp	r3, #9
 8002c0e:	d808      	bhi.n	8002c22 <get_ldnumber+0x42>
 8002c10:	42a2      	cmp	r2, r4
 8002c12:	d109      	bne.n	8002c28 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002c14:	b95b      	cbnz	r3, 8002c2e <get_ldnumber+0x4e>
					*path = ++tt;
 8002c16:	3201      	adds	r2, #1
 8002c18:	6002      	str	r2, [r0, #0]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c20:	4770      	bx	lr
	int vol = -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	e7f8      	b.n	8002c1a <get_ldnumber+0x3a>
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	e7f5      	b.n	8002c1a <get_ldnumber+0x3a>
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e7f2      	b.n	8002c1a <get_ldnumber+0x3a>

08002c34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8002c38:	b140      	cbz	r0, 8002c4c <validate+0x18>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	6803      	ldr	r3, [r0, #0]
 8002c3e:	b12b      	cbz	r3, 8002c4c <validate+0x18>
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	b11a      	cbz	r2, 8002c4c <validate+0x18>
 8002c44:	88d9      	ldrh	r1, [r3, #6]
 8002c46:	8882      	ldrh	r2, [r0, #4]
 8002c48:	4291      	cmp	r1, r2
 8002c4a:	d003      	beq.n	8002c54 <validate+0x20>
		*fs = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8002c50:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8002c52:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8002c54:	7858      	ldrb	r0, [r3, #1]
 8002c56:	f7ff fd7f 	bl	8002758 <disk_status>
 8002c5a:	f010 0f01 	tst.w	r0, #1
 8002c5e:	d1f5      	bne.n	8002c4c <validate+0x18>
		*fs = obj->fs;			/* Owner file sytem object */
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	602b      	str	r3, [r5, #0]
		res = FR_OK;			/* Valid object */
 8002c64:	2000      	movs	r0, #0
 8002c66:	e7f4      	b.n	8002c52 <validate+0x1e>

08002c68 <sync_window>:
{
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002c6a:	78c3      	ldrb	r3, [r0, #3]
 8002c6c:	b90b      	cbnz	r3, 8002c72 <sync_window+0xa>
	FRESULT res = FR_OK;
 8002c6e:	2000      	movs	r0, #0
}
 8002c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c72:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002c74:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002c76:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	462a      	mov	r2, r5
 8002c7e:	4639      	mov	r1, r7
 8002c80:	7840      	ldrb	r0, [r0, #1]
 8002c82:	f7ff fd95 	bl	80027b0 <disk_write>
 8002c86:	b9a8      	cbnz	r0, 8002cb4 <sync_window+0x4c>
			fs->wflag = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002c8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c8e:	1aeb      	subs	r3, r5, r3
 8002c90:	6a22      	ldr	r2, [r4, #32]
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d210      	bcs.n	8002cb8 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002c96:	78a6      	ldrb	r6, [r4, #2]
 8002c98:	2e01      	cmp	r6, #1
 8002c9a:	d909      	bls.n	8002cb0 <sync_window+0x48>
					wsect += fs->fsize;
 8002c9c:	6a23      	ldr	r3, [r4, #32]
 8002c9e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	462a      	mov	r2, r5
 8002ca4:	4639      	mov	r1, r7
 8002ca6:	7860      	ldrb	r0, [r4, #1]
 8002ca8:	f7ff fd82 	bl	80027b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002cac:	3e01      	subs	r6, #1
 8002cae:	e7f3      	b.n	8002c98 <sync_window+0x30>
	FRESULT res = FR_OK;
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	e7dd      	b.n	8002c70 <sync_window+0x8>
			res = FR_DISK_ERR;
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	e7db      	b.n	8002c70 <sync_window+0x8>
	FRESULT res = FR_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e7d9      	b.n	8002c70 <sync_window+0x8>

08002cbc <move_window>:
{
 8002cbc:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002cbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cc0:	428b      	cmp	r3, r1
 8002cc2:	d012      	beq.n	8002cea <move_window+0x2e>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8002cc8:	f7ff ffce 	bl	8002c68 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002ccc:	4606      	mov	r6, r0
 8002cce:	b968      	cbnz	r0, 8002cec <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8002cd8:	7860      	ldrb	r0, [r4, #1]
 8002cda:	f7ff fd5d 	bl	8002798 <disk_read>
 8002cde:	b110      	cbz	r0, 8002ce6 <move_window+0x2a>
				res = FR_DISK_ERR;
 8002ce0:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002ce2:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8002ce6:	6365      	str	r5, [r4, #52]	; 0x34
 8002ce8:	e000      	b.n	8002cec <move_window+0x30>
	FRESULT res = FR_OK;
 8002cea:	2600      	movs	r6, #0
}
 8002cec:	4630      	mov	r0, r6
 8002cee:	bd70      	pop	{r4, r5, r6, pc}

08002cf0 <check_fs>:
{
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	70c3      	strb	r3, [r0, #3]
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfc:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002cfe:	f7ff ffdd 	bl	8002cbc <move_window>
 8002d02:	bb18      	cbnz	r0, 8002d4c <check_fs+0x5c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002d04:	f204 2036 	addw	r0, r4, #566	; 0x236
 8002d08:	f7ff fd6a 	bl	80027e0 <ld_word>
 8002d0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002d10:	4298      	cmp	r0, r3
 8002d12:	d11d      	bne.n	8002d50 <check_fs+0x60>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002d14:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002d18:	2be9      	cmp	r3, #233	; 0xe9
 8002d1a:	d005      	beq.n	8002d28 <check_fs+0x38>
 8002d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002d22:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <check_fs+0x70>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d115      	bne.n	8002d54 <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002d28:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8002d2c:	f7ff fd5d 	bl	80027ea <ld_dword>
 8002d30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <check_fs+0x74>)
 8002d36:	4298      	cmp	r0, r3
 8002d38:	d00e      	beq.n	8002d58 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002d3a:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8002d3e:	f7ff fd54 	bl	80027ea <ld_dword>
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <check_fs+0x78>)
 8002d44:	4298      	cmp	r0, r3
 8002d46:	d109      	bne.n	8002d5c <check_fs+0x6c>
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e002      	b.n	8002d52 <check_fs+0x62>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002d4c:	2004      	movs	r0, #4
 8002d4e:	e000      	b.n	8002d52 <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002d50:	2003      	movs	r0, #3
}
 8002d52:	bd10      	pop	{r4, pc}
	return 2;
 8002d54:	2002      	movs	r0, #2
 8002d56:	e7fc      	b.n	8002d52 <check_fs+0x62>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e7fa      	b.n	8002d52 <check_fs+0x62>
	return 2;
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	e7f8      	b.n	8002d52 <check_fs+0x62>
 8002d60:	009000eb 	.word	0x009000eb
 8002d64:	00544146 	.word	0x00544146
 8002d68:	33544146 	.word	0x33544146

08002d6c <find_volume>:
{
 8002d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d70:	b087      	sub	sp, #28
 8002d72:	460f      	mov	r7, r1
 8002d74:	4616      	mov	r6, r2
	*rfs = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8002d7a:	f7ff ff31 	bl	8002be0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002d7e:	1e05      	subs	r5, r0, #0
 8002d80:	f2c0 816a 	blt.w	8003058 <find_volume+0x2ec>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002d84:	4bc9      	ldr	r3, [pc, #804]	; (80030ac <find_volume+0x340>)
 8002d86:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002d8a:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002d8c:	2c00      	cmp	r4, #0
 8002d8e:	f000 8167 	beq.w	8003060 <find_volume+0x2f4>
	*rfs = fs;							/* Return pointer to the file system object */
 8002d92:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002d94:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002d98:	7823      	ldrb	r3, [r4, #0]
 8002d9a:	b173      	cbz	r3, 8002dba <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8002d9c:	7860      	ldrb	r0, [r4, #1]
 8002d9e:	f7ff fcdb 	bl	8002758 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002da2:	f010 0f01 	tst.w	r0, #1
 8002da6:	d108      	bne.n	8002dba <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002da8:	2e00      	cmp	r6, #0
 8002daa:	f000 815b 	beq.w	8003064 <find_volume+0x2f8>
 8002dae:	f010 0f04 	tst.w	r0, #4
 8002db2:	f040 8159 	bne.w	8003068 <find_volume+0x2fc>
			return FR_OK;				/* The file system object is valid */
 8002db6:	2000      	movs	r0, #0
 8002db8:	e14f      	b.n	800305a <find_volume+0x2ee>
	fs->fs_type = 0;					/* Clear the file system object */
 8002dba:	2300      	movs	r3, #0
 8002dbc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002dbe:	b2e8      	uxtb	r0, r5
 8002dc0:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002dc2:	f7ff fcd5 	bl	8002770 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002dc6:	f010 0f01 	tst.w	r0, #1
 8002dca:	f040 814f 	bne.w	800306c <find_volume+0x300>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002dce:	b11e      	cbz	r6, 8002dd8 <find_volume+0x6c>
 8002dd0:	f010 0f04 	tst.w	r0, #4
 8002dd4:	f040 814c 	bne.w	8003070 <find_volume+0x304>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8002dd8:	f104 020c 	add.w	r2, r4, #12
 8002ddc:	2102      	movs	r1, #2
 8002dde:	7860      	ldrb	r0, [r4, #1]
 8002de0:	f7ff fcf2 	bl	80027c8 <disk_ioctl>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	f040 8145 	bne.w	8003074 <find_volume+0x308>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8002dea:	89a2      	ldrh	r2, [r4, #12]
 8002dec:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002df6:	f200 813f 	bhi.w	8003078 <find_volume+0x30c>
 8002dfa:	1e53      	subs	r3, r2, #1
 8002dfc:	421a      	tst	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <find_volume+0x98>
 8002e00:	2001      	movs	r0, #1
 8002e02:	e12a      	b.n	800305a <find_volume+0x2ee>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002e04:	2100      	movs	r1, #0
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ff72 	bl	8002cf0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002e0c:	2802      	cmp	r0, #2
 8002e0e:	f000 80a0 	beq.w	8002f52 <find_volume+0x1e6>
	bsect = 0;
 8002e12:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002e14:	2804      	cmp	r0, #4
 8002e16:	f000 8131 	beq.w	800307c <find_volume+0x310>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002e1a:	2801      	cmp	r0, #1
 8002e1c:	f200 8130 	bhi.w	8003080 <find_volume+0x314>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002e20:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8002e24:	f7ff fcdc 	bl	80027e0 <ld_word>
 8002e28:	89a7      	ldrh	r7, [r4, #12]
 8002e2a:	42b8      	cmp	r0, r7
 8002e2c:	f040 812a 	bne.w	8003084 <find_volume+0x318>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002e30:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 8002e34:	f7ff fcd4 	bl	80027e0 <ld_word>
 8002e38:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002e3a:	b920      	cbnz	r0, 8002e46 <find_volume+0xda>
 8002e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e40:	f7ff fcd3 	bl	80027ea <ld_dword>
 8002e44:	4680      	mov	r8, r0
		fs->fsize = fasize;
 8002e46:	f8c4 8020 	str.w	r8, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002e4a:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
 8002e4e:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002e50:	1e73      	subs	r3, r6, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f200 8117 	bhi.w	8003088 <find_volume+0x31c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002e5a:	fb08 f606 	mul.w	r6, r8, r6
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002e5e:	f894 9045 	ldrb.w	r9, [r4, #69]	; 0x45
 8002e62:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002e66:	f1b9 0f00 	cmp.w	r9, #0
 8002e6a:	f000 810f 	beq.w	800308c <find_volume+0x320>
 8002e6e:	f109 33ff 	add.w	r3, r9, #4294967295
 8002e72:	ea19 0f03 	tst.w	r9, r3
 8002e76:	f040 810b 	bne.w	8003090 <find_volume+0x324>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e7a:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8002e7e:	f7ff fcaf 	bl	80027e0 <ld_word>
 8002e82:	4682      	mov	sl, r0
 8002e84:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002e86:	ea4f 1b57 	mov.w	fp, r7, lsr #5
 8002e8a:	fbb0 f3fb 	udiv	r3, r0, fp
 8002e8e:	fb0b 0313 	mls	r3, fp, r3, r0
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 80fd 	bne.w	8003094 <find_volume+0x328>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002e9a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8002e9e:	f7ff fc9f 	bl	80027e0 <ld_word>
 8002ea2:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002ea4:	b920      	cbnz	r0, 8002eb0 <find_volume+0x144>
 8002ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002eaa:	f7ff fc9e 	bl	80027ea <ld_dword>
 8002eae:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002eb0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8002eb4:	f7ff fc94 	bl	80027e0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002eb8:	4601      	mov	r1, r0
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	f000 80ec 	beq.w	8003098 <find_volume+0x32c>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002ec0:	1982      	adds	r2, r0, r6
 8002ec2:	fbba fbfb 	udiv	fp, sl, fp
 8002ec6:	445a      	add	r2, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002ec8:	9b01      	ldr	r3, [sp, #4]
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	f0c0 80e6 	bcc.w	800309c <find_volume+0x330>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	fbb3 f9f9 	udiv	r9, r3, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002ed6:	f1b9 0f00 	cmp.w	r9, #0
 8002eda:	f000 80e1 	beq.w	80030a0 <find_volume+0x334>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002ede:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8002ee2:	4599      	cmp	r9, r3
 8002ee4:	d94d      	bls.n	8002f82 <find_volume+0x216>
		fmt = FS_FAT32;
 8002ee6:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002eea:	f640 73f5 	movw	r3, #4085	; 0xff5
 8002eee:	4599      	cmp	r9, r3
 8002ef0:	d801      	bhi.n	8002ef6 <find_volume+0x18a>
 8002ef2:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002ef6:	f109 0902 	add.w	r9, r9, #2
 8002efa:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8002efe:	6265      	str	r5, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002f00:	194b      	adds	r3, r1, r5
 8002f02:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8002f04:	442a      	add	r2, r5
 8002f06:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8002f08:	f1bb 0f03 	cmp.w	fp, #3
 8002f0c:	d03c      	beq.n	8002f88 <find_volume+0x21c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002f0e:	f1ba 0f00 	cmp.w	sl, #0
 8002f12:	f000 80d1 	beq.w	80030b8 <find_volume+0x34c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002f16:	4433      	add	r3, r6
 8002f18:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f1a:	f1bb 0f02 	cmp.w	fp, #2
 8002f1e:	d16b      	bne.n	8002ff8 <find_volume+0x28c>
 8002f20:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002f24:	e042      	b.n	8002fac <find_volume+0x240>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002f26:	2000      	movs	r0, #0
 8002f28:	ab06      	add	r3, sp, #24
 8002f2a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002f2e:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f32:	3501      	adds	r5, #1
 8002f34:	2d03      	cmp	r5, #3
 8002f36:	d80e      	bhi.n	8002f56 <find_volume+0x1ea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002f38:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002f3c:	012b      	lsls	r3, r5, #4
 8002f3e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002f42:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002f44:	7903      	ldrb	r3, [r0, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ed      	beq.n	8002f26 <find_volume+0x1ba>
 8002f4a:	3008      	adds	r0, #8
 8002f4c:	f7ff fc4d 	bl	80027ea <ld_dword>
 8002f50:	e7ea      	b.n	8002f28 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f52:	2500      	movs	r5, #0
 8002f54:	e7ee      	b.n	8002f34 <find_volume+0x1c8>
 8002f56:	2600      	movs	r6, #0
 8002f58:	e00a      	b.n	8002f70 <find_volume+0x204>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fec7 	bl	8002cf0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002f62:	2801      	cmp	r0, #1
 8002f64:	f67f af56 	bls.w	8002e14 <find_volume+0xa8>
 8002f68:	3601      	adds	r6, #1
 8002f6a:	2e03      	cmp	r6, #3
 8002f6c:	f63f af52 	bhi.w	8002e14 <find_volume+0xa8>
			bsect = br[i];
 8002f70:	ab06      	add	r3, sp, #24
 8002f72:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002f76:	f853 5c10 	ldr.w	r5, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002f7a:	2d00      	cmp	r5, #0
 8002f7c:	d1ed      	bne.n	8002f5a <find_volume+0x1ee>
 8002f7e:	2003      	movs	r0, #3
 8002f80:	e7f2      	b.n	8002f68 <find_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002f82:	f04f 0b02 	mov.w	fp, #2
 8002f86:	e7b0      	b.n	8002eea <find_volume+0x17e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002f88:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8002f8c:	f7ff fc28 	bl	80027e0 <ld_word>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	f040 8087 	bne.w	80030a4 <find_volume+0x338>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002f96:	f1ba 0f00 	cmp.w	sl, #0
 8002f9a:	f040 8085 	bne.w	80030a8 <find_volume+0x33c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002f9e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002fa2:	f7ff fc22 	bl	80027ea <ld_dword>
 8002fa6:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002fa8:	ea4f 0989 	mov.w	r9, r9, lsl #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002fac:	44b9      	add	r9, r7
 8002fae:	f109 33ff 	add.w	r3, r9, #4294967295
 8002fb2:	fbb3 f7f7 	udiv	r7, r3, r7
 8002fb6:	4547      	cmp	r7, r8
 8002fb8:	f200 8080 	bhi.w	80030bc <find_volume+0x350>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	61a3      	str	r3, [r4, #24]
 8002fc2:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002fc8:	f1bb 0f03 	cmp.w	fp, #3
 8002fcc:	d105      	bne.n	8002fda <find_volume+0x26e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002fce:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fd2:	f7ff fc05 	bl	80027e0 <ld_word>
 8002fd6:	2801      	cmp	r0, #1
 8002fd8:	d015      	beq.n	8003006 <find_volume+0x29a>
	fs->fs_type = fmt;		/* FAT sub-type */
 8002fda:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8002fde:	4a33      	ldr	r2, [pc, #204]	; (80030ac <find_volume+0x340>)
 8002fe0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8493      	strh	r3, [r2, #36]	; 0x24
 8002fe8:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8002fea:	3228      	adds	r2, #40	; 0x28
 8002fec:	6122      	str	r2, [r4, #16]
	clear_lock(fs);
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff fcf6 	bl	80029e0 <clear_lock>
	return FR_OK;
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e030      	b.n	800305a <find_volume+0x2ee>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002ff8:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8002ffc:	f009 0901 	and.w	r9, r9, #1
 8003000:	eb09 0953 	add.w	r9, r9, r3, lsr #1
 8003004:	e7d2      	b.n	8002fac <find_volume+0x240>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003006:	1c69      	adds	r1, r5, #1
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fe57 	bl	8002cbc <move_window>
 800300e:	2800      	cmp	r0, #0
 8003010:	d1e3      	bne.n	8002fda <find_volume+0x26e>
			fs->fsi_flag = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003016:	f204 2036 	addw	r0, r4, #566	; 0x236
 800301a:	f7ff fbe1 	bl	80027e0 <ld_word>
 800301e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003022:	4298      	cmp	r0, r3
 8003024:	d1d9      	bne.n	8002fda <find_volume+0x26e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003026:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800302a:	f7ff fbde 	bl	80027ea <ld_dword>
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <find_volume+0x344>)
 8003030:	4298      	cmp	r0, r3
 8003032:	d1d2      	bne.n	8002fda <find_volume+0x26e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003034:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003038:	f7ff fbd7 	bl	80027ea <ld_dword>
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <find_volume+0x348>)
 800303e:	4298      	cmp	r0, r3
 8003040:	d1cb      	bne.n	8002fda <find_volume+0x26e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003042:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8003046:	f7ff fbd0 	bl	80027ea <ld_dword>
 800304a:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800304c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8003050:	f7ff fbcb 	bl	80027ea <ld_dword>
 8003054:	6160      	str	r0, [r4, #20]
 8003056:	e7c0      	b.n	8002fda <find_volume+0x26e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003058:	200b      	movs	r0, #11
}
 800305a:	b007      	add	sp, #28
 800305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003060:	200c      	movs	r0, #12
 8003062:	e7fa      	b.n	800305a <find_volume+0x2ee>
			return FR_OK;				/* The file system object is valid */
 8003064:	2000      	movs	r0, #0
 8003066:	e7f8      	b.n	800305a <find_volume+0x2ee>
				return FR_WRITE_PROTECTED;
 8003068:	200a      	movs	r0, #10
 800306a:	e7f6      	b.n	800305a <find_volume+0x2ee>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800306c:	2003      	movs	r0, #3
 800306e:	e7f4      	b.n	800305a <find_volume+0x2ee>
		return FR_WRITE_PROTECTED;
 8003070:	200a      	movs	r0, #10
 8003072:	e7f2      	b.n	800305a <find_volume+0x2ee>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8003074:	2001      	movs	r0, #1
 8003076:	e7f0      	b.n	800305a <find_volume+0x2ee>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8003078:	2001      	movs	r0, #1
 800307a:	e7ee      	b.n	800305a <find_volume+0x2ee>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800307c:	2001      	movs	r0, #1
 800307e:	e7ec      	b.n	800305a <find_volume+0x2ee>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003080:	200d      	movs	r0, #13
 8003082:	e7ea      	b.n	800305a <find_volume+0x2ee>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003084:	200d      	movs	r0, #13
 8003086:	e7e8      	b.n	800305a <find_volume+0x2ee>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003088:	200d      	movs	r0, #13
 800308a:	e7e6      	b.n	800305a <find_volume+0x2ee>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800308c:	200d      	movs	r0, #13
 800308e:	e7e4      	b.n	800305a <find_volume+0x2ee>
 8003090:	200d      	movs	r0, #13
 8003092:	e7e2      	b.n	800305a <find_volume+0x2ee>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003094:	200d      	movs	r0, #13
 8003096:	e7e0      	b.n	800305a <find_volume+0x2ee>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003098:	200d      	movs	r0, #13
 800309a:	e7de      	b.n	800305a <find_volume+0x2ee>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800309c:	200d      	movs	r0, #13
 800309e:	e7dc      	b.n	800305a <find_volume+0x2ee>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80030a0:	200d      	movs	r0, #13
 80030a2:	e7da      	b.n	800305a <find_volume+0x2ee>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80030a4:	200d      	movs	r0, #13
 80030a6:	e7d8      	b.n	800305a <find_volume+0x2ee>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80030a8:	200d      	movs	r0, #13
 80030aa:	e7d6      	b.n	800305a <find_volume+0x2ee>
 80030ac:	20000100 	.word	0x20000100
 80030b0:	41615252 	.word	0x41615252
 80030b4:	61417272 	.word	0x61417272
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80030b8:	200d      	movs	r0, #13
 80030ba:	e7ce      	b.n	800305a <find_volume+0x2ee>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80030bc:	200d      	movs	r0, #13
 80030be:	e7cc      	b.n	800305a <find_volume+0x2ee>

080030c0 <put_fat>:
{
 80030c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80030c4:	2901      	cmp	r1, #1
 80030c6:	f240 8092 	bls.w	80031ee <put_fat+0x12e>
 80030ca:	69c3      	ldr	r3, [r0, #28]
 80030cc:	428b      	cmp	r3, r1
 80030ce:	f240 8090 	bls.w	80031f2 <put_fat+0x132>
 80030d2:	4617      	mov	r7, r2
 80030d4:	460d      	mov	r5, r1
 80030d6:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 80030d8:	7803      	ldrb	r3, [r0, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d04d      	beq.n	800317a <put_fat+0xba>
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d064      	beq.n	80031ac <put_fat+0xec>
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <put_fat+0x2a>
	FRESULT res = FR_INT_ERR;
 80030e6:	2602      	movs	r6, #2
 80030e8:	e084      	b.n	80031f4 <put_fat+0x134>
			bc = (UINT)clst; bc += bc / 2;
 80030ea:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80030ee:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80030f0:	8983      	ldrh	r3, [r0, #12]
 80030f2:	fbb8 f3f3 	udiv	r3, r8, r3
 80030f6:	4419      	add	r1, r3
 80030f8:	f7ff fde0 	bl	8002cbc <move_window>
			if (res != FR_OK) break;
 80030fc:	4606      	mov	r6, r0
 80030fe:	2800      	cmp	r0, #0
 8003100:	d178      	bne.n	80031f4 <put_fat+0x134>
			p = fs->win + bc++ % SS(fs);
 8003102:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8003106:	f108 0a01 	add.w	sl, r8, #1
 800310a:	89a2      	ldrh	r2, [r4, #12]
 800310c:	fbb8 f3f2 	udiv	r3, r8, r2
 8003110:	fb02 8813 	mls	r8, r2, r3, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003114:	f015 0501 	ands.w	r5, r5, #1
 8003118:	d024      	beq.n	8003164 <put_fat+0xa4>
 800311a:	f919 3008 	ldrsb.w	r3, [r9, r8]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	013a      	lsls	r2, r7, #4
 8003124:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003128:	4313      	orrs	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8003130:	2301      	movs	r3, #1
 8003132:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003134:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	fbba f3f3 	udiv	r3, sl, r3
 800313c:	4419      	add	r1, r3
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff fdbc 	bl	8002cbc <move_window>
			if (res != FR_OK) break;
 8003144:	4606      	mov	r6, r0
 8003146:	2800      	cmp	r0, #0
 8003148:	d154      	bne.n	80031f4 <put_fat+0x134>
			p = fs->win + bc % SS(fs);
 800314a:	89a2      	ldrh	r2, [r4, #12]
 800314c:	fbba f3f2 	udiv	r3, sl, r2
 8003150:	fb02 aa13 	mls	sl, r2, r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003154:	b145      	cbz	r5, 8003168 <put_fat+0xa8>
 8003156:	f3c7 1207 	ubfx	r2, r7, #4, #8
 800315a:	f809 200a 	strb.w	r2, [r9, sl]
			fs->wflag = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	70e3      	strb	r3, [r4, #3]
			break;
 8003162:	e047      	b.n	80031f4 <put_fat+0x134>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003164:	b2fb      	uxtb	r3, r7
 8003166:	e7e1      	b.n	800312c <put_fat+0x6c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003168:	f919 200a 	ldrsb.w	r2, [r9, sl]
 800316c:	f022 020f 	bic.w	r2, r2, #15
 8003170:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8003174:	433a      	orrs	r2, r7
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	e7ef      	b.n	800315a <put_fat+0x9a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800317a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800317c:	8983      	ldrh	r3, [r0, #12]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	fbb5 f3f3 	udiv	r3, r5, r3
 8003184:	4419      	add	r1, r3
 8003186:	f7ff fd99 	bl	8002cbc <move_window>
			if (res != FR_OK) break;
 800318a:	4606      	mov	r6, r0
 800318c:	bb90      	cbnz	r0, 80031f4 <put_fat+0x134>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800318e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003192:	006d      	lsls	r5, r5, #1
 8003194:	89a2      	ldrh	r2, [r4, #12]
 8003196:	fbb5 f3f2 	udiv	r3, r5, r2
 800319a:	fb02 5513 	mls	r5, r2, r3, r5
 800319e:	b2b9      	uxth	r1, r7
 80031a0:	4428      	add	r0, r5
 80031a2:	f7ff fb2d 	bl	8002800 <st_word>
			fs->wflag = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	70e3      	strb	r3, [r4, #3]
			break;
 80031aa:	e023      	b.n	80031f4 <put_fat+0x134>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80031ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80031ae:	8983      	ldrh	r3, [r0, #12]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	fbb5 f3f3 	udiv	r3, r5, r3
 80031b6:	4419      	add	r1, r3
 80031b8:	f7ff fd80 	bl	8002cbc <move_window>
			if (res != FR_OK) break;
 80031bc:	4606      	mov	r6, r0
 80031be:	b9c8      	cbnz	r0, 80031f4 <put_fat+0x134>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80031c0:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80031c4:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80031c8:	00a9      	lsls	r1, r5, #2
 80031ca:	89a2      	ldrh	r2, [r4, #12]
 80031cc:	fbb1 f5f2 	udiv	r5, r1, r2
 80031d0:	fb02 1515 	mls	r5, r2, r5, r1
 80031d4:	441d      	add	r5, r3
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7ff fb07 	bl	80027ea <ld_dword>
 80031dc:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80031e0:	4339      	orrs	r1, r7
 80031e2:	4628      	mov	r0, r5
 80031e4:	f7ff fb10 	bl	8002808 <st_dword>
			fs->wflag = 1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	70e3      	strb	r3, [r4, #3]
			break;
 80031ec:	e002      	b.n	80031f4 <put_fat+0x134>
	FRESULT res = FR_INT_ERR;
 80031ee:	2602      	movs	r6, #2
 80031f0:	e000      	b.n	80031f4 <put_fat+0x134>
 80031f2:	2602      	movs	r6, #2
}
 80031f4:	4630      	mov	r0, r6
 80031f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031fa <get_fat>:
{
 80031fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80031fc:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80031fe:	2901      	cmp	r1, #1
 8003200:	d96a      	bls.n	80032d8 <get_fat+0xde>
 8003202:	69f3      	ldr	r3, [r6, #28]
 8003204:	428b      	cmp	r3, r1
 8003206:	d969      	bls.n	80032dc <get_fat+0xe2>
 8003208:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 800320a:	7833      	ldrb	r3, [r6, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d035      	beq.n	800327c <get_fat+0x82>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d049      	beq.n	80032a8 <get_fat+0xae>
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <get_fat+0x22>
			val = 1;	/* Internal error */
 8003218:	2001      	movs	r0, #1
 800321a:	e05e      	b.n	80032da <get_fat+0xe0>
			bc = (UINT)clst; bc += bc / 2;
 800321c:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003220:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003222:	89b3      	ldrh	r3, [r6, #12]
 8003224:	fbb5 f3f3 	udiv	r3, r5, r3
 8003228:	4419      	add	r1, r3
 800322a:	4630      	mov	r0, r6
 800322c:	f7ff fd46 	bl	8002cbc <move_window>
 8003230:	2800      	cmp	r0, #0
 8003232:	d155      	bne.n	80032e0 <get_fat+0xe6>
			wc = fs->win[bc++ % SS(fs)];
 8003234:	1c6f      	adds	r7, r5, #1
 8003236:	89b3      	ldrh	r3, [r6, #12]
 8003238:	fbb5 f2f3 	udiv	r2, r5, r3
 800323c:	fb03 5512 	mls	r5, r3, r2, r5
 8003240:	4435      	add	r5, r6
 8003242:	f895 5038 	ldrb.w	r5, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003246:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003248:	fbb7 f3f3 	udiv	r3, r7, r3
 800324c:	4419      	add	r1, r3
 800324e:	4630      	mov	r0, r6
 8003250:	f7ff fd34 	bl	8002cbc <move_window>
 8003254:	2800      	cmp	r0, #0
 8003256:	d146      	bne.n	80032e6 <get_fat+0xec>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003258:	89b2      	ldrh	r2, [r6, #12]
 800325a:	fbb7 f3f2 	udiv	r3, r7, r2
 800325e:	fb02 7713 	mls	r7, r2, r3, r7
 8003262:	443e      	add	r6, r7
 8003264:	f896 0038 	ldrb.w	r0, [r6, #56]	; 0x38
 8003268:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800326c:	f014 0f01 	tst.w	r4, #1
 8003270:	d001      	beq.n	8003276 <get_fat+0x7c>
 8003272:	0900      	lsrs	r0, r0, #4
 8003274:	e031      	b.n	80032da <get_fat+0xe0>
 8003276:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800327a:	e02e      	b.n	80032da <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800327c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800327e:	89b3      	ldrh	r3, [r6, #12]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	fbb4 f3f3 	udiv	r3, r4, r3
 8003286:	4419      	add	r1, r3
 8003288:	4630      	mov	r0, r6
 800328a:	f7ff fd17 	bl	8002cbc <move_window>
 800328e:	bb68      	cbnz	r0, 80032ec <get_fat+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003290:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003294:	0061      	lsls	r1, r4, #1
 8003296:	89b2      	ldrh	r2, [r6, #12]
 8003298:	fbb1 f3f2 	udiv	r3, r1, r2
 800329c:	fb02 1113 	mls	r1, r2, r3, r1
 80032a0:	4408      	add	r0, r1
 80032a2:	f7ff fa9d 	bl	80027e0 <ld_word>
			break;
 80032a6:	e018      	b.n	80032da <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80032a8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80032aa:	89b3      	ldrh	r3, [r6, #12]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80032b2:	4419      	add	r1, r3
 80032b4:	4630      	mov	r0, r6
 80032b6:	f7ff fd01 	bl	8002cbc <move_window>
 80032ba:	b9d0      	cbnz	r0, 80032f2 <get_fat+0xf8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80032bc:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80032c0:	00a1      	lsls	r1, r4, #2
 80032c2:	89b3      	ldrh	r3, [r6, #12]
 80032c4:	fbb1 f4f3 	udiv	r4, r1, r3
 80032c8:	fb03 1114 	mls	r1, r3, r4, r1
 80032cc:	4408      	add	r0, r1
 80032ce:	f7ff fa8c 	bl	80027ea <ld_dword>
 80032d2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80032d6:	e000      	b.n	80032da <get_fat+0xe0>
		val = 1;	/* Internal error */
 80032d8:	2001      	movs	r0, #1
}
 80032da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80032dc:	2001      	movs	r0, #1
 80032de:	e7fc      	b.n	80032da <get_fat+0xe0>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	e7f9      	b.n	80032da <get_fat+0xe0>
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ea:	e7f6      	b.n	80032da <get_fat+0xe0>
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	e7f3      	b.n	80032da <get_fat+0xe0>
 80032f2:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80032f6:	e7f0      	b.n	80032da <get_fat+0xe0>

080032f8 <dir_sdi>:
{
 80032f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80032fc:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80032fe:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003302:	d243      	bcs.n	800338c <dir_sdi+0x94>
 8003304:	4606      	mov	r6, r0
 8003306:	460d      	mov	r5, r1
 8003308:	f011 0f1f 	tst.w	r1, #31
 800330c:	d141      	bne.n	8003392 <dir_sdi+0x9a>
	dp->dptr = ofs;				/* Set current offset */
 800330e:	6171      	str	r1, [r6, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003310:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003312:	b91c      	cbnz	r4, 800331c <dir_sdi+0x24>
 8003314:	783b      	ldrb	r3, [r7, #0]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d900      	bls.n	800331c <dir_sdi+0x24>
		clst = fs->dirbase;
 800331a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800331c:	b9cc      	cbnz	r4, 8003352 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800331e:	893b      	ldrh	r3, [r7, #8]
 8003320:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8003324:	d937      	bls.n	8003396 <dir_sdi+0x9e>
		dp->sect = fs->dirbase;
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800332a:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800332c:	69f3      	ldr	r3, [r6, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d039      	beq.n	80033a6 <dir_sdi+0xae>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003332:	89ba      	ldrh	r2, [r7, #12]
 8003334:	fbb5 f2f2 	udiv	r2, r5, r2
 8003338:	4413      	add	r3, r2
 800333a:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800333c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003340:	89b9      	ldrh	r1, [r7, #12]
 8003342:	fbb5 f2f1 	udiv	r2, r5, r1
 8003346:	fb01 5512 	mls	r5, r1, r2, r5
 800334a:	441d      	add	r5, r3
 800334c:	6235      	str	r5, [r6, #32]
	return FR_OK;
 800334e:	2000      	movs	r0, #0
 8003350:	e01d      	b.n	800338e <dir_sdi+0x96>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	f8b7 800c 	ldrh.w	r8, [r7, #12]
 8003358:	fb08 f803 	mul.w	r8, r8, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800335c:	4545      	cmp	r5, r8
 800335e:	d30f      	bcc.n	8003380 <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003360:	4621      	mov	r1, r4
 8003362:	4630      	mov	r0, r6
 8003364:	f7ff ff49 	bl	80031fa <get_fat>
 8003368:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800336a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800336e:	d014      	beq.n	800339a <dir_sdi+0xa2>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003370:	2801      	cmp	r0, #1
 8003372:	d914      	bls.n	800339e <dir_sdi+0xa6>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4283      	cmp	r3, r0
 8003378:	d913      	bls.n	80033a2 <dir_sdi+0xaa>
			ofs -= csz;
 800337a:	eba5 0508 	sub.w	r5, r5, r8
 800337e:	e7ed      	b.n	800335c <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 8003380:	4621      	mov	r1, r4
 8003382:	4638      	mov	r0, r7
 8003384:	f7ff fb4a 	bl	8002a1c <clust2sect>
 8003388:	61f0      	str	r0, [r6, #28]
 800338a:	e7ce      	b.n	800332a <dir_sdi+0x32>
		return FR_INT_ERR;
 800338c:	2002      	movs	r0, #2
}
 800338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8003392:	2002      	movs	r0, #2
 8003394:	e7fb      	b.n	800338e <dir_sdi+0x96>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003396:	2002      	movs	r0, #2
 8003398:	e7f9      	b.n	800338e <dir_sdi+0x96>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800339a:	2001      	movs	r0, #1
 800339c:	e7f7      	b.n	800338e <dir_sdi+0x96>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800339e:	2002      	movs	r0, #2
 80033a0:	e7f5      	b.n	800338e <dir_sdi+0x96>
 80033a2:	2002      	movs	r0, #2
 80033a4:	e7f3      	b.n	800338e <dir_sdi+0x96>
	if (!dp->sect) return FR_INT_ERR;
 80033a6:	2002      	movs	r0, #2
 80033a8:	e7f1      	b.n	800338e <dir_sdi+0x96>

080033aa <create_chain>:
{
 80033aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ae:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 80033b0:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80033b2:	4688      	mov	r8, r1
 80033b4:	b931      	cbnz	r1, 80033c4 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80033b6:	6975      	ldr	r5, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80033b8:	b18d      	cbz	r5, 80033de <create_chain+0x34>
 80033ba:	69f3      	ldr	r3, [r6, #28]
 80033bc:	42ab      	cmp	r3, r5
 80033be:	d80f      	bhi.n	80033e0 <create_chain+0x36>
 80033c0:	2501      	movs	r5, #1
 80033c2:	e00d      	b.n	80033e0 <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80033c4:	f7ff ff19 	bl	80031fa <get_fat>
 80033c8:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80033ca:	2801      	cmp	r0, #1
 80033cc:	d947      	bls.n	800345e <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80033ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033d2:	d049      	beq.n	8003468 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80033d4:	69f2      	ldr	r2, [r6, #28]
 80033d6:	4282      	cmp	r2, r0
 80033d8:	d846      	bhi.n	8003468 <create_chain+0xbe>
		scl = clst;
 80033da:	4645      	mov	r5, r8
 80033dc:	e000      	b.n	80033e0 <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80033de:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 80033e0:	462c      	mov	r4, r5
 80033e2:	e00c      	b.n	80033fe <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80033e4:	4621      	mov	r1, r4
 80033e6:	4638      	mov	r0, r7
 80033e8:	f7ff ff07 	bl	80031fa <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 80033ec:	4603      	mov	r3, r0
 80033ee:	b170      	cbz	r0, 800340e <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80033f0:	2801      	cmp	r0, #1
 80033f2:	d039      	beq.n	8003468 <create_chain+0xbe>
 80033f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033f8:	d036      	beq.n	8003468 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 80033fa:	42ac      	cmp	r4, r5
 80033fc:	d033      	beq.n	8003466 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 80033fe:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003400:	69f3      	ldr	r3, [r6, #28]
 8003402:	42a3      	cmp	r3, r4
 8003404:	d8ee      	bhi.n	80033e4 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8003406:	2d01      	cmp	r5, #1
 8003408:	d92b      	bls.n	8003462 <create_chain+0xb8>
				ncl = 2;
 800340a:	2402      	movs	r4, #2
 800340c:	e7ea      	b.n	80033e4 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800340e:	f04f 32ff 	mov.w	r2, #4294967295
 8003412:	4621      	mov	r1, r4
 8003414:	4630      	mov	r0, r6
 8003416:	f7ff fe53 	bl	80030c0 <put_fat>
		if (res == FR_OK && clst != 0) {
 800341a:	4603      	mov	r3, r0
 800341c:	b910      	cbnz	r0, 8003424 <create_chain+0x7a>
 800341e:	f1b8 0f00 	cmp.w	r8, #0
 8003422:	d10e      	bne.n	8003442 <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003424:	b9a3      	cbnz	r3, 8003450 <create_chain+0xa6>
		fs->last_clst = ncl;
 8003426:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003428:	69b2      	ldr	r2, [r6, #24]
 800342a:	69f3      	ldr	r3, [r6, #28]
 800342c:	3b02      	subs	r3, #2
 800342e:	429a      	cmp	r2, r3
 8003430:	d801      	bhi.n	8003436 <create_chain+0x8c>
 8003432:	3a01      	subs	r2, #1
 8003434:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 8003436:	7933      	ldrb	r3, [r6, #4]
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	7133      	strb	r3, [r6, #4]
 800343e:	4623      	mov	r3, r4
 8003440:	e012      	b.n	8003468 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003442:	4622      	mov	r2, r4
 8003444:	4641      	mov	r1, r8
 8003446:	4630      	mov	r0, r6
 8003448:	f7ff fe3a 	bl	80030c0 <put_fat>
 800344c:	4603      	mov	r3, r0
 800344e:	e7e9      	b.n	8003424 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003450:	2b01      	cmp	r3, #1
 8003452:	d001      	beq.n	8003458 <create_chain+0xae>
 8003454:	2301      	movs	r3, #1
 8003456:	e007      	b.n	8003468 <create_chain+0xbe>
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	e004      	b.n	8003468 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800345e:	2301      	movs	r3, #1
 8003460:	e002      	b.n	8003468 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800346e <remove_chain>:
{
 800346e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003470:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8003472:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003474:	2901      	cmp	r1, #1
 8003476:	d92e      	bls.n	80034d6 <remove_chain+0x68>
 8003478:	4607      	mov	r7, r0
 800347a:	4611      	mov	r1, r2
 800347c:	69eb      	ldr	r3, [r5, #28]
 800347e:	42b3      	cmp	r3, r6
 8003480:	d92c      	bls.n	80034dc <remove_chain+0x6e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003482:	b152      	cbz	r2, 800349a <remove_chain+0x2c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	4628      	mov	r0, r5
 800348a:	f7ff fe19 	bl	80030c0 <put_fat>
		if (res != FR_OK) return res;
 800348e:	4684      	mov	ip, r0
 8003490:	b118      	cbz	r0, 800349a <remove_chain+0x2c>
 8003492:	e025      	b.n	80034e0 <remove_chain+0x72>
		clst = nxt;					/* Next cluster */
 8003494:	4626      	mov	r6, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003496:	42a2      	cmp	r2, r4
 8003498:	d922      	bls.n	80034e0 <remove_chain+0x72>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800349a:	4631      	mov	r1, r6
 800349c:	4638      	mov	r0, r7
 800349e:	f7ff feac 	bl	80031fa <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80034a2:	4604      	mov	r4, r0
 80034a4:	b1f0      	cbz	r0, 80034e4 <remove_chain+0x76>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80034a6:	2801      	cmp	r0, #1
 80034a8:	d01f      	beq.n	80034ea <remove_chain+0x7c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80034aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034ae:	d01f      	beq.n	80034f0 <remove_chain+0x82>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80034b0:	2200      	movs	r2, #0
 80034b2:	4631      	mov	r1, r6
 80034b4:	4628      	mov	r0, r5
 80034b6:	f7ff fe03 	bl	80030c0 <put_fat>
			if (res != FR_OK) return res;
 80034ba:	4684      	mov	ip, r0
 80034bc:	b980      	cbnz	r0, 80034e0 <remove_chain+0x72>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80034be:	69ab      	ldr	r3, [r5, #24]
 80034c0:	69ea      	ldr	r2, [r5, #28]
 80034c2:	1e91      	subs	r1, r2, #2
 80034c4:	428b      	cmp	r3, r1
 80034c6:	d2e5      	bcs.n	8003494 <remove_chain+0x26>
			fs->free_clst++;
 80034c8:	3301      	adds	r3, #1
 80034ca:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 80034cc:	792b      	ldrb	r3, [r5, #4]
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	712b      	strb	r3, [r5, #4]
 80034d4:	e7de      	b.n	8003494 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80034d6:	f04f 0c02 	mov.w	ip, #2
 80034da:	e001      	b.n	80034e0 <remove_chain+0x72>
 80034dc:	f04f 0c02 	mov.w	ip, #2
}
 80034e0:	4660      	mov	r0, ip
 80034e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80034e4:	f04f 0c00 	mov.w	ip, #0
 80034e8:	e7fa      	b.n	80034e0 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80034ea:	f04f 0c02 	mov.w	ip, #2
 80034ee:	e7f7      	b.n	80034e0 <remove_chain+0x72>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80034f0:	f04f 0c01 	mov.w	ip, #1
 80034f4:	e7f4      	b.n	80034e0 <remove_chain+0x72>

080034f6 <dir_next>:
{
 80034f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80034fa:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80034fc:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80034fe:	69c3      	ldr	r3, [r0, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d072      	beq.n	80035ea <dir_next+0xf4>
 8003504:	3520      	adds	r5, #32
 8003506:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800350a:	d270      	bcs.n	80035ee <dir_next+0xf8>
 800350c:	460f      	mov	r7, r1
 800350e:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003510:	89b1      	ldrh	r1, [r6, #12]
 8003512:	fbb5 f2f1 	udiv	r2, r5, r1
 8003516:	fb01 5212 	mls	r2, r1, r2, r5
 800351a:	b93a      	cbnz	r2, 800352c <dir_next+0x36>
		dp->sect++;				/* Next sector */
 800351c:	3301      	adds	r3, #1
 800351e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8003520:	6981      	ldr	r1, [r0, #24]
 8003522:	b9a1      	cbnz	r1, 800354e <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003524:	8933      	ldrh	r3, [r6, #8]
 8003526:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800352a:	d90c      	bls.n	8003546 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 800352c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800352e:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8003532:	89b1      	ldrh	r1, [r6, #12]
 8003534:	fbb5 f2f1 	udiv	r2, r5, r1
 8003538:	fb01 5512 	mls	r5, r1, r2, r5
 800353c:	441d      	add	r5, r3
 800353e:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8003540:	2000      	movs	r0, #0
}
 8003542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				dp->sect = 0; return FR_NO_FILE;
 8003546:	2300      	movs	r3, #0
 8003548:	61c3      	str	r3, [r0, #28]
 800354a:	2004      	movs	r0, #4
 800354c:	e7f9      	b.n	8003542 <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800354e:	89b2      	ldrh	r2, [r6, #12]
 8003550:	fbb5 f2f2 	udiv	r2, r5, r2
 8003554:	8973      	ldrh	r3, [r6, #10]
 8003556:	3b01      	subs	r3, #1
 8003558:	421a      	tst	r2, r3
 800355a:	d1e7      	bne.n	800352c <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800355c:	f7ff fe4d 	bl	80031fa <get_fat>
 8003560:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003562:	2801      	cmp	r0, #1
 8003564:	d945      	bls.n	80035f2 <dir_next+0xfc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003566:	f1b0 3fff 	cmp.w	r0, #4294967295
 800356a:	d044      	beq.n	80035f6 <dir_next+0x100>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800356c:	69f3      	ldr	r3, [r6, #28]
 800356e:	4283      	cmp	r3, r0
 8003570:	d833      	bhi.n	80035da <dir_next+0xe4>
					if (!stretch) {								/* If no stretch, report EOT */
 8003572:	b18f      	cbz	r7, 8003598 <dir_next+0xa2>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003574:	69a1      	ldr	r1, [r4, #24]
 8003576:	4620      	mov	r0, r4
 8003578:	f7ff ff17 	bl	80033aa <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800357c:	4680      	mov	r8, r0
 800357e:	2800      	cmp	r0, #0
 8003580:	d03b      	beq.n	80035fa <dir_next+0x104>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003582:	2801      	cmp	r0, #1
 8003584:	d03b      	beq.n	80035fe <dir_next+0x108>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003586:	f1b0 3fff 	cmp.w	r0, #4294967295
 800358a:	d03a      	beq.n	8003602 <dir_next+0x10c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800358c:	4630      	mov	r0, r6
 800358e:	f7ff fb6b 	bl	8002c68 <sync_window>
 8003592:	b128      	cbz	r0, 80035a0 <dir_next+0xaa>
 8003594:	2001      	movs	r0, #1
 8003596:	e7d4      	b.n	8003542 <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 8003598:	2300      	movs	r3, #0
 800359a:	61e3      	str	r3, [r4, #28]
 800359c:	2004      	movs	r0, #4
 800359e:	e7d0      	b.n	8003542 <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80035a0:	89b2      	ldrh	r2, [r6, #12]
 80035a2:	2100      	movs	r1, #0
 80035a4:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80035a8:	f7ff f941 	bl	800282e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80035ac:	4641      	mov	r1, r8
 80035ae:	4630      	mov	r0, r6
 80035b0:	f7ff fa34 	bl	8002a1c <clust2sect>
 80035b4:	6370      	str	r0, [r6, #52]	; 0x34
 80035b6:	2700      	movs	r7, #0
 80035b8:	8973      	ldrh	r3, [r6, #10]
 80035ba:	429f      	cmp	r7, r3
 80035bc:	d20a      	bcs.n	80035d4 <dir_next+0xde>
						fs->wflag = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7ff fb50 	bl	8002c68 <sync_window>
 80035c8:	b9e8      	cbnz	r0, 8003606 <dir_next+0x110>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80035ca:	3701      	adds	r7, #1
 80035cc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80035ce:	3301      	adds	r3, #1
 80035d0:	6373      	str	r3, [r6, #52]	; 0x34
 80035d2:	e7f1      	b.n	80035b8 <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 80035d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80035d6:	1bdb      	subs	r3, r3, r7
 80035d8:	6373      	str	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80035da:	f8c4 8018 	str.w	r8, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80035de:	4641      	mov	r1, r8
 80035e0:	4630      	mov	r0, r6
 80035e2:	f7ff fa1b 	bl	8002a1c <clust2sect>
 80035e6:	61e0      	str	r0, [r4, #28]
 80035e8:	e7a0      	b.n	800352c <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80035ea:	2004      	movs	r0, #4
 80035ec:	e7a9      	b.n	8003542 <dir_next+0x4c>
 80035ee:	2004      	movs	r0, #4
 80035f0:	e7a7      	b.n	8003542 <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80035f2:	2002      	movs	r0, #2
 80035f4:	e7a5      	b.n	8003542 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80035f6:	2001      	movs	r0, #1
 80035f8:	e7a3      	b.n	8003542 <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80035fa:	2007      	movs	r0, #7
 80035fc:	e7a1      	b.n	8003542 <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80035fe:	2002      	movs	r0, #2
 8003600:	e79f      	b.n	8003542 <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003602:	2001      	movs	r0, #1
 8003604:	e79d      	b.n	8003542 <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003606:	2001      	movs	r0, #1
 8003608:	e79b      	b.n	8003542 <dir_next+0x4c>

0800360a <dir_alloc>:
{
 800360a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360c:	4604      	mov	r4, r0
 800360e:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8003610:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8003612:	2100      	movs	r1, #0
 8003614:	f7ff fe70 	bl	80032f8 <dir_sdi>
	if (res == FR_OK) {
 8003618:	4603      	mov	r3, r0
 800361a:	b9c0      	cbnz	r0, 800364e <dir_alloc+0x44>
		n = 0;
 800361c:	2500      	movs	r5, #0
 800361e:	e008      	b.n	8003632 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003620:	3501      	adds	r5, #1
 8003622:	42bd      	cmp	r5, r7
 8003624:	d013      	beq.n	800364e <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8003626:	2101      	movs	r1, #1
 8003628:	4620      	mov	r0, r4
 800362a:	f7ff ff64 	bl	80034f6 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800362e:	4603      	mov	r3, r0
 8003630:	b968      	cbnz	r0, 800364e <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8003632:	69e1      	ldr	r1, [r4, #28]
 8003634:	4630      	mov	r0, r6
 8003636:	f7ff fb41 	bl	8002cbc <move_window>
			if (res != FR_OK) break;
 800363a:	4603      	mov	r3, r0
 800363c:	b938      	cbnz	r0, 800364e <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800363e:	6a22      	ldr	r2, [r4, #32]
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	2ae5      	cmp	r2, #229	; 0xe5
 8003644:	d0ec      	beq.n	8003620 <dir_alloc+0x16>
 8003646:	2a00      	cmp	r2, #0
 8003648:	d0ea      	beq.n	8003620 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 800364a:	2500      	movs	r5, #0
 800364c:	e7eb      	b.n	8003626 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800364e:	2b04      	cmp	r3, #4
 8003650:	d001      	beq.n	8003656 <dir_alloc+0x4c>
}
 8003652:	4618      	mov	r0, r3
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003656:	2307      	movs	r3, #7
 8003658:	e7fb      	b.n	8003652 <dir_alloc+0x48>
	...

0800365c <sync_fs>:
{
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003660:	f7ff fb02 	bl	8002c68 <sync_window>
	if (res == FR_OK) {
 8003664:	4605      	mov	r5, r0
 8003666:	b948      	cbnz	r0, 800367c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003668:	7823      	ldrb	r3, [r4, #0]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d008      	beq.n	8003680 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800366e:	2200      	movs	r2, #0
 8003670:	4611      	mov	r1, r2
 8003672:	7860      	ldrb	r0, [r4, #1]
 8003674:	f7ff f8a8 	bl	80027c8 <disk_ioctl>
 8003678:	b100      	cbz	r0, 800367c <sync_fs+0x20>
 800367a:	2501      	movs	r5, #1
}
 800367c:	4628      	mov	r0, r5
 800367e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003680:	7923      	ldrb	r3, [r4, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d1f3      	bne.n	800366e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8003686:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800368a:	89a2      	ldrh	r2, [r4, #12]
 800368c:	2100      	movs	r1, #0
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff f8cd 	bl	800282e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003694:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003698:	f204 2036 	addw	r0, r4, #566	; 0x236
 800369c:	f7ff f8b0 	bl	8002800 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80036a0:	490e      	ldr	r1, [pc, #56]	; (80036dc <sync_fs+0x80>)
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7ff f8b0 	bl	8002808 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80036a8:	490d      	ldr	r1, [pc, #52]	; (80036e0 <sync_fs+0x84>)
 80036aa:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80036ae:	f7ff f8ab 	bl	8002808 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80036b2:	69a1      	ldr	r1, [r4, #24]
 80036b4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80036b8:	f7ff f8a6 	bl	8002808 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80036bc:	6961      	ldr	r1, [r4, #20]
 80036be:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80036c2:	f7ff f8a1 	bl	8002808 <st_dword>
			fs->winsect = fs->volbase + 1;
 80036c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036c8:	3201      	adds	r2, #1
 80036ca:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80036cc:	2301      	movs	r3, #1
 80036ce:	4631      	mov	r1, r6
 80036d0:	7860      	ldrb	r0, [r4, #1]
 80036d2:	f7ff f86d 	bl	80027b0 <disk_write>
			fs->fsi_flag = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	7123      	strb	r3, [r4, #4]
 80036da:	e7c8      	b.n	800366e <sync_fs+0x12>
 80036dc:	41615252 	.word	0x41615252
 80036e0:	61417272 	.word	0x61417272

080036e4 <create_name>:
{
 80036e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e8:	b083      	sub	sp, #12
 80036ea:	4680      	mov	r8, r0
 80036ec:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80036ee:	f8d1 9000 	ldr.w	r9, [r1]
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	691d      	ldr	r5, [r3, #16]
 80036f6:	2400      	movs	r4, #0
 80036f8:	e010      	b.n	800371c <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80036fa:	3601      	adds	r6, #1
 80036fc:	f819 3006 	ldrb.w	r3, [r9, r6]
 8003700:	2b2f      	cmp	r3, #47	; 0x2f
 8003702:	d0fa      	beq.n	80036fa <create_name+0x16>
 8003704:	2b5c      	cmp	r3, #92	; 0x5c
 8003706:	d0f8      	beq.n	80036fa <create_name+0x16>
	*path = &p[si];						/* Return pointer to the next segment */
 8003708:	444e      	add	r6, r9
 800370a:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800370e:	281f      	cmp	r0, #31
 8003710:	d821      	bhi.n	8003756 <create_name+0x72>
 8003712:	2704      	movs	r7, #4
 8003714:	e022      	b.n	800375c <create_name+0x78>
		lfn[di++] = w;					/* Store the Unicode character */
 8003716:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 800371a:	4634      	mov	r4, r6
 800371c:	1c66      	adds	r6, r4, #1
 800371e:	f819 0004 	ldrb.w	r0, [r9, r4]
		if (w < ' ') break;				/* Break if end of the path name */
 8003722:	281f      	cmp	r0, #31
 8003724:	d9f0      	bls.n	8003708 <create_name+0x24>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003726:	282f      	cmp	r0, #47	; 0x2f
 8003728:	d0e8      	beq.n	80036fc <create_name+0x18>
 800372a:	285c      	cmp	r0, #92	; 0x5c
 800372c:	d0e6      	beq.n	80036fc <create_name+0x18>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800372e:	2cfe      	cmp	r4, #254	; 0xfe
 8003730:	f200 80df 	bhi.w	80038f2 <create_name+0x20e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003734:	2101      	movs	r1, #1
 8003736:	f000 fedb 	bl	80044f0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800373a:	4607      	mov	r7, r0
 800373c:	2800      	cmp	r0, #0
 800373e:	f000 80da 	beq.w	80038f6 <create_name+0x212>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003742:	287f      	cmp	r0, #127	; 0x7f
 8003744:	d8e7      	bhi.n	8003716 <create_name+0x32>
 8003746:	4601      	mov	r1, r0
 8003748:	486d      	ldr	r0, [pc, #436]	; (8003900 <create_name+0x21c>)
 800374a:	f7ff f884 	bl	8002856 <chk_chr>
 800374e:	2800      	cmp	r0, #0
 8003750:	d0e1      	beq.n	8003716 <create_name+0x32>
 8003752:	2006      	movs	r0, #6
 8003754:	e084      	b.n	8003860 <create_name+0x17c>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003756:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003758:	e000      	b.n	800375c <create_name+0x78>
		di--;
 800375a:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800375c:	b144      	cbz	r4, 8003770 <create_name+0x8c>
		w = lfn[di - 1];
 800375e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003762:	3b01      	subs	r3, #1
 8003764:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8003768:	2b20      	cmp	r3, #32
 800376a:	d0f6      	beq.n	800375a <create_name+0x76>
 800376c:	2b2e      	cmp	r3, #46	; 0x2e
 800376e:	d0f4      	beq.n	800375a <create_name+0x76>
	lfn[di] = 0;						/* LFN is created */
 8003770:	2300      	movs	r3, #0
 8003772:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003776:	2c00      	cmp	r4, #0
 8003778:	f000 80bf 	beq.w	80038fa <create_name+0x216>
	mem_set(dp->fn, ' ', 11);
 800377c:	220b      	movs	r2, #11
 800377e:	2120      	movs	r1, #32
 8003780:	f108 0024 	add.w	r0, r8, #36	; 0x24
 8003784:	f7ff f853 	bl	800282e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <create_name+0xaa>
 800378c:	3301      	adds	r3, #1
 800378e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8003792:	2a20      	cmp	r2, #32
 8003794:	d0fa      	beq.n	800378c <create_name+0xa8>
 8003796:	2a2e      	cmp	r2, #46	; 0x2e
 8003798:	d0f8      	beq.n	800378c <create_name+0xa8>
	if (si) cf |= NS_LOSS | NS_LFN;
 800379a:	b11b      	cbz	r3, 80037a4 <create_name+0xc0>
 800379c:	f047 0703 	orr.w	r7, r7, #3
 80037a0:	e000      	b.n	80037a4 <create_name+0xc0>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80037a2:	3c01      	subs	r4, #1
 80037a4:	b16c      	cbz	r4, 80037c2 <create_name+0xde>
 80037a6:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 80037aa:	3a01      	subs	r2, #1
 80037ac:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80037b0:	2a2e      	cmp	r2, #46	; 0x2e
 80037b2:	d1f6      	bne.n	80037a2 <create_name+0xbe>
 80037b4:	f04f 0b08 	mov.w	fp, #8
 80037b8:	f04f 0a00 	mov.w	sl, #0
 80037bc:	f8cd a004 	str.w	sl, [sp, #4]
 80037c0:	e00a      	b.n	80037d8 <create_name+0xf4>
 80037c2:	46a2      	mov	sl, r4
 80037c4:	f04f 0b08 	mov.w	fp, #8
 80037c8:	2200      	movs	r2, #0
 80037ca:	9201      	str	r2, [sp, #4]
 80037cc:	e004      	b.n	80037d8 <create_name+0xf4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80037ce:	454c      	cmp	r4, r9
 80037d0:	d00b      	beq.n	80037ea <create_name+0x106>
			cf |= NS_LOSS | NS_LFN; continue;
 80037d2:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 80037d6:	464b      	mov	r3, r9
 80037d8:	f103 0901 	add.w	r9, r3, #1
 80037dc:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 80037e0:	b1fe      	cbz	r6, 8003822 <create_name+0x13e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80037e2:	2e20      	cmp	r6, #32
 80037e4:	d0f5      	beq.n	80037d2 <create_name+0xee>
 80037e6:	2e2e      	cmp	r6, #46	; 0x2e
 80037e8:	d0f1      	beq.n	80037ce <create_name+0xea>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80037ea:	45da      	cmp	sl, fp
 80037ec:	d210      	bcs.n	8003810 <create_name+0x12c>
 80037ee:	454c      	cmp	r4, r9
 80037f0:	d00e      	beq.n	8003810 <create_name+0x12c>
		if (w >= 0x80) {				/* Non ASCII character */
 80037f2:	2e7f      	cmp	r6, #127	; 0x7f
 80037f4:	d844      	bhi.n	8003880 <create_name+0x19c>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80037f6:	2e00      	cmp	r6, #0
 80037f8:	d150      	bne.n	800389c <create_name+0x1b8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80037fa:	f047 0703 	orr.w	r7, r7, #3
 80037fe:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8003800:	eb08 030a 	add.w	r3, r8, sl
 8003804:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8003808:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 800380a:	f10a 0a01 	add.w	sl, sl, #1
 800380e:	e7e3      	b.n	80037d8 <create_name+0xf4>
			if (ni == 11) {				/* Long extension */
 8003810:	f1bb 0f0b 	cmp.w	fp, #11
 8003814:	d027      	beq.n	8003866 <create_name+0x182>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003816:	454c      	cmp	r4, r9
 8003818:	d001      	beq.n	800381e <create_name+0x13a>
 800381a:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 800381e:	454c      	cmp	r4, r9
 8003820:	d224      	bcs.n	800386c <create_name+0x188>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003822:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8003826:	2be5      	cmp	r3, #229	; 0xe5
 8003828:	d054      	beq.n	80038d4 <create_name+0x1f0>
	if (ni == 8) b <<= 2;
 800382a:	f1bb 0f08 	cmp.w	fp, #8
 800382e:	d055      	beq.n	80038dc <create_name+0x1f8>
 8003830:	9b01      	ldr	r3, [sp, #4]
 8003832:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003836:	2a0c      	cmp	r2, #12
 8003838:	d003      	beq.n	8003842 <create_name+0x15e>
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b03      	cmp	r3, #3
 8003840:	d101      	bne.n	8003846 <create_name+0x162>
 8003842:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003846:	f017 0f02 	tst.w	r7, #2
 800384a:	d106      	bne.n	800385a <create_name+0x176>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800384c:	9b01      	ldr	r3, [sp, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d047      	beq.n	80038e6 <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003856:	2a04      	cmp	r2, #4
 8003858:	d048      	beq.n	80038ec <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800385a:	f888 702f 	strb.w	r7, [r8, #47]	; 0x2f
	return FR_OK;
 800385e:	2000      	movs	r0, #0
}
 8003860:	b003      	add	sp, #12
 8003862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8003866:	f047 0703 	orr.w	r7, r7, #3
 800386a:	e7da      	b.n	8003822 <create_name+0x13e>
			b <<= 2; continue;
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	b2db      	uxtb	r3, r3
 8003872:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003874:	4623      	mov	r3, r4
 8003876:	f04f 0b0b 	mov.w	fp, #11
 800387a:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800387e:	e7ab      	b.n	80037d8 <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003880:	2100      	movs	r1, #0
 8003882:	4630      	mov	r0, r6
 8003884:	f000 fe34 	bl	80044f0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003888:	4606      	mov	r6, r0
 800388a:	b120      	cbz	r0, 8003896 <create_name+0x1b2>
 800388c:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <create_name+0x220>)
 8003892:	4433      	add	r3, r6
 8003894:	7c1e      	ldrb	r6, [r3, #16]
			cf |= NS_LFN;				/* Force create LFN entry */
 8003896:	f047 0702 	orr.w	r7, r7, #2
 800389a:	e7ac      	b.n	80037f6 <create_name+0x112>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800389c:	4631      	mov	r1, r6
 800389e:	481a      	ldr	r0, [pc, #104]	; (8003908 <create_name+0x224>)
 80038a0:	f7fe ffd9 	bl	8002856 <chk_chr>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1a8      	bne.n	80037fa <create_name+0x116>
				if (IsUpper(w)) {		/* ASCII large capital */
 80038a8:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b19      	cmp	r3, #25
 80038b0:	d804      	bhi.n	80038bc <create_name+0x1d8>
					b |= 2;
 80038b2:	9b01      	ldr	r3, [sp, #4]
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	e7a1      	b.n	8003800 <create_name+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80038bc:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b19      	cmp	r3, #25
 80038c4:	d89c      	bhi.n	8003800 <create_name+0x11c>
						b |= 1; w -= 0x20;
 80038c6:	9b01      	ldr	r3, [sp, #4]
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	3e20      	subs	r6, #32
 80038d0:	b2b6      	uxth	r6, r6
 80038d2:	e795      	b.n	8003800 <create_name+0x11c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80038d4:	2305      	movs	r3, #5
 80038d6:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 80038da:	e7a6      	b.n	800382a <create_name+0x146>
	if (ni == 8) b <<= 2;
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	e7a4      	b.n	8003830 <create_name+0x14c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80038e6:	f047 0710 	orr.w	r7, r7, #16
 80038ea:	e7b4      	b.n	8003856 <create_name+0x172>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80038ec:	f047 0708 	orr.w	r7, r7, #8
 80038f0:	e7b3      	b.n	800385a <create_name+0x176>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80038f2:	2006      	movs	r0, #6
 80038f4:	e7b4      	b.n	8003860 <create_name+0x17c>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80038f6:	2006      	movs	r0, #6
 80038f8:	e7b2      	b.n	8003860 <create_name+0x17c>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80038fa:	2006      	movs	r0, #6
 80038fc:	e7b0      	b.n	8003860 <create_name+0x17c>
 80038fe:	bf00      	nop
 8003900:	080076c8 	.word	0x080076c8
 8003904:	08007228 	.word	0x08007228
 8003908:	080076d4 	.word	0x080076d4

0800390c <cmp_lfn>:
{
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	4681      	mov	r9, r0
 8003912:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003914:	f101 001a 	add.w	r0, r1, #26
 8003918:	f7fe ff62 	bl	80027e0 <ld_word>
 800391c:	bbb8      	cbnz	r0, 800398e <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800391e:	783d      	ldrb	r5, [r7, #0]
 8003920:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8003924:	3d01      	subs	r5, #1
 8003926:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800392a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800392e:	f04f 0801 	mov.w	r8, #1
 8003932:	2400      	movs	r4, #0
 8003934:	e004      	b.n	8003940 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800393a:	4298      	cmp	r0, r3
 800393c:	d12e      	bne.n	800399c <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800393e:	3401      	adds	r4, #1
 8003940:	2c0c      	cmp	r4, #12
 8003942:	d818      	bhi.n	8003976 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <cmp_lfn+0xa0>)
 8003946:	5d18      	ldrb	r0, [r3, r4]
 8003948:	4438      	add	r0, r7
 800394a:	f7fe ff49 	bl	80027e0 <ld_word>
 800394e:	4606      	mov	r6, r0
		if (wc) {
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	d0ef      	beq.n	8003936 <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003956:	2dfe      	cmp	r5, #254	; 0xfe
 8003958:	d81c      	bhi.n	8003994 <cmp_lfn+0x88>
 800395a:	f000 fde5 	bl	8004528 <ff_wtoupper>
 800395e:	4680      	mov	r8, r0
 8003960:	f105 0a01 	add.w	sl, r5, #1
 8003964:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8003968:	f000 fdde 	bl	8004528 <ff_wtoupper>
 800396c:	4580      	cmp	r8, r0
 800396e:	d113      	bne.n	8003998 <cmp_lfn+0x8c>
			wc = uc;
 8003970:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003972:	4655      	mov	r5, sl
 8003974:	e7e3      	b.n	800393e <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003976:	783b      	ldrb	r3, [r7, #0]
 8003978:	f013 0f40 	tst.w	r3, #64	; 0x40
 800397c:	d010      	beq.n	80039a0 <cmp_lfn+0x94>
 800397e:	f1b8 0f00 	cmp.w	r8, #0
 8003982:	d00f      	beq.n	80039a4 <cmp_lfn+0x98>
 8003984:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 8003988:	b973      	cbnz	r3, 80039a8 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 800398a:	2001      	movs	r0, #1
 800398c:	e000      	b.n	8003990 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800398e:	2000      	movs	r0, #0
}
 8003990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8003994:	2000      	movs	r0, #0
 8003996:	e7fb      	b.n	8003990 <cmp_lfn+0x84>
 8003998:	2000      	movs	r0, #0
 800399a:	e7f9      	b.n	8003990 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800399c:	2000      	movs	r0, #0
 800399e:	e7f7      	b.n	8003990 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 80039a0:	2001      	movs	r0, #1
 80039a2:	e7f5      	b.n	8003990 <cmp_lfn+0x84>
 80039a4:	2001      	movs	r0, #1
 80039a6:	e7f3      	b.n	8003990 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80039a8:	2000      	movs	r0, #0
 80039aa:	e7f1      	b.n	8003990 <cmp_lfn+0x84>
 80039ac:	08007228 	.word	0x08007228

080039b0 <dir_find>:
{
 80039b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039b4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80039b6:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80039ba:	2100      	movs	r1, #0
 80039bc:	f7ff fc9c 	bl	80032f8 <dir_sdi>
	if (res != FR_OK) return res;
 80039c0:	4606      	mov	r6, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d164      	bne.n	8003a90 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	6323      	str	r3, [r4, #48]	; 0x30
 80039cc:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80039d0:	464f      	mov	r7, r9
 80039d2:	e00a      	b.n	80039ea <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
 80039d8:	6323      	str	r3, [r4, #48]	; 0x30
 80039da:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80039dc:	2100      	movs	r1, #0
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fd89 	bl	80034f6 <dir_next>
	} while (res == FR_OK);
 80039e4:	4606      	mov	r6, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d152      	bne.n	8003a90 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 80039ea:	69e1      	ldr	r1, [r4, #28]
 80039ec:	4640      	mov	r0, r8
 80039ee:	f7ff f965 	bl	8002cbc <move_window>
		if (res != FR_OK) break;
 80039f2:	4606      	mov	r6, r0
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d14b      	bne.n	8003a90 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 80039f8:	6a25      	ldr	r5, [r4, #32]
 80039fa:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003a00:	7ae9      	ldrb	r1, [r5, #11]
 8003a02:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8003a06:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003a08:	2be5      	cmp	r3, #229	; 0xe5
 8003a0a:	d0e3      	beq.n	80039d4 <dir_find+0x24>
 8003a0c:	f011 0f08 	tst.w	r1, #8
 8003a10:	d001      	beq.n	8003a16 <dir_find+0x66>
 8003a12:	2a0f      	cmp	r2, #15
 8003a14:	d1de      	bne.n	80039d4 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003a16:	2a0f      	cmp	r2, #15
 8003a18:	d016      	beq.n	8003a48 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003a1a:	b927      	cbnz	r7, 8003a26 <dir_find+0x76>
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f7ff f8d1 	bl	8002bc4 <sum_sfn>
 8003a22:	4548      	cmp	r0, r9
 8003a24:	d034      	beq.n	8003a90 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003a26:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003a2a:	f013 0f01 	tst.w	r3, #1
 8003a2e:	d106      	bne.n	8003a3e <dir_find+0x8e>
 8003a30:	220b      	movs	r2, #11
 8003a32:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7fe fefe 	bl	8002838 <mem_cmp>
 8003a3c:	b340      	cbz	r0, 8003a90 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	6323      	str	r3, [r4, #48]	; 0x30
 8003a44:	27ff      	movs	r7, #255	; 0xff
 8003a46:	e7c9      	b.n	80039dc <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003a48:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8003a4c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a50:	d1c4      	bne.n	80039dc <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003a52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a56:	d006      	beq.n	8003a66 <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 8003a58:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003a5c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003a60:	6962      	ldr	r2, [r4, #20]
 8003a62:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003a64:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003a66:	42bb      	cmp	r3, r7
 8003a68:	d001      	beq.n	8003a6e <dir_find+0xbe>
 8003a6a:	27ff      	movs	r7, #255	; 0xff
 8003a6c:	e7b6      	b.n	80039dc <dir_find+0x2c>
 8003a6e:	7b6b      	ldrb	r3, [r5, #13]
 8003a70:	454b      	cmp	r3, r9
 8003a72:	d001      	beq.n	8003a78 <dir_find+0xc8>
 8003a74:	27ff      	movs	r7, #255	; 0xff
 8003a76:	e7b1      	b.n	80039dc <dir_find+0x2c>
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8003a7e:	f7ff ff45 	bl	800390c <cmp_lfn>
 8003a82:	b110      	cbz	r0, 8003a8a <dir_find+0xda>
 8003a84:	3f01      	subs	r7, #1
 8003a86:	b2ff      	uxtb	r7, r7
 8003a88:	e7a8      	b.n	80039dc <dir_find+0x2c>
 8003a8a:	27ff      	movs	r7, #255	; 0xff
 8003a8c:	e7a6      	b.n	80039dc <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003a8e:	2604      	movs	r6, #4
}
 8003a90:	4630      	mov	r0, r6
 8003a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003a96 <follow_path>:
{
 8003a96:	b530      	push	{r4, r5, lr}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8003a9e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003aa0:	e001      	b.n	8003aa6 <follow_path+0x10>
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	2a2f      	cmp	r2, #47	; 0x2f
 8003aac:	d0f9      	beq.n	8003aa2 <follow_path+0xc>
 8003aae:	2a5c      	cmp	r2, #92	; 0x5c
 8003ab0:	d0f7      	beq.n	8003aa2 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b1f      	cmp	r3, #31
 8003aba:	d921      	bls.n	8003b00 <follow_path+0x6a>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003abc:	a901      	add	r1, sp, #4
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff fe10 	bl	80036e4 <create_name>
			if (res != FR_OK) break;
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	bb18      	cbnz	r0, 8003b10 <follow_path+0x7a>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff ff71 	bl	80039b0 <dir_find>
			ns = dp->fn[NSFLAG];
 8003ace:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	b9f8      	cbnz	r0, 8003b16 <follow_path+0x80>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003ad6:	f012 0f04 	tst.w	r2, #4
 8003ada:	d119      	bne.n	8003b10 <follow_path+0x7a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003adc:	79a3      	ldrb	r3, [r4, #6]
 8003ade:	f013 0f10 	tst.w	r3, #16
 8003ae2:	d01f      	beq.n	8003b24 <follow_path+0x8e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003ae4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8003ae8:	6960      	ldr	r0, [r4, #20]
 8003aea:	89aa      	ldrh	r2, [r5, #12]
 8003aec:	fbb0 f3f2 	udiv	r3, r0, r2
 8003af0:	fb02 0313 	mls	r3, r2, r3, r0
 8003af4:	4419      	add	r1, r3
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7fe ffb2 	bl	8002a60 <ld_clust>
 8003afc:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003afe:	e7dd      	b.n	8003abc <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003b06:	4611      	mov	r1, r2
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f7ff fbf5 	bl	80032f8 <dir_sdi>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	b003      	add	sp, #12
 8003b14:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003b16:	2804      	cmp	r0, #4
 8003b18:	d1fa      	bne.n	8003b10 <follow_path+0x7a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003b1a:	f012 0f04 	tst.w	r2, #4
 8003b1e:	d1f7      	bne.n	8003b10 <follow_path+0x7a>
 8003b20:	2305      	movs	r3, #5
 8003b22:	e7f5      	b.n	8003b10 <follow_path+0x7a>
				res = FR_NO_PATH; break;
 8003b24:	2305      	movs	r3, #5
 8003b26:	e7f3      	b.n	8003b10 <follow_path+0x7a>

08003b28 <dir_register>:
{
 8003b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b2c:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8003b2e:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003b30:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003b34:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8003b38:	f040 808d 	bne.w	8003c56 <dir_register+0x12e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003b3c:	2400      	movs	r4, #0
 8003b3e:	e000      	b.n	8003b42 <dir_register+0x1a>
 8003b40:	3401      	adds	r4, #1
 8003b42:	6933      	ldr	r3, [r6, #16]
 8003b44:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <dir_register+0x18>
 8003b4c:	4605      	mov	r5, r0
	mem_cpy(sn, dp->fn, 12);
 8003b4e:	f100 0724 	add.w	r7, r0, #36	; 0x24
 8003b52:	220c      	movs	r2, #12
 8003b54:	4639      	mov	r1, r7
 8003b56:	a801      	add	r0, sp, #4
 8003b58:	f7fe fe60 	bl	800281c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003b5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003b60:	f013 0f01 	tst.w	r3, #1
 8003b64:	d01f      	beq.n	8003ba6 <dir_register+0x7e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003b6c:	f04f 0801 	mov.w	r8, #1
 8003b70:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8003b74:	d80d      	bhi.n	8003b92 <dir_register+0x6a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003b76:	4643      	mov	r3, r8
 8003b78:	6932      	ldr	r2, [r6, #16]
 8003b7a:	a901      	add	r1, sp, #4
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f7fe ffd1 	bl	8002b24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003b82:	4628      	mov	r0, r5
 8003b84:	f7ff ff14 	bl	80039b0 <dir_find>
			if (res != FR_OK) break;
 8003b88:	4681      	mov	r9, r0
 8003b8a:	b910      	cbnz	r0, 8003b92 <dir_register+0x6a>
		for (n = 1; n < 100; n++) {
 8003b8c:	f108 0801 	add.w	r8, r8, #1
 8003b90:	e7ee      	b.n	8003b70 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003b92:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8003b96:	d064      	beq.n	8003c62 <dir_register+0x13a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003b98:	f1b9 0f04 	cmp.w	r9, #4
 8003b9c:	d15d      	bne.n	8003c5a <dir_register+0x132>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003b9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003ba2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003baa:	f013 0f02 	tst.w	r3, #2
 8003bae:	d02a      	beq.n	8003c06 <dir_register+0xde>
 8003bb0:	340c      	adds	r4, #12
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <dir_register+0x140>)
 8003bb4:	fba3 3404 	umull	r3, r4, r3, r4
 8003bb8:	08a4      	lsrs	r4, r4, #2
 8003bba:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7ff fd23 	bl	800360a <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003bc4:	4681      	mov	r9, r0
 8003bc6:	b908      	cbnz	r0, 8003bcc <dir_register+0xa4>
 8003bc8:	3c01      	subs	r4, #1
 8003bca:	d11e      	bne.n	8003c0a <dir_register+0xe2>
	if (res == FR_OK) {
 8003bcc:	f1b9 0f00 	cmp.w	r9, #0
 8003bd0:	d143      	bne.n	8003c5a <dir_register+0x132>
		res = move_window(fs, dp->sect);
 8003bd2:	69e9      	ldr	r1, [r5, #28]
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff f871 	bl	8002cbc <move_window>
		if (res == FR_OK) {
 8003bda:	4681      	mov	r9, r0
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d13c      	bne.n	8003c5a <dir_register+0x132>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003be0:	2220      	movs	r2, #32
 8003be2:	2100      	movs	r1, #0
 8003be4:	6a28      	ldr	r0, [r5, #32]
 8003be6:	f7fe fe22 	bl	800282e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003bea:	220b      	movs	r2, #11
 8003bec:	4639      	mov	r1, r7
 8003bee:	6a28      	ldr	r0, [r5, #32]
 8003bf0:	f7fe fe14 	bl	800281c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003bf4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8003bf8:	6a2a      	ldr	r2, [r5, #32]
 8003bfa:	f003 0318 	and.w	r3, r3, #24
 8003bfe:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	70f3      	strb	r3, [r6, #3]
 8003c04:	e029      	b.n	8003c5a <dir_register+0x132>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003c06:	2401      	movs	r4, #1
 8003c08:	e7d8      	b.n	8003bbc <dir_register+0x94>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003c0a:	6969      	ldr	r1, [r5, #20]
 8003c0c:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7ff fb71 	bl	80032f8 <dir_sdi>
		if (res == FR_OK) {
 8003c16:	4681      	mov	r9, r0
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1d7      	bne.n	8003bcc <dir_register+0xa4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	f7fe ffd1 	bl	8002bc4 <sum_sfn>
 8003c22:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8003c24:	69e9      	ldr	r1, [r5, #28]
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7ff f848 	bl	8002cbc <move_window>
				if (res != FR_OK) break;
 8003c2c:	4681      	mov	r9, r0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d1cc      	bne.n	8003bcc <dir_register+0xa4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003c32:	4643      	mov	r3, r8
 8003c34:	b2e2      	uxtb	r2, r4
 8003c36:	6a29      	ldr	r1, [r5, #32]
 8003c38:	6930      	ldr	r0, [r6, #16]
 8003c3a:	f7fe ff37 	bl	8002aac <put_lfn>
				fs->wflag = 1;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003c42:	2100      	movs	r1, #0
 8003c44:	4628      	mov	r0, r5
 8003c46:	f7ff fc56 	bl	80034f6 <dir_next>
			} while (res == FR_OK && --nent);
 8003c4a:	4681      	mov	r9, r0
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1bd      	bne.n	8003bcc <dir_register+0xa4>
 8003c50:	3c01      	subs	r4, #1
 8003c52:	d1e7      	bne.n	8003c24 <dir_register+0xfc>
 8003c54:	e7ba      	b.n	8003bcc <dir_register+0xa4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003c56:	f04f 0906 	mov.w	r9, #6
}
 8003c5a:	4648      	mov	r0, r9
 8003c5c:	b005      	add	sp, #20
 8003c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003c62:	f04f 0907 	mov.w	r9, #7
 8003c66:	e7f8      	b.n	8003c5a <dir_register+0x132>
 8003c68:	4ec4ec4f 	.word	0x4ec4ec4f

08003c6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	9001      	str	r0, [sp, #4]
 8003c72:	9100      	str	r1, [sp, #0]
 8003c74:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003c76:	a804      	add	r0, sp, #16
 8003c78:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003c7c:	f7fe ffb0 	bl	8002be0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c80:	1e04      	subs	r4, r0, #0
 8003c82:	db1e      	blt.n	8003cc2 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <f_mount+0x60>)
 8003c86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c8a:	6a1d      	ldr	r5, [r3, #32]

	if (cfs) {
 8003c8c:	b125      	cbz	r5, 8003c98 <f_mount+0x2c>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f7fe fea6 	bl	80029e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003c94:	2300      	movs	r3, #0
 8003c96:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	b10b      	cbz	r3, 8003ca0 <f_mount+0x34>
		fs->fs_type = 0;				/* Clear new fs object */
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003ca0:	9b01      	ldr	r3, [sp, #4]
 8003ca2:	480a      	ldr	r0, [pc, #40]	; (8003ccc <f_mount+0x60>)
 8003ca4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003ca8:	6203      	str	r3, [r0, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003caa:	b163      	cbz	r3, 8003cc6 <f_mount+0x5a>
 8003cac:	2e01      	cmp	r6, #1
 8003cae:	d002      	beq.n	8003cb6 <f_mount+0x4a>
 8003cb0:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	a901      	add	r1, sp, #4
 8003cba:	4668      	mov	r0, sp
 8003cbc:	f7ff f856 	bl	8002d6c <find_volume>
	LEAVE_FF(fs, res);
 8003cc0:	e7f7      	b.n	8003cb2 <f_mount+0x46>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003cc2:	200b      	movs	r0, #11
 8003cc4:	e7f5      	b.n	8003cb2 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e7f3      	b.n	8003cb2 <f_mount+0x46>
 8003cca:	bf00      	nop
 8003ccc:	20000100 	.word	0x20000100

08003cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	b093      	sub	sp, #76	; 0x4c
 8003cd6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	f000 8112 	beq.w	8003f02 <f_open+0x232>
 8003cde:	4605      	mov	r5, r0
 8003ce0:	4616      	mov	r6, r2

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003ce2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003ce6:	463a      	mov	r2, r7
 8003ce8:	a903      	add	r1, sp, #12
 8003cea:	a801      	add	r0, sp, #4
 8003cec:	f7ff f83e 	bl	8002d6c <find_volume>
	if (res == FR_OK) {
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	b130      	cbz	r0, 8003d02 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003cf4:	b10c      	cbz	r4, 8003cfa <f_open+0x2a>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	b013      	add	sp, #76	; 0x4c
 8003cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8003d02:	9b03      	ldr	r3, [sp, #12]
 8003d04:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003d06:	9901      	ldr	r1, [sp, #4]
 8003d08:	a804      	add	r0, sp, #16
 8003d0a:	f7ff fec4 	bl	8003a96 <follow_path>
		if (res == FR_OK) {
 8003d0e:	4604      	mov	r4, r0
 8003d10:	b960      	cbnz	r0, 8003d2c <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003d12:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db51      	blt.n	8003dbe <f_open+0xee>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003d1a:	f037 0301 	bics.w	r3, r7, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2101      	movne	r1, #1
 8003d22:	2100      	moveq	r1, #0
 8003d24:	a804      	add	r0, sp, #16
 8003d26:	f7fe fd9f 	bl	8002868 <chk_lock>
 8003d2a:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003d2c:	f016 0f1c 	tst.w	r6, #28
 8003d30:	d05b      	beq.n	8003dea <f_open+0x11a>
			if (res != FR_OK) {					/* No file, create new */
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	d04f      	beq.n	8003dd6 <f_open+0x106>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003d36:	2c04      	cmp	r4, #4
 8003d38:	d043      	beq.n	8003dc2 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003d3a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003d3e:	2c00      	cmp	r4, #0
 8003d40:	d162      	bne.n	8003e08 <f_open+0x138>
 8003d42:	f017 0f08 	tst.w	r7, #8
 8003d46:	d05f      	beq.n	8003e08 <f_open+0x138>
				dw = GET_FATTIME();
 8003d48:	f000 ffca 	bl	8004ce0 <get_fattime>
 8003d4c:	4606      	mov	r6, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003d4e:	4601      	mov	r1, r0
 8003d50:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d52:	300e      	adds	r0, #14
 8003d54:	f7fe fd58 	bl	8002808 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003d58:	4631      	mov	r1, r6
 8003d5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d5c:	3016      	adds	r0, #22
 8003d5e:	f7fe fd53 	bl	8002808 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d64:	2220      	movs	r2, #32
 8003d66:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003d68:	9e03      	ldr	r6, [sp, #12]
 8003d6a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003d6e:	4641      	mov	r1, r8
 8003d70:	4630      	mov	r0, r6
 8003d72:	f7fe fe75 	bl	8002a60 <ld_clust>
 8003d76:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7fe fe82 	bl	8002a86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003d82:	2100      	movs	r1, #0
 8003d84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d86:	301c      	adds	r0, #28
 8003d88:	f7fe fd3e 	bl	8002808 <st_dword>
					fs->wflag = 1;
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003d92:	f1b9 0f00 	cmp.w	r9, #0
 8003d96:	d037      	beq.n	8003e08 <f_open+0x138>
						dw = fs->winsect;
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4649      	mov	r1, r9
 8003da0:	a804      	add	r0, sp, #16
 8003da2:	f7ff fb64 	bl	800346e <remove_chain>
						if (res == FR_OK) {
 8003da6:	4604      	mov	r4, r0
 8003da8:	bb70      	cbnz	r0, 8003e08 <f_open+0x138>
							res = move_window(fs, dw);
 8003daa:	4631      	mov	r1, r6
 8003dac:	9803      	ldr	r0, [sp, #12]
 8003dae:	f7fe ff85 	bl	8002cbc <move_window>
 8003db2:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003db4:	f109 33ff 	add.w	r3, r9, #4294967295
 8003db8:	9a03      	ldr	r2, [sp, #12]
 8003dba:	6153      	str	r3, [r2, #20]
 8003dbc:	e024      	b.n	8003e08 <f_open+0x138>
				res = FR_INVALID_NAME;
 8003dbe:	2406      	movs	r4, #6
 8003dc0:	e7b4      	b.n	8003d2c <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003dc2:	f7fe fd8b 	bl	80028dc <enq_lock>
 8003dc6:	b908      	cbnz	r0, 8003dcc <f_open+0xfc>
 8003dc8:	2412      	movs	r4, #18
 8003dca:	e7b6      	b.n	8003d3a <f_open+0x6a>
 8003dcc:	a804      	add	r0, sp, #16
 8003dce:	f7ff feab 	bl	8003b28 <dir_register>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	e7b1      	b.n	8003d3a <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003dd6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003dda:	f013 0f11 	tst.w	r3, #17
 8003dde:	d112      	bne.n	8003e06 <f_open+0x136>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003de0:	f016 0f04 	tst.w	r6, #4
 8003de4:	d0ab      	beq.n	8003d3e <f_open+0x6e>
 8003de6:	2408      	movs	r4, #8
 8003de8:	e00e      	b.n	8003e08 <f_open+0x138>
			if (res == FR_OK) {					/* Following succeeded */
 8003dea:	b96c      	cbnz	r4, 8003e08 <f_open+0x138>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003dec:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003df0:	f013 0f10 	tst.w	r3, #16
 8003df4:	d14e      	bne.n	8003e94 <f_open+0x1c4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003df6:	f016 0f02 	tst.w	r6, #2
 8003dfa:	d005      	beq.n	8003e08 <f_open+0x138>
 8003dfc:	f013 0f01 	tst.w	r3, #1
 8003e00:	d002      	beq.n	8003e08 <f_open+0x138>
						res = FR_DENIED;
 8003e02:	2407      	movs	r4, #7
 8003e04:	e016      	b.n	8003e34 <f_open+0x164>
					res = FR_DENIED;
 8003e06:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8003e08:	b9a4      	cbnz	r4, 8003e34 <f_open+0x164>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003e0a:	f017 0f08 	tst.w	r7, #8
 8003e0e:	d001      	beq.n	8003e14 <f_open+0x144>
				mode |= FA_MODIFIED;
 8003e10:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003e14:	9b03      	ldr	r3, [sp, #12]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8003e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e1c:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003e1e:	f037 0301 	bics.w	r3, r7, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2101      	movne	r1, #1
 8003e26:	2100      	moveq	r1, #0
 8003e28:	a804      	add	r0, sp, #16
 8003e2a:	f7fe fd67 	bl	80028fc <inc_lock>
 8003e2e:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d064      	beq.n	8003efe <f_open+0x22e>
		if (res == FR_OK) {
 8003e34:	2c00      	cmp	r4, #0
 8003e36:	f47f af5d 	bne.w	8003cf4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003e3a:	9e03      	ldr	r6, [sp, #12]
 8003e3c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003e40:	4641      	mov	r1, r8
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7fe fe0c 	bl	8002a60 <ld_clust>
 8003e48:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003e4a:	f108 001c 	add.w	r0, r8, #28
 8003e4e:	f7fe fccc 	bl	80027ea <ld_dword>
 8003e52:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003e54:	2100      	movs	r1, #0
 8003e56:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003e58:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 8003e5a:	88f3      	ldrh	r3, [r6, #6]
 8003e5c:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8003e5e:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8003e60:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003e62:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003e64:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003e66:	f105 0830 	add.w	r8, r5, #48	; 0x30
 8003e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e6e:	4640      	mov	r0, r8
 8003e70:	f7fe fcdd 	bl	800282e <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003e74:	f017 0f20 	tst.w	r7, #32
 8003e78:	f43f af3c 	beq.w	8003cf4 <f_open+0x24>
 8003e7c:	68ee      	ldr	r6, [r5, #12]
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	f43f af38 	beq.w	8003cf4 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003e84:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	895a      	ldrh	r2, [r3, #10]
 8003e8a:	899f      	ldrh	r7, [r3, #12]
 8003e8c:	fb07 f702 	mul.w	r7, r7, r2
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003e90:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003e92:	e005      	b.n	8003ea0 <f_open+0x1d0>
					res = FR_NO_FILE;
 8003e94:	2404      	movs	r4, #4
 8003e96:	e7cd      	b.n	8003e34 <f_open+0x164>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003e98:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003e9c:	d00b      	beq.n	8003eb6 <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003e9e:	1bf6      	subs	r6, r6, r7
 8003ea0:	b95c      	cbnz	r4, 8003eba <f_open+0x1ea>
 8003ea2:	42be      	cmp	r6, r7
 8003ea4:	d909      	bls.n	8003eba <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f7ff f9a7 	bl	80031fa <get_fat>
 8003eac:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003eae:	2801      	cmp	r0, #1
 8003eb0:	d8f2      	bhi.n	8003e98 <f_open+0x1c8>
 8003eb2:	2402      	movs	r4, #2
 8003eb4:	e7f0      	b.n	8003e98 <f_open+0x1c8>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003eb6:	2401      	movs	r4, #1
 8003eb8:	e7f1      	b.n	8003e9e <f_open+0x1ce>
				fp->clust = clst;
 8003eba:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003ebc:	2c00      	cmp	r4, #0
 8003ebe:	f47f af19 	bne.w	8003cf4 <f_open+0x24>
 8003ec2:	9f03      	ldr	r7, [sp, #12]
 8003ec4:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 8003ec8:	fbb6 f3f9 	udiv	r3, r6, r9
 8003ecc:	fb09 6313 	mls	r3, r9, r3, r6
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f43f af0f 	beq.w	8003cf4 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f7fe fda0 	bl	8002a1c <clust2sect>
 8003edc:	b908      	cbnz	r0, 8003ee2 <f_open+0x212>
						res = FR_INT_ERR;
 8003ede:	2402      	movs	r4, #2
 8003ee0:	e709      	b.n	8003cf6 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003ee2:	fbb6 f2f9 	udiv	r2, r6, r9
 8003ee6:	4402      	add	r2, r0
 8003ee8:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	4641      	mov	r1, r8
 8003eee:	7878      	ldrb	r0, [r7, #1]
 8003ef0:	f7fe fc52 	bl	8002798 <disk_read>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	f43f aefd 	beq.w	8003cf4 <f_open+0x24>
 8003efa:	2401      	movs	r4, #1
 8003efc:	e6fb      	b.n	8003cf6 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003efe:	2402      	movs	r4, #2
 8003f00:	e6f8      	b.n	8003cf4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8003f02:	2409      	movs	r4, #9
 8003f04:	e6f9      	b.n	8003cfa <f_open+0x2a>

08003f06 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4689      	mov	r9, r1
 8003f10:	4615      	mov	r5, r2
 8003f12:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003f1a:	9001      	str	r0, [sp, #4]
 8003f1c:	a903      	add	r1, sp, #12
 8003f1e:	f7fe fe89 	bl	8002c34 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003f22:	4607      	mov	r7, r0
 8003f24:	2800      	cmp	r0, #0
 8003f26:	f040 80ae 	bne.w	8004086 <f_read+0x180>
 8003f2a:	7d67      	ldrb	r7, [r4, #21]
 8003f2c:	2f00      	cmp	r7, #0
 8003f2e:	f040 80aa 	bne.w	8004086 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003f32:	7d23      	ldrb	r3, [r4, #20]
 8003f34:	f013 0f01 	tst.w	r3, #1
 8003f38:	f000 80bc 	beq.w	80040b4 <f_read+0x1ae>
	remain = fp->obj.objsize - fp->fptr;
 8003f3c:	68e6      	ldr	r6, [r4, #12]
 8003f3e:	69a3      	ldr	r3, [r4, #24]
 8003f40:	1af6      	subs	r6, r6, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003f42:	42ae      	cmp	r6, r5
 8003f44:	d360      	bcc.n	8004008 <f_read+0x102>
 8003f46:	462e      	mov	r6, r5
 8003f48:	e05e      	b.n	8004008 <f_read+0x102>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8003f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f4c:	b11b      	cbz	r3, 8003f56 <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7fe fd70 	bl	8002a34 <clmt_clust>
 8003f54:	e06c      	b.n	8004030 <f_read+0x12a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003f56:	69e1      	ldr	r1, [r4, #28]
 8003f58:	9801      	ldr	r0, [sp, #4]
 8003f5a:	f7ff f94e 	bl	80031fa <get_fat>
 8003f5e:	e067      	b.n	8004030 <f_read+0x12a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003f60:	2702      	movs	r7, #2
 8003f62:	7567      	strb	r7, [r4, #21]
 8003f64:	e08f      	b.n	8004086 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003f66:	2701      	movs	r7, #1
 8003f68:	7567      	strb	r7, [r4, #21]
 8003f6a:	e08c      	b.n	8004086 <f_read+0x180>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003f6c:	2702      	movs	r7, #2
 8003f6e:	7567      	strb	r7, [r4, #21]
 8003f70:	e089      	b.n	8004086 <f_read+0x180>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003f72:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db04      	blt.n	8003f84 <f_read+0x7e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	899b      	ldrh	r3, [r3, #12]
 8003f7e:	fb0a fa03 	mul.w	sl, sl, r3
				continue;
 8003f82:	e036      	b.n	8003ff2 <f_read+0xec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003f84:	6a20      	ldr	r0, [r4, #32]
 8003f86:	9b00      	ldr	r3, [sp, #0]
 8003f88:	1ac0      	subs	r0, r0, r3
 8003f8a:	4550      	cmp	r0, sl
 8003f8c:	d2f5      	bcs.n	8003f7a <f_read+0x74>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	899b      	ldrh	r3, [r3, #12]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003f98:	fb03 9000 	mla	r0, r3, r0, r9
 8003f9c:	f7fe fc3e 	bl	800281c <mem_cpy>
 8003fa0:	e7eb      	b.n	8003f7a <f_read+0x74>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003fa2:	6a22      	ldr	r2, [r4, #32]
 8003fa4:	9b00      	ldr	r3, [sp, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d00d      	beq.n	8003fc6 <f_read+0xc0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003faa:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	db6d      	blt.n	800408e <f_read+0x188>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	9a00      	ldr	r2, [sp, #0]
 8003fb6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003fba:	9803      	ldr	r0, [sp, #12]
 8003fbc:	7840      	ldrb	r0, [r0, #1]
 8003fbe:	f7fe fbeb 	bl	8002798 <disk_read>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d173      	bne.n	80040ae <f_read+0x1a8>
			}
#endif
			fp->sect = sect;
 8003fc6:	9b00      	ldr	r3, [sp, #0]
 8003fc8:	6223      	str	r3, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 8003fd0:	69a1      	ldr	r1, [r4, #24]
 8003fd2:	fbb1 f3fa 	udiv	r3, r1, sl
 8003fd6:	fb0a 1313 	mls	r3, sl, r3, r1
 8003fda:	ebaa 0a03 	sub.w	sl, sl, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003fde:	4556      	cmp	r6, sl
 8003fe0:	d200      	bcs.n	8003fe4 <f_read+0xde>
 8003fe2:	46b2      	mov	sl, r6
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003fe4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003fe8:	4652      	mov	r2, sl
 8003fea:	4419      	add	r1, r3
 8003fec:	4648      	mov	r0, r9
 8003fee:	f7fe fc15 	bl	800281c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003ff2:	44d1      	add	r9, sl
 8003ff4:	69a3      	ldr	r3, [r4, #24]
 8003ff6:	4453      	add	r3, sl
 8003ff8:	61a3      	str	r3, [r4, #24]
 8003ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8003ffe:	4453      	add	r3, sl
 8004000:	f8c8 3000 	str.w	r3, [r8]
 8004004:	eba6 060a 	sub.w	r6, r6, sl
	for ( ;  btr;								/* Repeat until all data read */
 8004008:	2e00      	cmp	r6, #0
 800400a:	d03c      	beq.n	8004086 <f_read+0x180>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800400c:	69a1      	ldr	r1, [r4, #24]
 800400e:	9a03      	ldr	r2, [sp, #12]
 8004010:	8995      	ldrh	r5, [r2, #12]
 8004012:	fbb1 f3f5 	udiv	r3, r1, r5
 8004016:	fb05 1313 	mls	r3, r5, r3, r1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1d5      	bne.n	8003fca <f_read+0xc4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800401e:	fbb1 f5f5 	udiv	r5, r1, r5
 8004022:	8953      	ldrh	r3, [r2, #10]
 8004024:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8004026:	401d      	ands	r5, r3
 8004028:	d108      	bne.n	800403c <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800402a:	2900      	cmp	r1, #0
 800402c:	d18d      	bne.n	8003f4a <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800402e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004030:	2801      	cmp	r0, #1
 8004032:	d995      	bls.n	8003f60 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004034:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004038:	d095      	beq.n	8003f66 <f_read+0x60>
				fp->clust = clst;				/* Update current cluster */
 800403a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800403c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004040:	69e1      	ldr	r1, [r4, #28]
 8004042:	4658      	mov	r0, fp
 8004044:	f7fe fcea 	bl	8002a1c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004048:	2800      	cmp	r0, #0
 800404a:	d08f      	beq.n	8003f6c <f_read+0x66>
			sect += csect;
 800404c:	182b      	adds	r3, r5, r0
 800404e:	9300      	str	r3, [sp, #0]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004050:	f8bb a00c 	ldrh.w	sl, [fp, #12]
 8004054:	fbb6 fafa 	udiv	sl, r6, sl
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004058:	f1ba 0f00 	cmp.w	sl, #0
 800405c:	d0a1      	beq.n	8003fa2 <f_read+0x9c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800405e:	eb05 030a 	add.w	r3, r5, sl
 8004062:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <f_read+0x168>
					cc = fs->csize - csect;
 800406a:	eba2 0a05 	sub.w	sl, r2, r5
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800406e:	4653      	mov	r3, sl
 8004070:	9a00      	ldr	r2, [sp, #0]
 8004072:	4649      	mov	r1, r9
 8004074:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004078:	f7fe fb8e 	bl	8002798 <disk_read>
 800407c:	2800      	cmp	r0, #0
 800407e:	f43f af78 	beq.w	8003f72 <f_read+0x6c>
 8004082:	2701      	movs	r7, #1
 8004084:	7567      	strb	r7, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8004086:	4638      	mov	r0, r7
 8004088:	b005      	add	sp, #20
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800408e:	2301      	movs	r3, #1
 8004090:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004094:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004098:	f7fe fb8a 	bl	80027b0 <disk_write>
 800409c:	b920      	cbnz	r0, 80040a8 <f_read+0x1a2>
					fp->flag &= (BYTE)~FA_DIRTY;
 800409e:	7d23      	ldrb	r3, [r4, #20]
 80040a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a4:	7523      	strb	r3, [r4, #20]
 80040a6:	e784      	b.n	8003fb2 <f_read+0xac>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80040a8:	2701      	movs	r7, #1
 80040aa:	7567      	strb	r7, [r4, #21]
 80040ac:	e7eb      	b.n	8004086 <f_read+0x180>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80040ae:	2701      	movs	r7, #1
 80040b0:	7567      	strb	r7, [r4, #21]
 80040b2:	e7e8      	b.n	8004086 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80040b4:	2707      	movs	r7, #7
 80040b6:	e7e6      	b.n	8004086 <f_read+0x180>

080040b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80040be:	a901      	add	r1, sp, #4
 80040c0:	f7fe fdb8 	bl	8002c34 <validate>
	if (res == FR_OK) {
 80040c4:	4603      	mov	r3, r0
 80040c6:	b978      	cbnz	r0, 80040e8 <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80040c8:	7d22      	ldrb	r2, [r4, #20]
 80040ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040ce:	d00b      	beq.n	80040e8 <f_sync+0x30>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80040d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040d4:	d10b      	bne.n	80040ee <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80040d6:	f000 fe03 	bl	8004ce0 <get_fattime>
 80040da:	4606      	mov	r6, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80040dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80040de:	9801      	ldr	r0, [sp, #4]
 80040e0:	f7fe fdec 	bl	8002cbc <move_window>
				if (res == FR_OK) {
 80040e4:	4603      	mov	r3, r0
 80040e6:	b180      	cbz	r0, 800410a <f_sync+0x52>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	b002      	add	sp, #8
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80040ee:	2301      	movs	r3, #1
 80040f0:	6a22      	ldr	r2, [r4, #32]
 80040f2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80040f6:	9801      	ldr	r0, [sp, #4]
 80040f8:	7840      	ldrb	r0, [r0, #1]
 80040fa:	f7fe fb59 	bl	80027b0 <disk_write>
 80040fe:	bb48      	cbnz	r0, 8004154 <f_sync+0x9c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004100:	7d23      	ldrb	r3, [r4, #20]
 8004102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004106:	7523      	strb	r3, [r4, #20]
 8004108:	e7e5      	b.n	80040d6 <f_sync+0x1e>
					dir = fp->dir_ptr;
 800410a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800410c:	7aeb      	ldrb	r3, [r5, #11]
 800410e:	f043 0320 	orr.w	r3, r3, #32
 8004112:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004114:	68a2      	ldr	r2, [r4, #8]
 8004116:	4629      	mov	r1, r5
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	f7fe fcb4 	bl	8002a86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800411e:	68e1      	ldr	r1, [r4, #12]
 8004120:	f105 001c 	add.w	r0, r5, #28
 8004124:	f7fe fb70 	bl	8002808 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004128:	4631      	mov	r1, r6
 800412a:	f105 0016 	add.w	r0, r5, #22
 800412e:	f7fe fb6b 	bl	8002808 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004132:	2100      	movs	r1, #0
 8004134:	f105 0012 	add.w	r0, r5, #18
 8004138:	f7fe fb62 	bl	8002800 <st_word>
					fs->wflag = 1;
 800413c:	9b01      	ldr	r3, [sp, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004142:	9801      	ldr	r0, [sp, #4]
 8004144:	f7ff fa8a 	bl	800365c <sync_fs>
 8004148:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800414a:	7d22      	ldrb	r2, [r4, #20]
 800414c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004150:	7522      	strb	r2, [r4, #20]
 8004152:	e7c9      	b.n	80040e8 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004154:	2301      	movs	r3, #1
 8004156:	e7c7      	b.n	80040e8 <f_sync+0x30>

08004158 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004158:	b510      	push	{r4, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800415e:	f7ff ffab 	bl	80040b8 <f_sync>
	if (res == FR_OK)
 8004162:	4603      	mov	r3, r0
 8004164:	b110      	cbz	r0, 800416c <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8004166:	4618      	mov	r0, r3
 8004168:	b002      	add	sp, #8
 800416a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800416c:	a901      	add	r1, sp, #4
 800416e:	4620      	mov	r0, r4
 8004170:	f7fe fd60 	bl	8002c34 <validate>
		if (res == FR_OK) {
 8004174:	4603      	mov	r3, r0
 8004176:	2800      	cmp	r0, #0
 8004178:	d1f5      	bne.n	8004166 <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800417a:	6920      	ldr	r0, [r4, #16]
 800417c:	f7fe fc10 	bl	80029a0 <dec_lock>
			if (res == FR_OK)
 8004180:	4603      	mov	r3, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d1ef      	bne.n	8004166 <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 8004186:	2200      	movs	r2, #0
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	e7ec      	b.n	8004166 <f_close+0xe>

0800418c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004190:	b085      	sub	sp, #20
 8004192:	4604      	mov	r4, r0
 8004194:	460f      	mov	r7, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8004196:	4606      	mov	r6, r0
 8004198:	a903      	add	r1, sp, #12
 800419a:	f7fe fd4b 	bl	8002c34 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800419e:	4605      	mov	r5, r0
 80041a0:	b900      	cbnz	r0, 80041a4 <f_lseek+0x18>
 80041a2:	7d65      	ldrb	r5, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80041a4:	b96d      	cbnz	r5, 80041c2 <f_lseek+0x36>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80041a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8092 	beq.w	80042d2 <f_lseek+0x146>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80041ae:	f1b7 3fff 	cmp.w	r7, #4294967295
 80041b2:	d00a      	beq.n	80041ca <f_lseek+0x3e>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80041b4:	68e6      	ldr	r6, [r4, #12]
 80041b6:	42be      	cmp	r6, r7
 80041b8:	d300      	bcc.n	80041bc <f_lseek+0x30>
 80041ba:	463e      	mov	r6, r7
			fp->fptr = ofs;				/* Set file pointer */
 80041bc:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 80041be:	2e00      	cmp	r6, #0
 80041c0:	d143      	bne.n	800424a <f_lseek+0xbe>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 80041c2:	4628      	mov	r0, r5
 80041c4:	b005      	add	sp, #20
 80041c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80041ca:	1d1a      	adds	r2, r3, #4
 80041cc:	9201      	str	r2, [sp, #4]
 80041ce:	f8d3 b000 	ldr.w	fp, [r3]
			cl = fp->obj.sclust;		/* Origin of the chain */
 80041d2:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 80041d6:	f1ba 0f00 	cmp.w	sl, #0
 80041da:	d02a      	beq.n	8004232 <f_lseek+0xa6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80041dc:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80041e0:	f109 0902 	add.w	r9, r9, #2
 80041e4:	4657      	mov	r7, sl
 80041e6:	f04f 0800 	mov.w	r8, #0
						pcl = cl; ncl++;
 80041ea:	f108 0801 	add.w	r8, r8, #1
						cl = get_fat(&fp->obj, cl);
 80041ee:	4639      	mov	r1, r7
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff f802 	bl	80031fa <get_fat>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80041f6:	2801      	cmp	r0, #1
 80041f8:	d915      	bls.n	8004226 <f_lseek+0x9a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80041fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041fe:	d015      	beq.n	800422c <f_lseek+0xa0>
					} while (cl == pcl + 1);
 8004200:	1c7b      	adds	r3, r7, #1
						cl = get_fat(&fp->obj, cl);
 8004202:	4607      	mov	r7, r0
					} while (cl == pcl + 1);
 8004204:	4283      	cmp	r3, r0
 8004206:	d0f0      	beq.n	80041ea <f_lseek+0x5e>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004208:	45cb      	cmp	fp, r9
 800420a:	d306      	bcc.n	800421a <f_lseek+0x8e>
						*tbl++ = ncl; *tbl++ = tcl;
 800420c:	9a01      	ldr	r2, [sp, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	f843 8b08 	str.w	r8, [r3], #8
 8004214:	f8c2 a004 	str.w	sl, [r2, #4]
 8004218:	9301      	str	r3, [sp, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4283      	cmp	r3, r0
 8004220:	d909      	bls.n	8004236 <f_lseek+0xaa>
						cl = get_fat(&fp->obj, cl);
 8004222:	4682      	mov	sl, r0
 8004224:	e7dc      	b.n	80041e0 <f_lseek+0x54>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004226:	2502      	movs	r5, #2
 8004228:	7565      	strb	r5, [r4, #21]
 800422a:	e7ca      	b.n	80041c2 <f_lseek+0x36>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800422c:	2501      	movs	r5, #1
 800422e:	7565      	strb	r5, [r4, #21]
 8004230:	e7c7      	b.n	80041c2 <f_lseek+0x36>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004232:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8004236:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004238:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 800423c:	45d9      	cmp	r9, fp
 800423e:	f200 8107 	bhi.w	8004450 <f_lseek+0x2c4>
				*tbl = 0;		/* Terminate table */
 8004242:	2300      	movs	r3, #0
 8004244:	9a01      	ldr	r2, [sp, #4]
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e7bb      	b.n	80041c2 <f_lseek+0x36>
				fp->clust = clmt_clust(fp, ofs - 1);
 800424a:	1e77      	subs	r7, r6, #1
 800424c:	4639      	mov	r1, r7
 800424e:	4620      	mov	r0, r4
 8004250:	f7fe fbf0 	bl	8002a34 <clmt_clust>
 8004254:	4601      	mov	r1, r0
 8004256:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 8004258:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800425c:	4640      	mov	r0, r8
 800425e:	f7fe fbdd 	bl	8002a1c <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8004262:	b308      	cbz	r0, 80042a8 <f_lseek+0x11c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8004264:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8004268:	fbb7 f7f2 	udiv	r7, r7, r2
 800426c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8004270:	3b01      	subs	r3, #1
 8004272:	401f      	ands	r7, r3
 8004274:	4407      	add	r7, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8004276:	fbb6 f3f2 	udiv	r3, r6, r2
 800427a:	fb02 6613 	mls	r6, r2, r3, r6
 800427e:	2e00      	cmp	r6, #0
 8004280:	d09f      	beq.n	80041c2 <f_lseek+0x36>
 8004282:	6a22      	ldr	r2, [r4, #32]
 8004284:	42ba      	cmp	r2, r7
 8004286:	d09c      	beq.n	80041c2 <f_lseek+0x36>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004288:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0e      	blt.n	80042ae <f_lseek+0x122>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8004290:	2301      	movs	r3, #1
 8004292:	463a      	mov	r2, r7
 8004294:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004298:	9803      	ldr	r0, [sp, #12]
 800429a:	7840      	ldrb	r0, [r0, #1]
 800429c:	f7fe fa7c 	bl	8002798 <disk_read>
 80042a0:	b1a8      	cbz	r0, 80042ce <f_lseek+0x142>
 80042a2:	2501      	movs	r5, #1
 80042a4:	7565      	strb	r5, [r4, #21]
 80042a6:	e78c      	b.n	80041c2 <f_lseek+0x36>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80042a8:	2502      	movs	r5, #2
 80042aa:	7565      	strb	r5, [r4, #21]
 80042ac:	e789      	b.n	80041c2 <f_lseek+0x36>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042ae:	2301      	movs	r3, #1
 80042b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80042b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80042b8:	f7fe fa7a 	bl	80027b0 <disk_write>
 80042bc:	b920      	cbnz	r0, 80042c8 <f_lseek+0x13c>
						fp->flag &= (BYTE)~FA_DIRTY;
 80042be:	7d23      	ldrb	r3, [r4, #20]
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	7523      	strb	r3, [r4, #20]
 80042c6:	e7e3      	b.n	8004290 <f_lseek+0x104>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042c8:	2501      	movs	r5, #1
 80042ca:	7565      	strb	r5, [r4, #21]
 80042cc:	e779      	b.n	80041c2 <f_lseek+0x36>
					fp->sect = dsc;
 80042ce:	6227      	str	r7, [r4, #32]
 80042d0:	e777      	b.n	80041c2 <f_lseek+0x36>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80042d2:	68e3      	ldr	r3, [r4, #12]
 80042d4:	42bb      	cmp	r3, r7
 80042d6:	d204      	bcs.n	80042e2 <f_lseek+0x156>
 80042d8:	7d22      	ldrb	r2, [r4, #20]
 80042da:	f012 0f02 	tst.w	r2, #2
 80042de:	d100      	bne.n	80042e2 <f_lseek+0x156>
			ofs = fp->obj.objsize;
 80042e0:	461f      	mov	r7, r3
		ifptr = fp->fptr;
 80042e2:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80042e4:	2200      	movs	r2, #0
 80042e6:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	d074      	beq.n	80043d6 <f_lseek+0x24a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80042ec:	9a03      	ldr	r2, [sp, #12]
 80042ee:	8951      	ldrh	r1, [r2, #10]
 80042f0:	f8b2 900c 	ldrh.w	r9, [r2, #12]
 80042f4:	fb09 f901 	mul.w	r9, r9, r1
			if (ifptr > 0 &&
 80042f8:	b17b      	cbz	r3, 800431a <f_lseek+0x18e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80042fa:	1e7a      	subs	r2, r7, #1
 80042fc:	fbb2 f2f9 	udiv	r2, r2, r9
 8004300:	3b01      	subs	r3, #1
 8004302:	fbb3 f1f9 	udiv	r1, r3, r9
			if (ifptr > 0 &&
 8004306:	428a      	cmp	r2, r1
 8004308:	d307      	bcc.n	800431a <f_lseek+0x18e>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800430a:	f1c9 0200 	rsb	r2, r9, #0
 800430e:	4013      	ands	r3, r2
 8004310:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8004312:	1aff      	subs	r7, r7, r3
				clst = fp->clust;
 8004314:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8004318:	e006      	b.n	8004328 <f_lseek+0x19c>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800431a:	f8d4 8008 	ldr.w	r8, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800431e:	f1b8 0f00 	cmp.w	r8, #0
 8004322:	d005      	beq.n	8004330 <f_lseek+0x1a4>
				fp->clust = clst;
 8004324:	f8c4 801c 	str.w	r8, [r4, #28]
			if (clst != 0) {
 8004328:	f1b8 0f00 	cmp.w	r8, #0
 800432c:	d123      	bne.n	8004376 <f_lseek+0x1ea>
 800432e:	e054      	b.n	80043da <f_lseek+0x24e>
					clst = create_chain(&fp->obj, 0);
 8004330:	2100      	movs	r1, #0
 8004332:	4620      	mov	r0, r4
 8004334:	f7ff f839 	bl	80033aa <create_chain>
 8004338:	4680      	mov	r8, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800433a:	2801      	cmp	r0, #1
 800433c:	d004      	beq.n	8004348 <f_lseek+0x1bc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800433e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004342:	d004      	beq.n	800434e <f_lseek+0x1c2>
					fp->obj.sclust = clst;
 8004344:	60a0      	str	r0, [r4, #8]
 8004346:	e7ed      	b.n	8004324 <f_lseek+0x198>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004348:	2502      	movs	r5, #2
 800434a:	7565      	strb	r5, [r4, #21]
 800434c:	e739      	b.n	80041c2 <f_lseek+0x36>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800434e:	2501      	movs	r5, #1
 8004350:	7565      	strb	r5, [r4, #21]
 8004352:	e736      	b.n	80041c2 <f_lseek+0x36>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8004354:	4641      	mov	r1, r8
 8004356:	4630      	mov	r0, r6
 8004358:	f7fe ff4f 	bl	80031fa <get_fat>
 800435c:	4680      	mov	r8, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800435e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004362:	d02f      	beq.n	80043c4 <f_lseek+0x238>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8004364:	f1b8 0f01 	cmp.w	r8, #1
 8004368:	d92f      	bls.n	80043ca <f_lseek+0x23e>
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4543      	cmp	r3, r8
 8004370:	d92b      	bls.n	80043ca <f_lseek+0x23e>
					fp->clust = clst;
 8004372:	f8c4 801c 	str.w	r8, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8004376:	454f      	cmp	r7, r9
 8004378:	d910      	bls.n	800439c <f_lseek+0x210>
					ofs -= bcs; fp->fptr += bcs;
 800437a:	eba7 0709 	sub.w	r7, r7, r9
 800437e:	69a3      	ldr	r3, [r4, #24]
 8004380:	444b      	add	r3, r9
 8004382:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004384:	7d23      	ldrb	r3, [r4, #20]
 8004386:	f013 0f02 	tst.w	r3, #2
 800438a:	d0e3      	beq.n	8004354 <f_lseek+0x1c8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800438c:	4641      	mov	r1, r8
 800438e:	4630      	mov	r0, r6
 8004390:	f7ff f80b 	bl	80033aa <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8004394:	4680      	mov	r8, r0
 8004396:	2800      	cmp	r0, #0
 8004398:	d1e1      	bne.n	800435e <f_lseek+0x1d2>
							ofs = 0; break;
 800439a:	2700      	movs	r7, #0
				fp->fptr += ofs;
 800439c:	69a3      	ldr	r3, [r4, #24]
 800439e:	443b      	add	r3, r7
 80043a0:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 80043a2:	9803      	ldr	r0, [sp, #12]
 80043a4:	8986      	ldrh	r6, [r0, #12]
 80043a6:	fbb7 f3f6 	udiv	r3, r7, r6
 80043aa:	fb06 7313 	mls	r3, r6, r3, r7
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d039      	beq.n	8004426 <f_lseek+0x29a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80043b2:	4641      	mov	r1, r8
 80043b4:	f7fe fb32 	bl	8002a1c <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80043b8:	4680      	mov	r8, r0
 80043ba:	b148      	cbz	r0, 80043d0 <f_lseek+0x244>
					nsect += (DWORD)(ofs / SS(fs));
 80043bc:	fbb7 f7f6 	udiv	r7, r7, r6
 80043c0:	44b8      	add	r8, r7
 80043c2:	e00a      	b.n	80043da <f_lseek+0x24e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80043c4:	2501      	movs	r5, #1
 80043c6:	7565      	strb	r5, [r4, #21]
 80043c8:	e6fb      	b.n	80041c2 <f_lseek+0x36>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80043ca:	2502      	movs	r5, #2
 80043cc:	7565      	strb	r5, [r4, #21]
 80043ce:	e6f8      	b.n	80041c2 <f_lseek+0x36>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80043d0:	2502      	movs	r5, #2
 80043d2:	7565      	strb	r5, [r4, #21]
 80043d4:	e6f5      	b.n	80041c2 <f_lseek+0x36>
		fp->fptr = nsect = 0;
 80043d6:	f04f 0800 	mov.w	r8, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80043da:	69a3      	ldr	r3, [r4, #24]
 80043dc:	68e2      	ldr	r2, [r4, #12]
 80043de:	4293      	cmp	r3, r2
 80043e0:	d904      	bls.n	80043ec <f_lseek+0x260>
			fp->obj.objsize = fp->fptr;
 80043e2:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 80043e4:	7d22      	ldrb	r2, [r4, #20]
 80043e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ea:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80043ec:	9803      	ldr	r0, [sp, #12]
 80043ee:	8981      	ldrh	r1, [r0, #12]
 80043f0:	fbb3 f2f1 	udiv	r2, r3, r1
 80043f4:	fb01 3312 	mls	r3, r1, r2, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f43f aee2 	beq.w	80041c2 <f_lseek+0x36>
 80043fe:	6a22      	ldr	r2, [r4, #32]
 8004400:	4542      	cmp	r2, r8
 8004402:	f43f aede 	beq.w	80041c2 <f_lseek+0x36>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8004406:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	db0e      	blt.n	800442c <f_lseek+0x2a0>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800440e:	2301      	movs	r3, #1
 8004410:	4642      	mov	r2, r8
 8004412:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004416:	9803      	ldr	r0, [sp, #12]
 8004418:	7840      	ldrb	r0, [r0, #1]
 800441a:	f7fe f9bd 	bl	8002798 <disk_read>
 800441e:	b9a0      	cbnz	r0, 800444a <f_lseek+0x2be>
			fp->sect = nsect;
 8004420:	f8c4 8020 	str.w	r8, [r4, #32]
 8004424:	e6cd      	b.n	80041c2 <f_lseek+0x36>
		fp->fptr = nsect = 0;
 8004426:	f04f 0800 	mov.w	r8, #0
 800442a:	e7d6      	b.n	80043da <f_lseek+0x24e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800442c:	2301      	movs	r3, #1
 800442e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004432:	7840      	ldrb	r0, [r0, #1]
 8004434:	f7fe f9bc 	bl	80027b0 <disk_write>
 8004438:	b920      	cbnz	r0, 8004444 <f_lseek+0x2b8>
				fp->flag &= (BYTE)~FA_DIRTY;
 800443a:	7d23      	ldrb	r3, [r4, #20]
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	7523      	strb	r3, [r4, #20]
 8004442:	e7e4      	b.n	800440e <f_lseek+0x282>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004444:	2501      	movs	r5, #1
 8004446:	7565      	strb	r5, [r4, #21]
 8004448:	e6bb      	b.n	80041c2 <f_lseek+0x36>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800444a:	2501      	movs	r5, #1
 800444c:	7565      	strb	r5, [r4, #21]
 800444e:	e6b8      	b.n	80041c2 <f_lseek+0x36>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004450:	2511      	movs	r5, #17
 8004452:	e6b6      	b.n	80041c2 <f_lseek+0x36>

08004454 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004454:	4b10      	ldr	r3, [pc, #64]	; (8004498 <FATFS_LinkDriverEx+0x44>)
 8004456:	7a5b      	ldrb	r3, [r3, #9]
 8004458:	b9db      	cbnz	r3, 8004492 <FATFS_LinkDriverEx+0x3e>
{
 800445a:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 800445c:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <FATFS_LinkDriverEx+0x44>)
 800445e:	7a5d      	ldrb	r5, [r3, #9]
 8004460:	b2ed      	uxtb	r5, r5
 8004462:	2400      	movs	r4, #0
 8004464:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004466:	7a5d      	ldrb	r5, [r3, #9]
 8004468:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800446c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800446e:	7a58      	ldrb	r0, [r3, #9]
 8004470:	4418      	add	r0, r3
 8004472:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004474:	7a5a      	ldrb	r2, [r3, #9]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	1c50      	adds	r0, r2, #1
 800447a:	b2c0      	uxtb	r0, r0
 800447c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 800447e:	3230      	adds	r2, #48	; 0x30
 8004480:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8004482:	233a      	movs	r3, #58	; 0x3a
 8004484:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004486:	232f      	movs	r3, #47	; 0x2f
 8004488:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800448a:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 800448c:	4620      	mov	r0, r4
  }

  return ret;
}
 800448e:	bc30      	pop	{r4, r5}
 8004490:	4770      	bx	lr
  uint8_t ret = 1;
 8004492:	2001      	movs	r0, #1
}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000328 	.word	0x20000328

0800449c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800449c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	f7ff ffd8 	bl	8004454 <FATFS_LinkDriverEx>
}
 80044a4:	bd08      	pop	{r3, pc}
	...

080044a8 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <FATFS_UnLinkDriverEx+0x38>)
 80044aa:	7a5b      	ldrb	r3, [r3, #9]
 80044ac:	b19b      	cbz	r3, 80044d6 <FATFS_UnLinkDriverEx+0x2e>
  {
    DiskNum = path[0] - '0';
 80044ae:	7803      	ldrb	r3, [r0, #0]
 80044b0:	3b30      	subs	r3, #48	; 0x30
 80044b2:	b2db      	uxtb	r3, r3
    if(disk.drv[DiskNum] != 0)
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <FATFS_UnLinkDriverEx+0x38>)
 80044b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	b16a      	cbz	r2, 80044da <FATFS_UnLinkDriverEx+0x32>
    {
      disk.drv[DiskNum] = 0;
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <FATFS_UnLinkDriverEx+0x38>)
 80044c0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80044c4:	2000      	movs	r0, #0
 80044c6:	6048      	str	r0, [r1, #4]
      disk.lun[DiskNum] = 0;
 80044c8:	4413      	add	r3, r2
 80044ca:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 80044cc:	7a53      	ldrb	r3, [r2, #9]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	7253      	strb	r3, [r2, #9]
 80044d4:	4770      	bx	lr
  uint8_t ret = 1;
 80044d6:	2001      	movs	r0, #1
 80044d8:	4770      	bx	lr
 80044da:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000328 	.word	0x20000328

080044e4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80044e4:	b508      	push	{r3, lr}
  return FATFS_UnLinkDriverEx(path, 0);
 80044e6:	2100      	movs	r1, #0
 80044e8:	f7ff ffde 	bl	80044a8 <FATFS_UnLinkDriverEx>
}
 80044ec:	bd08      	pop	{r3, pc}
	...

080044f0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80044f0:	287f      	cmp	r0, #127	; 0x7f
 80044f2:	d916      	bls.n	8004522 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80044f4:	b131      	cbz	r1, 8004504 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80044f6:	28ff      	cmp	r0, #255	; 0xff
 80044f8:	d812      	bhi.n	8004520 <ff_convert+0x30>
 80044fa:	3880      	subs	r0, #128	; 0x80
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <ff_convert+0x34>)
 80044fe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004502:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8004504:	2300      	movs	r3, #0
 8004506:	2b7f      	cmp	r3, #127	; 0x7f
 8004508:	d807      	bhi.n	800451a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800450a:	4a06      	ldr	r2, [pc, #24]	; (8004524 <ff_convert+0x34>)
 800450c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004510:	4282      	cmp	r2, r0
 8004512:	d002      	beq.n	800451a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8004514:	3301      	adds	r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	e7f5      	b.n	8004506 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800451a:	3380      	adds	r3, #128	; 0x80
 800451c:	b2d8      	uxtb	r0, r3
 800451e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004520:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8004522:	4770      	bx	lr
 8004524:	080072d8 	.word	0x080072d8

08004528 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8004528:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800452c:	d207      	bcs.n	800453e <ff_wtoupper+0x16>
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8004530:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8004532:	2a00      	cmp	r2, #0
 8004534:	d040      	beq.n	80045b8 <ff_wtoupper+0x90>
 8004536:	4290      	cmp	r0, r2
 8004538:	d33e      	bcc.n	80045b8 <ff_wtoupper+0x90>
{
 800453a:	b4f0      	push	{r4, r5, r6, r7}
 800453c:	e006      	b.n	800454c <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <ff_wtoupper+0x98>)
 8004540:	e7f6      	b.n	8004530 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004542:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 8004544:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8004546:	b1ca      	cbz	r2, 800457c <ff_wtoupper+0x54>
 8004548:	4290      	cmp	r0, r2
 800454a:	d317      	bcc.n	800457c <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800454c:	1d1d      	adds	r5, r3, #4
 800454e:	885b      	ldrh	r3, [r3, #2]
 8004550:	0a19      	lsrs	r1, r3, #8
 8004552:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8004554:	189c      	adds	r4, r3, r2
 8004556:	42a0      	cmp	r0, r4
 8004558:	db04      	blt.n	8004564 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800455a:	2900      	cmp	r1, #0
 800455c:	d1f1      	bne.n	8004542 <ff_wtoupper+0x1a>
 800455e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004562:	e7ef      	b.n	8004544 <ff_wtoupper+0x1c>
			switch (cmd) {
 8004564:	2908      	cmp	r1, #8
 8004566:	d809      	bhi.n	800457c <ff_wtoupper+0x54>
 8004568:	e8df f001 	tbb	[pc, r1]
 800456c:	13100a05 	.word	0x13100a05
 8004570:	1f1c1916 	.word	0x1f1c1916
 8004574:	22          	.byte	0x22
 8004575:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8004576:	1a86      	subs	r6, r0, r2
 8004578:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 800457c:	bcf0      	pop	{r4, r5, r6, r7}
 800457e:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8004580:	1a82      	subs	r2, r0, r2
 8004582:	f002 0301 	and.w	r3, r2, #1
 8004586:	1ac0      	subs	r0, r0, r3
 8004588:	b280      	uxth	r0, r0
 800458a:	e7f7      	b.n	800457c <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 800458c:	3810      	subs	r0, #16
 800458e:	b280      	uxth	r0, r0
 8004590:	e7f4      	b.n	800457c <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8004592:	3820      	subs	r0, #32
 8004594:	b280      	uxth	r0, r0
 8004596:	e7f1      	b.n	800457c <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8004598:	3830      	subs	r0, #48	; 0x30
 800459a:	b280      	uxth	r0, r0
 800459c:	e7ee      	b.n	800457c <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800459e:	381a      	subs	r0, #26
 80045a0:	b280      	uxth	r0, r0
 80045a2:	e7eb      	b.n	800457c <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 80045a4:	3008      	adds	r0, #8
 80045a6:	b280      	uxth	r0, r0
 80045a8:	e7e8      	b.n	800457c <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 80045aa:	3850      	subs	r0, #80	; 0x50
 80045ac:	b280      	uxth	r0, r0
 80045ae:	e7e5      	b.n	800457c <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80045b0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80045b4:	b280      	uxth	r0, r0
 80045b6:	e7e1      	b.n	800457c <ff_wtoupper+0x54>
}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	08007494 	.word	0x08007494
 80045c0:	080073d8 	.word	0x080073d8

080045c4 <SD_SPI_init>:

/* slave select */
static void SD_SPI_init(void)
{
	//Configure with CubeMX
	SET_BIT(SD_SPI->CR1, SPI_CR1_SPE);	//Enable SPI function
 80045c4:	4a02      	ldr	r2, [pc, #8]	; (80045d0 <SD_SPI_init+0xc>)
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045cc:	6013      	str	r3, [r2, #0]
}
 80045ce:	4770      	bx	lr
 80045d0:	40013000 	.word	0x40013000

080045d4 <SD_SPI_select>:
static void SD_SPI_select(void)
{
	SD_CS_LOW();
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <SD_SPI_select+0xc>)
 80045d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045da:	619a      	str	r2, [r3, #24]
}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40020000 	.word	0x40020000

080045e4 <SD_SPI_deselect>:

/* slave deselect */
static void SD_SPI_deselect(void)
{
	SD_CS_HIGH();
 80045e4:	4b01      	ldr	r3, [pc, #4]	; (80045ec <SD_SPI_deselect+0x8>)
 80045e6:	2210      	movs	r2, #16
 80045e8:	619a      	str	r2, [r3, #24]
}
 80045ea:	4770      	bx	lr
 80045ec:	40020000 	.word	0x40020000

080045f0 <SD_SPI_xchg>:

// SPI exchange bytes
static uint8_t SD_SPI_xchg(uint8_t data)
{
	while (!(SD_SPI->SR&SPI_FLAG_TXE)); //wait for empty TX buffer
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <SD_SPI_xchg+0x20>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f013 0f02 	tst.w	r3, #2
 80045f8:	d0fa      	beq.n	80045f0 <SD_SPI_xchg>
	SD_SPI->DR=data;
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <SD_SPI_xchg+0x20>)
 80045fc:	60d8      	str	r0, [r3, #12]
	while (!(SD_SPI->SR&SPI_FLAG_RXNE));//wait for not empty RX buffer
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <SD_SPI_xchg+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f013 0f01 	tst.w	r3, #1
 8004606:	d0fa      	beq.n	80045fe <SD_SPI_xchg+0xe>
	return (SD_SPI->DR);
 8004608:	4b01      	ldr	r3, [pc, #4]	; (8004610 <SD_SPI_xchg+0x20>)
 800460a:	68d8      	ldr	r0, [r3, #12]
}
 800460c:	b2c0      	uxtb	r0, r0
 800460e:	4770      	bx	lr
 8004610:	40013000 	.word	0x40013000

08004614 <SD_SPI_xmit_multi>:

// buff - Pointer to the data, btx - Number of bytes to send (even number)
static void SD_SPI_xmit_multi(uint8_t *buff, UINT btx)
{
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4605      	mov	r5, r0
 8004618:	460e      	mov	r6, r1
	uint16_t i;

	for(i=0;i<btx;i++)
 800461a:	2400      	movs	r4, #0
 800461c:	e005      	b.n	800462a <SD_SPI_xmit_multi+0x16>
	{
		SD_SPI_xchg(*buff);
 800461e:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004622:	f7ff ffe5 	bl	80045f0 <SD_SPI_xchg>
	for(i=0;i<btx;i++)
 8004626:	3401      	adds	r4, #1
 8004628:	b2a4      	uxth	r4, r4
 800462a:	42b4      	cmp	r4, r6
 800462c:	d3f7      	bcc.n	800461e <SD_SPI_xmit_multi+0xa>
		buff++;
	}
}
 800462e:	bd70      	pop	{r4, r5, r6, pc}

08004630 <SD_SPI_rcvr_multi>:

// buff - Pointer to data buffer, btr - Number of bytes to receive (even number)
static void SD_SPI_rcvr_multi(BYTE *buff,	UINT btr)
{
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4605      	mov	r5, r0
 8004634:	460e      	mov	r6, r1
	uint16_t i;

	for(i=0;i<btr;i++)
 8004636:	2400      	movs	r4, #0
 8004638:	e006      	b.n	8004648 <SD_SPI_rcvr_multi+0x18>
	{
		*buff=SD_SPI_xchg(0xFF);
 800463a:	20ff      	movs	r0, #255	; 0xff
 800463c:	f7ff ffd8 	bl	80045f0 <SD_SPI_xchg>
 8004640:	f805 0b01 	strb.w	r0, [r5], #1
	for(i=0;i<btr;i++)
 8004644:	3401      	adds	r4, #1
 8004646:	b2a4      	uxth	r4, r4
 8004648:	42b4      	cmp	r4, r6
 800464a:	d3f6      	bcc.n	800463a <SD_SPI_rcvr_multi+0xa>
		buff++;
	}
}
 800464c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004650 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004650:	b508      	push	{r3, lr}
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <SD_ReadyWait+0x20>)
 8004654:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004658:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SD_SPI_xchg(0xFF);
 800465a:	20ff      	movs	r0, #255	; 0xff
 800465c:	f7ff ffc8 	bl	80045f0 <SD_SPI_xchg>
	} while ((res != 0xFF) && Timer2);
 8004660:	28ff      	cmp	r0, #255	; 0xff
 8004662:	d003      	beq.n	800466c <SD_ReadyWait+0x1c>
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <SD_ReadyWait+0x20>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f6      	bne.n	800465a <SD_ReadyWait+0xa>

	return res;
}
 800466c:	bd08      	pop	{r3, pc}
 800466e:	bf00      	nop
 8004670:	20001bac 	.word	0x20001bac

08004674 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004674:	b510      	push	{r4, lr}
 8004676:	b082      	sub	sp, #8
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	SD_SPI_deselect();
 8004678:	f7ff ffb4 	bl	80045e4 <SD_SPI_deselect>
	for(int i = 0; i < 10; i++)
 800467c:	2400      	movs	r4, #0
 800467e:	e003      	b.n	8004688 <SD_PowerOn+0x14>
	{
		SD_SPI_xchg(0xFF);
 8004680:	20ff      	movs	r0, #255	; 0xff
 8004682:	f7ff ffb5 	bl	80045f0 <SD_SPI_xchg>
	for(int i = 0; i < 10; i++)
 8004686:	3401      	adds	r4, #1
 8004688:	2c09      	cmp	r4, #9
 800468a:	ddf9      	ble.n	8004680 <SD_PowerOn+0xc>
	}

	/* slave select */
	SD_SPI_select();
 800468c:	f7ff ffa2 	bl	80045d4 <SD_SPI_select>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004690:	2340      	movs	r3, #64	; 0x40
 8004692:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 800469c:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 80046a0:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 80046a4:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 80046a8:	2395      	movs	r3, #149	; 0x95
 80046aa:	f88d 3005 	strb.w	r3, [sp, #5]

	SD_SPI_xmit_multi(args, sizeof(args));
 80046ae:	2106      	movs	r1, #6
 80046b0:	4668      	mov	r0, sp
 80046b2:	f7ff ffaf 	bl	8004614 <SD_SPI_xmit_multi>
	uint32_t cnt = 0x1FFF;
 80046b6:	f641 74ff 	movw	r4, #8191	; 0x1fff
	/* wait response */
	while ((SD_SPI_xchg(0xFF) != 0x01) && cnt)
 80046ba:	20ff      	movs	r0, #255	; 0xff
 80046bc:	f7ff ff98 	bl	80045f0 <SD_SPI_xchg>
 80046c0:	2801      	cmp	r0, #1
 80046c2:	d002      	beq.n	80046ca <SD_PowerOn+0x56>
 80046c4:	b10c      	cbz	r4, 80046ca <SD_PowerOn+0x56>
	{
		cnt--;
 80046c6:	3c01      	subs	r4, #1
 80046c8:	e7f7      	b.n	80046ba <SD_PowerOn+0x46>
	}

	SD_SPI_deselect();
 80046ca:	f7ff ff8b 	bl	80045e4 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 80046ce:	20ff      	movs	r0, #255	; 0xff
 80046d0:	f7ff ff8e 	bl	80045f0 <SD_SPI_xchg>

	PowerFlag = 1;
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <SD_PowerOn+0x6c>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
}
 80046da:	b002      	add	sp, #8
 80046dc:	bd10      	pop	{r4, pc}
 80046de:	bf00      	nop
 80046e0:	20000334 	.word	0x20000334

080046e4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
	PowerFlag = 0;
 80046e4:	4b01      	ldr	r3, [pc, #4]	; (80046ec <SD_PowerOff+0x8>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
}
 80046ea:	4770      	bx	lr
 80046ec:	20000334 	.word	0x20000334

080046f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
	return PowerFlag;
}
 80046f0:	4b01      	ldr	r3, [pc, #4]	; (80046f8 <SD_CheckPower+0x8>)
 80046f2:	7818      	ldrb	r0, [r3, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000334 	.word	0x20000334

080046fc <SD_RxDataBlock>:


/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4604      	mov	r4, r0
 8004700:	460d      	mov	r5, r1
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <SD_RxDataBlock+0x40>)
 8004704:	22c8      	movs	r2, #200	; 0xc8
 8004706:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SD_SPI_xchg(0xFF);
 8004708:	20ff      	movs	r0, #255	; 0xff
 800470a:	f7ff ff71 	bl	80045f0 <SD_SPI_xchg>
	} while((token == 0xFF) && Timer1);
 800470e:	28ff      	cmp	r0, #255	; 0xff
 8004710:	d103      	bne.n	800471a <SD_RxDataBlock+0x1e>
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <SD_RxDataBlock+0x40>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f6      	bne.n	8004708 <SD_RxDataBlock+0xc>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800471a:	28fe      	cmp	r0, #254	; 0xfe
 800471c:	d001      	beq.n	8004722 <SD_RxDataBlock+0x26>
 800471e:	2000      	movs	r0, #0
	/* discard CRC */
	SD_SPI_xchg(0xFF);
	SD_SPI_xchg(0xFF);

	return TRUE;
}
 8004720:	bd38      	pop	{r3, r4, r5, pc}
	SD_SPI_rcvr_multi(buff,len);
 8004722:	4629      	mov	r1, r5
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff ff83 	bl	8004630 <SD_SPI_rcvr_multi>
	SD_SPI_xchg(0xFF);
 800472a:	20ff      	movs	r0, #255	; 0xff
 800472c:	f7ff ff60 	bl	80045f0 <SD_SPI_xchg>
	SD_SPI_xchg(0xFF);
 8004730:	20ff      	movs	r0, #255	; 0xff
 8004732:	f7ff ff5d 	bl	80045f0 <SD_SPI_xchg>
	return TRUE;
 8004736:	2001      	movs	r0, #1
 8004738:	e7f2      	b.n	8004720 <SD_RxDataBlock+0x24>
 800473a:	bf00      	nop
 800473c:	20001bae 	.word	0x20001bae

08004740 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4605      	mov	r5, r0
 8004744:	460c      	mov	r4, r1
	uint8_t resp=0;
	uint8_t i = 0;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004746:	f7ff ff83 	bl	8004650 <SD_ReadyWait>
 800474a:	28ff      	cmp	r0, #255	; 0xff
 800474c:	d001      	beq.n	8004752 <SD_TxDataBlock+0x12>
 800474e:	2000      	movs	r0, #0

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;

	return FALSE;
}
 8004750:	bd38      	pop	{r3, r4, r5, pc}
	SD_SPI_xchg(token);
 8004752:	4620      	mov	r0, r4
 8004754:	f7ff ff4c 	bl	80045f0 <SD_SPI_xchg>
	if (token != 0xFD)
 8004758:	2cfd      	cmp	r4, #253	; 0xfd
 800475a:	d106      	bne.n	800476a <SD_TxDataBlock+0x2a>
	uint8_t resp=0;
 800475c:	2500      	movs	r5, #0
	if ((resp & 0x1F) == 0x05) return TRUE;
 800475e:	f005 051f 	and.w	r5, r5, #31
 8004762:	2d05      	cmp	r5, #5
 8004764:	d021      	beq.n	80047aa <SD_TxDataBlock+0x6a>
	return FALSE;
 8004766:	2000      	movs	r0, #0
 8004768:	e7f2      	b.n	8004750 <SD_TxDataBlock+0x10>
		SD_SPI_xmit_multi((uint8_t*)buff, 512);
 800476a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800476e:	4628      	mov	r0, r5
 8004770:	f7ff ff50 	bl	8004614 <SD_SPI_xmit_multi>
		SD_SPI_xchg(0xFF);
 8004774:	20ff      	movs	r0, #255	; 0xff
 8004776:	f7ff ff3b 	bl	80045f0 <SD_SPI_xchg>
		SD_SPI_xchg(0xFF);
 800477a:	20ff      	movs	r0, #255	; 0xff
 800477c:	f7ff ff38 	bl	80045f0 <SD_SPI_xchg>
	uint8_t i = 0;
 8004780:	2400      	movs	r4, #0
	uint8_t resp=0;
 8004782:	4625      	mov	r5, r4
		while (i <= 64)
 8004784:	2c40      	cmp	r4, #64	; 0x40
 8004786:	d80a      	bhi.n	800479e <SD_TxDataBlock+0x5e>
			resp = SD_SPI_xchg(0xFF);
 8004788:	20ff      	movs	r0, #255	; 0xff
 800478a:	f7ff ff31 	bl	80045f0 <SD_SPI_xchg>
 800478e:	4605      	mov	r5, r0
			if ((resp & 0x1F) == 0x05) break;
 8004790:	f000 031f 	and.w	r3, r0, #31
 8004794:	2b05      	cmp	r3, #5
 8004796:	d002      	beq.n	800479e <SD_TxDataBlock+0x5e>
			i++;
 8004798:	3401      	adds	r4, #1
 800479a:	b2e4      	uxtb	r4, r4
 800479c:	e7f2      	b.n	8004784 <SD_TxDataBlock+0x44>
		while (SD_SPI_xchg(0xFF) == 0);
 800479e:	20ff      	movs	r0, #255	; 0xff
 80047a0:	f7ff ff26 	bl	80045f0 <SD_SPI_xchg>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d0fa      	beq.n	800479e <SD_TxDataBlock+0x5e>
 80047a8:	e7d9      	b.n	800475e <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 80047aa:	2001      	movs	r0, #1
 80047ac:	e7d0      	b.n	8004750 <SD_TxDataBlock+0x10>

080047ae <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80047ae:	b538      	push	{r3, r4, r5, lr}
 80047b0:	4605      	mov	r5, r0
 80047b2:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80047b4:	f7ff ff4c 	bl	8004650 <SD_ReadyWait>
 80047b8:	28ff      	cmp	r0, #255	; 0xff
 80047ba:	d001      	beq.n	80047c0 <SD_SendCmd+0x12>
 80047bc:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SD_SPI_xchg(0xFF);
	} while ((res & 0x80) && --n);

	return res;
}
 80047be:	bd38      	pop	{r3, r4, r5, pc}
	SD_SPI_xchg(cmd); 					/* Command */
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7ff ff15 	bl	80045f0 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80047c6:	0e20      	lsrs	r0, r4, #24
 80047c8:	f7ff ff12 	bl	80045f0 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80047cc:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80047d0:	f7ff ff0e 	bl	80045f0 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80047d4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80047d8:	f7ff ff0a 	bl	80045f0 <SD_SPI_xchg>
	SD_SPI_xchg((uint8_t)arg); 			/* Argument[7..0] */
 80047dc:	b2e0      	uxtb	r0, r4
 80047de:	f7ff ff07 	bl	80045f0 <SD_SPI_xchg>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80047e2:	2d40      	cmp	r5, #64	; 0x40
 80047e4:	d014      	beq.n	8004810 <SD_SendCmd+0x62>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80047e6:	2d48      	cmp	r5, #72	; 0x48
 80047e8:	d010      	beq.n	800480c <SD_SendCmd+0x5e>
	else crc = 1;
 80047ea:	2001      	movs	r0, #1
	SD_SPI_xchg(crc);
 80047ec:	f7ff ff00 	bl	80045f0 <SD_SPI_xchg>
	if (cmd == CMD12) SD_SPI_xchg(0xFF);
 80047f0:	2d4c      	cmp	r5, #76	; 0x4c
 80047f2:	d00f      	beq.n	8004814 <SD_SendCmd+0x66>
	else crc = 1;
 80047f4:	240a      	movs	r4, #10
		res = SD_SPI_xchg(0xFF);
 80047f6:	20ff      	movs	r0, #255	; 0xff
 80047f8:	f7ff fefa 	bl	80045f0 <SD_SPI_xchg>
	} while ((res & 0x80) && --n);
 80047fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004800:	d0dd      	beq.n	80047be <SD_SendCmd+0x10>
 8004802:	1e63      	subs	r3, r4, #1
 8004804:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8004808:	d1f5      	bne.n	80047f6 <SD_SendCmd+0x48>
 800480a:	e7d8      	b.n	80047be <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800480c:	2087      	movs	r0, #135	; 0x87
 800480e:	e7ed      	b.n	80047ec <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8004810:	2095      	movs	r0, #149	; 0x95
 8004812:	e7eb      	b.n	80047ec <SD_SendCmd+0x3e>
	if (cmd == CMD12) SD_SPI_xchg(0xFF);
 8004814:	20ff      	movs	r0, #255	; 0xff
 8004816:	f7ff feeb 	bl	80045f0 <SD_SPI_xchg>
 800481a:	e7eb      	b.n	80047f4 <SD_SendCmd+0x46>

0800481c <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800481c:	b108      	cbz	r0, 8004822 <SD_disk_initialize+0x6>
 800481e:	2001      	movs	r0, #1
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 8004820:	4770      	bx	lr
{
 8004822:	b510      	push	{r4, lr}
 8004824:	b082      	sub	sp, #8
	SD_SPI_init();
 8004826:	f7ff fecd 	bl	80045c4 <SD_SPI_init>
	if(Stat & STA_NODISK) return Stat;
 800482a:	4b63      	ldr	r3, [pc, #396]	; (80049b8 <SD_disk_initialize+0x19c>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	f013 0f02 	tst.w	r3, #2
 8004832:	d004      	beq.n	800483e <SD_disk_initialize+0x22>
 8004834:	4b60      	ldr	r3, [pc, #384]	; (80049b8 <SD_disk_initialize+0x19c>)
 8004836:	7818      	ldrb	r0, [r3, #0]
 8004838:	b2c0      	uxtb	r0, r0
}
 800483a:	b002      	add	sp, #8
 800483c:	bd10      	pop	{r4, pc}
	FCLK_SLOW();
 800483e:	4a5f      	ldr	r2, [pc, #380]	; (80049bc <SD_disk_initialize+0x1a0>)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004846:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800484a:	6013      	str	r3, [r2, #0]
	SD_PowerOn();
 800484c:	f7ff ff12 	bl	8004674 <SD_PowerOn>
	SD_SPI_select();
 8004850:	f7ff fec0 	bl	80045d4 <SD_SPI_select>
	if (SD_SendCmd(CMD0, 0) == 1)
 8004854:	2100      	movs	r1, #0
 8004856:	2040      	movs	r0, #64	; 0x40
 8004858:	f7ff ffa9 	bl	80047ae <SD_SendCmd>
 800485c:	2801      	cmp	r0, #1
 800485e:	d018      	beq.n	8004892 <SD_disk_initialize+0x76>
	type = 0;
 8004860:	2400      	movs	r4, #0
	CardType = type;
 8004862:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <SD_disk_initialize+0x1a4>)
 8004864:	705c      	strb	r4, [r3, #1]
	SD_SPI_deselect();
 8004866:	f7ff febd 	bl	80045e4 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 800486a:	20ff      	movs	r0, #255	; 0xff
 800486c:	f7ff fec0 	bl	80045f0 <SD_SPI_xchg>
	if (type)
 8004870:	2c00      	cmp	r4, #0
 8004872:	f000 809d 	beq.w	80049b0 <SD_disk_initialize+0x194>
		FCLK_FAST();
 8004876:	4a51      	ldr	r2, [pc, #324]	; (80049bc <SD_disk_initialize+0x1a0>)
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800487e:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;
 8004880:	4a4d      	ldr	r2, [pc, #308]	; (80049b8 <SD_disk_initialize+0x19c>)
 8004882:	7813      	ldrb	r3, [r2, #0]
 8004884:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004888:	7013      	strb	r3, [r2, #0]
	return Stat;
 800488a:	4b4b      	ldr	r3, [pc, #300]	; (80049b8 <SD_disk_initialize+0x19c>)
 800488c:	7818      	ldrb	r0, [r3, #0]
 800488e:	b2c0      	uxtb	r0, r0
 8004890:	e7d3      	b.n	800483a <SD_disk_initialize+0x1e>
		Timer1 = 1000;
 8004892:	4b4c      	ldr	r3, [pc, #304]	; (80049c4 <SD_disk_initialize+0x1a8>)
 8004894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004898:	801a      	strh	r2, [r3, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800489a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800489e:	2048      	movs	r0, #72	; 0x48
 80048a0:	f7ff ff85 	bl	80047ae <SD_SendCmd>
 80048a4:	2801      	cmp	r0, #1
 80048a6:	d148      	bne.n	800493a <SD_disk_initialize+0x11e>
			for (n = 0; n < 4; n++)
 80048a8:	2400      	movs	r4, #0
 80048aa:	e008      	b.n	80048be <SD_disk_initialize+0xa2>
				ocr[n] = SD_SPI_xchg(0xFF);
 80048ac:	20ff      	movs	r0, #255	; 0xff
 80048ae:	f7ff fe9f 	bl	80045f0 <SD_SPI_xchg>
 80048b2:	ab02      	add	r3, sp, #8
 80048b4:	4423      	add	r3, r4
 80048b6:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 80048ba:	3401      	adds	r4, #1
 80048bc:	b2e4      	uxtb	r4, r4
 80048be:	2c03      	cmp	r4, #3
 80048c0:	d9f4      	bls.n	80048ac <SD_disk_initialize+0x90>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80048c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <SD_disk_initialize+0xb2>
	type = 0;
 80048ca:	2400      	movs	r4, #0
 80048cc:	e7c9      	b.n	8004862 <SD_disk_initialize+0x46>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80048ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048d2:	2baa      	cmp	r3, #170	; 0xaa
 80048d4:	d004      	beq.n	80048e0 <SD_disk_initialize+0xc4>
	type = 0;
 80048d6:	2400      	movs	r4, #0
 80048d8:	e7c3      	b.n	8004862 <SD_disk_initialize+0x46>
				} while (Timer1);
 80048da:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <SD_disk_initialize+0x1a8>)
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b163      	cbz	r3, 80048fa <SD_disk_initialize+0xde>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80048e0:	2100      	movs	r1, #0
 80048e2:	2077      	movs	r0, #119	; 0x77
 80048e4:	f7ff ff63 	bl	80047ae <SD_SendCmd>
 80048e8:	2801      	cmp	r0, #1
 80048ea:	d8f6      	bhi.n	80048da <SD_disk_initialize+0xbe>
 80048ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80048f0:	2069      	movs	r0, #105	; 0x69
 80048f2:	f7ff ff5c 	bl	80047ae <SD_SendCmd>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d1ef      	bne.n	80048da <SD_disk_initialize+0xbe>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80048fa:	4b32      	ldr	r3, [pc, #200]	; (80049c4 <SD_disk_initialize+0x1a8>)
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b90b      	cbnz	r3, 8004904 <SD_disk_initialize+0xe8>
	type = 0;
 8004900:	2400      	movs	r4, #0
 8004902:	e7ae      	b.n	8004862 <SD_disk_initialize+0x46>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004904:	2100      	movs	r1, #0
 8004906:	207a      	movs	r0, #122	; 0x7a
 8004908:	f7ff ff51 	bl	80047ae <SD_SendCmd>
 800490c:	b198      	cbz	r0, 8004936 <SD_disk_initialize+0x11a>
	type = 0;
 800490e:	2400      	movs	r4, #0
 8004910:	e7a7      	b.n	8004862 <SD_disk_initialize+0x46>
						ocr[n] = SD_SPI_xchg(0xFF);
 8004912:	20ff      	movs	r0, #255	; 0xff
 8004914:	f7ff fe6c 	bl	80045f0 <SD_SPI_xchg>
 8004918:	ab02      	add	r3, sp, #8
 800491a:	4423      	add	r3, r4
 800491c:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 8004920:	3401      	adds	r4, #1
 8004922:	b2e4      	uxtb	r4, r4
 8004924:	2c03      	cmp	r4, #3
 8004926:	d9f4      	bls.n	8004912 <SD_disk_initialize+0xf6>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004928:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800492c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004930:	d03c      	beq.n	80049ac <SD_disk_initialize+0x190>
 8004932:	240c      	movs	r4, #12
 8004934:	e795      	b.n	8004862 <SD_disk_initialize+0x46>
					for (n = 0; n < 4; n++)
 8004936:	2400      	movs	r4, #0
 8004938:	e7f4      	b.n	8004924 <SD_disk_initialize+0x108>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800493a:	2100      	movs	r1, #0
 800493c:	2077      	movs	r0, #119	; 0x77
 800493e:	f7ff ff36 	bl	80047ae <SD_SendCmd>
 8004942:	2801      	cmp	r0, #1
 8004944:	d901      	bls.n	800494a <SD_disk_initialize+0x12e>
 8004946:	2401      	movs	r4, #1
 8004948:	e012      	b.n	8004970 <SD_disk_initialize+0x154>
 800494a:	2100      	movs	r1, #0
 800494c:	2069      	movs	r0, #105	; 0x69
 800494e:	f7ff ff2e 	bl	80047ae <SD_SendCmd>
 8004952:	2801      	cmp	r0, #1
 8004954:	d901      	bls.n	800495a <SD_disk_initialize+0x13e>
 8004956:	2401      	movs	r4, #1
 8004958:	e00a      	b.n	8004970 <SD_disk_initialize+0x154>
 800495a:	2402      	movs	r4, #2
 800495c:	e008      	b.n	8004970 <SD_disk_initialize+0x154>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800495e:	2100      	movs	r1, #0
 8004960:	2077      	movs	r0, #119	; 0x77
 8004962:	f7ff ff24 	bl	80047ae <SD_SendCmd>
 8004966:	2801      	cmp	r0, #1
 8004968:	d90f      	bls.n	800498a <SD_disk_initialize+0x16e>
			} while (Timer1);
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <SD_disk_initialize+0x1a8>)
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b13b      	cbz	r3, 8004980 <SD_disk_initialize+0x164>
				if (type == CT_SD1)
 8004970:	2c02      	cmp	r4, #2
 8004972:	d0f4      	beq.n	800495e <SD_disk_initialize+0x142>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004974:	2100      	movs	r1, #0
 8004976:	2041      	movs	r0, #65	; 0x41
 8004978:	f7ff ff19 	bl	80047ae <SD_SendCmd>
 800497c:	2800      	cmp	r0, #0
 800497e:	d1f4      	bne.n	800496a <SD_disk_initialize+0x14e>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <SD_disk_initialize+0x1a8>)
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b943      	cbnz	r3, 8004998 <SD_disk_initialize+0x17c>
 8004986:	2400      	movs	r4, #0
 8004988:	e76b      	b.n	8004862 <SD_disk_initialize+0x46>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800498a:	2100      	movs	r1, #0
 800498c:	2069      	movs	r0, #105	; 0x69
 800498e:	f7ff ff0e 	bl	80047ae <SD_SendCmd>
 8004992:	2800      	cmp	r0, #0
 8004994:	d1e9      	bne.n	800496a <SD_disk_initialize+0x14e>
 8004996:	e7f3      	b.n	8004980 <SD_disk_initialize+0x164>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800499c:	2050      	movs	r0, #80	; 0x50
 800499e:	f7ff ff06 	bl	80047ae <SD_SendCmd>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	f43f af5d 	beq.w	8004862 <SD_disk_initialize+0x46>
 80049a8:	2400      	movs	r4, #0
 80049aa:	e75a      	b.n	8004862 <SD_disk_initialize+0x46>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80049ac:	2404      	movs	r4, #4
 80049ae:	e758      	b.n	8004862 <SD_disk_initialize+0x46>
		SD_PowerOff();
 80049b0:	f7ff fe98 	bl	80046e4 <SD_PowerOff>
 80049b4:	e769      	b.n	800488a <SD_disk_initialize+0x6e>
 80049b6:	bf00      	nop
 80049b8:	20000008 	.word	0x20000008
 80049bc:	40013000 	.word	0x40013000
 80049c0:	20000334 	.word	0x20000334
 80049c4:	20001bae 	.word	0x20001bae

080049c8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 80049c8:	b918      	cbnz	r0, 80049d2 <SD_disk_status+0xa>
	return Stat;
 80049ca:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <SD_disk_status+0x10>)
 80049cc:	7818      	ldrb	r0, [r3, #0]
 80049ce:	b2c0      	uxtb	r0, r0
 80049d0:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 80049d2:	2001      	movs	r0, #1
}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000008 	.word	0x20000008

080049dc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80049dc:	2800      	cmp	r0, #0
 80049de:	d13f      	bne.n	8004a60 <SD_disk_read+0x84>
{
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	460d      	mov	r5, r1
 80049e4:	4616      	mov	r6, r2
 80049e6:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d03b      	beq.n	8004a64 <SD_disk_read+0x88>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049ec:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <SD_disk_read+0x90>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f013 0f01 	tst.w	r3, #1
 80049f4:	d138      	bne.n	8004a68 <SD_disk_read+0x8c>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <SD_disk_read+0x94>)
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	f013 0f04 	tst.w	r3, #4
 80049fe:	d100      	bne.n	8004a02 <SD_disk_read+0x26>
 8004a00:	0256      	lsls	r6, r2, #9

	SD_SPI_select();
 8004a02:	f7ff fde7 	bl	80045d4 <SD_SPI_select>

	if (count == 1)
 8004a06:	2c01      	cmp	r4, #1
 8004a08:	d01b      	beq.n	8004a42 <SD_disk_read+0x66>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	2052      	movs	r0, #82	; 0x52
 8004a0e:	f7ff fece 	bl	80047ae <SD_SendCmd>
 8004a12:	b968      	cbnz	r0, 8004a30 <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f7ff fe6f 	bl	80046fc <SD_RxDataBlock>
 8004a1e:	b118      	cbz	r0, 8004a28 <SD_disk_read+0x4c>
				buff += 512;
 8004a20:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8004a24:	3c01      	subs	r4, #1
 8004a26:	d1f5      	bne.n	8004a14 <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	204c      	movs	r0, #76	; 0x4c
 8004a2c:	f7ff febf 	bl	80047ae <SD_SendCmd>
		}
	}

	/* Idle */
	SD_SPI_deselect();
 8004a30:	f7ff fdd8 	bl	80045e4 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 8004a34:	20ff      	movs	r0, #255	; 0xff
 8004a36:	f7ff fddb 	bl	80045f0 <SD_SPI_xchg>

	return count ? RES_ERROR : RES_OK;
 8004a3a:	1c20      	adds	r0, r4, #0
 8004a3c:	bf18      	it	ne
 8004a3e:	2001      	movne	r0, #1
}
 8004a40:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004a42:	4631      	mov	r1, r6
 8004a44:	2051      	movs	r0, #81	; 0x51
 8004a46:	f7ff feb2 	bl	80047ae <SD_SendCmd>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1f0      	bne.n	8004a30 <SD_disk_read+0x54>
 8004a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a52:	4628      	mov	r0, r5
 8004a54:	f7ff fe52 	bl	80046fc <SD_RxDataBlock>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d0e9      	beq.n	8004a30 <SD_disk_read+0x54>
 8004a5c:	2400      	movs	r4, #0
 8004a5e:	e7e7      	b.n	8004a30 <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 8004a60:	2004      	movs	r0, #4
}
 8004a62:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8004a64:	2004      	movs	r0, #4
 8004a66:	e7eb      	b.n	8004a40 <SD_disk_read+0x64>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a68:	2003      	movs	r0, #3
 8004a6a:	e7e9      	b.n	8004a40 <SD_disk_read+0x64>
 8004a6c:	20000008 	.word	0x20000008
 8004a70:	20000334 	.word	0x20000334

08004a74 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d153      	bne.n	8004b20 <SD_disk_write+0xac>
{
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04f      	beq.n	8004b24 <SD_disk_write+0xb0>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a84:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <SD_disk_write+0xbc>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f013 0f01 	tst.w	r3, #1
 8004a8c:	d14c      	bne.n	8004b28 <SD_disk_write+0xb4>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004a8e:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <SD_disk_write+0xbc>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	f013 0f04 	tst.w	r3, #4
 8004a96:	d149      	bne.n	8004b2c <SD_disk_write+0xb8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <SD_disk_write+0xc0>)
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	f013 0f04 	tst.w	r3, #4
 8004aa0:	d100      	bne.n	8004aa4 <SD_disk_write+0x30>
 8004aa2:	0256      	lsls	r6, r2, #9

	SD_SPI_select();
 8004aa4:	f7ff fd96 	bl	80045d4 <SD_SPI_select>

	if (count == 1)
 8004aa8:	2c01      	cmp	r4, #1
 8004aaa:	d020      	beq.n	8004aee <SD_disk_write+0x7a>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <SD_disk_write+0xc0>)
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	f013 0f02 	tst.w	r3, #2
 8004ab4:	d129      	bne.n	8004b0a <SD_disk_write+0x96>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	2059      	movs	r0, #89	; 0x59
 8004aba:	f7ff fe78 	bl	80047ae <SD_SendCmd>
 8004abe:	b968      	cbnz	r0, 8004adc <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004ac0:	21fc      	movs	r1, #252	; 0xfc
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7ff fe3c 	bl	8004740 <SD_TxDataBlock>
 8004ac8:	b118      	cbz	r0, 8004ad2 <SD_disk_write+0x5e>
				buff += 512;
 8004aca:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8004ace:	3c01      	subs	r4, #1
 8004ad0:	d1f6      	bne.n	8004ac0 <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004ad2:	21fd      	movs	r1, #253	; 0xfd
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7ff fe33 	bl	8004740 <SD_TxDataBlock>
 8004ada:	b1f8      	cbz	r0, 8004b1c <SD_disk_write+0xa8>
			}
		}
	}

	/* Idle */
	SD_SPI_deselect();
 8004adc:	f7ff fd82 	bl	80045e4 <SD_SPI_deselect>
	SD_SPI_xchg(0xFF);
 8004ae0:	20ff      	movs	r0, #255	; 0xff
 8004ae2:	f7ff fd85 	bl	80045f0 <SD_SPI_xchg>

	return count ? RES_ERROR : RES_OK;
 8004ae6:	1c20      	adds	r0, r4, #0
 8004ae8:	bf18      	it	ne
 8004aea:	2001      	movne	r0, #1
}
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004aee:	4631      	mov	r1, r6
 8004af0:	2058      	movs	r0, #88	; 0x58
 8004af2:	f7ff fe5c 	bl	80047ae <SD_SendCmd>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d1f0      	bne.n	8004adc <SD_disk_write+0x68>
 8004afa:	21fe      	movs	r1, #254	; 0xfe
 8004afc:	4628      	mov	r0, r5
 8004afe:	f7ff fe1f 	bl	8004740 <SD_TxDataBlock>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0ea      	beq.n	8004adc <SD_disk_write+0x68>
			count = 0;
 8004b06:	2400      	movs	r4, #0
 8004b08:	e7e8      	b.n	8004adc <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2077      	movs	r0, #119	; 0x77
 8004b0e:	f7ff fe4e 	bl	80047ae <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004b12:	4621      	mov	r1, r4
 8004b14:	2057      	movs	r0, #87	; 0x57
 8004b16:	f7ff fe4a 	bl	80047ae <SD_SendCmd>
 8004b1a:	e7cc      	b.n	8004ab6 <SD_disk_write+0x42>
				count = 1;
 8004b1c:	2401      	movs	r4, #1
 8004b1e:	e7dd      	b.n	8004adc <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 8004b20:	2004      	movs	r0, #4
}
 8004b22:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8004b24:	2004      	movs	r0, #4
 8004b26:	e7e1      	b.n	8004aec <SD_disk_write+0x78>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b28:	2003      	movs	r0, #3
 8004b2a:	e7df      	b.n	8004aec <SD_disk_write+0x78>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004b2c:	2002      	movs	r0, #2
 8004b2e:	e7dd      	b.n	8004aec <SD_disk_write+0x78>
 8004b30:	20000008 	.word	0x20000008
 8004b34:	20000334 	.word	0x20000334

08004b38 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	b084      	sub	sp, #16
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	f040 80b8 	bne.w	8004cb2 <SD_disk_ioctl+0x17a>
 8004b42:	460c      	mov	r4, r1
 8004b44:	4615      	mov	r5, r2
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8004b46:	2905      	cmp	r1, #5
 8004b48:	d013      	beq.n	8004b72 <SD_disk_ioctl+0x3a>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	; (8004cc0 <SD_disk_ioctl+0x188>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f013 0f01 	tst.w	r3, #1
 8004b52:	f040 80b2 	bne.w	8004cba <SD_disk_ioctl+0x182>

		SD_SPI_select();
 8004b56:	f7ff fd3d 	bl	80045d4 <SD_SPI_select>

		switch (ctrl)
 8004b5a:	2c0d      	cmp	r4, #13
 8004b5c:	f200 809f 	bhi.w	8004c9e <SD_disk_ioctl+0x166>
 8004b60:	e8df f004 	tbb	[pc, r4]
 8004b64:	9d5c1c66 	.word	0x9d5c1c66
 8004b68:	9d9d9d9d 	.word	0x9d9d9d9d
 8004b6c:	6c9d9d9d 	.word	0x6c9d9d9d
 8004b70:	887a      	.short	0x887a
		switch (*ptr)
 8004b72:	7813      	ldrb	r3, [r2, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d008      	beq.n	8004b8a <SD_disk_ioctl+0x52>
 8004b78:	b11b      	cbz	r3, 8004b82 <SD_disk_ioctl+0x4a>
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d009      	beq.n	8004b92 <SD_disk_ioctl+0x5a>
			res = RES_PARERR;
 8004b7e:	2404      	movs	r4, #4
 8004b80:	e098      	b.n	8004cb4 <SD_disk_ioctl+0x17c>
			SD_PowerOff();		/* Power Off */
 8004b82:	f7ff fdaf 	bl	80046e4 <SD_PowerOff>
			res = RES_OK;
 8004b86:	2400      	movs	r4, #0
			break;
 8004b88:	e094      	b.n	8004cb4 <SD_disk_ioctl+0x17c>
			SD_PowerOn();		/* Power On */
 8004b8a:	f7ff fd73 	bl	8004674 <SD_PowerOn>
			res = RES_OK;
 8004b8e:	2400      	movs	r4, #0
			break;
 8004b90:	e090      	b.n	8004cb4 <SD_disk_ioctl+0x17c>
			*(ptr + 1) = SD_CheckPower();
 8004b92:	f7ff fdad 	bl	80046f0 <SD_CheckPower>
 8004b96:	7068      	strb	r0, [r5, #1]
			res = RES_OK;		/* Power Check */
 8004b98:	2400      	movs	r4, #0
			break;
 8004b9a:	e08b      	b.n	8004cb4 <SD_disk_ioctl+0x17c>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2049      	movs	r0, #73	; 0x49
 8004ba0:	f7ff fe05 	bl	80047ae <SD_SendCmd>
 8004ba4:	b108      	cbz	r0, 8004baa <SD_disk_ioctl+0x72>
	res = RES_ERROR;
 8004ba6:	2401      	movs	r4, #1
 8004ba8:	e03c      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004baa:	2110      	movs	r1, #16
 8004bac:	4668      	mov	r0, sp
 8004bae:	f7ff fda5 	bl	80046fc <SD_RxDataBlock>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d075      	beq.n	8004ca2 <SD_disk_ioctl+0x16a>
			{
				if ((csd[0] >> 6) == 1)
 8004bb6:	f89d 3000 	ldrb.w	r3, [sp]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d020      	beq.n	8004c02 <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004bc0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004bc4:	f002 020f 	and.w	r2, r2, #15
 8004bc8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004bcc:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8004bd0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	f003 0306 	and.w	r3, r3, #6
 8004bda:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004bdc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004be0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004bea:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004bee:	0289      	lsls	r1, r1, #10
 8004bf0:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004bf8:	3a07      	subs	r2, #7
 8004bfa:	4093      	lsls	r3, r2
 8004bfc:	602b      	str	r3, [r5, #0]
				}
				res = RES_OK;
 8004bfe:	2400      	movs	r4, #0
 8004c00:	e010      	b.n	8004c24 <SD_disk_ioctl+0xec>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004c02:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004c06:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004c0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 8004c14:	029b      	lsls	r3, r3, #10
 8004c16:	602b      	str	r3, [r5, #0]
				res = RES_OK;
 8004c18:	2400      	movs	r4, #0
 8004c1a:	e003      	b.n	8004c24 <SD_disk_ioctl+0xec>
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c20:	802b      	strh	r3, [r5, #0]
			res = RES_OK;
 8004c22:	2400      	movs	r4, #0
			break;
		default:
			res = RES_PARERR;
		}

		SD_SPI_deselect();
 8004c24:	f7ff fcde 	bl	80045e4 <SD_SPI_deselect>
		SD_SPI_xchg(0xFF);
 8004c28:	20ff      	movs	r0, #255	; 0xff
 8004c2a:	f7ff fce1 	bl	80045f0 <SD_SPI_xchg>
 8004c2e:	e041      	b.n	8004cb4 <SD_disk_ioctl+0x17c>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004c30:	f7ff fd0e 	bl	8004650 <SD_ReadyWait>
 8004c34:	28ff      	cmp	r0, #255	; 0xff
 8004c36:	d036      	beq.n	8004ca6 <SD_disk_ioctl+0x16e>
	res = RES_ERROR;
 8004c38:	2401      	movs	r4, #1
 8004c3a:	e7f3      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2049      	movs	r0, #73	; 0x49
 8004c40:	f7ff fdb5 	bl	80047ae <SD_SendCmd>
 8004c44:	b108      	cbz	r0, 8004c4a <SD_disk_ioctl+0x112>
	res = RES_ERROR;
 8004c46:	2401      	movs	r4, #1
 8004c48:	e7ec      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004c4a:	2110      	movs	r1, #16
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f7ff fd55 	bl	80046fc <SD_RxDataBlock>
 8004c52:	bb50      	cbnz	r0, 8004caa <SD_disk_ioctl+0x172>
	res = RES_ERROR;
 8004c54:	2401      	movs	r4, #1
 8004c56:	e7e5      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004c58:	2100      	movs	r1, #0
 8004c5a:	204a      	movs	r0, #74	; 0x4a
 8004c5c:	f7ff fda7 	bl	80047ae <SD_SendCmd>
 8004c60:	b108      	cbz	r0, 8004c66 <SD_disk_ioctl+0x12e>
	res = RES_ERROR;
 8004c62:	2401      	movs	r4, #1
 8004c64:	e7de      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004c66:	2110      	movs	r1, #16
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7ff fd47 	bl	80046fc <SD_RxDataBlock>
 8004c6e:	b9f0      	cbnz	r0, 8004cae <SD_disk_ioctl+0x176>
	res = RES_ERROR;
 8004c70:	2401      	movs	r4, #1
 8004c72:	e7d7      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD58, 0) == 0)
 8004c74:	2100      	movs	r1, #0
 8004c76:	207a      	movs	r0, #122	; 0x7a
 8004c78:	f7ff fd99 	bl	80047ae <SD_SendCmd>
 8004c7c:	b168      	cbz	r0, 8004c9a <SD_disk_ioctl+0x162>
	res = RES_ERROR;
 8004c7e:	2401      	movs	r4, #1
 8004c80:	e7d0      	b.n	8004c24 <SD_disk_ioctl+0xec>
					*ptr++ = SD_SPI_xchg(0xFF);
 8004c82:	1c6e      	adds	r6, r5, #1
 8004c84:	20ff      	movs	r0, #255	; 0xff
 8004c86:	f7ff fcb3 	bl	80045f0 <SD_SPI_xchg>
 8004c8a:	7028      	strb	r0, [r5, #0]
				for (n = 0; n < 4; n++)
 8004c8c:	3401      	adds	r4, #1
 8004c8e:	b2e4      	uxtb	r4, r4
					*ptr++ = SD_SPI_xchg(0xFF);
 8004c90:	4635      	mov	r5, r6
				for (n = 0; n < 4; n++)
 8004c92:	2c03      	cmp	r4, #3
 8004c94:	d9f5      	bls.n	8004c82 <SD_disk_ioctl+0x14a>
				res = RES_OK;
 8004c96:	2400      	movs	r4, #0
 8004c98:	e7c4      	b.n	8004c24 <SD_disk_ioctl+0xec>
				for (n = 0; n < 4; n++)
 8004c9a:	2400      	movs	r4, #0
 8004c9c:	e7f9      	b.n	8004c92 <SD_disk_ioctl+0x15a>
			res = RES_PARERR;
 8004c9e:	2404      	movs	r4, #4
 8004ca0:	e7c0      	b.n	8004c24 <SD_disk_ioctl+0xec>
	res = RES_ERROR;
 8004ca2:	2401      	movs	r4, #1
 8004ca4:	e7be      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004ca6:	2400      	movs	r4, #0
 8004ca8:	e7bc      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004caa:	2400      	movs	r4, #0
 8004cac:	e7ba      	b.n	8004c24 <SD_disk_ioctl+0xec>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004cae:	2400      	movs	r4, #0
 8004cb0:	e7b8      	b.n	8004c24 <SD_disk_ioctl+0xec>
	if (drv) return RES_PARERR;
 8004cb2:	2404      	movs	r4, #4
	}

	return res;
}
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004cba:	2403      	movs	r4, #3
 8004cbc:	e7fa      	b.n	8004cb4 <SD_disk_ioctl+0x17c>
 8004cbe:	bf00      	nop
 8004cc0:	20000008 	.word	0x20000008

08004cc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004cc4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004cc6:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <MX_FATFS_Init+0x10>)
 8004cc8:	4803      	ldr	r0, [pc, #12]	; (8004cd8 <MX_FATFS_Init+0x14>)
 8004cca:	f7ff fbe7 	bl	800449c <FATFS_LinkDriver>
 8004cce:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <MX_FATFS_Init+0x18>)
 8004cd0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004cd2:	bd08      	pop	{r3, pc}
 8004cd4:	20001bb0 	.word	0x20001bb0
 8004cd8:	20000068 	.word	0x20000068
 8004cdc:	20001bb4 	.word	0x20001bb4

08004ce0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	4770      	bx	lr

08004ce4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cea:	2400      	movs	r4, #0
 8004cec:	9401      	str	r4, [sp, #4]
 8004cee:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <MX_GPIO_Init+0x104>)
 8004cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf2:	f042 0204 	orr.w	r2, r2, #4
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8004cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfa:	f002 0204 	and.w	r2, r2, #4
 8004cfe:	9201      	str	r2, [sp, #4]
 8004d00:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d02:	9402      	str	r4, [sp, #8]
 8004d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004d12:	9202      	str	r2, [sp, #8]
 8004d14:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d16:	9403      	str	r4, [sp, #12]
 8004d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d22:	f002 0201 	and.w	r2, r2, #1
 8004d26:	9203      	str	r2, [sp, #12]
 8004d28:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d2a:	9404      	str	r4, [sp, #16]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2e:	f042 0202 	orr.w	r2, r2, #2
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8004d3e:	4d2b      	ldr	r5, [pc, #172]	; (8004dec <MX_GPIO_Init+0x108>)
 8004d40:	4622      	mov	r2, r4
 8004d42:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d46:	4628      	mov	r0, r5
 8004d48:	f7fb fdf0 	bl	800092c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d4c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004df4 <MX_GPIO_Init+0x110>
 8004d50:	4622      	mov	r2, r4
 8004d52:	2110      	movs	r1, #16
 8004d54:	4648      	mov	r0, r9
 8004d56:	f7fb fde9 	bl	800092c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8004d5a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004df8 <MX_GPIO_Init+0x114>
 8004d5e:	4622      	mov	r2, r4
 8004d60:	f241 010b 	movw	r1, #4107	; 0x100b
 8004d64:	4640      	mov	r0, r8
 8004d66:	f7fb fde1 	bl	800092c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d70:	2601      	movs	r6, #1
 8004d72:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d76:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d78:	a905      	add	r1, sp, #20
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7fb fcf2 	bl	8000764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d80:	2310      	movs	r3, #16
 8004d82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d84:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d86:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d88:	2703      	movs	r7, #3
 8004d8a:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d8c:	a905      	add	r1, sp, #20
 8004d8e:	4648      	mov	r0, r9
 8004d90:	f7fb fce8 	bl	8000764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_3;
 8004d94:	f241 030b 	movw	r3, #4107	; 0x100b
 8004d98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d9a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9e:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da0:	a905      	add	r1, sp, #20
 8004da2:	4640      	mov	r0, r8
 8004da4:	f7fb fcde 	bl	8000764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <MX_GPIO_Init+0x10c>)
 8004db0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db4:	a905      	add	r1, sp, #20
 8004db6:	4628      	mov	r0, r5
 8004db8:	f7fb fcd4 	bl	8000764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc6:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc8:	a905      	add	r1, sp, #20
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fb fcca 	bl	8000764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	2017      	movs	r0, #23
 8004dd6:	f7fb fc59 	bl	800068c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004dda:	2017      	movs	r0, #23
 8004ddc:	f7fb fc8a 	bl	80006f4 <HAL_NVIC_EnableIRQ>

}
 8004de0:	b00b      	add	sp, #44	; 0x2c
 8004de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40020800 	.word	0x40020800
 8004df0:	10210000 	.word	0x10210000
 8004df4:	40020000 	.word	0x40020000
 8004df8:	40020400 	.word	0x40020400

08004dfc <getNote>:
{
 8004dfc:	4603      	mov	r3, r0
    if(key=='C')note=72;
 8004dfe:	2843      	cmp	r0, #67	; 0x43
 8004e00:	d017      	beq.n	8004e32 <getNote+0x36>
    uint8_t note=0;
 8004e02:	2000      	movs	r0, #0
    if(key=='c')note=73;
 8004e04:	2b63      	cmp	r3, #99	; 0x63
 8004e06:	d016      	beq.n	8004e36 <getNote+0x3a>
    if(key=='D')note=74;
 8004e08:	2b44      	cmp	r3, #68	; 0x44
 8004e0a:	d016      	beq.n	8004e3a <getNote+0x3e>
    if(key=='d')note=75;
 8004e0c:	2b64      	cmp	r3, #100	; 0x64
 8004e0e:	d016      	beq.n	8004e3e <getNote+0x42>
    if(key=='E')note=76;
 8004e10:	2b45      	cmp	r3, #69	; 0x45
 8004e12:	d016      	beq.n	8004e42 <getNote+0x46>
    if(key=='F')note=77;
 8004e14:	2b46      	cmp	r3, #70	; 0x46
 8004e16:	d016      	beq.n	8004e46 <getNote+0x4a>
    if(key=='f')note=78;
 8004e18:	2b66      	cmp	r3, #102	; 0x66
 8004e1a:	d016      	beq.n	8004e4a <getNote+0x4e>
    if(key=='G')note=79;
 8004e1c:	2b47      	cmp	r3, #71	; 0x47
 8004e1e:	d016      	beq.n	8004e4e <getNote+0x52>
    if(key=='g')note=80;
 8004e20:	2b67      	cmp	r3, #103	; 0x67
 8004e22:	d016      	beq.n	8004e52 <getNote+0x56>
    if(key=='A')note=81;
 8004e24:	2b41      	cmp	r3, #65	; 0x41
 8004e26:	d016      	beq.n	8004e56 <getNote+0x5a>
    if(key=='a')note=82;
 8004e28:	2b61      	cmp	r3, #97	; 0x61
 8004e2a:	d016      	beq.n	8004e5a <getNote+0x5e>
    if(key=='B')note=83;
 8004e2c:	2b42      	cmp	r3, #66	; 0x42
 8004e2e:	d016      	beq.n	8004e5e <getNote+0x62>
}
 8004e30:	4770      	bx	lr
    if(key=='C')note=72;
 8004e32:	2048      	movs	r0, #72	; 0x48
 8004e34:	e7e6      	b.n	8004e04 <getNote+0x8>
    if(key=='c')note=73;
 8004e36:	2049      	movs	r0, #73	; 0x49
 8004e38:	e7e6      	b.n	8004e08 <getNote+0xc>
    if(key=='D')note=74;
 8004e3a:	204a      	movs	r0, #74	; 0x4a
 8004e3c:	e7e6      	b.n	8004e0c <getNote+0x10>
    if(key=='d')note=75;
 8004e3e:	204b      	movs	r0, #75	; 0x4b
 8004e40:	e7e6      	b.n	8004e10 <getNote+0x14>
    if(key=='E')note=76;
 8004e42:	204c      	movs	r0, #76	; 0x4c
 8004e44:	e7e6      	b.n	8004e14 <getNote+0x18>
    if(key=='F')note=77;
 8004e46:	204d      	movs	r0, #77	; 0x4d
 8004e48:	e7e6      	b.n	8004e18 <getNote+0x1c>
    if(key=='f')note=78;
 8004e4a:	204e      	movs	r0, #78	; 0x4e
 8004e4c:	e7e6      	b.n	8004e1c <getNote+0x20>
    if(key=='G')note=79;
 8004e4e:	204f      	movs	r0, #79	; 0x4f
 8004e50:	e7e6      	b.n	8004e20 <getNote+0x24>
    if(key=='g')note=80;
 8004e52:	2050      	movs	r0, #80	; 0x50
 8004e54:	e7e6      	b.n	8004e24 <getNote+0x28>
    if(key=='A')note=81;
 8004e56:	2051      	movs	r0, #81	; 0x51
 8004e58:	e7e6      	b.n	8004e28 <getNote+0x2c>
    if(key=='a')note=82;
 8004e5a:	2052      	movs	r0, #82	; 0x52
 8004e5c:	e7e6      	b.n	8004e2c <getNote+0x30>
    if(key=='B')note=83;
 8004e5e:	2053      	movs	r0, #83	; 0x53
 8004e60:	e7e6      	b.n	8004e30 <getNote+0x34>
	...

08004e64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
	if(GPIO_PIN == GPIO_PIN_9){
 8004e64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004e68:	d001      	beq.n	8004e6e <HAL_GPIO_EXTI_Callback+0xa>
 8004e6a:	bf00      	nop
		touched = 1;
	}
	else{
		__NOP();
	}
}
 8004e6c:	4770      	bx	lr
		touched = 1;
 8004e6e:	4b02      	ldr	r3, [pc, #8]	; (8004e78 <HAL_GPIO_EXTI_Callback+0x14>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000338 	.word	0x20000338

08004e7c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004e7c:	e7fe      	b.n	8004e7c <_Error_Handler>
	...

08004e80 <MX_SPI1_Init>:
{
 8004e80:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8004e82:	480e      	ldr	r0, [pc, #56]	; (8004ebc <MX_SPI1_Init+0x3c>)
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <MX_SPI1_Init+0x40>)
 8004e86:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004e8c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e92:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e94:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e96:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e9c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e9e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ea0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ea2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004eaa:	f7fc f837 	bl	8000f1c <HAL_SPI_Init>
 8004eae:	b900      	cbnz	r0, 8004eb2 <MX_SPI1_Init+0x32>
}
 8004eb0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004eb2:	f240 317e 	movw	r1, #894	; 0x37e
 8004eb6:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <MX_SPI1_Init+0x44>)
 8004eb8:	f7ff ffe0 	bl	8004e7c <_Error_Handler>
 8004ebc:	20004ce8 	.word	0x20004ce8
 8004ec0:	40013000 	.word	0x40013000
 8004ec4:	08007710 	.word	0x08007710

08004ec8 <MX_SPI2_Init>:
{
 8004ec8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8004eca:	480e      	ldr	r0, [pc, #56]	; (8004f04 <MX_SPI2_Init+0x3c>)
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <MX_SPI2_Init+0x40>)
 8004ece:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004ed0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004ed4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004eda:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004edc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ede:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ee8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004eea:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eec:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004eee:	230a      	movs	r3, #10
 8004ef0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004ef2:	f7fc f813 	bl	8000f1c <HAL_SPI_Init>
 8004ef6:	b900      	cbnz	r0, 8004efa <MX_SPI2_Init+0x32>
}
 8004ef8:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004efa:	f240 3196 	movw	r1, #918	; 0x396
 8004efe:	4803      	ldr	r0, [pc, #12]	; (8004f0c <MX_SPI2_Init+0x44>)
 8004f00:	f7ff ffbc 	bl	8004e7c <_Error_Handler>
 8004f04:	20003c20 	.word	0x20003c20
 8004f08:	40003800 	.word	0x40003800
 8004f0c:	08007710 	.word	0x08007710

08004f10 <SystemClock_Config>:
{
 8004f10:	b500      	push	{lr}
 8004f12:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	2100      	movs	r1, #0
 8004f16:	9101      	str	r1, [sp, #4]
 8004f18:	4b2c      	ldr	r3, [pc, #176]	; (8004fcc <SystemClock_Config+0xbc>)
 8004f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f2c:	9102      	str	r1, [sp, #8]
 8004f2e:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <SystemClock_Config+0xc0>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f4a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f54:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f56:	2208      	movs	r2, #8
 8004f58:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004f5a:	22a8      	movs	r2, #168	; 0xa8
 8004f5c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f5e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f60:	2304      	movs	r3, #4
 8004f62:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f64:	a808      	add	r0, sp, #32
 8004f66:	f7fb fcf5 	bl	8000954 <HAL_RCC_OscConfig>
 8004f6a:	bb20      	cbnz	r0, 8004fb6 <SystemClock_Config+0xa6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f70:	2302      	movs	r3, #2
 8004f72:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f74:	2300      	movs	r3, #0
 8004f76:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004f7c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f82:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f84:	2105      	movs	r1, #5
 8004f86:	a803      	add	r0, sp, #12
 8004f88:	f7fb ff16 	bl	8000db8 <HAL_RCC_ClockConfig>
 8004f8c:	b9c0      	cbnz	r0, 8004fc0 <SystemClock_Config+0xb0>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004f8e:	f7fb ffbf 	bl	8000f10 <HAL_RCC_GetHCLKFreq>
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <SystemClock_Config+0xc4>)
 8004f94:	fba3 3000 	umull	r3, r0, r3, r0
 8004f98:	0980      	lsrs	r0, r0, #6
 8004f9a:	f7fb fbb7 	bl	800070c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004f9e:	2004      	movs	r0, #4
 8004fa0:	f7fb fbca 	bl	8000738 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	f7fb fb6e 	bl	800068c <HAL_NVIC_SetPriority>
}
 8004fb0:	b015      	add	sp, #84	; 0x54
 8004fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004fb6:	f240 314e 	movw	r1, #846	; 0x34e
 8004fba:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <SystemClock_Config+0xc8>)
 8004fbc:	f7ff ff5e 	bl	8004e7c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004fc0:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8004fc4:	4804      	ldr	r0, [pc, #16]	; (8004fd8 <SystemClock_Config+0xc8>)
 8004fc6:	f7ff ff59 	bl	8004e7c <_Error_Handler>
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	10624dd3 	.word	0x10624dd3
 8004fd8:	08007710 	.word	0x08007710

08004fdc <main>:
{
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8004fe2:	f7fb fb01 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8004fe6:	f7ff ff93 	bl	8004f10 <SystemClock_Config>
  MX_GPIO_Init();
 8004fea:	f7ff fe7b 	bl	8004ce4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004fee:	f7ff ff47 	bl	8004e80 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004ff2:	f7ff ff69 	bl	8004ec8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8004ff6:	f7ff fe65 	bl	8004cc4 <MX_FATFS_Init>
  DATA_LED(1); STAT_LED(1);
 8004ffa:	4d31      	ldr	r5, [pc, #196]	; (80050c0 <main+0xe4>)
 8004ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005000:	61ab      	str	r3, [r5, #24]
 8005002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005006:	61ab      	str	r3, [r5, #24]
  D5_LED(1); D6_LED(1);
 8005008:	4c2e      	ldr	r4, [pc, #184]	; (80050c4 <main+0xe8>)
 800500a:	2601      	movs	r6, #1
 800500c:	61a6      	str	r6, [r4, #24]
 800500e:	2302      	movs	r3, #2
 8005010:	61a3      	str	r3, [r4, #24]
  delay_ms(1000);
 8005012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005016:	f001 fba9 	bl	800676c <delay_ms>
  DATA_LED(0); STAT_LED(0);
 800501a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800501e:	61ab      	str	r3, [r5, #24]
 8005020:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005024:	61ab      	str	r3, [r5, #24]
  D5_LED(0); D6_LED(0);
 8005026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800502a:	61a3      	str	r3, [r4, #24]
 800502c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005030:	61a3      	str	r3, [r4, #24]
  FATFS_UnLinkDriver(USERPath);
 8005032:	4c25      	ldr	r4, [pc, #148]	; (80050c8 <main+0xec>)
 8005034:	4620      	mov	r0, r4
 8005036:	f7ff fa55 	bl	80044e4 <FATFS_UnLinkDriver>
  f_mount(0, 0, 1);
 800503a:	4632      	mov	r2, r6
 800503c:	2100      	movs	r1, #0
 800503e:	4608      	mov	r0, r1
 8005040:	f7fe fe14 	bl	8003c6c <f_mount>
  FT800_init();
 8005044:	f7fc f9a8 	bl	8001398 <FT800_init>
  HAL_Delay(50);
 8005048:	2032      	movs	r0, #50	; 0x32
 800504a:	f7fb faf9 	bl	8000640 <HAL_Delay>
  FATFS_LinkDriver(&USER_Driver, USERPath);
 800504e:	4621      	mov	r1, r4
 8005050:	481e      	ldr	r0, [pc, #120]	; (80050cc <main+0xf0>)
 8005052:	f7ff fa23 	bl	800449c <FATFS_LinkDriver>
  res=f_mount(&myFAT,"",0);
 8005056:	2200      	movs	r2, #0
 8005058:	491d      	ldr	r1, [pc, #116]	; (80050d0 <main+0xf4>)
 800505a:	481e      	ldr	r0, [pc, #120]	; (80050d4 <main+0xf8>)
 800505c:	f7fe fe06 	bl	8003c6c <f_mount>
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <main+0xfc>)
 8005062:	7018      	strb	r0, [r3, #0]
  FT800_drawLogo();
 8005064:	f7fc ffdd 	bl	8002022 <FT800_drawLogo>
  FT800_waitLogo();
 8005068:	f7fc ffe4 	bl	8002034 <FT800_waitLogo>
  FT800_startNewList();
 800506c:	f7fc f9d8 	bl	8001420 <FT800_startNewList>
  FT800_setBackgroundColor(DARKGRAY);
 8005070:	481a      	ldr	r0, [pc, #104]	; (80050dc <main+0x100>)
 8005072:	f7fc fa25 	bl	80014c0 <FT800_setBackgroundColor>
  FT800_clear(CLEAR_ALL);
 8005076:	2007      	movs	r0, #7
 8005078:	f7fc fa2c 	bl	80014d4 <FT800_clear>
  FT800_runTouchCalibration();
 800507c:	f7fc ffa6 	bl	8001fcc <FT800_runTouchCalibration>
  FT800_endOfList();
 8005080:	f7fc f9d6 	bl	8001430 <FT800_endOfList>
  strcpy(wallpaper_folder,bmp_folder);
 8005084:	4c16      	ldr	r4, [pc, #88]	; (80050e0 <main+0x104>)
 8005086:	4d17      	ldr	r5, [pc, #92]	; (80050e4 <main+0x108>)
 8005088:	6821      	ldr	r1, [r4, #0]
 800508a:	4628      	mov	r0, r5
 800508c:	f001 fcc4 	bl	8006a18 <strcpy>
  strcpy(wallpaper,bmps[4]);
 8005090:	4e15      	ldr	r6, [pc, #84]	; (80050e8 <main+0x10c>)
 8005092:	6961      	ldr	r1, [r4, #20]
 8005094:	4630      	mov	r0, r6
 8005096:	f001 fcbf 	bl	8006a18 <strcpy>
  sprintf((char*)path, "%s/%s",wallpaper_folder, wallpaper);
 800509a:	4c14      	ldr	r4, [pc, #80]	; (80050ec <main+0x110>)
 800509c:	4633      	mov	r3, r6
 800509e:	462a      	mov	r2, r5
 80050a0:	4913      	ldr	r1, [pc, #76]	; (80050f0 <main+0x114>)
 80050a2:	4620      	mov	r0, r4
 80050a4:	f001 fc98 	bl	80069d8 <siprintf>
  FT800_loadBMPfromSD(0,path, &img_width, &img_height, &img_bytes);
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <main+0x118>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <main+0x11c>)
 80050ae:	4a13      	ldr	r2, [pc, #76]	; (80050fc <main+0x120>)
 80050b0:	4621      	mov	r1, r4
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7fd f9da 	bl	800246c <FT800_loadBMPfromSD>
  delay_ms(50);
 80050b8:	2032      	movs	r0, #50	; 0x32
 80050ba:	f001 fb57 	bl	800676c <delay_ms>
 80050be:	e1e1      	b.n	8005484 <main+0x4a8>
 80050c0:	40020800 	.word	0x40020800
 80050c4:	40020400 	.word	0x40020400
 80050c8:	20001bb0 	.word	0x20001bb0
 80050cc:	20000068 	.word	0x20000068
 80050d0:	080078f0 	.word	0x080078f0
 80050d4:	20000364 	.word	0x20000364
 80050d8:	20004d42 	.word	0x20004d42
 80050dc:	00202020 	.word	0x00202020
 80050e0:	2000000c 	.word	0x2000000c
 80050e4:	20004cd0 	.word	0x20004cd0
 80050e8:	20004cb8 	.word	0x20004cb8
 80050ec:	2000033c 	.word	0x2000033c
 80050f0:	08007720 	.word	0x08007720
 80050f4:	20004cb4 	.word	0x20004cb4
 80050f8:	20004ccc 	.word	0x20004ccc
 80050fc:	20004d48 	.word	0x20004d48
              if(previous_menu==WAV||previous_menu==TRANSFORM||previous_menu==SCRSAVER||previous_menu==SKETCH)
 8005100:	4bb8      	ldr	r3, [pc, #736]	; (80053e4 <main+0x408>)
 8005102:	7e5b      	ldrb	r3, [r3, #25]
 8005104:	2b89      	cmp	r3, #137	; 0x89
 8005106:	d005      	beq.n	8005114 <main+0x138>
 8005108:	2b8b      	cmp	r3, #139	; 0x8b
 800510a:	d003      	beq.n	8005114 <main+0x138>
 800510c:	2b8d      	cmp	r3, #141	; 0x8d
 800510e:	d001      	beq.n	8005114 <main+0x138>
 8005110:	2b8c      	cmp	r3, #140	; 0x8c
 8005112:	d123      	bne.n	800515c <main+0x180>
                  FT800_finishList();
 8005114:	f7fc f9a2 	bl	800145c <FT800_finishList>
                  FT800_startNewList();
 8005118:	f7fc f982 	bl	8001420 <FT800_startNewList>
                  FT800_setBackgroundColor(BLACK);
 800511c:	2000      	movs	r0, #0
 800511e:	f7fc f9cf 	bl	80014c0 <FT800_setBackgroundColor>
                  FT800_clear(CLEAR_ALL);
 8005122:	2007      	movs	r0, #7
 8005124:	f7fc f9d6 	bl	80014d4 <FT800_clear>
                  FT800_stop();
 8005128:	f7fc ffd0 	bl	80020cc <FT800_stop>
                  FT800_endOfList();
 800512c:	f7fc f980 	bl	8001430 <FT800_endOfList>
                  sprintf((char*)path, "%s/%s",wallpaper_folder, wallpaper);
 8005130:	4cad      	ldr	r4, [pc, #692]	; (80053e8 <main+0x40c>)
 8005132:	4bae      	ldr	r3, [pc, #696]	; (80053ec <main+0x410>)
 8005134:	4622      	mov	r2, r4
 8005136:	49ae      	ldr	r1, [pc, #696]	; (80053f0 <main+0x414>)
 8005138:	48ae      	ldr	r0, [pc, #696]	; (80053f4 <main+0x418>)
 800513a:	f001 fc4d 	bl	80069d8 <siprintf>
                  if(!strcmp(wallpaper_folder,bmp_folder))
 800513e:	4ba9      	ldr	r3, [pc, #676]	; (80053e4 <main+0x408>)
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	4620      	mov	r0, r4
 8005144:	f7fb f844 	bl	80001d0 <strcmp>
 8005148:	2800      	cmp	r0, #0
 800514a:	f040 81bd 	bne.w	80054c8 <main+0x4ec>
                      FT800_loadBMPfromSD(0,path, &img_width, &img_height, &img_bytes);
 800514e:	4baa      	ldr	r3, [pc, #680]	; (80053f8 <main+0x41c>)
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	4baa      	ldr	r3, [pc, #680]	; (80053fc <main+0x420>)
 8005154:	4aaa      	ldr	r2, [pc, #680]	; (8005400 <main+0x424>)
 8005156:	49a7      	ldr	r1, [pc, #668]	; (80053f4 <main+0x418>)
 8005158:	f7fd f988 	bl	800246c <FT800_loadBMPfromSD>
              previous_menu=MAIN_MENU;
 800515c:	4da1      	ldr	r5, [pc, #644]	; (80053e4 <main+0x408>)
 800515e:	2381      	movs	r3, #129	; 0x81
 8005160:	766b      	strb	r3, [r5, #25]
              FT800_finishList();
 8005162:	f7fc f97b 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 8005166:	f7fc f95b 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(BLACK);
 800516a:	2000      	movs	r0, #0
 800516c:	f7fc f9a8 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8005170:	2007      	movs	r0, #7
 8005172:	f7fc f9af 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 8005176:	2000      	movs	r0, #0
 8005178:	f7fc fc28 	bl	80019cc <FT800_tagMask>
              FT800_bitmapSource(0);
 800517c:	2000      	movs	r0, #0
 800517e:	f7fc fff7 	bl	8002170 <FT800_bitmapSource>
              FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 8005182:	4b9d      	ldr	r3, [pc, #628]	; (80053f8 <main+0x41c>)
 8005184:	7819      	ldrb	r1, [r3, #0]
 8005186:	4e9e      	ldr	r6, [pc, #632]	; (8005400 <main+0x424>)
 8005188:	8833      	ldrh	r3, [r6, #0]
 800518a:	fb11 f103 	smulbb	r1, r1, r3
 800518e:	4c9b      	ldr	r4, [pc, #620]	; (80053fc <main+0x420>)
 8005190:	f9b4 2000 	ldrsh.w	r2, [r4]
 8005194:	b209      	sxth	r1, r1
 8005196:	2007      	movs	r0, #7
 8005198:	f7fc ffb4 	bl	8002104 <FT800_bitmapLayout>
              FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width, img_height);
 800519c:	f9b6 3000 	ldrsh.w	r3, [r6]
 80051a0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80051a4:	9200      	str	r2, [sp, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	4611      	mov	r1, r2
 80051aa:	4610      	mov	r0, r2
 80051ac:	f7fc ffc2 	bl	8002134 <FT800_bitmapSize>
              FT800_bitmapBegin();
 80051b0:	f7fc ff9e 	bl	80020f0 <FT800_bitmapBegin>
              FT800_Vertex2II(0,0,0,0);
 80051b4:	2300      	movs	r3, #0
 80051b6:	461a      	mov	r2, r3
 80051b8:	4619      	mov	r1, r3
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fc f9d4 	bl	8001568 <FT800_Vertex2II>
              FT800_setColorA(50);
 80051c0:	2032      	movs	r0, #50	; 0x32
 80051c2:	f7fc f991 	bl	80014e8 <FT800_setColorA>
              FT800_drawScrollBar(450, 20, 20, 200, DARKGRAY, WHITE, OPT_3D, scroll_v_value, 28, 256, SCROLL_V);
 80051c6:	2302      	movs	r3, #2
 80051c8:	9306      	str	r3, [sp, #24]
 80051ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051ce:	9305      	str	r3, [sp, #20]
 80051d0:	271c      	movs	r7, #28
 80051d2:	9704      	str	r7, [sp, #16]
 80051d4:	8b6b      	ldrh	r3, [r5, #26]
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	2400      	movs	r4, #0
 80051da:	9402      	str	r4, [sp, #8]
 80051dc:	f06f 4b7f 	mvn.w	fp, #4278190080	; 0xff000000
 80051e0:	f8cd b004 	str.w	fp, [sp, #4]
 80051e4:	4e87      	ldr	r6, [pc, #540]	; (8005404 <main+0x428>)
 80051e6:	9600      	str	r6, [sp, #0]
 80051e8:	23c8      	movs	r3, #200	; 0xc8
 80051ea:	2214      	movs	r2, #20
 80051ec:	4611      	mov	r1, r2
 80051ee:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80051f2:	f7fc fcf0 	bl	8001bd6 <FT800_drawScrollBar>
              FT800_drawScrollBar(20, 240, 400, 20, DARKGRAY, WHITE, OPT_3D, scroll_h_value, 28, 512, SCROLL_H);
 80051f6:	2303      	movs	r3, #3
 80051f8:	9306      	str	r3, [sp, #24]
 80051fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051fe:	9305      	str	r3, [sp, #20]
 8005200:	9704      	str	r7, [sp, #16]
 8005202:	8bab      	ldrh	r3, [r5, #28]
 8005204:	9303      	str	r3, [sp, #12]
 8005206:	9402      	str	r4, [sp, #8]
 8005208:	f8cd b004 	str.w	fp, [sp, #4]
 800520c:	9600      	str	r6, [sp, #0]
 800520e:	2314      	movs	r3, #20
 8005210:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005214:	21f0      	movs	r1, #240	; 0xf0
 8005216:	4618      	mov	r0, r3
 8005218:	f7fc fcdd 	bl	8001bd6 <FT800_drawScrollBar>
              int16_t x0=scroll_h_value-256;
 800521c:	8bae      	ldrh	r6, [r5, #28]
              int16_t y0=scroll_v_value-128;
 800521e:	8b6f      	ldrh	r7, [r5, #26]
              FT800_drawScissorXY(0, 0);
 8005220:	4621      	mov	r1, r4
 8005222:	4620      	mov	r0, r4
 8005224:	f7fc fb82 	bl	800192c <FT800_drawScissorXY>
              FT800_drawScissorSize(440, 230);
 8005228:	21e6      	movs	r1, #230	; 0xe6
 800522a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800522e:	f7fc fb8d 	bl	800194c <FT800_drawScissorSize>
              FT800_setColorA(200);
 8005232:	20c8      	movs	r0, #200	; 0xc8
 8005234:	f7fc f958 	bl	80014e8 <FT800_setColorA>
              FT800_drawButton(10+x0,10+y0,100,60,HOTPINK,23,OPT_3D,"Primitives",BLACK, PRIMITIVES);
 8005238:	f1a6 09f6 	sub.w	r9, r6, #246	; 0xf6
 800523c:	fa0f f989 	sxth.w	r9, r9
 8005240:	f1a7 0a76 	sub.w	sl, r7, #118	; 0x76
 8005244:	fa0f fa8a 	sxth.w	sl, sl
 8005248:	2382      	movs	r3, #130	; 0x82
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	9404      	str	r4, [sp, #16]
 800524e:	4b6e      	ldr	r3, [pc, #440]	; (8005408 <main+0x42c>)
 8005250:	9303      	str	r3, [sp, #12]
 8005252:	9402      	str	r4, [sp, #8]
 8005254:	2517      	movs	r5, #23
 8005256:	9501      	str	r5, [sp, #4]
 8005258:	4b6c      	ldr	r3, [pc, #432]	; (800540c <main+0x430>)
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	233c      	movs	r3, #60	; 0x3c
 800525e:	2264      	movs	r2, #100	; 0x64
 8005260:	4651      	mov	r1, sl
 8005262:	4648      	mov	r0, r9
 8005264:	f7fc fbbc 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(150+x0,10+y0,100,60,LIMEGREEN,23,OPT_3D,"Bars",BLACK, BARS);
 8005268:	f1a6 086a 	sub.w	r8, r6, #106	; 0x6a
 800526c:	fa0f f888 	sxth.w	r8, r8
 8005270:	2383      	movs	r3, #131	; 0x83
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	9404      	str	r4, [sp, #16]
 8005276:	4b66      	ldr	r3, [pc, #408]	; (8005410 <main+0x434>)
 8005278:	9303      	str	r3, [sp, #12]
 800527a:	9402      	str	r4, [sp, #8]
 800527c:	9501      	str	r5, [sp, #4]
 800527e:	4b65      	ldr	r3, [pc, #404]	; (8005414 <main+0x438>)
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	233c      	movs	r3, #60	; 0x3c
 8005284:	2264      	movs	r2, #100	; 0x64
 8005286:	4651      	mov	r1, sl
 8005288:	4640      	mov	r0, r8
 800528a:	f7fc fba9 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(290+x0,10+y0,100,60,TOMATO,23,OPT_3D,"Knobs",BLACK, KNOBS);
 800528e:	3622      	adds	r6, #34	; 0x22
 8005290:	b236      	sxth	r6, r6
 8005292:	2384      	movs	r3, #132	; 0x84
 8005294:	9305      	str	r3, [sp, #20]
 8005296:	9404      	str	r4, [sp, #16]
 8005298:	4b5f      	ldr	r3, [pc, #380]	; (8005418 <main+0x43c>)
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	9402      	str	r4, [sp, #8]
 800529e:	9501      	str	r5, [sp, #4]
 80052a0:	4b5e      	ldr	r3, [pc, #376]	; (800541c <main+0x440>)
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	233c      	movs	r3, #60	; 0x3c
 80052a6:	2264      	movs	r2, #100	; 0x64
 80052a8:	4651      	mov	r1, sl
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7fc fb98 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(10+x0,90+y0,100,60,INDIGO,23,OPT_3D,"Toggle",WHITE, GRADIENT);
 80052b0:	f1a7 0a26 	sub.w	sl, r7, #38	; 0x26
 80052b4:	fa0f fa8a 	sxth.w	sl, sl
 80052b8:	2385      	movs	r3, #133	; 0x85
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f8cd b010 	str.w	fp, [sp, #16]
 80052c0:	4b57      	ldr	r3, [pc, #348]	; (8005420 <main+0x444>)
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	9402      	str	r4, [sp, #8]
 80052c6:	9501      	str	r5, [sp, #4]
 80052c8:	4b56      	ldr	r3, [pc, #344]	; (8005424 <main+0x448>)
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	233c      	movs	r3, #60	; 0x3c
 80052ce:	2264      	movs	r2, #100	; 0x64
 80052d0:	4651      	mov	r1, sl
 80052d2:	4648      	mov	r0, r9
 80052d4:	f7fc fb84 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(150+x0,90+y0,100,60,GOLD,23,OPT_3D,"Keys",BLACK, KEYS);
 80052d8:	2386      	movs	r3, #134	; 0x86
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	9404      	str	r4, [sp, #16]
 80052de:	4b52      	ldr	r3, [pc, #328]	; (8005428 <main+0x44c>)
 80052e0:	9303      	str	r3, [sp, #12]
 80052e2:	9402      	str	r4, [sp, #8]
 80052e4:	9501      	str	r5, [sp, #4]
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <main+0x450>)
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	233c      	movs	r3, #60	; 0x3c
 80052ec:	2264      	movs	r2, #100	; 0x64
 80052ee:	4651      	mov	r1, sl
 80052f0:	4640      	mov	r0, r8
 80052f2:	f7fc fb75 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(290+x0,90+y0,100,60,CRIMSON,23,OPT_3D,"Sound",WHITE, SOUND);
 80052f6:	2387      	movs	r3, #135	; 0x87
 80052f8:	9305      	str	r3, [sp, #20]
 80052fa:	f8cd b010 	str.w	fp, [sp, #16]
 80052fe:	4b4c      	ldr	r3, [pc, #304]	; (8005430 <main+0x454>)
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	9402      	str	r4, [sp, #8]
 8005304:	9501      	str	r5, [sp, #4]
 8005306:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <main+0x458>)
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	233c      	movs	r3, #60	; 0x3c
 800530c:	2264      	movs	r2, #100	; 0x64
 800530e:	4651      	mov	r1, sl
 8005310:	4630      	mov	r0, r6
 8005312:	f7fc fb65 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(10+x0,170+y0,100,60,YELLOWGREEN,23,OPT_3D,"BMP",BLACK, BMP);
 8005316:	f107 0a2a 	add.w	sl, r7, #42	; 0x2a
 800531a:	fa0f fa8a 	sxth.w	sl, sl
 800531e:	2388      	movs	r3, #136	; 0x88
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	9404      	str	r4, [sp, #16]
 8005324:	4b44      	ldr	r3, [pc, #272]	; (8005438 <main+0x45c>)
 8005326:	9303      	str	r3, [sp, #12]
 8005328:	9402      	str	r4, [sp, #8]
 800532a:	9501      	str	r5, [sp, #4]
 800532c:	4b43      	ldr	r3, [pc, #268]	; (800543c <main+0x460>)
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	233c      	movs	r3, #60	; 0x3c
 8005332:	2264      	movs	r2, #100	; 0x64
 8005334:	4651      	mov	r1, sl
 8005336:	4648      	mov	r0, r9
 8005338:	f7fc fb52 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(150+x0,170+y0,100,60,PLUM,23,OPT_3D,"WAV",BLACK, WAV);
 800533c:	2389      	movs	r3, #137	; 0x89
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	9404      	str	r4, [sp, #16]
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <main+0x464>)
 8005344:	9303      	str	r3, [sp, #12]
 8005346:	9402      	str	r4, [sp, #8]
 8005348:	9501      	str	r5, [sp, #4]
 800534a:	4b3e      	ldr	r3, [pc, #248]	; (8005444 <main+0x468>)
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	233c      	movs	r3, #60	; 0x3c
 8005350:	2264      	movs	r2, #100	; 0x64
 8005352:	4651      	mov	r1, sl
 8005354:	4640      	mov	r0, r8
 8005356:	f7fc fb43 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(290+x0,170+y0,100,60,AQUAMARINE,23,OPT_3D,"JPG",BLACK, JPG);
 800535a:	238a      	movs	r3, #138	; 0x8a
 800535c:	9305      	str	r3, [sp, #20]
 800535e:	9404      	str	r4, [sp, #16]
 8005360:	4b39      	ldr	r3, [pc, #228]	; (8005448 <main+0x46c>)
 8005362:	9303      	str	r3, [sp, #12]
 8005364:	9402      	str	r4, [sp, #8]
 8005366:	9501      	str	r5, [sp, #4]
 8005368:	4b38      	ldr	r3, [pc, #224]	; (800544c <main+0x470>)
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	233c      	movs	r3, #60	; 0x3c
 800536e:	2264      	movs	r2, #100	; 0x64
 8005370:	4651      	mov	r1, sl
 8005372:	4630      	mov	r0, r6
 8005374:	f7fc fb34 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(10+x0,250+y0,100,60,KHAKI,23,OPT_3D,"Transform",BLACK, TRANSFORM);
 8005378:	377a      	adds	r7, #122	; 0x7a
 800537a:	b23f      	sxth	r7, r7
 800537c:	238b      	movs	r3, #139	; 0x8b
 800537e:	9305      	str	r3, [sp, #20]
 8005380:	9404      	str	r4, [sp, #16]
 8005382:	4b33      	ldr	r3, [pc, #204]	; (8005450 <main+0x474>)
 8005384:	9303      	str	r3, [sp, #12]
 8005386:	9402      	str	r4, [sp, #8]
 8005388:	9501      	str	r5, [sp, #4]
 800538a:	4b32      	ldr	r3, [pc, #200]	; (8005454 <main+0x478>)
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	233c      	movs	r3, #60	; 0x3c
 8005390:	2264      	movs	r2, #100	; 0x64
 8005392:	4639      	mov	r1, r7
 8005394:	4648      	mov	r0, r9
 8005396:	f7fc fb23 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(150+x0,250+y0,100,60,TURQUOISE,23,OPT_3D,"Sketch",BLACK, SKETCH);
 800539a:	238c      	movs	r3, #140	; 0x8c
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	9404      	str	r4, [sp, #16]
 80053a0:	4b2d      	ldr	r3, [pc, #180]	; (8005458 <main+0x47c>)
 80053a2:	9303      	str	r3, [sp, #12]
 80053a4:	9402      	str	r4, [sp, #8]
 80053a6:	9501      	str	r5, [sp, #4]
 80053a8:	4b2c      	ldr	r3, [pc, #176]	; (800545c <main+0x480>)
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	233c      	movs	r3, #60	; 0x3c
 80053ae:	2264      	movs	r2, #100	; 0x64
 80053b0:	4639      	mov	r1, r7
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7fc fb14 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(290+x0,250+y0,100,60,VIOLET,23,OPT_3D,"Scr. Saver",BLACK, SCRSAVER);
 80053b8:	238d      	movs	r3, #141	; 0x8d
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	9404      	str	r4, [sp, #16]
 80053be:	4b28      	ldr	r3, [pc, #160]	; (8005460 <main+0x484>)
 80053c0:	9303      	str	r3, [sp, #12]
 80053c2:	9402      	str	r4, [sp, #8]
 80053c4:	9501      	str	r5, [sp, #4]
 80053c6:	4b27      	ldr	r3, [pc, #156]	; (8005464 <main+0x488>)
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	233c      	movs	r3, #60	; 0x3c
 80053cc:	2264      	movs	r2, #100	; 0x64
 80053ce:	4639      	mov	r1, r7
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7fc fb05 	bl	80019e0 <FT800_drawButton>
              FT800_setColorA(255);
 80053d6:	20ff      	movs	r0, #255	; 0xff
 80053d8:	f7fc f886 	bl	80014e8 <FT800_setColorA>
              FT800_endOfList();
 80053dc:	f7fc f828 	bl	8001430 <FT800_endOfList>
 80053e0:	e042      	b.n	8005468 <main+0x48c>
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	20004cd0 	.word	0x20004cd0
 80053ec:	20004cb8 	.word	0x20004cb8
 80053f0:	08007720 	.word	0x08007720
 80053f4:	2000033c 	.word	0x2000033c
 80053f8:	20004cb4 	.word	0x20004cb4
 80053fc:	20004ccc 	.word	0x20004ccc
 8005400:	20004d48 	.word	0x20004d48
 8005404:	00202020 	.word	0x00202020
 8005408:	08007728 	.word	0x08007728
 800540c:	00ff69b4 	.word	0x00ff69b4
 8005410:	08007734 	.word	0x08007734
 8005414:	0032cd32 	.word	0x0032cd32
 8005418:	0800773c 	.word	0x0800773c
 800541c:	00ff6347 	.word	0x00ff6347
 8005420:	08007744 	.word	0x08007744
 8005424:	004b0082 	.word	0x004b0082
 8005428:	0800774c 	.word	0x0800774c
 800542c:	00ffd700 	.word	0x00ffd700
 8005430:	08007754 	.word	0x08007754
 8005434:	00dc143c 	.word	0x00dc143c
 8005438:	0800775c 	.word	0x0800775c
 800543c:	009acd32 	.word	0x009acd32
 8005440:	08007760 	.word	0x08007760
 8005444:	00dda0dd 	.word	0x00dda0dd
 8005448:	08007764 	.word	0x08007764
 800544c:	007fffd4 	.word	0x007fffd4
 8005450:	08007768 	.word	0x08007768
 8005454:	00f0e68c 	.word	0x00f0e68c
 8005458:	08007774 	.word	0x08007774
 800545c:	0040e0d0 	.word	0x0040e0d0
 8005460:	0800777c 	.word	0x0800777c
 8005464:	00ee82ee 	.word	0x00ee82ee
      if(touched)
 8005468:	4b9b      	ldr	r3, [pc, #620]	; (80056d8 <main+0x6fc>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f041 803d 	bne.w	80064ec <main+0x1510>
      ms+=20;
 8005472:	4a99      	ldr	r2, [pc, #612]	; (80056d8 <main+0x6fc>)
 8005474:	8b53      	ldrh	r3, [r2, #26]
 8005476:	3314      	adds	r3, #20
 8005478:	b29b      	uxth	r3, r3
 800547a:	8353      	strh	r3, [r2, #26]
      if(ms==1000)
 800547c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005480:	f001 8148 	beq.w	8006714 <main+0x1738>
      switch(menu)
 8005484:	4b95      	ldr	r3, [pc, #596]	; (80056dc <main+0x700>)
 8005486:	7e1b      	ldrb	r3, [r3, #24]
 8005488:	3b81      	subs	r3, #129	; 0x81
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d8ec      	bhi.n	8005468 <main+0x48c>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <main+0x4b8>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	08005101 	.word	0x08005101
 8005498:	080054d7 	.word	0x080054d7
 800549c:	08005617 	.word	0x08005617
 80054a0:	0800570d 	.word	0x0800570d
 80054a4:	080057fb 	.word	0x080057fb
 80054a8:	080058e7 	.word	0x080058e7
 80054ac:	080059f1 	.word	0x080059f1
 80054b0:	08005b6b 	.word	0x08005b6b
 80054b4:	08005d35 	.word	0x08005d35
 80054b8:	08005ff1 	.word	0x08005ff1
 80054bc:	08006157 	.word	0x08006157
 80054c0:	08006357 	.word	0x08006357
 80054c4:	0800641f 	.word	0x0800641f
                      FT800_loadJPGfromSD(0,path,&img_width,&img_height);
 80054c8:	4b85      	ldr	r3, [pc, #532]	; (80056e0 <main+0x704>)
 80054ca:	4a86      	ldr	r2, [pc, #536]	; (80056e4 <main+0x708>)
 80054cc:	4986      	ldr	r1, [pc, #536]	; (80056e8 <main+0x70c>)
 80054ce:	2000      	movs	r0, #0
 80054d0:	f7fd f892 	bl	80025f8 <FT800_loadJPGfromSD>
 80054d4:	e642      	b.n	800515c <main+0x180>
              FT800_finishList();
 80054d6:	f7fb ffc1 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 80054da:	f7fb ffa1 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(DARKGRAY);
 80054de:	4f83      	ldr	r7, [pc, #524]	; (80056ec <main+0x710>)
 80054e0:	4638      	mov	r0, r7
 80054e2:	f7fb ffed 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 80054e6:	2007      	movs	r0, #7
 80054e8:	f7fb fff4 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fc fa6d 	bl	80019cc <FT800_tagMask>
              short xs[10]={0, 50, 100, 150, 200, 250, 300, 350, 400, 472};
 80054f2:	4c7f      	ldr	r4, [pc, #508]	; (80056f0 <main+0x714>)
 80054f4:	ad08      	add	r5, sp, #32
 80054f6:	4626      	mov	r6, r4
 80054f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054fc:	6833      	ldr	r3, [r6, #0]
 80054fe:	602b      	str	r3, [r5, #0]
              short ys[10]={0, 200, 10, 50, 100, 150, 20, 40, 100, 0};
 8005500:	ad0d      	add	r5, sp, #52	; 0x34
 8005502:	3414      	adds	r4, #20
 8005504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	602b      	str	r3, [r5, #0]
              FT800_drawEdgeLineStrip(xs, ys, 10, 'A', DARKGRAY);
 800550c:	9700      	str	r7, [sp, #0]
 800550e:	2341      	movs	r3, #65	; 0x41
 8005510:	220a      	movs	r2, #10
 8005512:	a90d      	add	r1, sp, #52	; 0x34
 8005514:	a808      	add	r0, sp, #32
 8005516:	f7fc f925 	bl	8001764 <FT800_drawEdgeLineStrip>
              FT800_drawEdgeLineStrip(xs, ys, 10, 'B', LIGHTGRAY);
 800551a:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <main+0x718>)
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2342      	movs	r3, #66	; 0x42
 8005520:	220a      	movs	r2, #10
 8005522:	a90d      	add	r1, sp, #52	; 0x34
 8005524:	a808      	add	r0, sp, #32
 8005526:	f7fc f91d 	bl	8001764 <FT800_drawEdgeLineStrip>
              FT800_drawLineStrip(xs, ys, 10,BLACK,80);
 800552a:	2450      	movs	r4, #80	; 0x50
 800552c:	9400      	str	r4, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	220a      	movs	r2, #10
 8005532:	a90d      	add	r1, sp, #52	; 0x34
 8005534:	a808      	add	r0, sp, #32
 8005536:	f7fc f8e5 	bl	8001704 <FT800_drawLineStrip>
              FT800_drawPoint(300, 136, YELLOW, 1000);
 800553a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553e:	4a6e      	ldr	r2, [pc, #440]	; (80056f8 <main+0x71c>)
 8005540:	2188      	movs	r1, #136	; 0x88
 8005542:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005546:	f7fc f863 	bl	8001610 <FT800_drawPoint>
              FT800_drawLine(30,50,400,200,BLUE,320);
 800554a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	25ff      	movs	r5, #255	; 0xff
 8005552:	9500      	str	r5, [sp, #0]
 8005554:	23c8      	movs	r3, #200	; 0xc8
 8005556:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800555a:	2132      	movs	r1, #50	; 0x32
 800555c:	201e      	movs	r0, #30
 800555e:	f7fc f879 	bl	8001654 <FT800_drawLine>
              FT800_setColorA(150);
 8005562:	2096      	movs	r0, #150	; 0x96
 8005564:	f7fb ffc0 	bl	80014e8 <FT800_setColorA>
              FT800_drawRectangle(10,100,200,200,GREEN,40);
 8005568:	2328      	movs	r3, #40	; 0x28
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	23c8      	movs	r3, #200	; 0xc8
 8005574:	461a      	mov	r2, r3
 8005576:	2164      	movs	r1, #100	; 0x64
 8005578:	200a      	movs	r0, #10
 800557a:	f7fc f897 	bl	80016ac <FT800_drawRectangle>
              FT800_drawPoint(400, 220, RED, 400);
 800557e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005582:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005586:	21dc      	movs	r1, #220	; 0xdc
 8005588:	4618      	mov	r0, r3
 800558a:	f7fc f841 	bl	8001610 <FT800_drawPoint>
              FT800_setColorA(255);
 800558e:	4628      	mov	r0, r5
 8005590:	f7fb ffaa 	bl	80014e8 <FT800_setColorA>
              FT800_drawLine(30,250,400,50,CYAN,80);
 8005594:	9401      	str	r4, [sp, #4]
 8005596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2332      	movs	r3, #50	; 0x32
 800559e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80055a2:	21fa      	movs	r1, #250	; 0xfa
 80055a4:	201e      	movs	r0, #30
 80055a6:	f7fc f855 	bl	8001654 <FT800_drawLine>
              FT800_drawChar(310,200,25,MAGENTA,'A');
 80055aa:	2441      	movs	r4, #65	; 0x41
 80055ac:	9400      	str	r4, [sp, #0]
 80055ae:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80055b2:	2219      	movs	r2, #25
 80055b4:	21c8      	movs	r1, #200	; 0xc8
 80055b6:	f44f 709b 	mov.w	r0, #310	; 0x136
 80055ba:	f7fc f90f 	bl	80017dc <FT800_drawChar>
              FT800_drawChar(330,200,31,MAGENTA,'A');
 80055be:	9400      	str	r4, [sp, #0]
 80055c0:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80055c4:	221f      	movs	r2, #31
 80055c6:	21c8      	movs	r1, #200	; 0xc8
 80055c8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80055cc:	f7fc f906 	bl	80017dc <FT800_drawChar>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 primitives: points, lines, rectangles");
 80055d0:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <main+0x720>)
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	4b49      	ldr	r3, [pc, #292]	; (8005700 <main+0x724>)
 80055dc:	2212      	movs	r2, #18
 80055de:	2105      	movs	r1, #5
 80055e0:	4608      	mov	r0, r1
 80055e2:	f7fc f91f 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 80055e6:	2381      	movs	r3, #129	; 0x81
 80055e8:	9305      	str	r3, [sp, #20]
 80055ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	4b44      	ldr	r3, [pc, #272]	; (8005704 <main+0x728>)
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	2300      	movs	r3, #0
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	231c      	movs	r3, #28
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	231e      	movs	r3, #30
 8005604:	461a      	mov	r2, r3
 8005606:	2105      	movs	r1, #5
 8005608:	f240 10bd 	movw	r0, #445	; 0x1bd
 800560c:	f7fc f9e8 	bl	80019e0 <FT800_drawButton>
              FT800_endOfList();
 8005610:	f7fb ff0e 	bl	8001430 <FT800_endOfList>
              break;
 8005614:	e728      	b.n	8005468 <main+0x48c>
              FT800_finishList();
 8005616:	f7fb ff21 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 800561a:	f7fb ff01 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(DARKGRAY);
 800561e:	4833      	ldr	r0, [pc, #204]	; (80056ec <main+0x710>)
 8005620:	f7fb ff4e 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8005624:	2007      	movs	r0, #7
 8005626:	f7fb ff55 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 800562a:	2000      	movs	r0, #0
 800562c:	f7fc f9ce 	bl	80019cc <FT800_tagMask>
              FT800_drawProgressBar(20, 200, 440, 20, OPT_3D, slider_value, 1024, GREEN, LIGHTGRAY,0);
 8005630:	2400      	movs	r4, #0
 8005632:	9405      	str	r4, [sp, #20]
 8005634:	4b2f      	ldr	r3, [pc, #188]	; (80056f4 <main+0x718>)
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800563c:	9303      	str	r3, [sp, #12]
 800563e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005642:	9702      	str	r7, [sp, #8]
 8005644:	4e25      	ldr	r6, [pc, #148]	; (80056dc <main+0x700>)
 8005646:	8bf3      	ldrh	r3, [r6, #30]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	9400      	str	r4, [sp, #0]
 800564c:	2314      	movs	r3, #20
 800564e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005652:	21c8      	movs	r1, #200	; 0xc8
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc fbbc 	bl	8001dd2 <FT800_drawProgressBar>
              FT800_drawDecimalNumb(200, 120, 31, OPT_FLAT, slider_value, YELLOW);
 800565a:	4b27      	ldr	r3, [pc, #156]	; (80056f8 <main+0x71c>)
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	8bf3      	ldrh	r3, [r6, #30]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005666:	221f      	movs	r2, #31
 8005668:	2178      	movs	r1, #120	; 0x78
 800566a:	20c8      	movs	r0, #200	; 0xc8
 800566c:	f7fc f907 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawSlider(20, 60, 440, 20, OPT_3D, slider_value, 1024, BLUE, WHITE, WHITE, SLIDER);
 8005670:	2301      	movs	r3, #1
 8005672:	9306      	str	r3, [sp, #24]
 8005674:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
 8005678:	9505      	str	r5, [sp, #20]
 800567a:	9504      	str	r5, [sp, #16]
 800567c:	23ff      	movs	r3, #255	; 0xff
 800567e:	9303      	str	r3, [sp, #12]
 8005680:	9702      	str	r7, [sp, #8]
 8005682:	8bf3      	ldrh	r3, [r6, #30]
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	9400      	str	r4, [sp, #0]
 8005688:	2314      	movs	r3, #20
 800568a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800568e:	213c      	movs	r1, #60	; 0x3c
 8005690:	4618      	mov	r0, r3
 8005692:	f7fc fb48 	bl	8001d26 <FT800_drawSlider>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 slider & progress bar");
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <main+0x72c>)
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4b17      	ldr	r3, [pc, #92]	; (8005700 <main+0x724>)
 80056a2:	2212      	movs	r2, #18
 80056a4:	2105      	movs	r1, #5
 80056a6:	4608      	mov	r0, r1
 80056a8:	f7fc f8bc 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 80056ac:	2381      	movs	r3, #129	; 0x81
 80056ae:	9305      	str	r3, [sp, #20]
 80056b0:	9504      	str	r5, [sp, #16]
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <main+0x728>)
 80056b4:	9303      	str	r3, [sp, #12]
 80056b6:	9402      	str	r4, [sp, #8]
 80056b8:	231c      	movs	r3, #28
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	231e      	movs	r3, #30
 80056c4:	461a      	mov	r2, r3
 80056c6:	2105      	movs	r1, #5
 80056c8:	f240 10bd 	movw	r0, #445	; 0x1bd
 80056cc:	f7fc f988 	bl	80019e0 <FT800_drawButton>
              FT800_endOfList();
 80056d0:	f7fb feae 	bl	8001430 <FT800_endOfList>
              break;
 80056d4:	e6c8      	b.n	8005468 <main+0x48c>
 80056d6:	bf00      	nop
 80056d8:	20000338 	.word	0x20000338
 80056dc:	2000000c 	.word	0x2000000c
 80056e0:	20004ccc 	.word	0x20004ccc
 80056e4:	20004d48 	.word	0x20004d48
 80056e8:	2000033c 	.word	0x2000033c
 80056ec:	00202020 	.word	0x00202020
 80056f0:	08007688 	.word	0x08007688
 80056f4:	00808080 	.word	0x00808080
 80056f8:	00ffff00 	.word	0x00ffff00
 80056fc:	08007788 	.word	0x08007788
 8005700:	00ff9500 	.word	0x00ff9500
 8005704:	080077b4 	.word	0x080077b4
 8005708:	080077b8 	.word	0x080077b8
              FT800_finishList();
 800570c:	f7fb fea6 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 8005710:	f7fb fe86 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(DARKGRAY);
 8005714:	4ca6      	ldr	r4, [pc, #664]	; (80059b0 <main+0x9d4>)
 8005716:	4620      	mov	r0, r4
 8005718:	f7fb fed2 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 800571c:	2007      	movs	r0, #7
 800571e:	f7fb fed9 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 8005722:	2000      	movs	r0, #0
 8005724:	f7fc f952 	bl	80019cc <FT800_tagMask>
              FT800_drawDial(85, 110, 65, OPT_3D, dial_value, BLUE, YELLOW, DIAL);
 8005728:	2304      	movs	r3, #4
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 80059ec <main+0xa10>
 8005730:	f8cd 9008 	str.w	r9, [sp, #8]
 8005734:	23ff      	movs	r3, #255	; 0xff
 8005736:	9301      	str	r3, [sp, #4]
 8005738:	4e9e      	ldr	r6, [pc, #632]	; (80059b4 <main+0x9d8>)
 800573a:	8b33      	ldrh	r3, [r6, #24]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	2300      	movs	r3, #0
 8005740:	2241      	movs	r2, #65	; 0x41
 8005742:	216e      	movs	r1, #110	; 0x6e
 8005744:	2055      	movs	r0, #85	; 0x55
 8005746:	f7fc fb97 	bl	8001e78 <FT800_drawDial>
              FT800_drawGauge(235, 110, 65, OPT_3D, 5, 5, dial_value>>6, 1024, ORANGE, DARKGRAY,0);
 800574a:	2500      	movs	r5, #0
 800574c:	9506      	str	r5, [sp, #24]
 800574e:	9405      	str	r4, [sp, #20]
 8005750:	4f99      	ldr	r7, [pc, #612]	; (80059b8 <main+0x9dc>)
 8005752:	9704      	str	r7, [sp, #16]
 8005754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	8b33      	ldrh	r3, [r6, #24]
 800575c:	099b      	lsrs	r3, r3, #6
 800575e:	9302      	str	r3, [sp, #8]
 8005760:	2405      	movs	r4, #5
 8005762:	9401      	str	r4, [sp, #4]
 8005764:	9400      	str	r4, [sp, #0]
 8005766:	462b      	mov	r3, r5
 8005768:	2241      	movs	r2, #65	; 0x41
 800576a:	216e      	movs	r1, #110	; 0x6e
 800576c:	20eb      	movs	r0, #235	; 0xeb
 800576e:	f7fc fbc9 	bl	8001f04 <FT800_drawGauge>
              FT800_drawClock(385, 110, 65, RED, OPT_3D, hour, min, sec, ms, WHITE,0);
 8005772:	9506      	str	r5, [sp, #24]
 8005774:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8005778:	f8cd 8014 	str.w	r8, [sp, #20]
 800577c:	8b73      	ldrh	r3, [r6, #26]
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	8bb3      	ldrh	r3, [r6, #28]
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	4b8d      	ldr	r3, [pc, #564]	; (80059bc <main+0x9e0>)
 8005786:	8c1a      	ldrh	r2, [r3, #32]
 8005788:	9202      	str	r2, [sp, #8]
 800578a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	9500      	str	r5, [sp, #0]
 8005790:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8005794:	2241      	movs	r2, #65	; 0x41
 8005796:	216e      	movs	r1, #110	; 0x6e
 8005798:	f240 1081 	movw	r0, #385	; 0x181
 800579c:	f7fc f973 	bl	8001a86 <FT800_drawClock>
              FT800_drawDecimalNumb(200, 210, 31, OPT_FLAT, dial_value>>6, YELLOW);
 80057a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80057a4:	8b33      	ldrh	r3, [r6, #24]
 80057a6:	099b      	lsrs	r3, r3, #6
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ae:	221f      	movs	r2, #31
 80057b0:	21d2      	movs	r1, #210	; 0xd2
 80057b2:	20c8      	movs	r0, #200	; 0xc8
 80057b4:	f7fc f863 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 dial, gauge & clock");
 80057b8:	4b81      	ldr	r3, [pc, #516]	; (80059c0 <main+0x9e4>)
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	463b      	mov	r3, r7
 80057c4:	2212      	movs	r2, #18
 80057c6:	4621      	mov	r1, r4
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7fc f82b 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 80057ce:	2381      	movs	r3, #129	; 0x81
 80057d0:	9305      	str	r3, [sp, #20]
 80057d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80057d6:	4b7b      	ldr	r3, [pc, #492]	; (80059c4 <main+0x9e8>)
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	9502      	str	r5, [sp, #8]
 80057dc:	231c      	movs	r3, #28
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	231e      	movs	r3, #30
 80057e8:	461a      	mov	r2, r3
 80057ea:	4621      	mov	r1, r4
 80057ec:	f240 10bd 	movw	r0, #445	; 0x1bd
 80057f0:	f7fc f8f6 	bl	80019e0 <FT800_drawButton>
              FT800_endOfList();
 80057f4:	f7fb fe1c 	bl	8001430 <FT800_endOfList>
              break;
 80057f8:	e636      	b.n	8005468 <main+0x48c>
              FT800_finishList();
 80057fa:	f7fb fe2f 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 80057fe:	f7fb fe0f 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(DARKGRAY);
 8005802:	486b      	ldr	r0, [pc, #428]	; (80059b0 <main+0x9d4>)
 8005804:	f7fb fe5c 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8005808:	2007      	movs	r0, #7
 800580a:	f7fb fe63 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 800580e:	2000      	movs	r0, #0
 8005810:	f7fc f8dc 	bl	80019cc <FT800_tagMask>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 Gradient and Toggle");
 8005814:	4b6c      	ldr	r3, [pc, #432]	; (80059c8 <main+0x9ec>)
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4b66      	ldr	r3, [pc, #408]	; (80059b8 <main+0x9dc>)
 8005820:	2212      	movs	r2, #18
 8005822:	2105      	movs	r1, #5
 8005824:	4608      	mov	r0, r1
 8005826:	f7fb fffd 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 800582a:	2381      	movs	r3, #129	; 0x81
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	4b63      	ldr	r3, [pc, #396]	; (80059c4 <main+0x9e8>)
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	2300      	movs	r3, #0
 800583a:	9302      	str	r3, [sp, #8]
 800583c:	231c      	movs	r3, #28
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	231e      	movs	r3, #30
 8005848:	461a      	mov	r2, r3
 800584a:	2105      	movs	r1, #5
 800584c:	f240 10bd 	movw	r0, #445	; 0x1bd
 8005850:	f7fc f8c6 	bl	80019e0 <FT800_drawButton>
              if(toggle_value>32768)
 8005854:	4b57      	ldr	r3, [pc, #348]	; (80059b4 <main+0x9d8>)
 8005856:	8bdb      	ldrh	r3, [r3, #30]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585c:	d92c      	bls.n	80058b8 <main+0x8dc>
                  FT800_drawToggle(50, 90, 50, 28, OPT_3D, 65535, "on", DARKGRAY, ORANGE, BLACK,TOGGLE);
 800585e:	2305      	movs	r3, #5
 8005860:	9306      	str	r3, [sp, #24]
 8005862:	2300      	movs	r3, #0
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	4a54      	ldr	r2, [pc, #336]	; (80059b8 <main+0x9dc>)
 8005868:	9204      	str	r2, [sp, #16]
 800586a:	4a51      	ldr	r2, [pc, #324]	; (80059b0 <main+0x9d4>)
 800586c:	9203      	str	r2, [sp, #12]
 800586e:	4a57      	ldr	r2, [pc, #348]	; (80059cc <main+0x9f0>)
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005876:	9201      	str	r2, [sp, #4]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	231c      	movs	r3, #28
 800587c:	2232      	movs	r2, #50	; 0x32
 800587e:	215a      	movs	r1, #90	; 0x5a
 8005880:	4610      	mov	r0, r2
 8005882:	f7fc f9fc 	bl	8001c7e <FT800_drawToggle>
                  c2=GREEN;
 8005886:	f44f 457f 	mov.w	r5, #65280	; 0xff00
                  c1=RED;
 800588a:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
              FT800_drawScissorXY(30, 150);
 800588e:	2196      	movs	r1, #150	; 0x96
 8005890:	201e      	movs	r0, #30
 8005892:	f7fc f84b 	bl	800192c <FT800_drawScissorXY>
              FT800_drawScissorSize(410, 90);
 8005896:	215a      	movs	r1, #90	; 0x5a
 8005898:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800589c:	f7fc f856 	bl	800194c <FT800_drawScissorSize>
              FT800_drawGradient(30, 150, c1, 440, 150, c2);
 80058a0:	9501      	str	r5, [sp, #4]
 80058a2:	2196      	movs	r1, #150	; 0x96
 80058a4:	9100      	str	r1, [sp, #0]
 80058a6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80058aa:	4622      	mov	r2, r4
 80058ac:	201e      	movs	r0, #30
 80058ae:	f7fc f815 	bl	80018dc <FT800_drawGradient>
              FT800_endOfList();
 80058b2:	f7fb fdbd 	bl	8001430 <FT800_endOfList>
              break;
 80058b6:	e5d7      	b.n	8005468 <main+0x48c>
                  FT800_drawToggle(50, 90, 50, 28, OPT_3D, 0, "off", DARKGRAY, ORANGE, BLACK,TOGGLE);
 80058b8:	2305      	movs	r3, #5
 80058ba:	9306      	str	r3, [sp, #24]
 80058bc:	2300      	movs	r3, #0
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <main+0x9dc>)
 80058c2:	9204      	str	r2, [sp, #16]
 80058c4:	4a3a      	ldr	r2, [pc, #232]	; (80059b0 <main+0x9d4>)
 80058c6:	9203      	str	r2, [sp, #12]
 80058c8:	4a41      	ldr	r2, [pc, #260]	; (80059d0 <main+0x9f4>)
 80058ca:	9202      	str	r2, [sp, #8]
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	231c      	movs	r3, #28
 80058d2:	2232      	movs	r2, #50	; 0x32
 80058d4:	215a      	movs	r1, #90	; 0x5a
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fc f9d1 	bl	8001c7e <FT800_drawToggle>
                  c2=RED;
 80058dc:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
                  c1=GREEN;
 80058e0:	f44f 447f 	mov.w	r4, #65280	; 0xff00
 80058e4:	e7d3      	b.n	800588e <main+0x8b2>
              FT800_finishList();
 80058e6:	f7fb fdb9 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 80058ea:	f7fb fd99 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(DARKGRAY);
 80058ee:	4830      	ldr	r0, [pc, #192]	; (80059b0 <main+0x9d4>)
 80058f0:	f7fb fde6 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 80058f4:	2007      	movs	r0, #7
 80058f6:	f7fb fded 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 80058fa:	2000      	movs	r0, #0
 80058fc:	f7fc f866 	bl	80019cc <FT800_tagMask>
              key_value=FT800_Read8(REG_TOUCH_TAG);
 8005900:	4834      	ldr	r0, [pc, #208]	; (80059d4 <main+0x9f8>)
 8005902:	f7fb fc41 	bl	8001188 <FT800_Read8>
 8005906:	b280      	uxth	r0, r0
 8005908:	4c33      	ldr	r4, [pc, #204]	; (80059d8 <main+0x9fc>)
 800590a:	8020      	strh	r0, [r4, #0]
              FT800_drawKeys(30, 150, 400, 50, LIGHTGRAY, 25, key_value, "ABCDEFGH", BLUE, KEYS);
 800590c:	f04f 0886 	mov.w	r8, #134	; 0x86
 8005910:	f8cd 8014 	str.w	r8, [sp, #20]
 8005914:	27ff      	movs	r7, #255	; 0xff
 8005916:	9704      	str	r7, [sp, #16]
 8005918:	4b30      	ldr	r3, [pc, #192]	; (80059dc <main+0xa00>)
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	2619      	movs	r6, #25
 8005920:	9601      	str	r6, [sp, #4]
 8005922:	4d2f      	ldr	r5, [pc, #188]	; (80059e0 <main+0xa04>)
 8005924:	9500      	str	r5, [sp, #0]
 8005926:	2332      	movs	r3, #50	; 0x32
 8005928:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800592c:	2196      	movs	r1, #150	; 0x96
 800592e:	201e      	movs	r0, #30
 8005930:	f7fc f8fe 	bl	8001b30 <FT800_drawKeys>
              FT800_drawKeys(55, 202, 350, 50, LIGHTGRAY, 25, key_value, "1234567", BLUE, KEYS);
 8005934:	f8cd 8014 	str.w	r8, [sp, #20]
 8005938:	9704      	str	r7, [sp, #16]
 800593a:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <main+0xa08>)
 800593c:	9303      	str	r3, [sp, #12]
 800593e:	8823      	ldrh	r3, [r4, #0]
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	9601      	str	r6, [sp, #4]
 8005944:	9500      	str	r5, [sp, #0]
 8005946:	2332      	movs	r3, #50	; 0x32
 8005948:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800594c:	21ca      	movs	r1, #202	; 0xca
 800594e:	2037      	movs	r0, #55	; 0x37
 8005950:	f7fc f8ee 	bl	8001b30 <FT800_drawKeys>
              if(key_value)FT800_drawChar(220,50,31,ORANGE,key_value);
 8005954:	8823      	ldrh	r3, [r4, #0]
 8005956:	bb13      	cbnz	r3, 800599e <main+0x9c2>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 keys");
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <main+0xa0c>)
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <main+0x9dc>)
 8005964:	2212      	movs	r2, #18
 8005966:	2105      	movs	r1, #5
 8005968:	4608      	mov	r0, r1
 800596a:	f7fb ff5b 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 800596e:	2381      	movs	r3, #129	; 0x81
 8005970:	9305      	str	r3, [sp, #20]
 8005972:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005976:	9304      	str	r3, [sp, #16]
 8005978:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <main+0x9e8>)
 800597a:	9303      	str	r3, [sp, #12]
 800597c:	2300      	movs	r3, #0
 800597e:	9302      	str	r3, [sp, #8]
 8005980:	231c      	movs	r3, #28
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	231e      	movs	r3, #30
 800598c:	461a      	mov	r2, r3
 800598e:	2105      	movs	r1, #5
 8005990:	f240 10bd 	movw	r0, #445	; 0x1bd
 8005994:	f7fc f824 	bl	80019e0 <FT800_drawButton>
              FT800_endOfList();
 8005998:	f7fb fd4a 	bl	8001430 <FT800_endOfList>
              break;
 800599c:	e564      	b.n	8005468 <main+0x48c>
              if(key_value)FT800_drawChar(220,50,31,ORANGE,key_value);
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <main+0x9dc>)
 80059a4:	221f      	movs	r2, #31
 80059a6:	2132      	movs	r1, #50	; 0x32
 80059a8:	20dc      	movs	r0, #220	; 0xdc
 80059aa:	f7fb ff17 	bl	80017dc <FT800_drawChar>
 80059ae:	e7d3      	b.n	8005958 <main+0x97c>
 80059b0:	00202020 	.word	0x00202020
 80059b4:	20000338 	.word	0x20000338
 80059b8:	00ff9500 	.word	0x00ff9500
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	080077d4 	.word	0x080077d4
 80059c4:	080077b4 	.word	0x080077b4
 80059c8:	080077f0 	.word	0x080077f0
 80059cc:	0800780c 	.word	0x0800780c
 80059d0:	08007810 	.word	0x08007810
 80059d4:	00102518 	.word	0x00102518
 80059d8:	20004ca8 	.word	0x20004ca8
 80059dc:	08007814 	.word	0x08007814
 80059e0:	00808080 	.word	0x00808080
 80059e4:	08007820 	.word	0x08007820
 80059e8:	08007828 	.word	0x08007828
 80059ec:	00ffff00 	.word	0x00ffff00
              FT800_finishList();
 80059f0:	f7fb fd34 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 80059f4:	f7fb fd14 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(DARKGRAY);
 80059f8:	48b7      	ldr	r0, [pc, #732]	; (8005cd8 <main+0xcfc>)
 80059fa:	f7fb fd61 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 80059fe:	2007      	movs	r0, #7
 8005a00:	f7fb fd68 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7fb ffe1 	bl	80019cc <FT800_tagMask>
              mute=1;
 8005a0a:	4bb4      	ldr	r3, [pc, #720]	; (8005cdc <main+0xd00>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2020 	strb.w	r2, [r3, #32]
              prev_key_value=key_value;
 8005a12:	4cb3      	ldr	r4, [pc, #716]	; (8005ce0 <main+0xd04>)
 8005a14:	8822      	ldrh	r2, [r4, #0]
 8005a16:	4bb3      	ldr	r3, [pc, #716]	; (8005ce4 <main+0xd08>)
 8005a18:	801a      	strh	r2, [r3, #0]
              key_value=FT800_Read8(REG_TOUCH_TAG);
 8005a1a:	48b3      	ldr	r0, [pc, #716]	; (8005ce8 <main+0xd0c>)
 8005a1c:	f7fb fbb4 	bl	8001188 <FT800_Read8>
 8005a20:	b280      	uxth	r0, r0
 8005a22:	8020      	strh	r0, [r4, #0]
              FT800_drawKeys(30, 170, 410, 100, WHITE, 25, key_value, "CDEFGAB", BLACK, NOTES);
 8005a24:	f04f 0807 	mov.w	r8, #7
 8005a28:	f8cd 8014 	str.w	r8, [sp, #20]
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	9504      	str	r5, [sp, #16]
 8005a30:	4bae      	ldr	r3, [pc, #696]	; (8005cec <main+0xd10>)
 8005a32:	9303      	str	r3, [sp, #12]
 8005a34:	9002      	str	r0, [sp, #8]
 8005a36:	2619      	movs	r6, #25
 8005a38:	9601      	str	r6, [sp, #4]
 8005a3a:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8005a3e:	9700      	str	r7, [sp, #0]
 8005a40:	2364      	movs	r3, #100	; 0x64
 8005a42:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8005a46:	21aa      	movs	r1, #170	; 0xaa
 8005a48:	201e      	movs	r0, #30
 8005a4a:	f7fc f871 	bl	8001b30 <FT800_drawKeys>
              FT800_drawKeys(30+30, 130, 110, 60, BLACK, 25, key_value, "cd", WHITE, NOTES);
 8005a4e:	f8cd 8014 	str.w	r8, [sp, #20]
 8005a52:	9704      	str	r7, [sp, #16]
 8005a54:	4ba6      	ldr	r3, [pc, #664]	; (8005cf0 <main+0xd14>)
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	8823      	ldrh	r3, [r4, #0]
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	9601      	str	r6, [sp, #4]
 8005a5e:	9500      	str	r5, [sp, #0]
 8005a60:	233c      	movs	r3, #60	; 0x3c
 8005a62:	226e      	movs	r2, #110	; 0x6e
 8005a64:	2182      	movs	r1, #130	; 0x82
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fc f862 	bl	8001b30 <FT800_drawKeys>
              FT800_drawKeys(30+180+30, 130, 156, 60, BLACK, 25, key_value, "fga", WHITE, NOTES);
 8005a6c:	f8cd 8014 	str.w	r8, [sp, #20]
 8005a70:	9704      	str	r7, [sp, #16]
 8005a72:	4ba0      	ldr	r3, [pc, #640]	; (8005cf4 <main+0xd18>)
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	8823      	ldrh	r3, [r4, #0]
 8005a78:	9302      	str	r3, [sp, #8]
 8005a7a:	9601      	str	r6, [sp, #4]
 8005a7c:	9500      	str	r5, [sp, #0]
 8005a7e:	233c      	movs	r3, #60	; 0x3c
 8005a80:	229c      	movs	r2, #156	; 0x9c
 8005a82:	2182      	movs	r1, #130	; 0x82
 8005a84:	20f0      	movs	r0, #240	; 0xf0
 8005a86:	f7fc f853 	bl	8001b30 <FT800_drawKeys>
              if(key_value)FT800_drawChar(350,30,31,ORANGE,key_value);
 8005a8a:	8823      	ldrh	r3, [r4, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d15b      	bne.n	8005b48 <main+0xb6c>
              FT800_drawText(40, 60, 18, ORANGE, OPT_FLAT, "Volume");
 8005a90:	4c99      	ldr	r4, [pc, #612]	; (8005cf8 <main+0xd1c>)
 8005a92:	4b9a      	ldr	r3, [pc, #616]	; (8005cfc <main+0xd20>)
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	2212      	movs	r2, #18
 8005aa0:	213c      	movs	r1, #60	; 0x3c
 8005aa2:	2028      	movs	r0, #40	; 0x28
 8005aa4:	f7fb febe 	bl	8001824 <FT800_drawText>
              FT800_drawSlider(40, 90, 390, 10, OPT_3D, slider_value, 1024, ORANGE, DARKGRAY, WHITE, SLIDER1);
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	9306      	str	r3, [sp, #24]
 8005aac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005ab0:	9305      	str	r3, [sp, #20]
 8005ab2:	4b89      	ldr	r3, [pc, #548]	; (8005cd8 <main+0xcfc>)
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	9403      	str	r4, [sp, #12]
 8005ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005abc:	9302      	str	r3, [sp, #8]
 8005abe:	4c90      	ldr	r4, [pc, #576]	; (8005d00 <main+0xd24>)
 8005ac0:	8be3      	ldrh	r3, [r4, #30]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	230a      	movs	r3, #10
 8005aca:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8005ace:	215a      	movs	r1, #90	; 0x5a
 8005ad0:	2028      	movs	r0, #40	; 0x28
 8005ad2:	f7fc f928 	bl	8001d26 <FT800_drawSlider>
              FT800_setSoundVolume(slider_value>>2);
 8005ad6:	8be0      	ldrh	r0, [r4, #30]
 8005ad8:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8005adc:	f7fb fa5e 	bl	8000f9c <FT800_setSoundVolume>
              if(key_value!=prev_key_value)
 8005ae0:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <main+0xd04>)
 8005ae2:	8818      	ldrh	r0, [r3, #0]
 8005ae4:	4b7f      	ldr	r3, [pc, #508]	; (8005ce4 <main+0xd08>)
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	4298      	cmp	r0, r3
 8005aea:	d00a      	beq.n	8005b02 <main+0xb26>
                  if(key_value)
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d035      	beq.n	8005b5c <main+0xb80>
                      FT800_setSoundEffect(getNote(key_value),0x02);
 8005af0:	b2c0      	uxtb	r0, r0
 8005af2:	f7ff f983 	bl	8004dfc <getNote>
 8005af6:	2102      	movs	r1, #2
 8005af8:	f7fb fa58 	bl	8000fac <FT800_setSoundEffect>
                  FT800_playSound(1);
 8005afc:	2001      	movs	r0, #1
 8005afe:	f7fb fa5f 	bl	8000fc0 <FT800_playSound>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 sound synthesizer");
 8005b02:	4b80      	ldr	r3, [pc, #512]	; (8005d04 <main+0xd28>)
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	4b7a      	ldr	r3, [pc, #488]	; (8005cf8 <main+0xd1c>)
 8005b0e:	2212      	movs	r2, #18
 8005b10:	2105      	movs	r1, #5
 8005b12:	4608      	mov	r0, r1
 8005b14:	f7fb fe86 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8005b18:	2381      	movs	r3, #129	; 0x81
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	4b79      	ldr	r3, [pc, #484]	; (8005d08 <main+0xd2c>)
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	2300      	movs	r3, #0
 8005b28:	9302      	str	r3, [sp, #8]
 8005b2a:	231c      	movs	r3, #28
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	231e      	movs	r3, #30
 8005b36:	461a      	mov	r2, r3
 8005b38:	2105      	movs	r1, #5
 8005b3a:	f240 10bd 	movw	r0, #445	; 0x1bd
 8005b3e:	f7fb ff4f 	bl	80019e0 <FT800_drawButton>
              FT800_endOfList();
 8005b42:	f7fb fc75 	bl	8001430 <FT800_endOfList>
              break;
 8005b46:	e48f      	b.n	8005468 <main+0x48c>
              if(key_value)FT800_drawChar(350,30,31,ORANGE,key_value);
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4b6a      	ldr	r3, [pc, #424]	; (8005cf8 <main+0xd1c>)
 8005b4e:	221f      	movs	r2, #31
 8005b50:	211e      	movs	r1, #30
 8005b52:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005b56:	f7fb fe41 	bl	80017dc <FT800_drawChar>
 8005b5a:	e799      	b.n	8005a90 <main+0xab4>
                      FT800_setSoundEffect(getNote(key_value),0x00);
 8005b5c:	b2c0      	uxtb	r0, r0
 8005b5e:	f7ff f94d 	bl	8004dfc <getNote>
 8005b62:	2100      	movs	r1, #0
 8005b64:	f7fb fa22 	bl	8000fac <FT800_setSoundEffect>
 8005b68:	e7c8      	b.n	8005afc <main+0xb20>
              if((previous_menu==MAIN_MENU)||new_file)
 8005b6a:	4b65      	ldr	r3, [pc, #404]	; (8005d00 <main+0xd24>)
 8005b6c:	7e5b      	ldrb	r3, [r3, #25]
 8005b6e:	2b81      	cmp	r3, #129	; 0x81
 8005b70:	d004      	beq.n	8005b7c <main+0xba0>
 8005b72:	4b5a      	ldr	r3, [pc, #360]	; (8005cdc <main+0xd00>)
 8005b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d041      	beq.n	8005c00 <main+0xc24>
                  new_file=0;
 8005b7c:	4d57      	ldr	r5, [pc, #348]	; (8005cdc <main+0xd00>)
 8005b7e:	2600      	movs	r6, #0
 8005b80:	f885 6021 	strb.w	r6, [r5, #33]	; 0x21
                  FT800_finishList();
 8005b84:	f7fb fc6a 	bl	800145c <FT800_finishList>
                  FT800_startNewList();
 8005b88:	f7fb fc4a 	bl	8001420 <FT800_startNewList>
                  FT800_setBackgroundColor(BLACK);
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7fb fc97 	bl	80014c0 <FT800_setBackgroundColor>
                  FT800_clear(CLEAR_ALL);
 8005b92:	2007      	movs	r0, #7
 8005b94:	f7fb fc9e 	bl	80014d4 <FT800_clear>
                  FT800_drawText(205, 20, 23, WHITE, OPT_FLAT, "Loading...");
 8005b98:	4b5c      	ldr	r3, [pc, #368]	; (8005d0c <main+0xd30>)
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005ba6:	2217      	movs	r2, #23
 8005ba8:	2114      	movs	r1, #20
 8005baa:	20cd      	movs	r0, #205	; 0xcd
 8005bac:	f7fb fe3a 	bl	8001824 <FT800_drawText>
                  FT800_drawAnimSpinner(240,136,0,1);
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	2188      	movs	r1, #136	; 0x88
 8005bb6:	20f0      	movs	r0, #240	; 0xf0
 8005bb8:	f7fc fa10 	bl	8001fdc <FT800_drawAnimSpinner>
                  FT800_endOfList();
 8005bbc:	f7fb fc38 	bl	8001430 <FT800_endOfList>
                  sprintf((char*)path, "%s/%s",bmp_folder, bmps[bmp_num]);
 8005bc0:	4c4f      	ldr	r4, [pc, #316]	; (8005d00 <main+0xd24>)
 8005bc2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005bc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bca:	3504      	adds	r5, #4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	494f      	ldr	r1, [pc, #316]	; (8005d10 <main+0xd34>)
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 ff00 	bl	80069d8 <siprintf>
                  FT800_loadBMPfromSD(0,path , &img_width, &img_height, &img_bytes);
 8005bd8:	4b4e      	ldr	r3, [pc, #312]	; (8005d14 <main+0xd38>)
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4b4e      	ldr	r3, [pc, #312]	; (8005d18 <main+0xd3c>)
 8005bde:	4a4f      	ldr	r2, [pc, #316]	; (8005d1c <main+0xd40>)
 8005be0:	4629      	mov	r1, r5
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7fc fc42 	bl	800246c <FT800_loadBMPfromSD>
                  strcpy(wallpaper_folder,bmp_folder);
 8005be8:	6821      	ldr	r1, [r4, #0]
 8005bea:	484d      	ldr	r0, [pc, #308]	; (8005d20 <main+0xd44>)
 8005bec:	f000 ff14 	bl	8006a18 <strcpy>
                  strcpy(wallpaper,bmps[bmp_num]);
 8005bf0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005bf4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005bf8:	6861      	ldr	r1, [r4, #4]
 8005bfa:	484a      	ldr	r0, [pc, #296]	; (8005d24 <main+0xd48>)
 8005bfc:	f000 ff0c 	bl	8006a18 <strcpy>
              previous_menu=BMP;
 8005c00:	4b3f      	ldr	r3, [pc, #252]	; (8005d00 <main+0xd24>)
 8005c02:	2288      	movs	r2, #136	; 0x88
 8005c04:	765a      	strb	r2, [r3, #25]
              FT800_finishList();
 8005c06:	f7fb fc29 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 8005c0a:	f7fb fc09 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(BLACK);
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f7fb fc56 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8005c14:	2007      	movs	r0, #7
 8005c16:	f7fb fc5d 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f7fb fed6 	bl	80019cc <FT800_tagMask>
              FT800_bitmapSource(0);
 8005c20:	2000      	movs	r0, #0
 8005c22:	f7fc faa5 	bl	8002170 <FT800_bitmapSource>
              FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 8005c26:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <main+0xd38>)
 8005c28:	7819      	ldrb	r1, [r3, #0]
 8005c2a:	4d3c      	ldr	r5, [pc, #240]	; (8005d1c <main+0xd40>)
 8005c2c:	882b      	ldrh	r3, [r5, #0]
 8005c2e:	fb11 f103 	smulbb	r1, r1, r3
 8005c32:	4c39      	ldr	r4, [pc, #228]	; (8005d18 <main+0xd3c>)
 8005c34:	f9b4 2000 	ldrsh.w	r2, [r4]
 8005c38:	b209      	sxth	r1, r1
 8005c3a:	2007      	movs	r0, #7
 8005c3c:	f7fc fa62 	bl	8002104 <FT800_bitmapLayout>
              FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width, img_height);
 8005c40:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005c44:	f9b4 2000 	ldrsh.w	r2, [r4]
 8005c48:	9200      	str	r2, [sp, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fc fa70 	bl	8002134 <FT800_bitmapSize>
              FT800_bitmapBegin();
 8005c54:	f7fc fa4c 	bl	80020f0 <FT800_bitmapBegin>
              FT800_Vertex2II(0,0,0,0);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fb fc82 	bl	8001568 <FT800_Vertex2II>
              FT800_setColorA(100);
 8005c64:	2064      	movs	r0, #100	; 0x64
 8005c66:	f7fb fc3f 	bl	80014e8 <FT800_setColorA>
              FT800_drawButton(445,5,30,30,LIGHTGRAY,28,OPT_3D,"X",BLACK, MAIN_MENU);
 8005c6a:	2381      	movs	r3, #129	; 0x81
 8005c6c:	9305      	str	r3, [sp, #20]
 8005c6e:	2400      	movs	r4, #0
 8005c70:	9404      	str	r4, [sp, #16]
 8005c72:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <main+0xd2c>)
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	9402      	str	r4, [sp, #8]
 8005c78:	231c      	movs	r3, #28
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	4d2a      	ldr	r5, [pc, #168]	; (8005d28 <main+0xd4c>)
 8005c7e:	9500      	str	r5, [sp, #0]
 8005c80:	231e      	movs	r3, #30
 8005c82:	461a      	mov	r2, r3
 8005c84:	2105      	movs	r1, #5
 8005c86:	f240 10bd 	movw	r0, #445	; 0x1bd
 8005c8a:	f7fb fea9 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(190,230,40,40,LIGHTGRAY,30,OPT_3D,"<",BLACK, BACKWARD);
 8005c8e:	2309      	movs	r3, #9
 8005c90:	9305      	str	r3, [sp, #20]
 8005c92:	9404      	str	r4, [sp, #16]
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <main+0xd50>)
 8005c96:	9303      	str	r3, [sp, #12]
 8005c98:	9402      	str	r4, [sp, #8]
 8005c9a:	261e      	movs	r6, #30
 8005c9c:	9601      	str	r6, [sp, #4]
 8005c9e:	9500      	str	r5, [sp, #0]
 8005ca0:	2328      	movs	r3, #40	; 0x28
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	21e6      	movs	r1, #230	; 0xe6
 8005ca6:	20be      	movs	r0, #190	; 0xbe
 8005ca8:	f7fb fe9a 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(250,230,40,40,LIGHTGRAY,30,OPT_3D,">",BLACK, FORWARD);
 8005cac:	230a      	movs	r3, #10
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	9404      	str	r4, [sp, #16]
 8005cb2:	4b1f      	ldr	r3, [pc, #124]	; (8005d30 <main+0xd54>)
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	9402      	str	r4, [sp, #8]
 8005cb8:	9601      	str	r6, [sp, #4]
 8005cba:	9500      	str	r5, [sp, #0]
 8005cbc:	2328      	movs	r3, #40	; 0x28
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	21e6      	movs	r1, #230	; 0xe6
 8005cc2:	20fa      	movs	r0, #250	; 0xfa
 8005cc4:	f7fb fe8c 	bl	80019e0 <FT800_drawButton>
              FT800_setColorA(255);
 8005cc8:	20ff      	movs	r0, #255	; 0xff
 8005cca:	f7fb fc0d 	bl	80014e8 <FT800_setColorA>
              FT800_endOfList();
 8005cce:	f7fb fbaf 	bl	8001430 <FT800_endOfList>
              break;
 8005cd2:	f7ff bbc9 	b.w	8005468 <main+0x48c>
 8005cd6:	bf00      	nop
 8005cd8:	00202020 	.word	0x00202020
 8005cdc:	20000338 	.word	0x20000338
 8005ce0:	20004ca8 	.word	0x20004ca8
 8005ce4:	20004ce6 	.word	0x20004ce6
 8005ce8:	00102518 	.word	0x00102518
 8005cec:	08007834 	.word	0x08007834
 8005cf0:	0800783c 	.word	0x0800783c
 8005cf4:	08007840 	.word	0x08007840
 8005cf8:	00ff9500 	.word	0x00ff9500
 8005cfc:	08007844 	.word	0x08007844
 8005d00:	2000000c 	.word	0x2000000c
 8005d04:	0800784c 	.word	0x0800784c
 8005d08:	080077b4 	.word	0x080077b4
 8005d0c:	08007864 	.word	0x08007864
 8005d10:	08007720 	.word	0x08007720
 8005d14:	20004cb4 	.word	0x20004cb4
 8005d18:	20004ccc 	.word	0x20004ccc
 8005d1c:	20004d48 	.word	0x20004d48
 8005d20:	20004cd0 	.word	0x20004cd0
 8005d24:	20004cb8 	.word	0x20004cb8
 8005d28:	00808080 	.word	0x00808080
 8005d2c:	08007870 	.word	0x08007870
 8005d30:	08007874 	.word	0x08007874
              if(previous_menu==MAIN_MENU)
 8005d34:	4b9a      	ldr	r3, [pc, #616]	; (8005fa0 <main+0xfc4>)
 8005d36:	7e5b      	ldrb	r3, [r3, #25]
 8005d38:	2b81      	cmp	r3, #129	; 0x81
 8005d3a:	f000 80e7 	beq.w	8005f0c <main+0xf30>
              previous_menu=WAV;
 8005d3e:	4b98      	ldr	r3, [pc, #608]	; (8005fa0 <main+0xfc4>)
 8005d40:	2289      	movs	r2, #137	; 0x89
 8005d42:	765a      	strb	r2, [r3, #25]
              if(new_file)
 8005d44:	4b97      	ldr	r3, [pc, #604]	; (8005fa4 <main+0xfc8>)
 8005d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 810a 	bne.w	8005f64 <main+0xf88>
              FT800_finishList();
 8005d50:	f7fb fb84 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 8005d54:	f7fb fb64 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(ORANGE);
 8005d58:	4f93      	ldr	r7, [pc, #588]	; (8005fa8 <main+0xfcc>)
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f7fb fbb0 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8005d60:	2007      	movs	r0, #7
 8005d62:	f7fb fbb7 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fb fe30 	bl	80019cc <FT800_tagMask>
              FT800_drawText(10, 10, 18, BLACK, OPT_FLAT, wavs[wav_num]);
 8005d6c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8005fa0 <main+0xfc4>
 8005d70:	4b8c      	ldr	r3, [pc, #560]	; (8005fa4 <main+0xfc8>)
 8005d72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005d76:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005d82:	9400      	str	r4, [sp, #0]
 8005d84:	2300      	movs	r3, #0
 8005d86:	2212      	movs	r2, #18
 8005d88:	210a      	movs	r1, #10
 8005d8a:	4608      	mov	r0, r1
 8005d8c:	f7fb fd4a 	bl	8001824 <FT800_drawText>
              FT800_drawText(20, 30, 18, DARKGRAY, OPT_FLAT, "FORMAT:  (0-PCM, 1-uLAW, 2-ADPCM)");
 8005d90:	4e86      	ldr	r6, [pc, #536]	; (8005fac <main+0xfd0>)
 8005d92:	4b87      	ldr	r3, [pc, #540]	; (8005fb0 <main+0xfd4>)
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	9400      	str	r4, [sp, #0]
 8005d98:	4633      	mov	r3, r6
 8005d9a:	2212      	movs	r2, #18
 8005d9c:	211e      	movs	r1, #30
 8005d9e:	2014      	movs	r0, #20
 8005da0:	f7fb fd40 	bl	8001824 <FT800_drawText>
              FT800_drawText(20, 50, 18, DARKGRAY, OPT_FLAT, "CHANNELS:  (1-MONO, 2-STEREO)");
 8005da4:	4b83      	ldr	r3, [pc, #524]	; (8005fb4 <main+0xfd8>)
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	9400      	str	r4, [sp, #0]
 8005daa:	4633      	mov	r3, r6
 8005dac:	2212      	movs	r2, #18
 8005dae:	2132      	movs	r1, #50	; 0x32
 8005db0:	2014      	movs	r0, #20
 8005db2:	f7fb fd37 	bl	8001824 <FT800_drawText>
              FT800_drawText(20, 70, 18, DARKGRAY, OPT_FLAT, "SAMPLE RATE [Hz]:");
 8005db6:	4b80      	ldr	r3, [pc, #512]	; (8005fb8 <main+0xfdc>)
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	9400      	str	r4, [sp, #0]
 8005dbc:	4633      	mov	r3, r6
 8005dbe:	2212      	movs	r2, #18
 8005dc0:	2146      	movs	r1, #70	; 0x46
 8005dc2:	2014      	movs	r0, #20
 8005dc4:	f7fb fd2e 	bl	8001824 <FT800_drawText>
              FT800_drawText(20, 90, 18, DARKGRAY, OPT_FLAT, "BITS:");
 8005dc8:	4b7c      	ldr	r3, [pc, #496]	; (8005fbc <main+0xfe0>)
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	9400      	str	r4, [sp, #0]
 8005dce:	4633      	mov	r3, r6
 8005dd0:	2212      	movs	r2, #18
 8005dd2:	215a      	movs	r1, #90	; 0x5a
 8005dd4:	2014      	movs	r0, #20
 8005dd6:	f7fb fd25 	bl	8001824 <FT800_drawText>
              FT800_drawText(20, 110, 18, DARKGRAY, OPT_FLAT, "BYTES[KB]:     (MAX 256)");
 8005dda:	4b79      	ldr	r3, [pc, #484]	; (8005fc0 <main+0xfe4>)
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	9400      	str	r4, [sp, #0]
 8005de0:	4633      	mov	r3, r6
 8005de2:	2212      	movs	r2, #18
 8005de4:	216e      	movs	r1, #110	; 0x6e
 8005de6:	2014      	movs	r0, #20
 8005de8:	f7fb fd1c 	bl	8001824 <FT800_drawText>
              FT800_drawDecimalNumb(80, 30, 18, OPT_FLAT, wav_format, BLACK);
 8005dec:	2500      	movs	r5, #0
 8005dee:	9501      	str	r5, [sp, #4]
 8005df0:	4b74      	ldr	r3, [pc, #464]	; (8005fc4 <main+0xfe8>)
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4623      	mov	r3, r4
 8005df8:	2212      	movs	r2, #18
 8005dfa:	211e      	movs	r1, #30
 8005dfc:	2050      	movs	r0, #80	; 0x50
 8005dfe:	f7fb fd3e 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawDecimalNumb(95, 50, 18, OPT_FLAT, wav_channels, BLACK);
 8005e02:	9501      	str	r5, [sp, #4]
 8005e04:	4b70      	ldr	r3, [pc, #448]	; (8005fc8 <main+0xfec>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	2212      	movs	r2, #18
 8005e0e:	2132      	movs	r1, #50	; 0x32
 8005e10:	205f      	movs	r0, #95	; 0x5f
 8005e12:	f7fb fd34 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawDecimalNumb(160, 70, 18, OPT_FLAT, wav_sample_rate, BLACK);
 8005e16:	9501      	str	r5, [sp, #4]
 8005e18:	4b6c      	ldr	r3, [pc, #432]	; (8005fcc <main+0xff0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4623      	mov	r3, r4
 8005e20:	2212      	movs	r2, #18
 8005e22:	2146      	movs	r1, #70	; 0x46
 8005e24:	20a0      	movs	r0, #160	; 0xa0
 8005e26:	f7fb fd2a 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawDecimalNumb(65, 90, 18, OPT_FLAT, wav_bpc, BLACK);
 8005e2a:	9501      	str	r5, [sp, #4]
 8005e2c:	4b68      	ldr	r3, [pc, #416]	; (8005fd0 <main+0xff4>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4623      	mov	r3, r4
 8005e34:	2212      	movs	r2, #18
 8005e36:	215a      	movs	r1, #90	; 0x5a
 8005e38:	2041      	movs	r0, #65	; 0x41
 8005e3a:	f7fb fd20 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawDecimalNumb(95, 110, 18, OPT_FLAT, wav_size>>10, BLACK);
 8005e3e:	9501      	str	r5, [sp, #4]
 8005e40:	4b64      	ldr	r3, [pc, #400]	; (8005fd4 <main+0xff8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0a9b      	lsrs	r3, r3, #10
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4623      	mov	r3, r4
 8005e4a:	2212      	movs	r2, #18
 8005e4c:	216e      	movs	r1, #110	; 0x6e
 8005e4e:	205f      	movs	r0, #95	; 0x5f
 8005e50:	f7fb fd15 	bl	800187e <FT800_drawDecimalNumb>
              FT800_drawSlider(40, 160, 390, 10, OPT_3D, slider_value, 1024, DARKGRAY, LIGHTGRAY, WHITE, SLIDER2);
 8005e54:	230e      	movs	r3, #14
 8005e56:	9306      	str	r3, [sp, #24]
 8005e58:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 8005e5c:	9405      	str	r4, [sp, #20]
 8005e5e:	4b5e      	ldr	r3, [pc, #376]	; (8005fd8 <main+0xffc>)
 8005e60:	9304      	str	r3, [sp, #16]
 8005e62:	9603      	str	r6, [sp, #12]
 8005e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e68:	9302      	str	r3, [sp, #8]
 8005e6a:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	9500      	str	r5, [sp, #0]
 8005e72:	230a      	movs	r3, #10
 8005e74:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8005e78:	21a0      	movs	r1, #160	; 0xa0
 8005e7a:	2028      	movs	r0, #40	; 0x28
 8005e7c:	f7fb ff53 	bl	8001d26 <FT800_drawSlider>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8005e80:	2381      	movs	r3, #129	; 0x81
 8005e82:	9305      	str	r3, [sp, #20]
 8005e84:	9404      	str	r4, [sp, #16]
 8005e86:	4b55      	ldr	r3, [pc, #340]	; (8005fdc <main+0x1000>)
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	9502      	str	r5, [sp, #8]
 8005e8c:	241c      	movs	r4, #28
 8005e8e:	9401      	str	r4, [sp, #4]
 8005e90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	231e      	movs	r3, #30
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2105      	movs	r1, #5
 8005e9c:	f240 10bd 	movw	r0, #445	; 0x1bd
 8005ea0:	f7fb fd9e 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(170,200,60,60,DARKGRAY,30,OPT_3D,"<",ORANGE, PREVIOUS);
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	9704      	str	r7, [sp, #16]
 8005eaa:	4b4d      	ldr	r3, [pc, #308]	; (8005fe0 <main+0x1004>)
 8005eac:	9303      	str	r3, [sp, #12]
 8005eae:	9502      	str	r5, [sp, #8]
 8005eb0:	f04f 081e 	mov.w	r8, #30
 8005eb4:	f8cd 8004 	str.w	r8, [sp, #4]
 8005eb8:	9600      	str	r6, [sp, #0]
 8005eba:	233c      	movs	r3, #60	; 0x3c
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	21c8      	movs	r1, #200	; 0xc8
 8005ec0:	20aa      	movs	r0, #170	; 0xaa
 8005ec2:	f7fb fd8d 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(260,200,60,60,DARKGRAY,30,OPT_3D,">",ORANGE, NEXT);
 8005ec6:	230b      	movs	r3, #11
 8005ec8:	9305      	str	r3, [sp, #20]
 8005eca:	9704      	str	r7, [sp, #16]
 8005ecc:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <main+0x1008>)
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	9502      	str	r5, [sp, #8]
 8005ed2:	f8cd 8004 	str.w	r8, [sp, #4]
 8005ed6:	9600      	str	r6, [sp, #0]
 8005ed8:	233c      	movs	r3, #60	; 0x3c
 8005eda:	461a      	mov	r2, r3
 8005edc:	21c8      	movs	r1, #200	; 0xc8
 8005ede:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005ee2:	f7fb fd7d 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(320,70,100,60,DARKGRAY,28,OPT_3D,"PLAY",ORANGE, PLAY);
 8005ee6:	230d      	movs	r3, #13
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	9704      	str	r7, [sp, #16]
 8005eec:	4b3e      	ldr	r3, [pc, #248]	; (8005fe8 <main+0x100c>)
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	9502      	str	r5, [sp, #8]
 8005ef2:	9401      	str	r4, [sp, #4]
 8005ef4:	9600      	str	r6, [sp, #0]
 8005ef6:	233c      	movs	r3, #60	; 0x3c
 8005ef8:	2264      	movs	r2, #100	; 0x64
 8005efa:	2146      	movs	r1, #70	; 0x46
 8005efc:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005f00:	f7fb fd6e 	bl	80019e0 <FT800_drawButton>
              FT800_endOfList();
 8005f04:	f7fb fa94 	bl	8001430 <FT800_endOfList>
              break;
 8005f08:	f7ff baae 	b.w	8005468 <main+0x48c>
                  FT800_finishList();
 8005f0c:	f7fb faa6 	bl	800145c <FT800_finishList>
                  FT800_startNewList();
 8005f10:	f7fb fa86 	bl	8001420 <FT800_startNewList>
                  FT800_setBackgroundColor(BLACK);
 8005f14:	2000      	movs	r0, #0
 8005f16:	f7fb fad3 	bl	80014c0 <FT800_setBackgroundColor>
                  FT800_clear(CLEAR_ALL);
 8005f1a:	2007      	movs	r0, #7
 8005f1c:	f7fb fada 	bl	80014d4 <FT800_clear>
                  FT800_endOfList();
 8005f20:	f7fb fa86 	bl	8001430 <FT800_endOfList>
                  sprintf((char*)path, "%s/%s",wav_folder, wavs[wav_num]);
 8005f24:	4d1e      	ldr	r5, [pc, #120]	; (8005fa0 <main+0xfc4>)
 8005f26:	4c1f      	ldr	r4, [pc, #124]	; (8005fa4 <main+0xfc8>)
 8005f28:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005f2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005f30:	3404      	adds	r4, #4
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005f36:	492d      	ldr	r1, [pc, #180]	; (8005fec <main+0x1010>)
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 fd4d 	bl	80069d8 <siprintf>
                  FT800_loadWAVfromSD(0, path, &wav_format, &wav_channels, &wav_sample_rate, &wav_bpc, &wav_size);
 8005f3e:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <main+0xff8>)
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <main+0xff4>)
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <main+0xff0>)
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <main+0xfec>)
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <main+0xfe8>)
 8005f4e:	4621      	mov	r1, r4
 8005f50:	2000      	movs	r0, #0
 8005f52:	f7fc f9a5 	bl	80022a0 <FT800_loadWAVfromSD>
                  FT800_setPlaybackVolume(128);
 8005f56:	2080      	movs	r0, #128	; 0x80
 8005f58:	f7fb f83c 	bl	8000fd4 <FT800_setPlaybackVolume>
                  slider_value=512;
 8005f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f60:	83eb      	strh	r3, [r5, #30]
 8005f62:	e6ec      	b.n	8005d3e <main+0xd62>
                  new_file=0;
 8005f64:	4c0f      	ldr	r4, [pc, #60]	; (8005fa4 <main+0xfc8>)
 8005f66:	2500      	movs	r5, #0
 8005f68:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
                  sprintf((char*)path, "%s/%s", wav_folder, wavs[wav_num]);
 8005f6c:	490c      	ldr	r1, [pc, #48]	; (8005fa0 <main+0xfc4>)
 8005f6e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8005f72:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005f76:	3404      	adds	r4, #4
 8005f78:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005f7a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005f7c:	491b      	ldr	r1, [pc, #108]	; (8005fec <main+0x1010>)
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 fd2a 	bl	80069d8 <siprintf>
                  FT800_loadWAVfromSD(0, path, &wav_format, &wav_channels, &wav_sample_rate, &wav_bpc, &wav_size);
 8005f84:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <main+0xff8>)
 8005f86:	9302      	str	r3, [sp, #8]
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <main+0xff4>)
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <main+0xff0>)
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <main+0xfec>)
 8005f92:	4a0c      	ldr	r2, [pc, #48]	; (8005fc4 <main+0xfe8>)
 8005f94:	4621      	mov	r1, r4
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7fc f982 	bl	80022a0 <FT800_loadWAVfromSD>
 8005f9c:	e6d8      	b.n	8005d50 <main+0xd74>
 8005f9e:	bf00      	nop
 8005fa0:	2000000c 	.word	0x2000000c
 8005fa4:	20000338 	.word	0x20000338
 8005fa8:	00ff9500 	.word	0x00ff9500
 8005fac:	00202020 	.word	0x00202020
 8005fb0:	08007878 	.word	0x08007878
 8005fb4:	0800789c 	.word	0x0800789c
 8005fb8:	080078bc 	.word	0x080078bc
 8005fbc:	080078d0 	.word	0x080078d0
 8005fc0:	080078d8 	.word	0x080078d8
 8005fc4:	20004cb0 	.word	0x20004cb0
 8005fc8:	20004d40 	.word	0x20004d40
 8005fcc:	20004d44 	.word	0x20004d44
 8005fd0:	20004cb2 	.word	0x20004cb2
 8005fd4:	20004d4c 	.word	0x20004d4c
 8005fd8:	00808080 	.word	0x00808080
 8005fdc:	080077b4 	.word	0x080077b4
 8005fe0:	08007870 	.word	0x08007870
 8005fe4:	08007874 	.word	0x08007874
 8005fe8:	080078f4 	.word	0x080078f4
 8005fec:	08007720 	.word	0x08007720
              if((previous_menu==MAIN_MENU)||new_file)
 8005ff0:	4bb9      	ldr	r3, [pc, #740]	; (80062d8 <main+0x12fc>)
 8005ff2:	7e5b      	ldrb	r3, [r3, #25]
 8005ff4:	2b81      	cmp	r3, #129	; 0x81
 8005ff6:	d004      	beq.n	8006002 <main+0x1026>
 8005ff8:	4bb8      	ldr	r3, [pc, #736]	; (80062dc <main+0x1300>)
 8005ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d03f      	beq.n	8006082 <main+0x10a6>
                  new_file=0;
 8006002:	4db6      	ldr	r5, [pc, #728]	; (80062dc <main+0x1300>)
 8006004:	2600      	movs	r6, #0
 8006006:	f885 6021 	strb.w	r6, [r5, #33]	; 0x21
                  FT800_finishList();
 800600a:	f7fb fa27 	bl	800145c <FT800_finishList>
                  FT800_startNewList();
 800600e:	f7fb fa07 	bl	8001420 <FT800_startNewList>
                  FT800_setBackgroundColor(BLACK);
 8006012:	4630      	mov	r0, r6
 8006014:	f7fb fa54 	bl	80014c0 <FT800_setBackgroundColor>
                  FT800_clear(CLEAR_ALL);
 8006018:	2007      	movs	r0, #7
 800601a:	f7fb fa5b 	bl	80014d4 <FT800_clear>
                  FT800_drawText(205, 20, 23, WHITE, OPT_FLAT, "Loading...");
 800601e:	4bb0      	ldr	r3, [pc, #704]	; (80062e0 <main+0x1304>)
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800602c:	2217      	movs	r2, #23
 800602e:	2114      	movs	r1, #20
 8006030:	20cd      	movs	r0, #205	; 0xcd
 8006032:	f7fb fbf7 	bl	8001824 <FT800_drawText>
                  FT800_drawAnimSpinner(240,136,0,1);
 8006036:	2301      	movs	r3, #1
 8006038:	4632      	mov	r2, r6
 800603a:	2188      	movs	r1, #136	; 0x88
 800603c:	20f0      	movs	r0, #240	; 0xf0
 800603e:	f7fb ffcd 	bl	8001fdc <FT800_drawAnimSpinner>
                  FT800_endOfList();
 8006042:	f7fb f9f5 	bl	8001430 <FT800_endOfList>
                  sprintf((char*)path, "%s/%s", jpg_folder, jpgs[jpg_num]);
 8006046:	4ca4      	ldr	r4, [pc, #656]	; (80062d8 <main+0x12fc>)
 8006048:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800604c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006050:	3504      	adds	r5, #4
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006056:	49a3      	ldr	r1, [pc, #652]	; (80062e4 <main+0x1308>)
 8006058:	4628      	mov	r0, r5
 800605a:	f000 fcbd 	bl	80069d8 <siprintf>
                  FT800_loadJPGfromSD(0,path,&img_width,&img_height);
 800605e:	4ba2      	ldr	r3, [pc, #648]	; (80062e8 <main+0x130c>)
 8006060:	4aa2      	ldr	r2, [pc, #648]	; (80062ec <main+0x1310>)
 8006062:	4629      	mov	r1, r5
 8006064:	4630      	mov	r0, r6
 8006066:	f7fc fac7 	bl	80025f8 <FT800_loadJPGfromSD>
                  strcpy(wallpaper_folder,jpg_folder);
 800606a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800606c:	48a0      	ldr	r0, [pc, #640]	; (80062f0 <main+0x1314>)
 800606e:	f000 fcd3 	bl	8006a18 <strcpy>
                  strcpy(wallpaper,jpgs[jpg_num]);
 8006072:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006076:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800607a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800607c:	489d      	ldr	r0, [pc, #628]	; (80062f4 <main+0x1318>)
 800607e:	f000 fccb 	bl	8006a18 <strcpy>
              previous_menu=JPG;
 8006082:	4b95      	ldr	r3, [pc, #596]	; (80062d8 <main+0x12fc>)
 8006084:	228a      	movs	r2, #138	; 0x8a
 8006086:	765a      	strb	r2, [r3, #25]
              FT800_finishList();
 8006088:	f7fb f9e8 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 800608c:	f7fb f9c8 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(BLACK);
 8006090:	2000      	movs	r0, #0
 8006092:	f7fb fa15 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8006096:	2007      	movs	r0, #7
 8006098:	f7fb fa1c 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 800609c:	2000      	movs	r0, #0
 800609e:	f7fb fc95 	bl	80019cc <FT800_tagMask>
              FT800_stop();
 80060a2:	f7fc f813 	bl	80020cc <FT800_stop>
              FT800_bitmapSource(0);
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7fc f862 	bl	8002170 <FT800_bitmapSource>
              FT800_bitmapLayout(RGB565, img_width*2, img_height);
 80060ac:	4c8e      	ldr	r4, [pc, #568]	; (80062e8 <main+0x130c>)
 80060ae:	4d8f      	ldr	r5, [pc, #572]	; (80062ec <main+0x1310>)
 80060b0:	8829      	ldrh	r1, [r5, #0]
 80060b2:	0049      	lsls	r1, r1, #1
 80060b4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80060b8:	b209      	sxth	r1, r1
 80060ba:	2007      	movs	r0, #7
 80060bc:	f7fc f822 	bl	8002104 <FT800_bitmapLayout>
              FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width, img_height);
 80060c0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80060c4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80060c8:	9200      	str	r2, [sp, #0]
 80060ca:	2200      	movs	r2, #0
 80060cc:	4611      	mov	r1, r2
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7fc f830 	bl	8002134 <FT800_bitmapSize>
              FT800_bitmapBegin();
 80060d4:	f7fc f80c 	bl	80020f0 <FT800_bitmapBegin>
              FT800_Vertex2II(0,0,0,0);
 80060d8:	2300      	movs	r3, #0
 80060da:	461a      	mov	r2, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fb fa42 	bl	8001568 <FT800_Vertex2II>
              FT800_setColorA(100);
 80060e4:	2064      	movs	r0, #100	; 0x64
 80060e6:	f7fb f9ff 	bl	80014e8 <FT800_setColorA>
              FT800_drawButton(445,5,30,30,LIGHTGRAY,28,OPT_3D,"X",BLACK, MAIN_MENU);
 80060ea:	2381      	movs	r3, #129	; 0x81
 80060ec:	9305      	str	r3, [sp, #20]
 80060ee:	2400      	movs	r4, #0
 80060f0:	9404      	str	r4, [sp, #16]
 80060f2:	4b81      	ldr	r3, [pc, #516]	; (80062f8 <main+0x131c>)
 80060f4:	9303      	str	r3, [sp, #12]
 80060f6:	9402      	str	r4, [sp, #8]
 80060f8:	231c      	movs	r3, #28
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	4d7f      	ldr	r5, [pc, #508]	; (80062fc <main+0x1320>)
 80060fe:	9500      	str	r5, [sp, #0]
 8006100:	231e      	movs	r3, #30
 8006102:	461a      	mov	r2, r3
 8006104:	2105      	movs	r1, #5
 8006106:	f240 10bd 	movw	r0, #445	; 0x1bd
 800610a:	f7fb fc69 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(190,230,40,40,LIGHTGRAY,30,OPT_3D,"<",BLACK, BACKWARD);
 800610e:	2309      	movs	r3, #9
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	9404      	str	r4, [sp, #16]
 8006114:	4b7a      	ldr	r3, [pc, #488]	; (8006300 <main+0x1324>)
 8006116:	9303      	str	r3, [sp, #12]
 8006118:	9402      	str	r4, [sp, #8]
 800611a:	261e      	movs	r6, #30
 800611c:	9601      	str	r6, [sp, #4]
 800611e:	9500      	str	r5, [sp, #0]
 8006120:	2328      	movs	r3, #40	; 0x28
 8006122:	461a      	mov	r2, r3
 8006124:	21e6      	movs	r1, #230	; 0xe6
 8006126:	20be      	movs	r0, #190	; 0xbe
 8006128:	f7fb fc5a 	bl	80019e0 <FT800_drawButton>
              FT800_drawButton(250,230,40,40,LIGHTGRAY,30,OPT_3D,">",BLACK, FORWARD);
 800612c:	230a      	movs	r3, #10
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	9404      	str	r4, [sp, #16]
 8006132:	4b74      	ldr	r3, [pc, #464]	; (8006304 <main+0x1328>)
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	9402      	str	r4, [sp, #8]
 8006138:	9601      	str	r6, [sp, #4]
 800613a:	9500      	str	r5, [sp, #0]
 800613c:	2328      	movs	r3, #40	; 0x28
 800613e:	461a      	mov	r2, r3
 8006140:	21e6      	movs	r1, #230	; 0xe6
 8006142:	20fa      	movs	r0, #250	; 0xfa
 8006144:	f7fb fc4c 	bl	80019e0 <FT800_drawButton>
              FT800_setColorA(255);
 8006148:	20ff      	movs	r0, #255	; 0xff
 800614a:	f7fb f9cd 	bl	80014e8 <FT800_setColorA>
              FT800_endOfList();
 800614e:	f7fb f96f 	bl	8001430 <FT800_endOfList>
              break;
 8006152:	f7ff b989 	b.w	8005468 <main+0x48c>
              if(previous_menu==MAIN_MENU)
 8006156:	4b60      	ldr	r3, [pc, #384]	; (80062d8 <main+0x12fc>)
 8006158:	7e5b      	ldrb	r3, [r3, #25]
 800615a:	2b81      	cmp	r3, #129	; 0x81
 800615c:	f000 80de 	beq.w	800631c <main+0x1340>
              previous_menu=TRANSFORM;
 8006160:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <main+0x12fc>)
 8006162:	228b      	movs	r2, #139	; 0x8b
 8006164:	765a      	strb	r2, [r3, #25]
              FT800_finishList();
 8006166:	f7fb f979 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 800616a:	f7fb f959 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(BLACK);
 800616e:	2000      	movs	r0, #0
 8006170:	f7fb f9a6 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8006174:	2007      	movs	r0, #7
 8006176:	f7fb f9ad 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 800617a:	2000      	movs	r0, #0
 800617c:	f7fb fc26 	bl	80019cc <FT800_tagMask>
              FT800_drawScrollBar(20, 55, 20, 200, DARKGRAY, ORANGE, OPT_3D, scale_factor, 1, 4, SCROLL_S);
 8006180:	230f      	movs	r3, #15
 8006182:	9306      	str	r3, [sp, #24]
 8006184:	2304      	movs	r3, #4
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	2301      	movs	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	4f53      	ldr	r7, [pc, #332]	; (80062dc <main+0x1300>)
 800618e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006190:	9303      	str	r3, [sp, #12]
 8006192:	2400      	movs	r4, #0
 8006194:	9402      	str	r4, [sp, #8]
 8006196:	4d5c      	ldr	r5, [pc, #368]	; (8006308 <main+0x132c>)
 8006198:	9501      	str	r5, [sp, #4]
 800619a:	4e5c      	ldr	r6, [pc, #368]	; (800630c <main+0x1330>)
 800619c:	9600      	str	r6, [sp, #0]
 800619e:	23c8      	movs	r3, #200	; 0xc8
 80061a0:	2214      	movs	r2, #20
 80061a2:	2137      	movs	r1, #55	; 0x37
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fb fd16 	bl	8001bd6 <FT800_drawScrollBar>
              FT800_drawScrollBar(450, 55, 20, 200, DARKGRAY, ORANGE, OPT_3D, rotate_factor, 10, 1024, SCROLL_R);
 80061aa:	2310      	movs	r3, #16
 80061ac:	9306      	str	r3, [sp, #24]
 80061ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b2:	9305      	str	r3, [sp, #20]
 80061b4:	230a      	movs	r3, #10
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	9402      	str	r4, [sp, #8]
 80061be:	9501      	str	r5, [sp, #4]
 80061c0:	9600      	str	r6, [sp, #0]
 80061c2:	23c8      	movs	r3, #200	; 0xc8
 80061c4:	2214      	movs	r2, #20
 80061c6:	2137      	movs	r1, #55	; 0x37
 80061c8:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80061cc:	f7fb fd03 	bl	8001bd6 <FT800_drawScrollBar>
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 scale and rotate");
 80061d0:	4b4f      	ldr	r3, [pc, #316]	; (8006310 <main+0x1334>)
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	462b      	mov	r3, r5
 80061dc:	2212      	movs	r2, #18
 80061de:	2105      	movs	r1, #5
 80061e0:	4608      	mov	r0, r1
 80061e2:	f7fb fb1f 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 80061e6:	2381      	movs	r3, #129	; 0x81
 80061e8:	9305      	str	r3, [sp, #20]
 80061ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	4b41      	ldr	r3, [pc, #260]	; (80062f8 <main+0x131c>)
 80061f2:	9303      	str	r3, [sp, #12]
 80061f4:	9402      	str	r4, [sp, #8]
 80061f6:	231c      	movs	r3, #28
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	231e      	movs	r3, #30
 8006202:	461a      	mov	r2, r3
 8006204:	2105      	movs	r1, #5
 8006206:	f240 10bd 	movw	r0, #445	; 0x1bd
 800620a:	f7fb fbe9 	bl	80019e0 <FT800_drawButton>
              FT800_loadIdentity();
 800620e:	f7fb ffb9 	bl	8002184 <FT800_loadIdentity>
              FT800_scale(scale_factor+1,scale_factor+1);
 8006212:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8006214:	3001      	adds	r0, #1
 8006216:	b200      	sxth	r0, r0
 8006218:	4601      	mov	r1, r0
 800621a:	f7fb ffc3 	bl	80021a4 <FT800_scale>
              FT800_translate((img_width>>1),(img_height>>1));
 800621e:	4d32      	ldr	r5, [pc, #200]	; (80062e8 <main+0x130c>)
 8006220:	8829      	ldrh	r1, [r5, #0]
 8006222:	4e32      	ldr	r6, [pc, #200]	; (80062ec <main+0x1310>)
 8006224:	8830      	ldrh	r0, [r6, #0]
 8006226:	0849      	lsrs	r1, r1, #1
 8006228:	0840      	lsrs	r0, r0, #1
 800622a:	f7fb ffcf 	bl	80021cc <FT800_translate>
              FT800_rotate((rotate_factor*360)/1023);
 800622e:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8006232:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006236:	fb03 f300 	mul.w	r3, r3, r0
 800623a:	4836      	ldr	r0, [pc, #216]	; (8006314 <main+0x1338>)
 800623c:	fb80 2003 	smull	r2, r0, r0, r3
 8006240:	4418      	add	r0, r3
 8006242:	17db      	asrs	r3, r3, #31
 8006244:	ebc3 2060 	rsb	r0, r3, r0, asr #9
 8006248:	b200      	sxth	r0, r0
 800624a:	f7fb ffd3 	bl	80021f4 <FT800_rotate>
              FT800_translate(-(img_width>>1),-(img_height>>1));
 800624e:	8829      	ldrh	r1, [r5, #0]
 8006250:	0849      	lsrs	r1, r1, #1
 8006252:	8830      	ldrh	r0, [r6, #0]
 8006254:	0840      	lsrs	r0, r0, #1
 8006256:	4249      	negs	r1, r1
 8006258:	4240      	negs	r0, r0
 800625a:	f7fb ffb7 	bl	80021cc <FT800_translate>
              FT800_setMatrix();
 800625e:	f7fb ff99 	bl	8002194 <FT800_setMatrix>
              FT800_bitmapSource(0);
 8006262:	4620      	mov	r0, r4
 8006264:	f7fb ff84 	bl	8002170 <FT800_bitmapSource>
              FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <main+0x133c>)
 800626a:	7819      	ldrb	r1, [r3, #0]
 800626c:	8833      	ldrh	r3, [r6, #0]
 800626e:	fb11 f103 	smulbb	r1, r1, r3
 8006272:	f9b5 2000 	ldrsh.w	r2, [r5]
 8006276:	b209      	sxth	r1, r1
 8006278:	2007      	movs	r0, #7
 800627a:	f7fb ff43 	bl	8002104 <FT800_bitmapLayout>
              FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width*(scale_factor+1), img_height*(scale_factor+1));
 800627e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006282:	3201      	adds	r2, #1
 8006284:	b292      	uxth	r2, r2
 8006286:	8833      	ldrh	r3, [r6, #0]
 8006288:	fb13 f302 	smulbb	r3, r3, r2
 800628c:	8829      	ldrh	r1, [r5, #0]
 800628e:	fb11 f202 	smulbb	r2, r1, r2
 8006292:	b212      	sxth	r2, r2
 8006294:	9200      	str	r2, [sp, #0]
 8006296:	b21b      	sxth	r3, r3
 8006298:	4622      	mov	r2, r4
 800629a:	4621      	mov	r1, r4
 800629c:	4620      	mov	r0, r4
 800629e:	f7fb ff49 	bl	8002134 <FT800_bitmapSize>
              FT800_bitmapBegin();
 80062a2:	f7fb ff25 	bl	80020f0 <FT800_bitmapBegin>
              FT800_Vertex2II((DISPLAY_WIDTH>>1)-(((scale_factor+1)*img_width)>>1),(DISPLAY_HEIGHT>>1)-(((scale_factor+1)*img_height)>>1),0,0);
 80062a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80062aa:	3301      	adds	r3, #1
 80062ac:	8830      	ldrh	r0, [r6, #0]
 80062ae:	fb03 f000 	mul.w	r0, r3, r0
 80062b2:	1040      	asrs	r0, r0, #1
 80062b4:	8829      	ldrh	r1, [r5, #0]
 80062b6:	fb03 f101 	mul.w	r1, r3, r1
 80062ba:	1049      	asrs	r1, r1, #1
 80062bc:	f1c1 0188 	rsb	r1, r1, #136	; 0x88
 80062c0:	f1c0 00f0 	rsb	r0, r0, #240	; 0xf0
 80062c4:	4623      	mov	r3, r4
 80062c6:	4622      	mov	r2, r4
 80062c8:	b289      	uxth	r1, r1
 80062ca:	b280      	uxth	r0, r0
 80062cc:	f7fb f94c 	bl	8001568 <FT800_Vertex2II>
              FT800_endOfList();
 80062d0:	f7fb f8ae 	bl	8001430 <FT800_endOfList>
              break;
 80062d4:	f7ff b8c8 	b.w	8005468 <main+0x48c>
 80062d8:	2000000c 	.word	0x2000000c
 80062dc:	20000338 	.word	0x20000338
 80062e0:	08007864 	.word	0x08007864
 80062e4:	08007720 	.word	0x08007720
 80062e8:	20004ccc 	.word	0x20004ccc
 80062ec:	20004d48 	.word	0x20004d48
 80062f0:	20004cd0 	.word	0x20004cd0
 80062f4:	20004cb8 	.word	0x20004cb8
 80062f8:	080077b4 	.word	0x080077b4
 80062fc:	00808080 	.word	0x00808080
 8006300:	08007870 	.word	0x08007870
 8006304:	08007874 	.word	0x08007874
 8006308:	00ff9500 	.word	0x00ff9500
 800630c:	00202020 	.word	0x00202020
 8006310:	08007908 	.word	0x08007908
 8006314:	80200803 	.word	0x80200803
 8006318:	20004cb4 	.word	0x20004cb4
                  FT800_finishList();
 800631c:	f7fb f89e 	bl	800145c <FT800_finishList>
                  FT800_startNewList();
 8006320:	f7fb f87e 	bl	8001420 <FT800_startNewList>
                  FT800_setBackgroundColor(BLACK);
 8006324:	2000      	movs	r0, #0
 8006326:	f7fb f8cb 	bl	80014c0 <FT800_setBackgroundColor>
                  FT800_clear(CLEAR_ALL);
 800632a:	2007      	movs	r0, #7
 800632c:	f7fb f8d2 	bl	80014d4 <FT800_clear>
                  FT800_endOfList();
 8006330:	f7fb f87e 	bl	8001430 <FT800_endOfList>
                  sprintf((char*)path, "%s/%s",bmp_folder, "mario.bmp");
 8006334:	4cb8      	ldr	r4, [pc, #736]	; (8006618 <main+0x163c>)
 8006336:	4bb9      	ldr	r3, [pc, #740]	; (800661c <main+0x1640>)
 8006338:	4ab9      	ldr	r2, [pc, #740]	; (8006620 <main+0x1644>)
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	49b9      	ldr	r1, [pc, #740]	; (8006624 <main+0x1648>)
 800633e:	4620      	mov	r0, r4
 8006340:	f000 fb4a 	bl	80069d8 <siprintf>
                  FT800_loadBMPfromSD(0,path , &img_width, &img_height, &img_bytes);
 8006344:	4bb8      	ldr	r3, [pc, #736]	; (8006628 <main+0x164c>)
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4bb8      	ldr	r3, [pc, #736]	; (800662c <main+0x1650>)
 800634a:	4ab9      	ldr	r2, [pc, #740]	; (8006630 <main+0x1654>)
 800634c:	4621      	mov	r1, r4
 800634e:	2000      	movs	r0, #0
 8006350:	f7fc f88c 	bl	800246c <FT800_loadBMPfromSD>
 8006354:	e704      	b.n	8006160 <main+0x1184>
              FT800_finishList();
 8006356:	f7fb f881 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 800635a:	f7fb f861 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(BLACK);
 800635e:	2000      	movs	r0, #0
 8006360:	f7fb f8ae 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 8006364:	2007      	movs	r0, #7
 8006366:	f7fb f8b5 	bl	80014d4 <FT800_clear>
              FT800_tagMask(0);
 800636a:	2000      	movs	r0, #0
 800636c:	f7fb fb2e 	bl	80019cc <FT800_tagMask>
              if(previous_menu==MAIN_MENU)
 8006370:	4bab      	ldr	r3, [pc, #684]	; (8006620 <main+0x1644>)
 8006372:	7e5b      	ldrb	r3, [r3, #25]
 8006374:	2b81      	cmp	r3, #129	; 0x81
 8006376:	d04c      	beq.n	8006412 <main+0x1436>
              previous_menu=SKETCH;
 8006378:	4ba9      	ldr	r3, [pc, #676]	; (8006620 <main+0x1644>)
 800637a:	228c      	movs	r2, #140	; 0x8c
 800637c:	765a      	strb	r2, [r3, #25]
              FT800_drawText(5, 5, 18, ORANGE, OPT_FLAT, "FT800 sketch");
 800637e:	4bad      	ldr	r3, [pc, #692]	; (8006634 <main+0x1658>)
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	4bab      	ldr	r3, [pc, #684]	; (8006638 <main+0x165c>)
 800638a:	2212      	movs	r2, #18
 800638c:	2105      	movs	r1, #5
 800638e:	4608      	mov	r0, r1
 8006390:	f7fb fa48 	bl	8001824 <FT800_drawText>
              FT800_drawButton(445,5,30,30,RED,28,OPT_3D,"X",WHITE, MAIN_MENU);
 8006394:	2381      	movs	r3, #129	; 0x81
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	4ba7      	ldr	r3, [pc, #668]	; (800663c <main+0x1660>)
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	2400      	movs	r4, #0
 80063a4:	9402      	str	r4, [sp, #8]
 80063a6:	231c      	movs	r3, #28
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	231e      	movs	r3, #30
 80063b2:	461a      	mov	r2, r3
 80063b4:	2105      	movs	r1, #5
 80063b6:	f240 10bd 	movw	r0, #445	; 0x1bd
 80063ba:	f7fb fb11 	bl	80019e0 <FT800_drawButton>
                FT800_drawSketch(0, 0, 480, 272, 0, L1);
 80063be:	2501      	movs	r5, #1
 80063c0:	9501      	str	r5, [sp, #4]
 80063c2:	9400      	str	r4, [sp, #0]
 80063c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80063c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063cc:	4621      	mov	r1, r4
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7fb fe4c 	bl	800206c <FT800_drawSketch>
              FT800_bitmapSource(0);
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7fb fecb 	bl	8002170 <FT800_bitmapSource>
              FT800_bitmapLayout(L1, 480/8, 272);
 80063da:	f44f 7288 	mov.w	r2, #272	; 0x110
 80063de:	213c      	movs	r1, #60	; 0x3c
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7fb fe8f 	bl	8002104 <FT800_bitmapLayout>
              FT800_bitmapSize(NEAREST,BORDER,BORDER, 480, 272); //92 48
 80063e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80063f0:	4622      	mov	r2, r4
 80063f2:	4621      	mov	r1, r4
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7fb fe9d 	bl	8002134 <FT800_bitmapSize>
              FT800_bitmapBegin();
 80063fa:	f7fb fe79 	bl	80020f0 <FT800_bitmapBegin>
              FT800_Vertex2II(0,0,0,0);
 80063fe:	4623      	mov	r3, r4
 8006400:	4622      	mov	r2, r4
 8006402:	4621      	mov	r1, r4
 8006404:	4620      	mov	r0, r4
 8006406:	f7fb f8af 	bl	8001568 <FT800_Vertex2II>
              FT800_endOfList();
 800640a:	f7fb f811 	bl	8001430 <FT800_endOfList>
              break;
 800640e:	f7ff b82b 	b.w	8005468 <main+0x48c>
                  FT800_writeMemZero(0, 480 * 272 * 2);
 8006412:	f44f 317f 	mov.w	r1, #261120	; 0x3fc00
 8006416:	2000      	movs	r0, #0
 8006418:	f7fb f8e6 	bl	80015e8 <FT800_writeMemZero>
 800641c:	e7ac      	b.n	8006378 <main+0x139c>
              if(previous_menu==MAIN_MENU)
 800641e:	4b80      	ldr	r3, [pc, #512]	; (8006620 <main+0x1644>)
 8006420:	7e5b      	ldrb	r3, [r3, #25]
 8006422:	2b81      	cmp	r3, #129	; 0x81
 8006424:	d045      	beq.n	80064b2 <main+0x14d6>
              previous_menu=SCRSAVER;
 8006426:	4b7e      	ldr	r3, [pc, #504]	; (8006620 <main+0x1644>)
 8006428:	228d      	movs	r2, #141	; 0x8d
 800642a:	765a      	strb	r2, [r3, #25]
              FT800_finishList();
 800642c:	f7fb f816 	bl	800145c <FT800_finishList>
              FT800_startNewList();
 8006430:	f7fa fff6 	bl	8001420 <FT800_startNewList>
              FT800_setBackgroundColor(BLACK);
 8006434:	2000      	movs	r0, #0
 8006436:	f7fb f843 	bl	80014c0 <FT800_setBackgroundColor>
              FT800_clear(CLEAR_ALL);
 800643a:	2007      	movs	r0, #7
 800643c:	f7fb f84a 	bl	80014d4 <FT800_clear>
              FT800_track(0, 0, 480, 272, MAIN_MENU);
 8006440:	2381      	movs	r3, #129	; 0x81
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006448:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800644c:	2100      	movs	r1, #0
 800644e:	4608      	mov	r0, r1
 8006450:	f7fb fa8c 	bl	800196c <FT800_track>
              FT800_drawScreensaver();
 8006454:	f7fb fe02 	bl	800205c <FT800_drawScreensaver>
              FT800_loadIdentity();
 8006458:	f7fb fe94 	bl	8002184 <FT800_loadIdentity>
              FT800_scale(2,2);
 800645c:	2102      	movs	r1, #2
 800645e:	4608      	mov	r0, r1
 8006460:	f7fb fea0 	bl	80021a4 <FT800_scale>
              FT800_setMatrix();
 8006464:	f7fb fe96 	bl	8002194 <FT800_setMatrix>
              FT800_bitmapSource(0);
 8006468:	2000      	movs	r0, #0
 800646a:	f7fb fe81 	bl	8002170 <FT800_bitmapSource>
              FT800_bitmapLayout(RGB565, img_width*img_bytes, img_height);
 800646e:	4b6e      	ldr	r3, [pc, #440]	; (8006628 <main+0x164c>)
 8006470:	7819      	ldrb	r1, [r3, #0]
 8006472:	4d6f      	ldr	r5, [pc, #444]	; (8006630 <main+0x1654>)
 8006474:	882b      	ldrh	r3, [r5, #0]
 8006476:	fb11 f103 	smulbb	r1, r1, r3
 800647a:	4c6c      	ldr	r4, [pc, #432]	; (800662c <main+0x1650>)
 800647c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8006480:	b209      	sxth	r1, r1
 8006482:	2007      	movs	r0, #7
 8006484:	f7fb fe3e 	bl	8002104 <FT800_bitmapLayout>
              FT800_bitmapSize(NEAREST,BORDER,BORDER, img_width*2, img_height*2);
 8006488:	882b      	ldrh	r3, [r5, #0]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	8822      	ldrh	r2, [r4, #0]
 800648e:	0052      	lsls	r2, r2, #1
 8006490:	b212      	sxth	r2, r2
 8006492:	9200      	str	r2, [sp, #0]
 8006494:	b21b      	sxth	r3, r3
 8006496:	2200      	movs	r2, #0
 8006498:	4611      	mov	r1, r2
 800649a:	4610      	mov	r0, r2
 800649c:	f7fb fe4a 	bl	8002134 <FT800_bitmapSize>
              FT800_bitmapBegin();
 80064a0:	f7fb fe26 	bl	80020f0 <FT800_bitmapBegin>
              FT800_macro(0);
 80064a4:	2000      	movs	r0, #0
 80064a6:	f7fb fe19 	bl	80020dc <FT800_macro>
              FT800_endOfList();
 80064aa:	f7fa ffc1 	bl	8001430 <FT800_endOfList>
              break;
 80064ae:	f7fe bfdb 	b.w	8005468 <main+0x48c>
                  FT800_finishList();
 80064b2:	f7fa ffd3 	bl	800145c <FT800_finishList>
                  FT800_startNewList();
 80064b6:	f7fa ffb3 	bl	8001420 <FT800_startNewList>
                  FT800_setBackgroundColor(BLACK);
 80064ba:	2000      	movs	r0, #0
 80064bc:	f7fb f800 	bl	80014c0 <FT800_setBackgroundColor>
                  FT800_clear(CLEAR_ALL);
 80064c0:	2007      	movs	r0, #7
 80064c2:	f7fb f807 	bl	80014d4 <FT800_clear>
                  FT800_endOfList();
 80064c6:	f7fa ffb3 	bl	8001430 <FT800_endOfList>
                  sprintf((char*)path, "%s/%s",bmp_folder, "mario.bmp");
 80064ca:	4c53      	ldr	r4, [pc, #332]	; (8006618 <main+0x163c>)
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <main+0x1640>)
 80064ce:	4a54      	ldr	r2, [pc, #336]	; (8006620 <main+0x1644>)
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	4954      	ldr	r1, [pc, #336]	; (8006624 <main+0x1648>)
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fa7f 	bl	80069d8 <siprintf>
                  FT800_loadBMPfromSD(0,path , &img_width, &img_height, &img_bytes);
 80064da:	4b53      	ldr	r3, [pc, #332]	; (8006628 <main+0x164c>)
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4b53      	ldr	r3, [pc, #332]	; (800662c <main+0x1650>)
 80064e0:	4a53      	ldr	r2, [pc, #332]	; (8006630 <main+0x1654>)
 80064e2:	4621      	mov	r1, r4
 80064e4:	2000      	movs	r0, #0
 80064e6:	f7fb ffc1 	bl	800246c <FT800_loadBMPfromSD>
 80064ea:	e79c      	b.n	8006426 <main+0x144a>
          touched=0;
 80064ec:	4b54      	ldr	r3, [pc, #336]	; (8006640 <main+0x1664>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
          FT800_clearIntFlags();
 80064f2:	f7fa ff25 	bl	8001340 <FT800_clearIntFlags>
          tag = FT800_readTag();
 80064f6:	f7fb fd59 	bl	8001fac <FT800_readTag>
 80064fa:	4b52      	ldr	r3, [pc, #328]	; (8006644 <main+0x1668>)
 80064fc:	7018      	strb	r0, [r3, #0]
          if(tag)
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43e afb7 	beq.w	8005472 <main+0x496>
              if(tag&0x80)
 8006504:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006508:	d114      	bne.n	8006534 <main+0x1558>
                  switch(tag)
 800650a:	3801      	subs	r0, #1
 800650c:	280f      	cmp	r0, #15
 800650e:	d817      	bhi.n	8006540 <main+0x1564>
 8006510:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006514:	002e0028 	.word	0x002e0028
 8006518:	003a0034 	.word	0x003a0034
 800651c:	0016003f 	.word	0x0016003f
 8006520:	00440016 	.word	0x00440016
 8006524:	004e0077 	.word	0x004e0077
 8006528:	00c900b6 	.word	0x00c900b6
 800652c:	00e900db 	.word	0x00e900db
 8006530:	00fa00f4 	.word	0x00fa00f4
                  mute=0;
 8006534:	4b42      	ldr	r3, [pc, #264]	; (8006640 <main+0x1664>)
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2020 	strb.w	r2, [r3, #32]
                  menu=tag;
 800653c:	4b38      	ldr	r3, [pc, #224]	; (8006620 <main+0x1644>)
 800653e:	7618      	strb	r0, [r3, #24]
              if(!mute)
 8006540:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <main+0x1664>)
 8006542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f47e af93 	bne.w	8005472 <main+0x496>
                  FT800_setSoundVolume(255);
 800654c:	20ff      	movs	r0, #255	; 0xff
 800654e:	f7fa fd25 	bl	8000f9c <FT800_setSoundVolume>
                  FT800_setSoundEffect(0x6C,0x50);
 8006552:	2150      	movs	r1, #80	; 0x50
 8006554:	206c      	movs	r0, #108	; 0x6c
 8006556:	f7fa fd29 	bl	8000fac <FT800_setSoundEffect>
                  FT800_playSound(1);
 800655a:	2001      	movs	r0, #1
 800655c:	f7fa fd30 	bl	8000fc0 <FT800_playSound>
 8006560:	f7fe bf87 	b.w	8005472 <main+0x496>
                          slider_value=FT800_readValue()>>6;
 8006564:	f7fb fd2a 	bl	8001fbc <FT800_readValue>
 8006568:	0980      	lsrs	r0, r0, #6
 800656a:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <main+0x1644>)
 800656c:	83d8      	strh	r0, [r3, #30]
                          break;
 800656e:	e7e7      	b.n	8006540 <main+0x1564>
                          scroll_v_value=FT800_readValue()>>8;
 8006570:	f7fb fd24 	bl	8001fbc <FT800_readValue>
 8006574:	0a00      	lsrs	r0, r0, #8
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <main+0x1644>)
 8006578:	8358      	strh	r0, [r3, #26]
                          break;
 800657a:	e7e1      	b.n	8006540 <main+0x1564>
                          scroll_h_value=FT800_readValue()>>7;
 800657c:	f7fb fd1e 	bl	8001fbc <FT800_readValue>
 8006580:	09c0      	lsrs	r0, r0, #7
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <main+0x1644>)
 8006584:	8398      	strh	r0, [r3, #28]
                          break;
 8006586:	e7db      	b.n	8006540 <main+0x1564>
                          dial_value=FT800_readValue();
 8006588:	f7fb fd18 	bl	8001fbc <FT800_readValue>
 800658c:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <main+0x1664>)
 800658e:	8318      	strh	r0, [r3, #24]
                          break;
 8006590:	e7d6      	b.n	8006540 <main+0x1564>
                          toggle_value=FT800_readValue();
 8006592:	f7fb fd13 	bl	8001fbc <FT800_readValue>
 8006596:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <main+0x1664>)
 8006598:	83d8      	strh	r0, [r3, #30]
                          break;
 800659a:	e7d1      	b.n	8006540 <main+0x1564>
                          mute=0; slider_value=FT800_readValue()>>6;
 800659c:	4b28      	ldr	r3, [pc, #160]	; (8006640 <main+0x1664>)
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2020 	strb.w	r2, [r3, #32]
 80065a4:	f7fb fd0a 	bl	8001fbc <FT800_readValue>
 80065a8:	0980      	lsrs	r0, r0, #6
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <main+0x1644>)
 80065ac:	83d8      	strh	r0, [r3, #30]
                          break;
 80065ae:	e7c7      	b.n	8006540 <main+0x1564>
                          if(menu==BMP)
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <main+0x1644>)
 80065b2:	7e1b      	ldrb	r3, [r3, #24]
 80065b4:	2b88      	cmp	r3, #136	; 0x88
 80065b6:	d006      	beq.n	80065c6 <main+0x15ea>
                          if(menu==JPG)
 80065b8:	2b8a      	cmp	r3, #138	; 0x8a
 80065ba:	d013      	beq.n	80065e4 <main+0x1608>
                          new_file=1;
 80065bc:	4b20      	ldr	r3, [pc, #128]	; (8006640 <main+0x1664>)
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                          break;
 80065c4:	e7bc      	b.n	8006540 <main+0x1564>
                              if(bmp_num==(NUM_OF_BMPS-1))bmp_num=0;
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <main+0x1644>)
 80065c8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80065cc:	2a04      	cmp	r2, #4
 80065ce:	d004      	beq.n	80065da <main+0x15fe>
                              else bmp_num++;
 80065d0:	3201      	adds	r2, #1
 80065d2:	4913      	ldr	r1, [pc, #76]	; (8006620 <main+0x1644>)
 80065d4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
 80065d8:	e7ee      	b.n	80065b8 <main+0x15dc>
                              if(bmp_num==(NUM_OF_BMPS-1))bmp_num=0;
 80065da:	4a11      	ldr	r2, [pc, #68]	; (8006620 <main+0x1644>)
 80065dc:	2100      	movs	r1, #0
 80065de:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 80065e2:	e7e9      	b.n	80065b8 <main+0x15dc>
                              if(jpg_num==(NUM_OF_JPGS-1))jpg_num=0;
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <main+0x1644>)
 80065e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d004      	beq.n	80065f8 <main+0x161c>
                              else jpg_num++;
 80065ee:	3301      	adds	r3, #1
 80065f0:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <main+0x1644>)
 80065f2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 80065f6:	e7e1      	b.n	80065bc <main+0x15e0>
                              if(jpg_num==(NUM_OF_JPGS-1))jpg_num=0;
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <main+0x1644>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006600:	e7dc      	b.n	80065bc <main+0x15e0>
                          if(menu==BMP)
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <main+0x1644>)
 8006604:	7e1b      	ldrb	r3, [r3, #24]
 8006606:	2b88      	cmp	r3, #136	; 0x88
 8006608:	d01e      	beq.n	8006648 <main+0x166c>
                          if(menu==JPG)
 800660a:	2b8a      	cmp	r3, #138	; 0x8a
 800660c:	d02a      	beq.n	8006664 <main+0x1688>
                          new_file=1;
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <main+0x1664>)
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                          break;
 8006616:	e793      	b.n	8006540 <main+0x1564>
 8006618:	2000033c 	.word	0x2000033c
 800661c:	080078fc 	.word	0x080078fc
 8006620:	2000000c 	.word	0x2000000c
 8006624:	08007720 	.word	0x08007720
 8006628:	20004cb4 	.word	0x20004cb4
 800662c:	20004ccc 	.word	0x20004ccc
 8006630:	20004d48 	.word	0x20004d48
 8006634:	08007920 	.word	0x08007920
 8006638:	00ff9500 	.word	0x00ff9500
 800663c:	080077b4 	.word	0x080077b4
 8006640:	20000338 	.word	0x20000338
 8006644:	20004caa 	.word	0x20004caa
                              if(bmp_num==0)bmp_num=NUM_OF_BMPS-1;
 8006648:	4a43      	ldr	r2, [pc, #268]	; (8006758 <main+0x177c>)
 800664a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800664e:	b922      	cbnz	r2, 800665a <main+0x167e>
 8006650:	4a41      	ldr	r2, [pc, #260]	; (8006758 <main+0x177c>)
 8006652:	2104      	movs	r1, #4
 8006654:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8006658:	e7d7      	b.n	800660a <main+0x162e>
                              else bmp_num--;
 800665a:	3a01      	subs	r2, #1
 800665c:	493e      	ldr	r1, [pc, #248]	; (8006758 <main+0x177c>)
 800665e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
 8006662:	e7d2      	b.n	800660a <main+0x162e>
                              if(jpg_num==0)jpg_num=NUM_OF_JPGS-1;
 8006664:	4b3c      	ldr	r3, [pc, #240]	; (8006758 <main+0x177c>)
 8006666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800666a:	b923      	cbnz	r3, 8006676 <main+0x169a>
 800666c:	4b3a      	ldr	r3, [pc, #232]	; (8006758 <main+0x177c>)
 800666e:	2204      	movs	r2, #4
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006674:	e7cb      	b.n	800660e <main+0x1632>
                              else jpg_num--;
 8006676:	3b01      	subs	r3, #1
 8006678:	4a37      	ldr	r2, [pc, #220]	; (8006758 <main+0x177c>)
 800667a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 800667e:	e7c6      	b.n	800660e <main+0x1632>
                          if(wav_num==(NUM_OF_WAVS-1))wav_num=0;
 8006680:	4b36      	ldr	r3, [pc, #216]	; (800675c <main+0x1780>)
 8006682:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006686:	2b03      	cmp	r3, #3
 8006688:	d008      	beq.n	800669c <main+0x16c0>
                          else wav_num++;
 800668a:	3301      	adds	r3, #1
 800668c:	4a33      	ldr	r2, [pc, #204]	; (800675c <main+0x1780>)
 800668e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
                          new_file=1;
 8006692:	4b32      	ldr	r3, [pc, #200]	; (800675c <main+0x1780>)
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                          break;
 800669a:	e751      	b.n	8006540 <main+0x1564>
                          if(wav_num==(NUM_OF_WAVS-1))wav_num=0;
 800669c:	4b2f      	ldr	r3, [pc, #188]	; (800675c <main+0x1780>)
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80066a4:	e7f5      	b.n	8006692 <main+0x16b6>
                          if(wav_num==0)wav_num=NUM_OF_WAVS-1;
 80066a6:	4b2d      	ldr	r3, [pc, #180]	; (800675c <main+0x1780>)
 80066a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80066ac:	b943      	cbnz	r3, 80066c0 <main+0x16e4>
 80066ae:	4b2b      	ldr	r3, [pc, #172]	; (800675c <main+0x1780>)
 80066b0:	2203      	movs	r2, #3
 80066b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                          new_file=1;
 80066b6:	4b29      	ldr	r3, [pc, #164]	; (800675c <main+0x1780>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                          break;
 80066be:	e73f      	b.n	8006540 <main+0x1564>
                          else wav_num--;
 80066c0:	3b01      	subs	r3, #1
 80066c2:	4a26      	ldr	r2, [pc, #152]	; (800675c <main+0x1780>)
 80066c4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 80066c8:	e7f5      	b.n	80066b6 <main+0x16da>
                          FT800_configurePlayback(0, wav_size, wav_sample_rate, wav_format, 0);
 80066ca:	4b25      	ldr	r3, [pc, #148]	; (8006760 <main+0x1784>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4a25      	ldr	r2, [pc, #148]	; (8006764 <main+0x1788>)
 80066d0:	8812      	ldrh	r2, [r2, #0]
 80066d2:	4925      	ldr	r1, [pc, #148]	; (8006768 <main+0x178c>)
 80066d4:	6809      	ldr	r1, [r1, #0]
 80066d6:	2000      	movs	r0, #0
 80066d8:	9000      	str	r0, [sp, #0]
 80066da:	f7fa fc83 	bl	8000fe4 <FT800_configurePlayback>
                          FT800_playPlayback(1);
 80066de:	2001      	movs	r0, #1
 80066e0:	f7fa fca8 	bl	8001034 <FT800_playPlayback>
                          break;
 80066e4:	e72c      	b.n	8006540 <main+0x1564>
                          slider_value=FT800_readValue()>>6;
 80066e6:	f7fb fc69 	bl	8001fbc <FT800_readValue>
 80066ea:	f3c0 108f 	ubfx	r0, r0, #6, #16
 80066ee:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <main+0x177c>)
 80066f0:	83d8      	strh	r0, [r3, #30]
                          FT800_setPlaybackVolume(slider_value>>2);
 80066f2:	f3c0 0087 	ubfx	r0, r0, #2, #8
 80066f6:	f7fa fc6d 	bl	8000fd4 <FT800_setPlaybackVolume>
                          break;
 80066fa:	e721      	b.n	8006540 <main+0x1564>
                          scale_factor=FT800_readValue()>>14;
 80066fc:	f7fb fc5e 	bl	8001fbc <FT800_readValue>
 8006700:	0b80      	lsrs	r0, r0, #14
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <main+0x1780>)
 8006704:	8498      	strh	r0, [r3, #36]	; 0x24
                          break;
 8006706:	e71b      	b.n	8006540 <main+0x1564>
                          rotate_factor=FT800_readValue()>>6;
 8006708:	f7fb fc58 	bl	8001fbc <FT800_readValue>
 800670c:	0980      	lsrs	r0, r0, #6
 800670e:	4b13      	ldr	r3, [pc, #76]	; (800675c <main+0x1780>)
 8006710:	84d8      	strh	r0, [r3, #38]	; 0x26
                          break;
 8006712:	e715      	b.n	8006540 <main+0x1564>
          ms=0;
 8006714:	2300      	movs	r3, #0
 8006716:	8353      	strh	r3, [r2, #26]
          sec++;
 8006718:	8b93      	ldrh	r3, [r2, #28]
 800671a:	3301      	adds	r3, #1
 800671c:	b29b      	uxth	r3, r3
 800671e:	8393      	strh	r3, [r2, #28]
          if(sec==60)
 8006720:	2b3c      	cmp	r3, #60	; 0x3c
 8006722:	f47e aeaf 	bne.w	8005484 <main+0x4a8>
              sec=0;
 8006726:	4613      	mov	r3, r2
 8006728:	2200      	movs	r2, #0
 800672a:	839a      	strh	r2, [r3, #28]
              min++;
 800672c:	4a0a      	ldr	r2, [pc, #40]	; (8006758 <main+0x177c>)
 800672e:	8c13      	ldrh	r3, [r2, #32]
 8006730:	3301      	adds	r3, #1
 8006732:	b29b      	uxth	r3, r3
 8006734:	8413      	strh	r3, [r2, #32]
              if(min==60)
 8006736:	2b3c      	cmp	r3, #60	; 0x3c
 8006738:	f47e aea4 	bne.w	8005484 <main+0x4a8>
                  min=0;
 800673c:	2300      	movs	r3, #0
 800673e:	8413      	strh	r3, [r2, #32]
                  hour++;
 8006740:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8006742:	3301      	adds	r3, #1
 8006744:	b29b      	uxth	r3, r3
 8006746:	8453      	strh	r3, [r2, #34]	; 0x22
                  if(hour==12)hour=0;
 8006748:	2b0c      	cmp	r3, #12
 800674a:	f47e ae9b 	bne.w	8005484 <main+0x4a8>
 800674e:	4613      	mov	r3, r2
 8006750:	2200      	movs	r2, #0
 8006752:	845a      	strh	r2, [r3, #34]	; 0x22
 8006754:	f7fe be96 	b.w	8005484 <main+0x4a8>
 8006758:	2000000c 	.word	0x2000000c
 800675c:	20000338 	.word	0x20000338
 8006760:	20004cb0 	.word	0x20004cb0
 8006764:	20004d44 	.word	0x20004d44
 8006768:	20004d4c 	.word	0x20004d4c

0800676c <delay_ms>:
#include"my_delays.h"


void delay_ms(uint32_t delay)
 {
 800676c:	b508      	push	{r3, lr}
     HAL_Delay(delay);
 800676e:	f7f9 ff67 	bl	8000640 <HAL_Delay>
 }
 8006772:	bd08      	pop	{r3, pc}

08006774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006774:	b510      	push	{r4, lr}
 8006776:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006778:	2400      	movs	r4, #0
 800677a:	9400      	str	r4, [sp, #0]
 800677c:	4b21      	ldr	r3, [pc, #132]	; (8006804 <HAL_MspInit+0x90>)
 800677e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006784:	645a      	str	r2, [r3, #68]	; 0x44
 8006786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006788:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800678c:	9200      	str	r2, [sp, #0]
 800678e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006790:	9401      	str	r4, [sp, #4]
 8006792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067a4:	2003      	movs	r0, #3
 80067a6:	f7f9 ff5f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80067aa:	4622      	mov	r2, r4
 80067ac:	4621      	mov	r1, r4
 80067ae:	f06f 000b 	mvn.w	r0, #11
 80067b2:	f7f9 ff6b 	bl	800068c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80067b6:	4622      	mov	r2, r4
 80067b8:	4621      	mov	r1, r4
 80067ba:	f06f 000a 	mvn.w	r0, #10
 80067be:	f7f9 ff65 	bl	800068c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80067c2:	4622      	mov	r2, r4
 80067c4:	4621      	mov	r1, r4
 80067c6:	f06f 0009 	mvn.w	r0, #9
 80067ca:	f7f9 ff5f 	bl	800068c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80067ce:	4622      	mov	r2, r4
 80067d0:	4621      	mov	r1, r4
 80067d2:	f06f 0004 	mvn.w	r0, #4
 80067d6:	f7f9 ff59 	bl	800068c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80067da:	4622      	mov	r2, r4
 80067dc:	4621      	mov	r1, r4
 80067de:	f06f 0003 	mvn.w	r0, #3
 80067e2:	f7f9 ff53 	bl	800068c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80067e6:	4622      	mov	r2, r4
 80067e8:	4621      	mov	r1, r4
 80067ea:	f06f 0001 	mvn.w	r0, #1
 80067ee:	f7f9 ff4d 	bl	800068c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80067f2:	4622      	mov	r2, r4
 80067f4:	4621      	mov	r1, r4
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	f7f9 ff47 	bl	800068c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067fe:	b002      	add	sp, #8
 8006800:	bd10      	pop	{r4, pc}
 8006802:	bf00      	nop
 8006804:	40023800 	.word	0x40023800

08006808 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006808:	b500      	push	{lr}
 800680a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800680c:	6803      	ldr	r3, [r0, #0]
 800680e:	4a1f      	ldr	r2, [pc, #124]	; (800688c <HAL_SPI_MspInit+0x84>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d005      	beq.n	8006820 <HAL_SPI_MspInit+0x18>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8006814:	4a1e      	ldr	r2, [pc, #120]	; (8006890 <HAL_SPI_MspInit+0x88>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01c      	beq.n	8006854 <HAL_SPI_MspInit+0x4c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800681a:	b009      	add	sp, #36	; 0x24
 800681c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006820:	2100      	movs	r1, #0
 8006822:	9101      	str	r1, [sp, #4]
 8006824:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <HAL_SPI_MspInit+0x8c>)
 8006826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
 800682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006838:	23e0      	movs	r3, #224	; 0xe0
 800683a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683c:	2302      	movs	r3, #2
 800683e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006840:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006842:	2303      	movs	r3, #3
 8006844:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006846:	2305      	movs	r3, #5
 8006848:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800684a:	a903      	add	r1, sp, #12
 800684c:	4812      	ldr	r0, [pc, #72]	; (8006898 <HAL_SPI_MspInit+0x90>)
 800684e:	f7f9 ff89 	bl	8000764 <HAL_GPIO_Init>
 8006852:	e7e2      	b.n	800681a <HAL_SPI_MspInit+0x12>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006854:	2100      	movs	r1, #0
 8006856:	9102      	str	r1, [sp, #8]
 8006858:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <HAL_SPI_MspInit+0x8c>)
 800685a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800685c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006868:	9302      	str	r3, [sp, #8]
 800686a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800686c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006870:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006872:	2302      	movs	r3, #2
 8006874:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006876:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006878:	2303      	movs	r3, #3
 800687a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800687c:	2305      	movs	r3, #5
 800687e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006880:	a903      	add	r1, sp, #12
 8006882:	4806      	ldr	r0, [pc, #24]	; (800689c <HAL_SPI_MspInit+0x94>)
 8006884:	f7f9 ff6e 	bl	8000764 <HAL_GPIO_Init>
}
 8006888:	e7c7      	b.n	800681a <HAL_SPI_MspInit+0x12>
 800688a:	bf00      	nop
 800688c:	40013000 	.word	0x40013000
 8006890:	40003800 	.word	0x40003800
 8006894:	40023800 	.word	0x40023800
 8006898:	40020000 	.word	0x40020000
 800689c:	40020400 	.word	0x40020400

080068a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068a0:	4770      	bx	lr

080068a2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80068a2:	e7fe      	b.n	80068a2 <HardFault_Handler>

080068a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80068a4:	e7fe      	b.n	80068a4 <MemManage_Handler>

080068a6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80068a6:	e7fe      	b.n	80068a6 <BusFault_Handler>

080068a8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80068a8:	e7fe      	b.n	80068a8 <UsageFault_Handler>

080068aa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068aa:	4770      	bx	lr

080068ac <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068ac:	4770      	bx	lr

080068ae <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068ae:	4770      	bx	lr

080068b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80068b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068b2:	f7f9 feb3 	bl	800061c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80068b6:	f7f9 ff50 	bl	800075a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068ba:	bd08      	pop	{r3, pc}

080068bc <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80068bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80068be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80068c2:	f7fa f839 	bl	8000938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80068c6:	bd08      	pop	{r3, pc}

080068c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068c8:	490f      	ldr	r1, [pc, #60]	; (8006908 <SystemInit+0x40>)
 80068ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80068ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80068d6:	4b0d      	ldr	r3, [pc, #52]	; (800690c <SystemInit+0x44>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80068e0:	2000      	movs	r0, #0
 80068e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80068ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80068f0:	4a07      	ldr	r2, [pc, #28]	; (8006910 <SystemInit+0x48>)
 80068f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80068fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80068fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006902:	608b      	str	r3, [r1, #8]
#endif
}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	e000ed00 	.word	0xe000ed00
 800690c:	40023800 	.word	0x40023800
 8006910:	24003010 	.word	0x24003010

08006914 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006916:	f7fd ff81 	bl	800481c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800691a:	bd08      	pop	{r3, pc}

0800691c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800691c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800691e:	f7fe f853 	bl	80049c8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8006922:	bd08      	pop	{r3, pc}

08006924 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006924:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006926:	f7fe f859 	bl	80049dc <SD_disk_read>
  /* USER CODE END READ */
}
 800692a:	bd08      	pop	{r3, pc}

0800692c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800692c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800692e:	f7fe f8a1 	bl	8004a74 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8006932:	bd08      	pop	{r3, pc}

08006934 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006936:	f7fe f8ff 	bl	8004b38 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800693a:	bd08      	pop	{r3, pc}

0800693c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800693c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006974 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006940:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006942:	e003      	b.n	800694c <LoopCopyDataInit>

08006944 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006946:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006948:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800694a:	3104      	adds	r1, #4

0800694c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800694c:	480b      	ldr	r0, [pc, #44]	; (800697c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800694e:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006950:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006952:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006954:	d3f6      	bcc.n	8006944 <CopyDataInit>
  ldr  r2, =_sbss
 8006956:	4a0b      	ldr	r2, [pc, #44]	; (8006984 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006958:	e002      	b.n	8006960 <LoopFillZerobss>

0800695a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800695a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800695c:	f842 3b04 	str.w	r3, [r2], #4

08006960 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006960:	4b09      	ldr	r3, [pc, #36]	; (8006988 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006962:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006964:	d3f9      	bcc.n	800695a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006966:	f7ff ffaf 	bl	80068c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800696a:	f000 f811 	bl	8006990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800696e:	f7fe fb35 	bl	8004fdc <main>
  bx  lr    
 8006972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006974:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006978:	08007a08 	.word	0x08007a08
  ldr  r0, =_sdata
 800697c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006980:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8006984:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8006988:	20004d54 	.word	0x20004d54

0800698c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800698c:	e7fe      	b.n	800698c <ADC_IRQHandler>
	...

08006990 <__libc_init_array>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4e0d      	ldr	r6, [pc, #52]	; (80069c8 <__libc_init_array+0x38>)
 8006994:	4c0d      	ldr	r4, [pc, #52]	; (80069cc <__libc_init_array+0x3c>)
 8006996:	1ba4      	subs	r4, r4, r6
 8006998:	10a4      	asrs	r4, r4, #2
 800699a:	2500      	movs	r5, #0
 800699c:	42a5      	cmp	r5, r4
 800699e:	d109      	bne.n	80069b4 <__libc_init_array+0x24>
 80069a0:	4e0b      	ldr	r6, [pc, #44]	; (80069d0 <__libc_init_array+0x40>)
 80069a2:	4c0c      	ldr	r4, [pc, #48]	; (80069d4 <__libc_init_array+0x44>)
 80069a4:	f000 fc34 	bl	8007210 <_init>
 80069a8:	1ba4      	subs	r4, r4, r6
 80069aa:	10a4      	asrs	r4, r4, #2
 80069ac:	2500      	movs	r5, #0
 80069ae:	42a5      	cmp	r5, r4
 80069b0:	d105      	bne.n	80069be <__libc_init_array+0x2e>
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b8:	4798      	blx	r3
 80069ba:	3501      	adds	r5, #1
 80069bc:	e7ee      	b.n	800699c <__libc_init_array+0xc>
 80069be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069c2:	4798      	blx	r3
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7f2      	b.n	80069ae <__libc_init_array+0x1e>
 80069c8:	08007a00 	.word	0x08007a00
 80069cc:	08007a00 	.word	0x08007a00
 80069d0:	08007a00 	.word	0x08007a00
 80069d4:	08007a04 	.word	0x08007a04

080069d8 <siprintf>:
 80069d8:	b40e      	push	{r1, r2, r3}
 80069da:	b500      	push	{lr}
 80069dc:	b09c      	sub	sp, #112	; 0x70
 80069de:	ab1d      	add	r3, sp, #116	; 0x74
 80069e0:	9002      	str	r0, [sp, #8]
 80069e2:	9006      	str	r0, [sp, #24]
 80069e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069e8:	4809      	ldr	r0, [pc, #36]	; (8006a10 <siprintf+0x38>)
 80069ea:	9107      	str	r1, [sp, #28]
 80069ec:	9104      	str	r1, [sp, #16]
 80069ee:	4909      	ldr	r1, [pc, #36]	; (8006a14 <siprintf+0x3c>)
 80069f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f4:	9105      	str	r1, [sp, #20]
 80069f6:	6800      	ldr	r0, [r0, #0]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	a902      	add	r1, sp, #8
 80069fc:	f000 f86e 	bl	8006adc <_svfiprintf_r>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	b01c      	add	sp, #112	; 0x70
 8006a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a0c:	b003      	add	sp, #12
 8006a0e:	4770      	bx	lr
 8006a10:	2000007c 	.word	0x2000007c
 8006a14:	ffff0208 	.word	0xffff0208

08006a18 <strcpy>:
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a1e:	f803 2b01 	strb.w	r2, [r3], #1
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	d1f9      	bne.n	8006a1a <strcpy+0x2>
 8006a26:	4770      	bx	lr

08006a28 <__ssputs_r>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	688e      	ldr	r6, [r1, #8]
 8006a2e:	429e      	cmp	r6, r3
 8006a30:	4682      	mov	sl, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	4690      	mov	r8, r2
 8006a36:	4699      	mov	r9, r3
 8006a38:	d837      	bhi.n	8006aaa <__ssputs_r+0x82>
 8006a3a:	898a      	ldrh	r2, [r1, #12]
 8006a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a40:	d031      	beq.n	8006aa6 <__ssputs_r+0x7e>
 8006a42:	6825      	ldr	r5, [r4, #0]
 8006a44:	6909      	ldr	r1, [r1, #16]
 8006a46:	1a6f      	subs	r7, r5, r1
 8006a48:	6965      	ldr	r5, [r4, #20]
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a50:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a54:	f109 0301 	add.w	r3, r9, #1
 8006a58:	443b      	add	r3, r7
 8006a5a:	429d      	cmp	r5, r3
 8006a5c:	bf38      	it	cc
 8006a5e:	461d      	movcc	r5, r3
 8006a60:	0553      	lsls	r3, r2, #21
 8006a62:	d530      	bpl.n	8006ac6 <__ssputs_r+0x9e>
 8006a64:	4629      	mov	r1, r5
 8006a66:	f000 fb2b 	bl	80070c0 <_malloc_r>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	b950      	cbnz	r0, 8006a84 <__ssputs_r+0x5c>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	f8ca 3000 	str.w	r3, [sl]
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a84:	463a      	mov	r2, r7
 8006a86:	6921      	ldr	r1, [r4, #16]
 8006a88:	f000 faa8 	bl	8006fdc <memcpy>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	6126      	str	r6, [r4, #16]
 8006a9a:	6165      	str	r5, [r4, #20]
 8006a9c:	443e      	add	r6, r7
 8006a9e:	1bed      	subs	r5, r5, r7
 8006aa0:	6026      	str	r6, [r4, #0]
 8006aa2:	60a5      	str	r5, [r4, #8]
 8006aa4:	464e      	mov	r6, r9
 8006aa6:	454e      	cmp	r6, r9
 8006aa8:	d900      	bls.n	8006aac <__ssputs_r+0x84>
 8006aaa:	464e      	mov	r6, r9
 8006aac:	4632      	mov	r2, r6
 8006aae:	4641      	mov	r1, r8
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	f000 fa9e 	bl	8006ff2 <memmove>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	1b9b      	subs	r3, r3, r6
 8006aba:	60a3      	str	r3, [r4, #8]
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	441e      	add	r6, r3
 8006ac0:	6026      	str	r6, [r4, #0]
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e7dc      	b.n	8006a80 <__ssputs_r+0x58>
 8006ac6:	462a      	mov	r2, r5
 8006ac8:	f000 fb54 	bl	8007174 <_realloc_r>
 8006acc:	4606      	mov	r6, r0
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d1e2      	bne.n	8006a98 <__ssputs_r+0x70>
 8006ad2:	6921      	ldr	r1, [r4, #16]
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	f000 faa5 	bl	8007024 <_free_r>
 8006ada:	e7c8      	b.n	8006a6e <__ssputs_r+0x46>

08006adc <_svfiprintf_r>:
 8006adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	898b      	ldrh	r3, [r1, #12]
 8006ae4:	061f      	lsls	r7, r3, #24
 8006ae6:	b09d      	sub	sp, #116	; 0x74
 8006ae8:	4680      	mov	r8, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	4616      	mov	r6, r2
 8006aee:	d50f      	bpl.n	8006b10 <_svfiprintf_r+0x34>
 8006af0:	690b      	ldr	r3, [r1, #16]
 8006af2:	b96b      	cbnz	r3, 8006b10 <_svfiprintf_r+0x34>
 8006af4:	2140      	movs	r1, #64	; 0x40
 8006af6:	f000 fae3 	bl	80070c0 <_malloc_r>
 8006afa:	6020      	str	r0, [r4, #0]
 8006afc:	6120      	str	r0, [r4, #16]
 8006afe:	b928      	cbnz	r0, 8006b0c <_svfiprintf_r+0x30>
 8006b00:	230c      	movs	r3, #12
 8006b02:	f8c8 3000 	str.w	r3, [r8]
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	e0c8      	b.n	8006c9e <_svfiprintf_r+0x1c2>
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	6163      	str	r3, [r4, #20]
 8006b10:	2300      	movs	r3, #0
 8006b12:	9309      	str	r3, [sp, #36]	; 0x24
 8006b14:	2320      	movs	r3, #32
 8006b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b1a:	2330      	movs	r3, #48	; 0x30
 8006b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b20:	9503      	str	r5, [sp, #12]
 8006b22:	f04f 0b01 	mov.w	fp, #1
 8006b26:	4637      	mov	r7, r6
 8006b28:	463d      	mov	r5, r7
 8006b2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b2e:	b10b      	cbz	r3, 8006b34 <_svfiprintf_r+0x58>
 8006b30:	2b25      	cmp	r3, #37	; 0x25
 8006b32:	d13e      	bne.n	8006bb2 <_svfiprintf_r+0xd6>
 8006b34:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b38:	d00b      	beq.n	8006b52 <_svfiprintf_r+0x76>
 8006b3a:	4653      	mov	r3, sl
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4640      	mov	r0, r8
 8006b42:	f7ff ff71 	bl	8006a28 <__ssputs_r>
 8006b46:	3001      	adds	r0, #1
 8006b48:	f000 80a4 	beq.w	8006c94 <_svfiprintf_r+0x1b8>
 8006b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4e:	4453      	add	r3, sl
 8006b50:	9309      	str	r3, [sp, #36]	; 0x24
 8006b52:	783b      	ldrb	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 809d 	beq.w	8006c94 <_svfiprintf_r+0x1b8>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b64:	9304      	str	r3, [sp, #16]
 8006b66:	9307      	str	r3, [sp, #28]
 8006b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b6e:	462f      	mov	r7, r5
 8006b70:	2205      	movs	r2, #5
 8006b72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b76:	4850      	ldr	r0, [pc, #320]	; (8006cb8 <_svfiprintf_r+0x1dc>)
 8006b78:	f7f9 fb42 	bl	8000200 <memchr>
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	b9d0      	cbnz	r0, 8006bb6 <_svfiprintf_r+0xda>
 8006b80:	06d9      	lsls	r1, r3, #27
 8006b82:	bf44      	itt	mi
 8006b84:	2220      	movmi	r2, #32
 8006b86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b8a:	071a      	lsls	r2, r3, #28
 8006b8c:	bf44      	itt	mi
 8006b8e:	222b      	movmi	r2, #43	; 0x2b
 8006b90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b94:	782a      	ldrb	r2, [r5, #0]
 8006b96:	2a2a      	cmp	r2, #42	; 0x2a
 8006b98:	d015      	beq.n	8006bc6 <_svfiprintf_r+0xea>
 8006b9a:	9a07      	ldr	r2, [sp, #28]
 8006b9c:	462f      	mov	r7, r5
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	250a      	movs	r5, #10
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba8:	3b30      	subs	r3, #48	; 0x30
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d94d      	bls.n	8006c4a <_svfiprintf_r+0x16e>
 8006bae:	b1b8      	cbz	r0, 8006be0 <_svfiprintf_r+0x104>
 8006bb0:	e00f      	b.n	8006bd2 <_svfiprintf_r+0xf6>
 8006bb2:	462f      	mov	r7, r5
 8006bb4:	e7b8      	b.n	8006b28 <_svfiprintf_r+0x4c>
 8006bb6:	4a40      	ldr	r2, [pc, #256]	; (8006cb8 <_svfiprintf_r+0x1dc>)
 8006bb8:	1a80      	subs	r0, r0, r2
 8006bba:	fa0b f000 	lsl.w	r0, fp, r0
 8006bbe:	4318      	orrs	r0, r3
 8006bc0:	9004      	str	r0, [sp, #16]
 8006bc2:	463d      	mov	r5, r7
 8006bc4:	e7d3      	b.n	8006b6e <_svfiprintf_r+0x92>
 8006bc6:	9a03      	ldr	r2, [sp, #12]
 8006bc8:	1d11      	adds	r1, r2, #4
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	9103      	str	r1, [sp, #12]
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	db01      	blt.n	8006bd6 <_svfiprintf_r+0xfa>
 8006bd2:	9207      	str	r2, [sp, #28]
 8006bd4:	e004      	b.n	8006be0 <_svfiprintf_r+0x104>
 8006bd6:	4252      	negs	r2, r2
 8006bd8:	f043 0302 	orr.w	r3, r3, #2
 8006bdc:	9207      	str	r2, [sp, #28]
 8006bde:	9304      	str	r3, [sp, #16]
 8006be0:	783b      	ldrb	r3, [r7, #0]
 8006be2:	2b2e      	cmp	r3, #46	; 0x2e
 8006be4:	d10c      	bne.n	8006c00 <_svfiprintf_r+0x124>
 8006be6:	787b      	ldrb	r3, [r7, #1]
 8006be8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bea:	d133      	bne.n	8006c54 <_svfiprintf_r+0x178>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	1d1a      	adds	r2, r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	9203      	str	r2, [sp, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bfb8      	it	lt
 8006bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bfc:	3702      	adds	r7, #2
 8006bfe:	9305      	str	r3, [sp, #20]
 8006c00:	4d2e      	ldr	r5, [pc, #184]	; (8006cbc <_svfiprintf_r+0x1e0>)
 8006c02:	7839      	ldrb	r1, [r7, #0]
 8006c04:	2203      	movs	r2, #3
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7f9 fafa 	bl	8000200 <memchr>
 8006c0c:	b138      	cbz	r0, 8006c1e <_svfiprintf_r+0x142>
 8006c0e:	2340      	movs	r3, #64	; 0x40
 8006c10:	1b40      	subs	r0, r0, r5
 8006c12:	fa03 f000 	lsl.w	r0, r3, r0
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	4303      	orrs	r3, r0
 8006c1a:	3701      	adds	r7, #1
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	7839      	ldrb	r1, [r7, #0]
 8006c20:	4827      	ldr	r0, [pc, #156]	; (8006cc0 <_svfiprintf_r+0x1e4>)
 8006c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c26:	2206      	movs	r2, #6
 8006c28:	1c7e      	adds	r6, r7, #1
 8006c2a:	f7f9 fae9 	bl	8000200 <memchr>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d038      	beq.n	8006ca4 <_svfiprintf_r+0x1c8>
 8006c32:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <_svfiprintf_r+0x1e8>)
 8006c34:	bb13      	cbnz	r3, 8006c7c <_svfiprintf_r+0x1a0>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	3307      	adds	r3, #7
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	3308      	adds	r3, #8
 8006c40:	9303      	str	r3, [sp, #12]
 8006c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c44:	444b      	add	r3, r9
 8006c46:	9309      	str	r3, [sp, #36]	; 0x24
 8006c48:	e76d      	b.n	8006b26 <_svfiprintf_r+0x4a>
 8006c4a:	fb05 3202 	mla	r2, r5, r2, r3
 8006c4e:	2001      	movs	r0, #1
 8006c50:	460f      	mov	r7, r1
 8006c52:	e7a6      	b.n	8006ba2 <_svfiprintf_r+0xc6>
 8006c54:	2300      	movs	r3, #0
 8006c56:	3701      	adds	r7, #1
 8006c58:	9305      	str	r3, [sp, #20]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	250a      	movs	r5, #10
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c64:	3a30      	subs	r2, #48	; 0x30
 8006c66:	2a09      	cmp	r2, #9
 8006c68:	d903      	bls.n	8006c72 <_svfiprintf_r+0x196>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0c8      	beq.n	8006c00 <_svfiprintf_r+0x124>
 8006c6e:	9105      	str	r1, [sp, #20]
 8006c70:	e7c6      	b.n	8006c00 <_svfiprintf_r+0x124>
 8006c72:	fb05 2101 	mla	r1, r5, r1, r2
 8006c76:	2301      	movs	r3, #1
 8006c78:	4607      	mov	r7, r0
 8006c7a:	e7f0      	b.n	8006c5e <_svfiprintf_r+0x182>
 8006c7c:	ab03      	add	r3, sp, #12
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	4622      	mov	r2, r4
 8006c82:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <_svfiprintf_r+0x1ec>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	4640      	mov	r0, r8
 8006c88:	f3af 8000 	nop.w
 8006c8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c90:	4681      	mov	r9, r0
 8006c92:	d1d6      	bne.n	8006c42 <_svfiprintf_r+0x166>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	065b      	lsls	r3, r3, #25
 8006c98:	f53f af35 	bmi.w	8006b06 <_svfiprintf_r+0x2a>
 8006c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9e:	b01d      	add	sp, #116	; 0x74
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	ab03      	add	r3, sp, #12
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	4622      	mov	r2, r4
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <_svfiprintf_r+0x1ec>)
 8006cac:	a904      	add	r1, sp, #16
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f000 f882 	bl	8006db8 <_printf_i>
 8006cb4:	e7ea      	b.n	8006c8c <_svfiprintf_r+0x1b0>
 8006cb6:	bf00      	nop
 8006cb8:	080079c4 	.word	0x080079c4
 8006cbc:	080079ca 	.word	0x080079ca
 8006cc0:	080079ce 	.word	0x080079ce
 8006cc4:	00000000 	.word	0x00000000
 8006cc8:	08006a29 	.word	0x08006a29

08006ccc <_printf_common>:
 8006ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	4691      	mov	r9, r2
 8006cd2:	461f      	mov	r7, r3
 8006cd4:	688a      	ldr	r2, [r1, #8]
 8006cd6:	690b      	ldr	r3, [r1, #16]
 8006cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	bfb8      	it	lt
 8006ce0:	4613      	movlt	r3, r2
 8006ce2:	f8c9 3000 	str.w	r3, [r9]
 8006ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cea:	4606      	mov	r6, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	b112      	cbz	r2, 8006cf6 <_printf_common+0x2a>
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	f8c9 3000 	str.w	r3, [r9]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	0699      	lsls	r1, r3, #26
 8006cfa:	bf42      	ittt	mi
 8006cfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d00:	3302      	addmi	r3, #2
 8006d02:	f8c9 3000 	strmi.w	r3, [r9]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	f015 0506 	ands.w	r5, r5, #6
 8006d0c:	d107      	bne.n	8006d1e <_printf_common+0x52>
 8006d0e:	f104 0a19 	add.w	sl, r4, #25
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	f8d9 2000 	ldr.w	r2, [r9]
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	42ab      	cmp	r3, r5
 8006d1c:	dc28      	bgt.n	8006d70 <_printf_common+0xa4>
 8006d1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	3300      	adds	r3, #0
 8006d26:	bf18      	it	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	0692      	lsls	r2, r2, #26
 8006d2c:	d42d      	bmi.n	8006d8a <_printf_common+0xbe>
 8006d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d32:	4639      	mov	r1, r7
 8006d34:	4630      	mov	r0, r6
 8006d36:	47c0      	blx	r8
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d020      	beq.n	8006d7e <_printf_common+0xb2>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	68e5      	ldr	r5, [r4, #12]
 8006d40:	f8d9 2000 	ldr.w	r2, [r9]
 8006d44:	f003 0306 	and.w	r3, r3, #6
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	bf08      	it	eq
 8006d4c:	1aad      	subeq	r5, r5, r2
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	6922      	ldr	r2, [r4, #16]
 8006d52:	bf0c      	ite	eq
 8006d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d58:	2500      	movne	r5, #0
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	bfc4      	itt	gt
 8006d5e:	1a9b      	subgt	r3, r3, r2
 8006d60:	18ed      	addgt	r5, r5, r3
 8006d62:	f04f 0900 	mov.w	r9, #0
 8006d66:	341a      	adds	r4, #26
 8006d68:	454d      	cmp	r5, r9
 8006d6a:	d11a      	bne.n	8006da2 <_printf_common+0xd6>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e008      	b.n	8006d82 <_printf_common+0xb6>
 8006d70:	2301      	movs	r3, #1
 8006d72:	4652      	mov	r2, sl
 8006d74:	4639      	mov	r1, r7
 8006d76:	4630      	mov	r0, r6
 8006d78:	47c0      	blx	r8
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d103      	bne.n	8006d86 <_printf_common+0xba>
 8006d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d86:	3501      	adds	r5, #1
 8006d88:	e7c3      	b.n	8006d12 <_printf_common+0x46>
 8006d8a:	18e1      	adds	r1, r4, r3
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	2030      	movs	r0, #48	; 0x30
 8006d90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d94:	4422      	add	r2, r4
 8006d96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d9e:	3302      	adds	r3, #2
 8006da0:	e7c5      	b.n	8006d2e <_printf_common+0x62>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4622      	mov	r2, r4
 8006da6:	4639      	mov	r1, r7
 8006da8:	4630      	mov	r0, r6
 8006daa:	47c0      	blx	r8
 8006dac:	3001      	adds	r0, #1
 8006dae:	d0e6      	beq.n	8006d7e <_printf_common+0xb2>
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	e7d8      	b.n	8006d68 <_printf_common+0x9c>
	...

08006db8 <_printf_i>:
 8006db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	7e09      	ldrb	r1, [r1, #24]
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	296e      	cmp	r1, #110	; 0x6e
 8006dc8:	4617      	mov	r7, r2
 8006dca:	4606      	mov	r6, r0
 8006dcc:	4698      	mov	r8, r3
 8006dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd0:	f000 80b3 	beq.w	8006f3a <_printf_i+0x182>
 8006dd4:	d822      	bhi.n	8006e1c <_printf_i+0x64>
 8006dd6:	2963      	cmp	r1, #99	; 0x63
 8006dd8:	d036      	beq.n	8006e48 <_printf_i+0x90>
 8006dda:	d80a      	bhi.n	8006df2 <_printf_i+0x3a>
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	f000 80b9 	beq.w	8006f54 <_printf_i+0x19c>
 8006de2:	2958      	cmp	r1, #88	; 0x58
 8006de4:	f000 8083 	beq.w	8006eee <_printf_i+0x136>
 8006de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006df0:	e032      	b.n	8006e58 <_printf_i+0xa0>
 8006df2:	2964      	cmp	r1, #100	; 0x64
 8006df4:	d001      	beq.n	8006dfa <_printf_i+0x42>
 8006df6:	2969      	cmp	r1, #105	; 0x69
 8006df8:	d1f6      	bne.n	8006de8 <_printf_i+0x30>
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	6813      	ldr	r3, [r2, #0]
 8006dfe:	0605      	lsls	r5, r0, #24
 8006e00:	f103 0104 	add.w	r1, r3, #4
 8006e04:	d52a      	bpl.n	8006e5c <_printf_i+0xa4>
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6011      	str	r1, [r2, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da03      	bge.n	8006e16 <_printf_i+0x5e>
 8006e0e:	222d      	movs	r2, #45	; 0x2d
 8006e10:	425b      	negs	r3, r3
 8006e12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e16:	486f      	ldr	r0, [pc, #444]	; (8006fd4 <_printf_i+0x21c>)
 8006e18:	220a      	movs	r2, #10
 8006e1a:	e039      	b.n	8006e90 <_printf_i+0xd8>
 8006e1c:	2973      	cmp	r1, #115	; 0x73
 8006e1e:	f000 809d 	beq.w	8006f5c <_printf_i+0x1a4>
 8006e22:	d808      	bhi.n	8006e36 <_printf_i+0x7e>
 8006e24:	296f      	cmp	r1, #111	; 0x6f
 8006e26:	d020      	beq.n	8006e6a <_printf_i+0xb2>
 8006e28:	2970      	cmp	r1, #112	; 0x70
 8006e2a:	d1dd      	bne.n	8006de8 <_printf_i+0x30>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	f043 0320 	orr.w	r3, r3, #32
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	e003      	b.n	8006e3e <_printf_i+0x86>
 8006e36:	2975      	cmp	r1, #117	; 0x75
 8006e38:	d017      	beq.n	8006e6a <_printf_i+0xb2>
 8006e3a:	2978      	cmp	r1, #120	; 0x78
 8006e3c:	d1d4      	bne.n	8006de8 <_printf_i+0x30>
 8006e3e:	2378      	movs	r3, #120	; 0x78
 8006e40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e44:	4864      	ldr	r0, [pc, #400]	; (8006fd8 <_printf_i+0x220>)
 8006e46:	e055      	b.n	8006ef4 <_printf_i+0x13c>
 8006e48:	6813      	ldr	r3, [r2, #0]
 8006e4a:	1d19      	adds	r1, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6011      	str	r1, [r2, #0]
 8006e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e08c      	b.n	8006f76 <_printf_i+0x1be>
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6011      	str	r1, [r2, #0]
 8006e60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e64:	bf18      	it	ne
 8006e66:	b21b      	sxthne	r3, r3
 8006e68:	e7cf      	b.n	8006e0a <_printf_i+0x52>
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	1d18      	adds	r0, r3, #4
 8006e70:	6010      	str	r0, [r2, #0]
 8006e72:	0628      	lsls	r0, r5, #24
 8006e74:	d501      	bpl.n	8006e7a <_printf_i+0xc2>
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	e002      	b.n	8006e80 <_printf_i+0xc8>
 8006e7a:	0668      	lsls	r0, r5, #25
 8006e7c:	d5fb      	bpl.n	8006e76 <_printf_i+0xbe>
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <_printf_i+0x21c>)
 8006e82:	296f      	cmp	r1, #111	; 0x6f
 8006e84:	bf14      	ite	ne
 8006e86:	220a      	movne	r2, #10
 8006e88:	2208      	moveq	r2, #8
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e90:	6865      	ldr	r5, [r4, #4]
 8006e92:	60a5      	str	r5, [r4, #8]
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	f2c0 8095 	blt.w	8006fc4 <_printf_i+0x20c>
 8006e9a:	6821      	ldr	r1, [r4, #0]
 8006e9c:	f021 0104 	bic.w	r1, r1, #4
 8006ea0:	6021      	str	r1, [r4, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d13d      	bne.n	8006f22 <_printf_i+0x16a>
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	f040 808e 	bne.w	8006fc8 <_printf_i+0x210>
 8006eac:	4665      	mov	r5, ip
 8006eae:	2a08      	cmp	r2, #8
 8006eb0:	d10b      	bne.n	8006eca <_printf_i+0x112>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	07db      	lsls	r3, r3, #31
 8006eb6:	d508      	bpl.n	8006eca <_printf_i+0x112>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	6862      	ldr	r2, [r4, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bfde      	ittt	le
 8006ec0:	2330      	movle	r3, #48	; 0x30
 8006ec2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006eca:	ebac 0305 	sub.w	r3, ip, r5
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	f8cd 8000 	str.w	r8, [sp]
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	aa03      	add	r2, sp, #12
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff fef6 	bl	8006ccc <_printf_common>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d14d      	bne.n	8006f80 <_printf_i+0x1c8>
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	b005      	add	sp, #20
 8006eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eee:	4839      	ldr	r0, [pc, #228]	; (8006fd4 <_printf_i+0x21c>)
 8006ef0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	6821      	ldr	r1, [r4, #0]
 8006ef8:	1d1d      	adds	r5, r3, #4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6015      	str	r5, [r2, #0]
 8006efe:	060a      	lsls	r2, r1, #24
 8006f00:	d50b      	bpl.n	8006f1a <_printf_i+0x162>
 8006f02:	07ca      	lsls	r2, r1, #31
 8006f04:	bf44      	itt	mi
 8006f06:	f041 0120 	orrmi.w	r1, r1, #32
 8006f0a:	6021      	strmi	r1, [r4, #0]
 8006f0c:	b91b      	cbnz	r3, 8006f16 <_printf_i+0x15e>
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	f022 0220 	bic.w	r2, r2, #32
 8006f14:	6022      	str	r2, [r4, #0]
 8006f16:	2210      	movs	r2, #16
 8006f18:	e7b7      	b.n	8006e8a <_printf_i+0xd2>
 8006f1a:	064d      	lsls	r5, r1, #25
 8006f1c:	bf48      	it	mi
 8006f1e:	b29b      	uxthmi	r3, r3
 8006f20:	e7ef      	b.n	8006f02 <_printf_i+0x14a>
 8006f22:	4665      	mov	r5, ip
 8006f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f28:	fb02 3311 	mls	r3, r2, r1, r3
 8006f2c:	5cc3      	ldrb	r3, [r0, r3]
 8006f2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f32:	460b      	mov	r3, r1
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d1f5      	bne.n	8006f24 <_printf_i+0x16c>
 8006f38:	e7b9      	b.n	8006eae <_printf_i+0xf6>
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	6825      	ldr	r5, [r4, #0]
 8006f3e:	6961      	ldr	r1, [r4, #20]
 8006f40:	1d18      	adds	r0, r3, #4
 8006f42:	6010      	str	r0, [r2, #0]
 8006f44:	0628      	lsls	r0, r5, #24
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	d501      	bpl.n	8006f4e <_printf_i+0x196>
 8006f4a:	6019      	str	r1, [r3, #0]
 8006f4c:	e002      	b.n	8006f54 <_printf_i+0x19c>
 8006f4e:	066a      	lsls	r2, r5, #25
 8006f50:	d5fb      	bpl.n	8006f4a <_printf_i+0x192>
 8006f52:	8019      	strh	r1, [r3, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	4665      	mov	r5, ip
 8006f5a:	e7b9      	b.n	8006ed0 <_printf_i+0x118>
 8006f5c:	6813      	ldr	r3, [r2, #0]
 8006f5e:	1d19      	adds	r1, r3, #4
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	681d      	ldr	r5, [r3, #0]
 8006f64:	6862      	ldr	r2, [r4, #4]
 8006f66:	2100      	movs	r1, #0
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7f9 f949 	bl	8000200 <memchr>
 8006f6e:	b108      	cbz	r0, 8006f74 <_printf_i+0x1bc>
 8006f70:	1b40      	subs	r0, r0, r5
 8006f72:	6060      	str	r0, [r4, #4]
 8006f74:	6863      	ldr	r3, [r4, #4]
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7e:	e7a7      	b.n	8006ed0 <_printf_i+0x118>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	462a      	mov	r2, r5
 8006f84:	4639      	mov	r1, r7
 8006f86:	4630      	mov	r0, r6
 8006f88:	47c0      	blx	r8
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d0aa      	beq.n	8006ee4 <_printf_i+0x12c>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	079b      	lsls	r3, r3, #30
 8006f92:	d413      	bmi.n	8006fbc <_printf_i+0x204>
 8006f94:	68e0      	ldr	r0, [r4, #12]
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	4298      	cmp	r0, r3
 8006f9a:	bfb8      	it	lt
 8006f9c:	4618      	movlt	r0, r3
 8006f9e:	e7a3      	b.n	8006ee8 <_printf_i+0x130>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	464a      	mov	r2, r9
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d09a      	beq.n	8006ee4 <_printf_i+0x12c>
 8006fae:	3501      	adds	r5, #1
 8006fb0:	68e3      	ldr	r3, [r4, #12]
 8006fb2:	9a03      	ldr	r2, [sp, #12]
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	42ab      	cmp	r3, r5
 8006fb8:	dcf2      	bgt.n	8006fa0 <_printf_i+0x1e8>
 8006fba:	e7eb      	b.n	8006f94 <_printf_i+0x1dc>
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	f104 0919 	add.w	r9, r4, #25
 8006fc2:	e7f5      	b.n	8006fb0 <_printf_i+0x1f8>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1ac      	bne.n	8006f22 <_printf_i+0x16a>
 8006fc8:	7803      	ldrb	r3, [r0, #0]
 8006fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd2:	e76c      	b.n	8006eae <_printf_i+0xf6>
 8006fd4:	080079d5 	.word	0x080079d5
 8006fd8:	080079e6 	.word	0x080079e6

08006fdc <memcpy>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	1e43      	subs	r3, r0, #1
 8006fe0:	440a      	add	r2, r1
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d100      	bne.n	8006fe8 <memcpy+0xc>
 8006fe6:	bd10      	pop	{r4, pc}
 8006fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff0:	e7f7      	b.n	8006fe2 <memcpy+0x6>

08006ff2 <memmove>:
 8006ff2:	4288      	cmp	r0, r1
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	eb01 0302 	add.w	r3, r1, r2
 8006ffa:	d807      	bhi.n	800700c <memmove+0x1a>
 8006ffc:	1e42      	subs	r2, r0, #1
 8006ffe:	4299      	cmp	r1, r3
 8007000:	d00a      	beq.n	8007018 <memmove+0x26>
 8007002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007006:	f802 4f01 	strb.w	r4, [r2, #1]!
 800700a:	e7f8      	b.n	8006ffe <memmove+0xc>
 800700c:	4283      	cmp	r3, r0
 800700e:	d9f5      	bls.n	8006ffc <memmove+0xa>
 8007010:	1881      	adds	r1, r0, r2
 8007012:	1ad2      	subs	r2, r2, r3
 8007014:	42d3      	cmn	r3, r2
 8007016:	d100      	bne.n	800701a <memmove+0x28>
 8007018:	bd10      	pop	{r4, pc}
 800701a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800701e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007022:	e7f7      	b.n	8007014 <memmove+0x22>

08007024 <_free_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4605      	mov	r5, r0
 8007028:	2900      	cmp	r1, #0
 800702a:	d045      	beq.n	80070b8 <_free_r+0x94>
 800702c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007030:	1f0c      	subs	r4, r1, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	bfb8      	it	lt
 8007036:	18e4      	addlt	r4, r4, r3
 8007038:	f000 f8d2 	bl	80071e0 <__malloc_lock>
 800703c:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <_free_r+0x98>)
 800703e:	6813      	ldr	r3, [r2, #0]
 8007040:	4610      	mov	r0, r2
 8007042:	b933      	cbnz	r3, 8007052 <_free_r+0x2e>
 8007044:	6063      	str	r3, [r4, #4]
 8007046:	6014      	str	r4, [r2, #0]
 8007048:	4628      	mov	r0, r5
 800704a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800704e:	f000 b8c8 	b.w	80071e2 <__malloc_unlock>
 8007052:	42a3      	cmp	r3, r4
 8007054:	d90c      	bls.n	8007070 <_free_r+0x4c>
 8007056:	6821      	ldr	r1, [r4, #0]
 8007058:	1862      	adds	r2, r4, r1
 800705a:	4293      	cmp	r3, r2
 800705c:	bf04      	itt	eq
 800705e:	681a      	ldreq	r2, [r3, #0]
 8007060:	685b      	ldreq	r3, [r3, #4]
 8007062:	6063      	str	r3, [r4, #4]
 8007064:	bf04      	itt	eq
 8007066:	1852      	addeq	r2, r2, r1
 8007068:	6022      	streq	r2, [r4, #0]
 800706a:	6004      	str	r4, [r0, #0]
 800706c:	e7ec      	b.n	8007048 <_free_r+0x24>
 800706e:	4613      	mov	r3, r2
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	b10a      	cbz	r2, 8007078 <_free_r+0x54>
 8007074:	42a2      	cmp	r2, r4
 8007076:	d9fa      	bls.n	800706e <_free_r+0x4a>
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	1858      	adds	r0, r3, r1
 800707c:	42a0      	cmp	r0, r4
 800707e:	d10b      	bne.n	8007098 <_free_r+0x74>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	4401      	add	r1, r0
 8007084:	1858      	adds	r0, r3, r1
 8007086:	4282      	cmp	r2, r0
 8007088:	6019      	str	r1, [r3, #0]
 800708a:	d1dd      	bne.n	8007048 <_free_r+0x24>
 800708c:	6810      	ldr	r0, [r2, #0]
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	4401      	add	r1, r0
 8007094:	6019      	str	r1, [r3, #0]
 8007096:	e7d7      	b.n	8007048 <_free_r+0x24>
 8007098:	d902      	bls.n	80070a0 <_free_r+0x7c>
 800709a:	230c      	movs	r3, #12
 800709c:	602b      	str	r3, [r5, #0]
 800709e:	e7d3      	b.n	8007048 <_free_r+0x24>
 80070a0:	6820      	ldr	r0, [r4, #0]
 80070a2:	1821      	adds	r1, r4, r0
 80070a4:	428a      	cmp	r2, r1
 80070a6:	bf04      	itt	eq
 80070a8:	6811      	ldreq	r1, [r2, #0]
 80070aa:	6852      	ldreq	r2, [r2, #4]
 80070ac:	6062      	str	r2, [r4, #4]
 80070ae:	bf04      	itt	eq
 80070b0:	1809      	addeq	r1, r1, r0
 80070b2:	6021      	streq	r1, [r4, #0]
 80070b4:	605c      	str	r4, [r3, #4]
 80070b6:	e7c7      	b.n	8007048 <_free_r+0x24>
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	2000139c 	.word	0x2000139c

080070c0 <_malloc_r>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	1ccd      	adds	r5, r1, #3
 80070c4:	f025 0503 	bic.w	r5, r5, #3
 80070c8:	3508      	adds	r5, #8
 80070ca:	2d0c      	cmp	r5, #12
 80070cc:	bf38      	it	cc
 80070ce:	250c      	movcc	r5, #12
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	4606      	mov	r6, r0
 80070d4:	db01      	blt.n	80070da <_malloc_r+0x1a>
 80070d6:	42a9      	cmp	r1, r5
 80070d8:	d903      	bls.n	80070e2 <_malloc_r+0x22>
 80070da:	230c      	movs	r3, #12
 80070dc:	6033      	str	r3, [r6, #0]
 80070de:	2000      	movs	r0, #0
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	f000 f87d 	bl	80071e0 <__malloc_lock>
 80070e6:	4a21      	ldr	r2, [pc, #132]	; (800716c <_malloc_r+0xac>)
 80070e8:	6814      	ldr	r4, [r2, #0]
 80070ea:	4621      	mov	r1, r4
 80070ec:	b991      	cbnz	r1, 8007114 <_malloc_r+0x54>
 80070ee:	4c20      	ldr	r4, [pc, #128]	; (8007170 <_malloc_r+0xb0>)
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	b91b      	cbnz	r3, 80070fc <_malloc_r+0x3c>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f000 f863 	bl	80071c0 <_sbrk_r>
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	4629      	mov	r1, r5
 80070fe:	4630      	mov	r0, r6
 8007100:	f000 f85e 	bl	80071c0 <_sbrk_r>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d124      	bne.n	8007152 <_malloc_r+0x92>
 8007108:	230c      	movs	r3, #12
 800710a:	6033      	str	r3, [r6, #0]
 800710c:	4630      	mov	r0, r6
 800710e:	f000 f868 	bl	80071e2 <__malloc_unlock>
 8007112:	e7e4      	b.n	80070de <_malloc_r+0x1e>
 8007114:	680b      	ldr	r3, [r1, #0]
 8007116:	1b5b      	subs	r3, r3, r5
 8007118:	d418      	bmi.n	800714c <_malloc_r+0x8c>
 800711a:	2b0b      	cmp	r3, #11
 800711c:	d90f      	bls.n	800713e <_malloc_r+0x7e>
 800711e:	600b      	str	r3, [r1, #0]
 8007120:	50cd      	str	r5, [r1, r3]
 8007122:	18cc      	adds	r4, r1, r3
 8007124:	4630      	mov	r0, r6
 8007126:	f000 f85c 	bl	80071e2 <__malloc_unlock>
 800712a:	f104 000b 	add.w	r0, r4, #11
 800712e:	1d23      	adds	r3, r4, #4
 8007130:	f020 0007 	bic.w	r0, r0, #7
 8007134:	1ac3      	subs	r3, r0, r3
 8007136:	d0d3      	beq.n	80070e0 <_malloc_r+0x20>
 8007138:	425a      	negs	r2, r3
 800713a:	50e2      	str	r2, [r4, r3]
 800713c:	e7d0      	b.n	80070e0 <_malloc_r+0x20>
 800713e:	428c      	cmp	r4, r1
 8007140:	684b      	ldr	r3, [r1, #4]
 8007142:	bf16      	itet	ne
 8007144:	6063      	strne	r3, [r4, #4]
 8007146:	6013      	streq	r3, [r2, #0]
 8007148:	460c      	movne	r4, r1
 800714a:	e7eb      	b.n	8007124 <_malloc_r+0x64>
 800714c:	460c      	mov	r4, r1
 800714e:	6849      	ldr	r1, [r1, #4]
 8007150:	e7cc      	b.n	80070ec <_malloc_r+0x2c>
 8007152:	1cc4      	adds	r4, r0, #3
 8007154:	f024 0403 	bic.w	r4, r4, #3
 8007158:	42a0      	cmp	r0, r4
 800715a:	d005      	beq.n	8007168 <_malloc_r+0xa8>
 800715c:	1a21      	subs	r1, r4, r0
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f82e 	bl	80071c0 <_sbrk_r>
 8007164:	3001      	adds	r0, #1
 8007166:	d0cf      	beq.n	8007108 <_malloc_r+0x48>
 8007168:	6025      	str	r5, [r4, #0]
 800716a:	e7db      	b.n	8007124 <_malloc_r+0x64>
 800716c:	2000139c 	.word	0x2000139c
 8007170:	200013a0 	.word	0x200013a0

08007174 <_realloc_r>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	4607      	mov	r7, r0
 8007178:	4614      	mov	r4, r2
 800717a:	460e      	mov	r6, r1
 800717c:	b921      	cbnz	r1, 8007188 <_realloc_r+0x14>
 800717e:	4611      	mov	r1, r2
 8007180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007184:	f7ff bf9c 	b.w	80070c0 <_malloc_r>
 8007188:	b922      	cbnz	r2, 8007194 <_realloc_r+0x20>
 800718a:	f7ff ff4b 	bl	8007024 <_free_r>
 800718e:	4625      	mov	r5, r4
 8007190:	4628      	mov	r0, r5
 8007192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007194:	f000 f826 	bl	80071e4 <_malloc_usable_size_r>
 8007198:	42a0      	cmp	r0, r4
 800719a:	d20f      	bcs.n	80071bc <_realloc_r+0x48>
 800719c:	4621      	mov	r1, r4
 800719e:	4638      	mov	r0, r7
 80071a0:	f7ff ff8e 	bl	80070c0 <_malloc_r>
 80071a4:	4605      	mov	r5, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d0f2      	beq.n	8007190 <_realloc_r+0x1c>
 80071aa:	4631      	mov	r1, r6
 80071ac:	4622      	mov	r2, r4
 80071ae:	f7ff ff15 	bl	8006fdc <memcpy>
 80071b2:	4631      	mov	r1, r6
 80071b4:	4638      	mov	r0, r7
 80071b6:	f7ff ff35 	bl	8007024 <_free_r>
 80071ba:	e7e9      	b.n	8007190 <_realloc_r+0x1c>
 80071bc:	4635      	mov	r5, r6
 80071be:	e7e7      	b.n	8007190 <_realloc_r+0x1c>

080071c0 <_sbrk_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4c06      	ldr	r4, [pc, #24]	; (80071dc <_sbrk_r+0x1c>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4605      	mov	r5, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	f000 f812 	bl	80071f4 <_sbrk>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_sbrk_r+0x1a>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	b103      	cbz	r3, 80071da <_sbrk_r+0x1a>
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	20004d50 	.word	0x20004d50

080071e0 <__malloc_lock>:
 80071e0:	4770      	bx	lr

080071e2 <__malloc_unlock>:
 80071e2:	4770      	bx	lr

080071e4 <_malloc_usable_size_r>:
 80071e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e8:	1f18      	subs	r0, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfbc      	itt	lt
 80071ee:	580b      	ldrlt	r3, [r1, r0]
 80071f0:	18c0      	addlt	r0, r0, r3
 80071f2:	4770      	bx	lr

080071f4 <_sbrk>:
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <_sbrk+0x14>)
 80071f6:	6819      	ldr	r1, [r3, #0]
 80071f8:	4602      	mov	r2, r0
 80071fa:	b909      	cbnz	r1, 8007200 <_sbrk+0xc>
 80071fc:	4903      	ldr	r1, [pc, #12]	; (800720c <_sbrk+0x18>)
 80071fe:	6019      	str	r1, [r3, #0]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	4402      	add	r2, r0
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	4770      	bx	lr
 8007208:	200013a4 	.word	0x200013a4
 800720c:	20004d58 	.word	0x20004d58

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
